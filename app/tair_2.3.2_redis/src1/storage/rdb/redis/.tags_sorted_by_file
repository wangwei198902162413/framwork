listAddNodeHead	adlist.c	/^list *listAddNodeHead(list *list, void *value)$/;"	f
listAddNodeTail	adlist.c	/^list *listAddNodeTail(list *list, void *value)$/;"	f
listCreate	adlist.c	/^list *listCreate(void)$/;"	f
listDelNode	adlist.c	/^void listDelNode(list *list, listNode *node)$/;"	f
listDup	adlist.c	/^list *listDup(list *orig)$/;"	f
listGetIterator	adlist.c	/^listIter *listGetIterator(list *list, int direction)$/;"	f
listIndex	adlist.c	/^listNode *listIndex(list *list, int index) {$/;"	f
listInsertNode	adlist.c	/^list *listInsertNode(list *list, listNode *old_node, void *value, int after) {$/;"	f
listNext	adlist.c	/^listNode *listNext(listIter *iter)$/;"	f
listRelease	adlist.c	/^void listRelease(list *list)$/;"	f
listReleaseIterator	adlist.c	/^void listReleaseIterator(listIter *iter) {$/;"	f
listRewind	adlist.c	/^void listRewind(list *list, listIter *li) {$/;"	f
listRewindTail	adlist.c	/^void listRewindTail(list *list, listIter *li) {$/;"	f
listSearchKey	adlist.c	/^listNode *listSearchKey(list *list, void *key)$/;"	f
AL_START_HEAD	adlist.h	89;"	d
AL_START_TAIL	adlist.h	90;"	d
__ADLIST_H__	adlist.h	32;"	d
direction	adlist.h	/^    int direction;$/;"	m	struct:listIter
dup	adlist.h	/^    void *(*dup)(void *ptr);$/;"	m	struct:list
free	adlist.h	/^    void (*free)(void *ptr);$/;"	m	struct:list
head	adlist.h	/^    listNode *head;$/;"	m	struct:list
len	adlist.h	/^    unsigned int len;$/;"	m	struct:list
list	adlist.h	/^typedef struct list {$/;"	s
list	adlist.h	/^} list;$/;"	t	typeref:struct:list
listFirst	adlist.h	58;"	d
listGetDupMethod	adlist.h	68;"	d
listGetFree	adlist.h	69;"	d
listGetMatchMethod	adlist.h	70;"	d
listIter	adlist.h	/^typedef struct listIter {$/;"	s
listIter	adlist.h	/^} listIter;$/;"	t	typeref:struct:listIter
listLast	adlist.h	59;"	d
listLength	adlist.h	57;"	d
listNextNode	adlist.h	61;"	d
listNode	adlist.h	/^typedef struct listNode {$/;"	s
listNode	adlist.h	/^} listNode;$/;"	t	typeref:struct:listNode
listNodeValue	adlist.h	62;"	d
listPrevNode	adlist.h	60;"	d
listSetDupMethod	adlist.h	64;"	d
listSetFreeMethod	adlist.h	65;"	d
listSetMatchMethod	adlist.h	66;"	d
match	adlist.h	/^    int (*match)(void *ptr, void *key);$/;"	m	struct:list
next	adlist.h	/^    listNode *next;$/;"	m	struct:listIter
next	adlist.h	/^    struct listNode *next;$/;"	m	struct:listNode	typeref:struct:listNode::listNode
prev	adlist.h	/^    struct listNode *prev;$/;"	m	struct:listNode	typeref:struct:listNode::listNode
tail	adlist.h	/^    listNode *tail;$/;"	m	struct:list
value	adlist.h	/^    void *value;$/;"	m	struct:listNode
DECRBY_COMMAND	command.h	122;"	d
DECR_COMMAND	command.h	22;"	d
DEL_COMMAND	command.h	16;"	d
EXISTS_COMMAND	command.h	18;"	d
EXPIRE_COMMAND	command.h	126;"	d
FILTER_COMMAND	command.h	144;"	d
GETSET_COMMAND	command.h	124;"	d
GET_COMMAND	command.h	8;"	d
HDEL_COMMAND	command.h	108;"	d
HEXISTS_COMMAND	command.h	118;"	d
HGETALL_COMMAND	command.h	116;"	d
HGET_COMMAND	command.h	100;"	d
HINCRBY_COMMAND	command.h	106;"	d
HKEYS_COMMAND	command.h	112;"	d
HLEN_COMMAND	command.h	110;"	d
HMGET_COMMAND	command.h	104;"	d
HMSET_COMMAND	command.h	102;"	d
HSETNX_COMMAND	command.h	98;"	d
HSET_COMMAND	command.h	96;"	d
HVALS_COMMAND	command.h	114;"	d
INCRBY_COMMAND	command.h	120;"	d
INCR_COMMAND	command.h	20;"	d
LINDEX_COMMAND	command.h	40;"	d
LINSERT_COMMAND	command.h	32;"	d
LLEN_COMMAND	command.h	38;"	d
LPOP_COMMAND	command.h	36;"	d
LPUSHX_COMMAND	command.h	30;"	d
LPUSH_COMMAND	command.h	26;"	d
LRANGE_COMMAND	command.h	44;"	d
LREM_COMMAND	command.h	48;"	d
LSET_COMMAND	command.h	42;"	d
LTRIM_COMMAND	command.h	46;"	d
PERSIST_COMMAND	command.h	132;"	d
RENAMENX_COMMAND	command.h	142;"	d
RENAME_COMMAND	command.h	140;"	d
RPOP_COMMAND	command.h	34;"	d
RPUSHX_COMMAND	command.h	28;"	d
RPUSH_COMMAND	command.h	24;"	d
SADD_COMMAND	command.h	50;"	d
SCARD_COMMAND	command.h	58;"	d
SETEX_COMMAND	command.h	14;"	d
SETNXEX_COMMAND	command.h	138;"	d
SETNX_COMMAND	command.h	12;"	d
SET_COMMAND	command.h	10;"	d
SINTERSTORE_COMMAND	command.h	64;"	d
SINTER_COMMAND	command.h	62;"	d
SISMEMBER_COMMAND	command.h	56;"	d
SMEMBERS_COMMAND	command.h	66;"	d
SMOVE_COMMAND	command.h	54;"	d
SPOP_COMMAND	command.h	60;"	d
SREM_COMMAND	command.h	52;"	d
STRING_AFTER	command.h	/^char* STRING_AFTER = "AFTER";$/;"	v
STRING_AFTER_LEN	command.h	154;"	d
STRING_BEFORE	command.h	/^char* STRING_BEFORE = "BEFORE";$/;"	v
STRING_BEFORE_LEN	command.h	153;"	d
TTL_COMMAND	command.h	130;"	d
TYPE_COMMAND	command.h	128;"	d
ZADD_COMMAND	command.h	68;"	d
ZCARD_COMMAND	command.h	88;"	d
ZCOUNT_COMMAND	command.h	84;"	d
ZINCRBY_COMMAND	command.h	70;"	d
ZRANGEBYSCORE_COMMAND	command.h	80;"	d
ZRANGEWITHSCORE_COMMAND	command.h	134;"	d
ZRANGE_COMMAND	command.h	78;"	d
ZRANK_COMMAND	command.h	92;"	d
ZREMRANGEBYRANK_COMMAND	command.h	76;"	d
ZREMRANGEBYSCORE_COMMAND	command.h	74;"	d
ZREM_COMMAND	command.h	72;"	d
ZREVRANGEBYSCORE_COMMAND	command.h	82;"	d
ZREVRANGEWITHSCORE_COMMAND	command.h	136;"	d
ZREVRANGE_COMMAND	command.h	86;"	d
ZREVRANK_COMMAND	command.h	94;"	d
ZSCORE_COMMAND	command.h	90;"	d
__REDIS_GLOBAL_COMMAND__	command.h	2;"	d
getCommand	command.h	148;"	d
getCommandArgc	command.h	149;"	d
readonlyCommandTable	command.h	/^struct redisCommand readonlyCommandTable[] = {$/;"	v	typeref:struct:redisCommand
HAVE_BACKTRACE	config.h	49;"	d
HAVE_EPOLL	config.h	54;"	d
HAVE_KQUEUE	config.h	58;"	d
HAVE_MALLOC_SIZE	config.h	19;"	d
HAVE_MALLOC_SIZE	config.h	24;"	d
HAVE_PROCFS	config.h	39;"	d
HAVE_TASKINFO	config.h	44;"	d
MAX_AREA_GROUP_NUM	config.h	10;"	d
MAX_DBNUM	config.h	11;"	d
MAX_UNIT_NUM	config.h	9;"	d
__CONFIG_H	config.h	2;"	d
aof_fsync	config.h	63;"	d
aof_fsync	config.h	65;"	d
redis_fstat	config.h	30;"	d
redis_fstat	config.h	33;"	d
redis_malloc_size	config.h	20;"	d
redis_malloc_size	config.h	25;"	d
redis_stat	config.h	31;"	d
redis_stat	config.h	34;"	d
dbAdd	db.c	/^int dbAdd(redisDb *db, robj *key, robj *val) {$/;"	f
dbDelete	db.c	/^int dbDelete(redisDb *db, robj *key) {$/;"	f
dbExists	db.c	/^int dbExists(redisDb *db, robj *key) {$/;"	f
dbRandomKey	db.c	/^robj *dbRandomKey(redisDb *db) {$/;"	f
dbReplace	db.c	/^int dbReplace(redisDb *db, robj *key, robj *val) {$/;"	f
dbSize	db.c	/^size_t dbSize(redisDb *db) {$/;"	f
dbSuperReplace	db.c	/^int dbSuperReplace(redisDb *db, robj *key, robj *val) {$/;"	f
dbUpdateKey	db.c	/^int dbUpdateKey(redisDb *db, robj* key) {$/;"	f
delCommand	db.c	/^void delCommand(redisClient *c) {$/;"	f
emptyDb	db.c	/^long long emptyDb(redisServer *server) {$/;"	f
existsCommand	db.c	/^void existsCommand(redisClient *c) {$/;"	f
expireCommand	db.c	/^void expireCommand(redisClient *c) {$/;"	f
expireIfNeeded	db.c	/^int expireIfNeeded(redisDb *db, robj *key) {$/;"	f
expireXGenericCommand	db.c	/^void expireXGenericCommand(redisClient *c, robj *key, robj *param) {$/;"	f
getExpire	db.c	/^time_t getExpire(redisDb *db, robj *key) {$/;"	f
getLogiClock	db.c	/^uint32_t getLogiClock(redisDb *db, robj *key) {$/;"	f
lookupKeyReadWithVersion	db.c	/^robj *lookupKeyReadWithVersion(redisDb *db, robj *key, uint16_t *version) {$/;"	f
lookupKeyWithVersion	db.c	/^robj *lookupKeyWithVersion(redisDb *db, robj *key, uint16_t* version) {$/;"	f
lookupKeyWriteWithVersion	db.c	/^robj *lookupKeyWriteWithVersion(redisDb *db, robj *key, uint16_t *version) {$/;"	f
persistCommand	db.c	/^void persistCommand(redisClient *c) {$/;"	f
removeExpire	db.c	/^int removeExpire(redisDb *db, robj *key) {$/;"	f
removeXExpire	db.c	/^int removeXExpire(redisDb *db, robj *key) {$/;"	f
renameCommand	db.c	/^void renameCommand(redisClient *c) {$/;"	f
renameGenericCommand	db.c	/^void renameGenericCommand(redisClient *c, int nx) {$/;"	f
renamenxCommand	db.c	/^void renamenxCommand(redisClient *c) {$/;"	f
selectClient	db.c	/^redisClient* selectClient(redisServer *server, int id) {$/;"	f
selectDb	db.c	/^redisDb* selectDb(redisServer *server, int id) {$/;"	f
setExpire	db.c	/^void setExpire(redisDb *db, robj *key, time_t when) {$/;"	f
setXExpire	db.c	/^void setXExpire(redisDb *db, robj *key, time_t when) {$/;"	f
ttlCommand	db.c	/^void ttlCommand(redisClient *c) {$/;"	f
typeCommand	db.c	/^void typeCommand(redisClient *c) {$/;"	f
DICT_STATS_VECTLEN	dict.c	698;"	d	file:
_dictClear	dict.c	/^int _dictClear(dict *d, dictht *ht)$/;"	f
_dictExpandIfNeeded	dict.c	/^static int _dictExpandIfNeeded(dict *d)$/;"	f	file:
_dictInit	dict.c	/^int _dictInit(dict *d, dictType *type,$/;"	f
_dictKeyIndex	dict.c	/^static int _dictKeyIndex(dict *d, const void *key)$/;"	f	file:
_dictNextPower	dict.c	/^static unsigned long _dictNextPower(unsigned long size)$/;"	f	file:
_dictPrintStatsHt	dict.c	/^static void _dictPrintStatsHt(dictht *ht) {$/;"	f	file:
_dictRehashStep	dict.c	/^static void _dictRehashStep(dict *d) {$/;"	f	file:
_dictReset	dict.c	/^static void _dictReset(dictht *ht)$/;"	f	file:
dictAdd	dict.c	/^int dictAdd(dict *d, void *key, void *val)$/;"	f
dictCreate	dict.c	/^dict *dictCreate(dictType *type,$/;"	f
dictDelete	dict.c	/^int dictDelete(dict *ht, const void *key) {$/;"	f
dictDeleteNoFree	dict.c	/^int dictDeleteNoFree(dict *ht, const void *key) {$/;"	f
dictDisableResize	dict.c	/^void dictDisableResize(void) {$/;"	f
dictEmpty	dict.c	/^void dictEmpty(dict *d) {$/;"	f
dictEnableResize	dict.c	/^void dictEnableResize(void) {$/;"	f
dictExpand	dict.c	/^int dictExpand(dict *d, unsigned long size)$/;"	f
dictFetchValue	dict.c	/^void *dictFetchValue(dict *d, const void *key) {$/;"	f
dictFind	dict.c	/^dictEntry *dictFind(dict *d, const void *key)$/;"	f
dictGenCaseHashFunction	dict.c	/^unsigned int dictGenCaseHashFunction(const unsigned char *buf, int len) {$/;"	f
dictGenHashFunction	dict.c	/^unsigned int dictGenHashFunction(const unsigned char *buf, int len) {$/;"	f
dictGenericDelete	dict.c	/^static int dictGenericDelete(dict *d, const void *key, int nofree)$/;"	f	file:
dictGetIndexSafeInterator	dict.c	/^dictIterator *dictGetIndexSafeInterator(dict *d, int table, long index) {$/;"	f
dictGetIterator	dict.c	/^dictIterator *dictGetIterator(dict *d)$/;"	f
dictGetRandomKey	dict.c	/^dictEntry *dictGetRandomKey(dict *d)$/;"	f
dictGetSafeIterator	dict.c	/^dictIterator *dictGetSafeIterator(dict *d) {$/;"	f
dictIdentityHashFunction	dict.c	/^unsigned int dictIdentityHashFunction(unsigned int key)$/;"	f
dictIntHashFunction	dict.c	/^unsigned int dictIntHashFunction(unsigned int key)$/;"	f
dictNext	dict.c	/^dictEntry *dictNext(dictIterator *iter)$/;"	f
dictNextInSlot	dict.c	/^dictEntry *dictNextInSlot(dictIterator *iter)$/;"	f
dictNextSlot	dict.c	/^dictEntry *dictNextSlot(dictIterator *iter)$/;"	f
dictPrintStats	dict.c	/^void dictPrintStats(dict *d) {$/;"	f
dictRehash	dict.c	/^int dictRehash(dict *d, int n) {$/;"	f
dictRehashMilliseconds	dict.c	/^int dictRehashMilliseconds(dict *d, int ms) {$/;"	f
dictRelease	dict.c	/^void dictRelease(dict *d)$/;"	f
dictReleaseIterator	dict.c	/^void dictReleaseIterator(dictIterator *iter)$/;"	f
dictReplace	dict.c	/^int dictReplace(dict *d, void *key, void *val)$/;"	f
dictResize	dict.c	/^int dictResize(dict *d)$/;"	f
dictSuperReplace	dict.c	/^int dictSuperReplace(dict *d, void *key, void *val)$/;"	f
dictUpdateKey	dict.c	/^int dictUpdateKey(dict *d, void *key)$/;"	f
dict_can_resize	dict.c	/^static int dict_can_resize = 1;$/;"	v	file:
dict_force_resize_ratio	dict.c	/^static unsigned int dict_force_resize_ratio = 5;$/;"	v	file:
setRdbSaveFlag	dict.c	/^int setRdbSaveFlag(dict *d, int flag) {$/;"	f
timeInMilliseconds	dict.c	/^long long timeInMilliseconds(void) {$/;"	f
DICT_ERR	dict.h	42;"	d
DICT_HT_INITIAL_SIZE	dict.h	95;"	d
DICT_NOTUSED	dict.h	45;"	d
DICT_OK	dict.h	41;"	d
__DICT_H	dict.h	37;"	d
d	dict.h	/^    dict *d;$/;"	m	struct:dictIterator
dict	dict.h	/^typedef struct dict {$/;"	s
dict	dict.h	/^} dict;$/;"	t	typeref:struct:dict
dictCompareHashKeys	dict.h	124;"	d
dictEntry	dict.h	/^typedef struct dictEntry {$/;"	s
dictEntry	dict.h	/^} dictEntry;$/;"	t	typeref:struct:dictEntry
dictFreeEntryKey	dict.h	109;"	d
dictFreeEntryVal	dict.h	98;"	d
dictGetEntryKey	dict.h	131;"	d
dictGetEntryVal	dict.h	132;"	d
dictHashKey	dict.h	129;"	d
dictIsRdbSaving	dict.h	135;"	d
dictIsRehashing	dict.h	136;"	d
dictIterator	dict.h	/^typedef struct dictIterator {$/;"	s
dictIterator	dict.h	/^} dictIterator;$/;"	t	typeref:struct:dictIterator
dictModifyHashKey	dict.h	120;"	d
dictSetHashKey	dict.h	113;"	d
dictSetHashVal	dict.h	102;"	d
dictSize	dict.h	134;"	d
dictSlots	dict.h	133;"	d
dictType	dict.h	/^typedef struct dictType {$/;"	s
dictType	dict.h	/^} dictType;$/;"	t	typeref:struct:dictType
dictht	dict.h	/^typedef struct dictht {$/;"	s
dictht	dict.h	/^} dictht;$/;"	t	typeref:struct:dictht
entry	dict.h	/^    dictEntry *entry, *nextEntry;$/;"	m	struct:dictIterator
hashFunction	dict.h	/^    unsigned int (*hashFunction)(const void *key);$/;"	m	struct:dictType
ht	dict.h	/^    dictht ht[2];$/;"	m	struct:dict
index	dict.h	/^    int table, index, safe;$/;"	m	struct:dictIterator
iterators	dict.h	/^    int iterators; \/* number of iterators currently running *\/$/;"	m	struct:dict
key	dict.h	/^    void *key;$/;"	m	struct:dictEntry
keyCompare	dict.h	/^    int (*keyCompare)(void *privdata, const void *key1, const void *key2);$/;"	m	struct:dictType
keyDestructor	dict.h	/^    void (*keyDestructor)(void *privdata, void *key);$/;"	m	struct:dictType
keyDup	dict.h	/^    void *(*keyDup)(void *privdata, const void *key);$/;"	m	struct:dictType
keyModify	dict.h	/^    void (*keyModify)(void *privdata, void *key1, void *key2);$/;"	m	struct:dictType
next	dict.h	/^    struct dictEntry *next;$/;"	m	struct:dictEntry	typeref:struct:dictEntry::dictEntry
nextEntry	dict.h	/^    dictEntry *entry, *nextEntry;$/;"	m	struct:dictIterator
privdata	dict.h	/^    void *privdata;$/;"	m	struct:dict
rdbsaving	dict.h	/^    int rdbsaving;$/;"	m	struct:dict
redisServer	dict.h	/^typedef struct redisServer redisServer;$/;"	t	typeref:struct:redisServer
rehashidx	dict.h	/^    int rehashidx; \/* rehashing not in progress if rehashidx == -1 *\/$/;"	m	struct:dict
safe	dict.h	/^    int table, index, safe;$/;"	m	struct:dictIterator
size	dict.h	/^    unsigned long size;$/;"	m	struct:dictht
sizemask	dict.h	/^    unsigned long sizemask;$/;"	m	struct:dictht
table	dict.h	/^    dictEntry **table;$/;"	m	struct:dictht
table	dict.h	/^    int table, index, safe;$/;"	m	struct:dictIterator
type	dict.h	/^    dictType *type;$/;"	m	struct:dict
used	dict.h	/^    unsigned long used;$/;"	m	struct:dictht
val	dict.h	/^    void *val;$/;"	m	struct:dictEntry
valDestructor	dict.h	/^    void (*valDestructor)(void *privdata, void *obj);$/;"	m	struct:dictType
valDup	dict.h	/^    void *(*valDup)(void *privdata, const void *obj);$/;"	m	struct:dictType
valModify	dict.h	/^    void (*valModify)(void *privdata, void *val1, void *val2);$/;"	m	struct:dictType
__REDIS_FILTER_LIST_H	filter_list.c	2;"	d	file:
_create_filter_node	filter_list.c	/^static struct filterNode* _create_filter_node(int8_t type, int len,$/;"	f	file:
_filter_node_cmp	filter_list.c	/^static int _filter_node_cmp(struct filterNode* node, int8_t type, int len,$/;"	f	file:
_free_filter_node	filter_list.c	/^static void _free_filter_node(struct filterNode* node) {$/;"	f	file:
add_filter_node	filter_list.c	/^int add_filter_node(struct filterList* list, int8_t type, int len, char* buff) {$/;"	f
add_filter_node1	filter_list.c	/^int add_filter_node1(struct filterList* list, struct filterNode* node) {$/;"	f
create_filter_list	filter_list.c	/^struct filterList* create_filter_list() {$/;"	f
create_filter_list_iterator	filter_list.c	/^struct filterListIterator* create_filter_list_iterator(struct filterList *list, int8_t type) {$/;"	f
free_filter_list	filter_list.c	/^int free_filter_list(struct filterList* list) {$/;"	f
free_filter_list_iterator	filter_list.c	/^void free_filter_list_iterator(struct filterListIterator *iter) {$/;"	f
next_filter_node	filter_list.c	/^struct filterNode* next_filter_node(struct filterListIterator* fli) {$/;"	f
remove_filter_node	filter_list.c	/^int remove_filter_node(struct filterList* list, int8_t type, int len, char* buff) {$/;"	f
reset_filter_list_iterator	filter_list.c	/^void reset_filter_list_iterator(struct filterListIterator* iter) {$/;"	f
search_filter_node	filter_list.c	/^unsigned int search_filter_node(struct filterList* list, int8_t type, int len, char* buff) {$/;"	f
_BSD_SOURCE	fmacros.h	5;"	d
_FILE_OFFSET_BITS	fmacros.h	20;"	d
_LARGEFILE_SOURCE	fmacros.h	17;"	d
_REDIS_FMACRO_H	fmacros.h	2;"	d
_XOPEN_SOURCE	fmacros.h	10;"	d
_XOPEN_SOURCE	fmacros.h	13;"	d
INTSET_ENC_INT16	intset.c	9;"	d	file:
INTSET_ENC_INT32	intset.c	10;"	d	file:
INTSET_ENC_INT64	intset.c	11;"	d	file:
_assert	intset.c	/^void _assert(char *estr, char *file, int line) {$/;"	f
_intsetGet	intset.c	/^static int64_t _intsetGet(intset *is, int pos) {$/;"	f	file:
_intsetGetEncoded	intset.c	/^static int64_t _intsetGetEncoded(intset *is, int pos, uint8_t enc) {$/;"	f	file:
_intsetSet	intset.c	/^static void _intsetSet(intset *is, int pos, int64_t value) {$/;"	f	file:
_intsetValueEncoding	intset.c	/^static uint8_t _intsetValueEncoding(int64_t v) {$/;"	f	file:
assert	intset.c	251;"	d	file:
checkConsistency	intset.c	/^void checkConsistency(intset *is) {$/;"	f
createSet	intset.c	/^intset *createSet(int bits, int size) {$/;"	f
error	intset.c	/^void error(char *err) {$/;"	f
intsetAdd	intset.c	/^intset *intsetAdd(intset *is, int64_t value, uint8_t *success) {$/;"	f
intsetFind	intset.c	/^uint8_t intsetFind(intset *is, int64_t value) {$/;"	f
intsetGet	intset.c	/^uint8_t intsetGet(intset *is, uint32_t pos, int64_t *value) {$/;"	f
intsetLen	intset.c	/^uint32_t intsetLen(intset *is) {$/;"	f
intsetMoveTail	intset.c	/^static void intsetMoveTail(intset *is, uint32_t from, uint32_t to) {$/;"	f	file:
intsetNew	intset.c	/^intset *intsetNew(void) {$/;"	f
intsetRandom	intset.c	/^int64_t intsetRandom(intset *is) {$/;"	f
intsetRemove	intset.c	/^intset *intsetRemove(intset *is, int64_t value, int *success) {$/;"	f
intsetRepr	intset.c	/^void intsetRepr(intset *is) {$/;"	f
intsetResize	intset.c	/^static intset *intsetResize(intset *is, uint32_t len) {$/;"	f	file:
intsetSearch	intset.c	/^static uint8_t intsetSearch(intset *is, int64_t value, uint32_t *pos) {$/;"	f	file:
intsetUpgradeAndAdd	intset.c	/^static intset *intsetUpgradeAndAdd(intset *is, int64_t value) {$/;"	f	file:
main	intset.c	/^int main(int argc, char **argv) {$/;"	f
ok	intset.c	/^void ok(void) {$/;"	f
usec	intset.c	/^long long usec(void) {$/;"	f
__INTSET_H	intset.h	2;"	d
contents	intset.h	/^    int8_t contents[];$/;"	m	struct:intset
encoding	intset.h	/^    uint32_t encoding;$/;"	m	struct:intset
intset	intset.h	/^typedef struct intset {$/;"	s
intset	intset.h	/^} intset;$/;"	t	typeref:struct:intset
length	intset.h	/^    uint32_t length;$/;"	m	struct:intset
LZF_H	lzf.h	38;"	d
LZF_VERSION	lzf.h	49;"	d
AVOID_ERRNO	lzfP.h	100;"	d
CHECK_INPUT	lzfP.h	121;"	d
HLOG	lzfP.h	55;"	d
INIT_HTAB	lzfP.h	91;"	d
LZFP_h	lzfP.h	38;"	d
LZF_STATE	lzfP.h	/^typedef const u8 *LZF_STATE[1 << (HLOG)];$/;"	t
LZF_STATE_ARG	lzfP.h	109;"	d
STANDALONE	lzfP.h	40;"	d
STRICT_ALIGN	lzfP.h	139;"	d
STRICT_ALIGN	lzfP.h	140;"	d
STRICT_ALIGN	lzfP.h	82;"	d
ULTRA_FAST	lzfP.h	75;"	d
VERY_FAST	lzfP.h	146;"	d
VERY_FAST	lzfP.h	64;"	d
u16	lzfP.h	/^    typedef unsigned int u16;$/;"	t
u16	lzfP.h	/^    typedef unsigned short u16;$/;"	t
u8	lzfP.h	/^typedef unsigned char u8;$/;"	t
FRST	lzf_c.c	48;"	d	file:
HSIZE	lzf_c.c	39;"	d	file:
IDX	lzf_c.c	51;"	d	file:
IDX	lzf_c.c	53;"	d	file:
IDX	lzf_c.c	55;"	d	file:
MAX_LIT	lzf_c.c	74;"	d	file:
MAX_OFF	lzf_c.c	75;"	d	file:
MAX_REF	lzf_c.c	76;"	d	file:
NEXT	lzf_c.c	49;"	d	file:
expect	lzf_c.c	79;"	d	file:
expect	lzf_c.c	82;"	d	file:
expect_false	lzf_c.c	86;"	d	file:
expect_true	lzf_c.c	87;"	d	file:
inline	lzf_c.c	80;"	d	file:
inline	lzf_c.c	83;"	d	file:
lzf_compress	lzf_c.c	/^lzf_compress (const void *const in_data, unsigned int in_len,$/;"	f
SET_ERRNO	lzf_d.c	40;"	d	file:
SET_ERRNO	lzf_d.c	43;"	d	file:
lzf_decompress	lzf_d.c	/^lzf_decompress (const void *const in_data,  unsigned int in_len,$/;"	f
createClient	networking.c	/^redisClient *createClient(struct redisServer *server, int index, int area) {$/;"	f
dupClientReplyValue	networking.c	/^void *dupClientReplyValue(void *o) {$/;"	f
dupLastObjectIfNeeded	networking.c	/^robj *dupLastObjectIfNeeded(list *reply) {$/;"	f
freeClient	networking.c	/^void freeClient(redisClient *c) {$/;"	f
freeClientArgv	networking.c	/^static void freeClientArgv(redisClient *c) {$/;"	f	file:
listMatchObjects	networking.c	/^int listMatchObjects(void *a, void *b) {$/;"	f
resetClient	networking.c	/^void resetClient(redisClient *c) {$/;"	f
checkType	object.c	/^int checkType(redisClient *c, robj *o, int type) {$/;"	f
compareStringObjects	object.c	/^int compareStringObjects(robj *a, robj *b) {$/;"	f
createHashObject	object.c	/^robj *createHashObject(void) {$/;"	f
createIntsetObject	object.c	/^robj *createIntsetObject(void) {$/;"	f
createListObject	object.c	/^robj *createListObject(void) {$/;"	f
createObject	object.c	/^robj *createObject(int type, void *ptr) {$/;"	f
createSetObject	object.c	/^robj *createSetObject(void) {$/;"	f
createStringObject	object.c	/^robj *createStringObject(char *ptr, size_t len, uint32_t logiclock, uint16_t version) {$/;"	f
createStringObjectFromLongLong	object.c	/^robj *createStringObjectFromLongLong(long long value) {$/;"	f
createZiplistObject	object.c	/^robj *createZiplistObject(void) {$/;"	f
createZsetObject	object.c	/^robj *createZsetObject(void) {$/;"	f
decrRefCount	object.c	/^void decrRefCount(void *obj) {$/;"	f
dupStringObject	object.c	/^robj *dupStringObject(robj *o) {$/;"	f
equalStringObjects	object.c	/^int equalStringObjects(robj *a, robj *b) {$/;"	f
estimateObjectIdleTime	object.c	/^unsigned long estimateObjectIdleTime(robj *o) {$/;"	f
forceFreeObject	object.c	/^void forceFreeObject(void *obj) {$/;"	f
freeHashObject	object.c	/^void freeHashObject(robj *o) {$/;"	f
freeListObject	object.c	/^void freeListObject(robj *o) {$/;"	f
freeSetObject	object.c	/^void freeSetObject(robj *o) {$/;"	f
freeStringObject	object.c	/^void freeStringObject(robj *o) {$/;"	f
freeZsetObject	object.c	/^void freeZsetObject(robj *o) {$/;"	f
getDecodedObject	object.c	/^robj *getDecodedObject(robj *o) {$/;"	f
getDoubleFromObject	object.c	/^int getDoubleFromObject(robj *o, double *target) {$/;"	f
getLongFromObject	object.c	/^int getLongFromObject(robj *o, long *target) {$/;"	f
getLongLongFromObject	object.c	/^int getLongLongFromObject(robj *o, long long *target) {$/;"	f
incrRefCount	object.c	/^void incrRefCount(robj *o) {$/;"	f
objectCommandLookup	object.c	/^robj *objectCommandLookup(redisClient *c, robj *key) {$/;"	f
strEncoding	object.c	/^char *strEncoding(int encoding) {$/;"	f
stringObjectLen	object.c	/^size_t stringObjectLen(robj *o) {$/;"	f
tryObjectEncoding	object.c	/^robj *tryObjectEncoding(robj *o) {$/;"	f
SWAPINIT	pqsort.c	66;"	d	file:
_pqsort	pqsort.c	/^_pqsort(void *a, size_t n, size_t es,$/;"	f	file:
med3	pqsort.c	/^med3(char *a, char *b, char *c,$/;"	f	file:
min	pqsort.c	50;"	d	file:
pqsort	pqsort.c	/^pqsort(void *a, size_t n, size_t es,$/;"	f
swap	pqsort.c	79;"	d	file:
swapcode	pqsort.c	55;"	d	file:
swapfunc	pqsort.c	/^swapfunc(char *a, char *b, size_t n, int swaptype)$/;"	f	file:
vecswap	pqsort.c	87;"	d	file:
__PQSORT_H	pqsort.h	9;"	d
rdbEncodeInteger	rdb.c	/^int rdbEncodeInteger(long long value, unsigned char *enc) {$/;"	f
rdbGenericLoadStringObject	rdb.c	/^robj *rdbGenericLoadStringObject(FILE*fp, int encode) {$/;"	f
rdbLoad	rdb.c	/^int rdbLoad(redisServer *server, char *filename, int dbnum) {$/;"	f
rdbLoadAttr	rdb.c	/^int rdbLoadAttr(FILE* fp, unsigned short* version, unsigned int* logiclock) {$/;"	f
rdbLoadDoubleValue	rdb.c	/^int rdbLoadDoubleValue(FILE *fp, double *val) {$/;"	f
rdbLoadEncodedStringObject	rdb.c	/^robj *rdbLoadEncodedStringObject(FILE *fp) {$/;"	f
rdbLoadFilterList	rdb.c	/^int rdbLoadFilterList(FILE *fp, struct filterList* plist) {$/;"	f
rdbLoadIntegerObject	rdb.c	/^robj *rdbLoadIntegerObject(FILE *fp, int enctype, int encode) {$/;"	f
rdbLoadLen	rdb.c	/^uint32_t rdbLoadLen(FILE *fp, int *isencoded) {$/;"	f
rdbLoadLzfStringObject	rdb.c	/^robj *rdbLoadLzfStringObject(FILE*fp) {$/;"	f
rdbLoadObject	rdb.c	/^robj *rdbLoadObject(redisServer *server, int type, FILE *fp) {$/;"	f
rdbLoadStringObject	rdb.c	/^robj *rdbLoadStringObject(FILE *fp) {$/;"	f
rdbLoadTime	rdb.c	/^time_t rdbLoadTime(FILE *fp) {$/;"	f
rdbLoadTimeStamp	rdb.c	/^int rdbLoadTimeStamp(FILE *fp, unsigned int *timestamp) {$/;"	f
rdbLoadType	rdb.c	/^int rdbLoadType(FILE *fp) {$/;"	f
rdbRemoveTempFile	rdb.c	/^void rdbRemoveTempFile(int dbnum) {$/;"	f
rdbSave	rdb.c	/^int rdbSave(redisServer *server, char *filename, int dbnum) {$/;"	f
rdbSaveAttr	rdb.c	/^int rdbSaveAttr(FILE *fp, unsigned short int version, unsigned int logiclock) {$/;"	f
rdbSaveDoubleValue	rdb.c	/^int rdbSaveDoubleValue(FILE *fp, double val) {$/;"	f
rdbSaveFilterList	rdb.c	/^int rdbSaveFilterList(FILE *fp, filterList *filter_list) {$/;"	f
rdbSaveLen	rdb.c	/^int rdbSaveLen(FILE *fp, uint32_t len) {$/;"	f
rdbSaveLongLongAsStringObject	rdb.c	/^int rdbSaveLongLongAsStringObject(FILE *fp, long long value) {$/;"	f
rdbSaveLzfStringObject	rdb.c	/^int rdbSaveLzfStringObject(FILE *fp, unsigned char *s, size_t len) {$/;"	f
rdbSaveObject	rdb.c	/^int rdbSaveObject(redisServer *server, FILE *fp, robj *o) {$/;"	f
rdbSaveRawString	rdb.c	/^int rdbSaveRawString(redisServer *server, FILE *fp, unsigned char *s, size_t len) {$/;"	f
rdbSaveStringObject	rdb.c	/^int rdbSaveStringObject(redisServer *server, FILE *fp, robj *obj) {$/;"	f
rdbSaveTime	rdb.c	/^int rdbSaveTime(FILE *fp, time_t t) {$/;"	f
rdbSaveTimeStamp	rdb.c	/^int rdbSaveTimeStamp(FILE *fp, unsigned int timestamp) {$/;"	f
rdbSaveType	rdb.c	/^int rdbSaveType(FILE *fp, unsigned char type) {$/;"	f
rdbSavedObjectLen	rdb.c	/^off_t rdbSavedObjectLen(redisServer *server, robj *o) {$/;"	f
rdbTryIntegerEncoding	rdb.c	/^int rdbTryIntegerEncoding(char *s, size_t len, unsigned char *enc) {$/;"	f
rdbWriteRaw	rdb.c	/^static int rdbWriteRaw(FILE *fp, void *p, size_t len) {$/;"	f	file:
startLoading	rdb.c	/^void startLoading(redisDb *db, FILE *fp) {$/;"	f
stopLoading	rdb.c	/^void stopLoading(redisDb *db) {$/;"	f
R_Nan	redis.c	/^double R_Zero, R_PosInf, R_NegInf, R_Nan;$/;"	v
R_NegInf	redis.c	/^double R_Zero, R_PosInf, R_NegInf, R_Nan;$/;"	v
R_PosInf	redis.c	/^double R_Zero, R_PosInf, R_NegInf, R_Nan;$/;"	v
R_Zero	redis.c	/^double R_Zero, R_PosInf, R_NegInf, R_Nan;$/;"	v
_redisAssert	redis.c	/^void _redisAssert(char *estr, char *file, int line) {$/;"	f
_redisPanic	redis.c	/^void _redisPanic(char *msg, char *file, int line) {$/;"	f
activeExpireCycle	redis.c	/^void activeExpireCycle(struct redisServer *server) {$/;"	f
activeExpireCycleByDb	redis.c	/^void activeExpireCycleByDb(struct redisServer *server, int index) {$/;"	f
bytesToHuman	redis.c	/^void bytesToHuman(char *s, unsigned long long n) {$/;"	f
call	redis.c	/^void call(redisClient *c) {$/;"	f
commandTableDictType	redis.c	/^dictType commandTableDictType = {$/;"	v
createSharedObjects	redis.c	/^void createSharedObjects() {$/;"	f
create_dump_thread_info	redis.c	/^struct dumpThreadInfo* create_dump_thread_info(redisServer *server, char *filename,$/;"	f
dbDictType	redis.c	/^dictType dbDictType = {$/;"	v
decr_max_memory_unsafe	redis.c	/^void decr_max_memory_unsafe(redisDb *db, unsigned long long _n) {$/;"	f
destoryDbLock	redis.c	/^void destoryDbLock(redisServer* server) {$/;"	f
dictEncObjHash	redis.c	/^unsigned int dictEncObjHash(const void *key) {$/;"	f
dictEncObjKeyCompare	redis.c	/^int dictEncObjKeyCompare(void *privdata, const void *key1,$/;"	f
dictListDestructor	redis.c	/^void dictListDestructor(void *privdata, void *val)$/;"	f
dictObjHash	redis.c	/^unsigned int dictObjHash(const void *key) {$/;"	f
dictObjKeyCompare	redis.c	/^int dictObjKeyCompare(void *privdata, const void *key1,$/;"	f
dictRedisObjectDestructor	redis.c	/^void dictRedisObjectDestructor(void *privdata, void *val)$/;"	f
dictRedisObjectModify	redis.c	/^void dictRedisObjectModify(void *privdata, void *key1, void *key2)$/;"	f
dictSdsCaseHash	redis.c	/^unsigned int dictSdsCaseHash(const void *key) {$/;"	f
dictSdsDestructor	redis.c	/^void dictSdsDestructor(void *privdata, void *val)$/;"	f
dictSdsHash	redis.c	/^unsigned int dictSdsHash(const void *key) {$/;"	f
dictSdsKeyCaseCompare	redis.c	/^int dictSdsKeyCaseCompare(void *privdata, const void *key1,$/;"	f
dictSdsKeyCompare	redis.c	/^int dictSdsKeyCompare(void *privdata, const void *key1,$/;"	f
dictVanillaFree	redis.c	/^void dictVanillaFree(void *privdata, void *val)$/;"	f
dump_db_thread	redis.c	/^void* dump_db_thread(void* argv) {$/;"	f
freeDBMemory	redis.c	/^int freeDBMemory(redisDb *db, int expires_db) {$/;"	f
freeDBMemoryIfNeeded	redis.c	/^void freeDBMemoryIfNeeded(struct redisDb *db) {$/;"	f
freeMemoryIfNeeded	redis.c	/^void freeMemoryIfNeeded(struct redisServer *server, int trigger) {$/;"	f
freeSharedObjects	redis.c	/^void freeSharedObjects() {$/;"	f
free_dump_thread_info	redis.c	/^void free_dump_thread_info(struct dumpThreadInfo* info) {$/;"	f
hashDictType	redis.c	/^dictType hashDictType = {$/;"	v
htNeedsResize	redis.c	/^int htNeedsResize(dict *dict) {$/;"	f
incr_max_memory_unsafe	redis.c	/^void incr_max_memory_unsafe(redisDb *db, unsigned long long _n) {$/;"	f
incrementallyRehash	redis.c	/^void incrementallyRehash(redisServer *server) {$/;"	f
incrementallyRehashByDb	redis.c	/^void incrementallyRehashByDb(redisServer *server, int index) {$/;"	f
initDbLock	redis.c	/^void initDbLock(redisServer* server, int max_dbnum) {$/;"	f
initServer	redis.c	/^void initServer(redisServer *server, const redisConfig *config) {$/;"	f
keylistDictType	redis.c	/^dictType keylistDictType = {$/;"	v
keyptrDictType	redis.c	/^dictType keyptrDictType = {$/;"	v
load_db_thread	redis.c	/^void* load_db_thread(void* argv) {$/;"	f
lock_db_memory_from_to	redis.c	/^void lock_db_memory_from_to(redisDb *db, int _from, int _to) {$/;"	f
logConfig	redis.c	/^struct redisLogConfig logConfig;$/;"	v	typeref:struct:redisLogConfig
oom	redis.c	/^void oom(const char *msg) {$/;"	f
processCommand	redis.c	/^int processCommand(redisClient *c) {$/;"	f
redisLog	redis.c	/^void redisLog(int level, const char *fmt, ...) {$/;"	f
serverCronByDb	redis.c	/^int serverCronByDb(struct redisServer *server, int index) {$/;"	f
setDBMaxmemory	redis.c	/^int setDBMaxmemory(redisServer *server, int id, uint64_t maxmem) {$/;"	f
setDictType	redis.c	/^dictType setDictType = {$/;"	v
shared	redis.c	/^struct sharedObjectsStruct shared;$/;"	v	typeref:struct:sharedObjectsStruct
shiftSpace	redis.c	/^int shiftSpace(struct redisDb *db) {$/;"	f
tryResizeHashTableByDb	redis.c	/^void tryResizeHashTableByDb(redisServer *server, int index) {$/;"	f
tryResizeHashTables	redis.c	/^void tryResizeHashTables(redisServer *server) {$/;"	f
unInitServer	redis.c	/^void unInitServer(redisServer* server) {$/;"	f
unlock_db_memory_from_to	redis.c	/^void unlock_db_memory_from_to(redisDb *db, int _from, int _to) {$/;"	f
updateDictResizePolicy	redis.c	/^void updateDictResizePolicy(redisServer *server) {$/;"	f
updateLRUClock	redis.c	/^void updateLRUClock() {$/;"	f
zsetDictType	redis.c	/^dictType zsetDictType = {$/;"	v
APPENDFSYNC_ALWAYS	redis.h	190;"	d
APPENDFSYNC_EVERYSEC	redis.h	191;"	d
APPENDFSYNC_NO	redis.h	189;"	d
EXPIRE_OR_NOT	redis.h	312;"	d
FILTER_TYPE_FIELD	redis.h	259;"	d
FILTER_TYPE_KEY	redis.h	260;"	d
FILTER_TYPE_VALUE	redis.h	261;"	d
NODE_TYPE_BUFFER	redis.h	224;"	d
NODE_TYPE_DOUBLE	redis.h	226;"	d
NODE_TYPE_LONGLONG	redis.h	225;"	d
NODE_TYPE_NULL	redis.h	222;"	d
NODE_TYPE_ROBJ	redis.h	223;"	d
REDIS_BLOCKED	redis.h	159;"	d
REDIS_CLOSE_AFTER_REPLY	redis.h	162;"	d
REDIS_CMD_DENYOOM	redis.h	91;"	d
REDIS_CMD_FORCE_REPLICATION	redis.h	92;"	d
REDIS_CONFIGLINE_MAX	redis.h	69;"	d
REDIS_DB_LESS_MEMORY	redis.h	79;"	d
REDIS_DB_STATUS_DUMPING	redis.h	347;"	d
REDIS_DB_STATUS_FORBIDDEN	redis.h	345;"	d
REDIS_DB_STATUS_LOADING	redis.h	346;"	d
REDIS_DB_STATUS_WORKING	redis.h	344;"	d
REDIS_DEBUG	redis.h	177;"	d
REDIS_DEFAULT_DBNUM	redis.h	68;"	d
REDIS_DEFAULT_DB_MAX_MEMOERY	redis.h	77;"	d
REDIS_DIRTY_CAS	redis.h	161;"	d
REDIS_ENCODING_HT	redis.h	109;"	d
REDIS_ENCODING_INT	redis.h	108;"	d
REDIS_ENCODING_INTSET	redis.h	113;"	d
REDIS_ENCODING_LINKEDLIST	redis.h	111;"	d
REDIS_ENCODING_RAW	redis.h	107;"	d
REDIS_ENCODING_SKIPLIST	redis.h	114;"	d
REDIS_ENCODING_ZIPLIST	redis.h	112;"	d
REDIS_ENCODING_ZIPMAP	redis.h	110;"	d
REDIS_EOF	redis.h	119;"	d
REDIS_ERR	redis.h	35;"	d
REDIS_ERR_ATTR	redis.h	59;"	d
REDIS_ERR_CNEGO_ERROR	redis.h	48;"	d
REDIS_ERR_DATA_LEN_LIMITED	redis.h	57;"	d
REDIS_ERR_EXPIRE_TIME_OUT	redis.h	30;"	d
REDIS_ERR_FORBIDDEN_ABOUT_PUBSUB	redis.h	43;"	d
REDIS_ERR_FORBIDDEN_INFO_SLAVEOF	redis.h	44;"	d
REDIS_ERR_INCDECR_OVERFLOW	redis.h	50;"	d
REDIS_ERR_IS_NOT_DOUBLE	redis.h	54;"	d
REDIS_ERR_IS_NOT_INTEGER	redis.h	51;"	d
REDIS_ERR_IS_NOT_NUMBER	redis.h	49;"	d
REDIS_ERR_LENGTHZERO	redis.h	36;"	d
REDIS_ERR_LOADINGERR	redis.h	42;"	d
REDIS_ERR_MEMORY_ALLOCATE_ERROR	redis.h	52;"	d
REDIS_ERR_NAMESPACE_ERROR	redis.h	56;"	d
REDIS_ERR_OPERATION_NOT_PERMITTED	redis.h	40;"	d
REDIS_ERR_OUT_OF_RANGE	redis.h	53;"	d
REDIS_ERR_QUEUED	redis.h	41;"	d
REDIS_ERR_REACH_MAXMEMORY	redis.h	37;"	d
REDIS_ERR_SYNTAX_ERROR	redis.h	55;"	d
REDIS_ERR_UNKNOWN_COMMAND	redis.h	38;"	d
REDIS_ERR_VERSION_ERROR	redis.h	45;"	d
REDIS_ERR_WRONG_NUMBER_ARGUMENTS	redis.h	39;"	d
REDIS_ERR_WRONG_TYPE_ERROR	redis.h	47;"	d
REDIS_EXPIRELOOKUPS_PER_CRON	redis.h	71;"	d
REDIS_EXPIRETIME	redis.h	117;"	d
REDIS_HASH	redis.h	99;"	d
REDIS_HASH_KEY	redis.h	577;"	d
REDIS_HASH_MAX_ZIPMAP_ENTRIES	redis.h	194;"	d
REDIS_HASH_MAX_ZIPMAP_VALUE	redis.h	195;"	d
REDIS_HASH_VALUE	redis.h	578;"	d
REDIS_HEAD	redis.h	167;"	d
REDIS_HT_MINFILL	redis.h	82;"	d
REDIS_IOBUF_LEN	redis.h	65;"	d
REDIS_IO_WAIT	redis.h	160;"	d
REDIS_IS_DUMPING	redis.h	27;"	d
REDIS_IS_LOADING	redis.h	28;"	d
REDIS_LIST	redis.h	96;"	d
REDIS_LIST_MAX_ZIPLIST_ENTRIES	redis.h	196;"	d
REDIS_LIST_MAX_ZIPLIST_VALUE	redis.h	197;"	d
REDIS_LOADBUF_LEN	redis.h	66;"	d
REDIS_LRU_CLOCK_MAX	redis.h	291;"	d
REDIS_LRU_CLOCK_RESOLUTION	redis.h	292;"	d
REDIS_MASTER	redis.h	156;"	d
REDIS_MAXIDLETIME	redis.h	64;"	d
REDIS_MAXMEMORY_ALLKEYS_LRU	redis.h	209;"	d
REDIS_MAXMEMORY_ALLKEYS_RANDOM	redis.h	210;"	d
REDIS_MAXMEMORY_NO_EVICTION	redis.h	211;"	d
REDIS_MAXMEMORY_VOLATILE_LRU	redis.h	206;"	d
REDIS_MAXMEMORY_VOLATILE_RANDOM	redis.h	208;"	d
REDIS_MAXMEMORY_VOLATILE_TTL	redis.h	207;"	d
REDIS_MAX_COMPLETED_JOBS_PROCESSED	redis.h	152;"	d
REDIS_MAX_LOGMSG_LEN	redis.h	76;"	d
REDIS_MAX_SYNC_TIME	redis.h	70;"	d
REDIS_MAX_WRITE_PER_EVENT	redis.h	72;"	d
REDIS_MONITOR	redis.h	157;"	d
REDIS_MULTI	redis.h	158;"	d
REDIS_NONE	redis.h	101;"	d
REDIS_NOTICE	redis.h	179;"	d
REDIS_NOTUSED	redis.h	183;"	d
REDIS_OK	redis.h	34;"	d
REDIS_OK_BUT_ALREADY_EXIST	redis.h	29;"	d
REDIS_OK_BUT_CONE	redis.h	32;"	d
REDIS_OK_BUT_CZERO	redis.h	33;"	d
REDIS_OK_NOT_EXIST	redis.h	31;"	d
REDIS_OK_RANGE_HAVE_NONE	redis.h	46;"	d
REDIS_OP_DIFF	redis.h	202;"	d
REDIS_OP_INTER	redis.h	203;"	d
REDIS_OP_UNION	redis.h	201;"	d
REDIS_RDB_14BITLEN	redis.h	135;"	d
REDIS_RDB_32BITLEN	redis.h	136;"	d
REDIS_RDB_6BITLEN	redis.h	134;"	d
REDIS_RDB_ENCVAL	redis.h	137;"	d
REDIS_RDB_ENC_INT16	redis.h	144;"	d
REDIS_RDB_ENC_INT32	redis.h	145;"	d
REDIS_RDB_ENC_INT8	redis.h	143;"	d
REDIS_RDB_ENC_LZF	redis.h	146;"	d
REDIS_RDB_LENERR	redis.h	138;"	d
REDIS_REPLY_CHUNK_BYTES	redis.h	75;"	d
REDIS_REQUEST_MAX_SIZE	redis.h	73;"	d
REDIS_SAME_OBJECT_ERR	redis.h	58;"	d
REDIS_SELECTDB	redis.h	118;"	d
REDIS_SERVERPORT	redis.h	63;"	d
REDIS_SET	redis.h	97;"	d
REDIS_SET_MAX_INTSET_ENTRIES	redis.h	198;"	d
REDIS_SHARED_INTEGERS	redis.h	74;"	d
REDIS_SLAVE	redis.h	155;"	d
REDIS_SORTKEY_MAX	redis.h	174;"	d
REDIS_SORT_ASC	redis.h	172;"	d
REDIS_SORT_DESC	redis.h	173;"	d
REDIS_SORT_GET	redis.h	171;"	d
REDIS_STATIC_ARGS	redis.h	67;"	d
REDIS_STRING	redis.h	95;"	d
REDIS_TAIL	redis.h	168;"	d
REDIS_UNBLOCKED	redis.h	163;"	d
REDIS_UNKNOWN	redis.h	102;"	d
REDIS_VERBOSE	redis.h	178;"	d
REDIS_VERIFY_FAILED	redis.h	60;"	d
REDIS_VMPOINTER	redis.h	100;"	d
REDIS_WARNING	redis.h	180;"	d
REDIS_ZSET	redis.h	98;"	d
ZSKIPLIST_MAXLEVEL	redis.h	185;"	d
ZSKIPLIST_P	redis.h	186;"	d
__REDIS_H	redis.h	2;"	d
_obj	redis.h	/^    union _obj {$/;"	u	struct:value_item_node
_redisSortObject	redis.h	/^typedef struct _redisSortObject {$/;"	s
_redisSortOperation	redis.h	/^typedef struct _redisSortOperation {$/;"	s
activerehashing	redis.h	/^    int activerehashing;$/;"	m	struct:redisServer
area	redis.h	/^    int area;$/;"	m	struct:dumpThreadInfo
area_conf	redis.h	/^    redisAreaConf *area_conf;$/;"	m	struct:redisClient
area_confs	redis.h	/^    redisAreaConf *area_confs;$/;"	m	struct:redisServer
area_group_end	redis.h	/^    int area_group_end;$/;"	m	struct:redisDb
area_group_num	redis.h	/^    int area_group_num;$/;"	m	struct:redisServer
area_group_num	redis.h	/^  int area_group_num;$/;"	m	struct:redisConfig
area_group_start	redis.h	/^    int area_group_start;$/;"	m	struct:redisDb
argc	redis.h	/^    int argc;$/;"	m	struct:redisClient
argc	redis.h	/^    int argc;$/;"	m	struct:redisCommand
argv	redis.h	/^    robj **argv;$/;"	m	struct:redisClient
backward	redis.h	/^    struct zskiplistNode *backward;$/;"	m	struct:zskiplistNode	typeref:struct:zskiplistNode::zskiplistNode
buff	redis.h	/^    char buff[];$/;"	m	struct:filterNode
changes	redis.h	/^    int changes;$/;"	m	struct:saveparam
clients	redis.h	/^    redisClient **clients;$/;"	m	struct:redisServer
cmd	redis.h	/^    struct redisCommand *cmd;$/;"	m	struct:redisClient	typeref:struct:redisClient::redisCommand
cmpobj	redis.h	/^        robj *cmpobj;$/;"	m	union:_redisSortObject::__anon1
create_load_thread_info	redis.h	895;"	d
cronloops	redis.h	/^    int cronloops;              \/* number of times the cron function run *\/$/;"	m	struct:redisServer
db	redis.h	/^    redisDb *db;$/;"	m	struct:redisClient
db	redis.h	/^    redisDb *db;$/;"	m	struct:redisServer
db_maxmemory	redis.h	/^  const char* db_maxmemory;$/;"	m	struct:redisConfig
db_mutexs	redis.h	/^    pthread_mutex_t *db_mutexs;$/;"	m	struct:redisServer
db_num	redis.h	/^    int db_num;$/;"	m	struct:redisServer
de	redis.h	/^    dictEntry *de;$/;"	m	struct:__anon5
di	redis.h	/^    dictIterator *di;$/;"	m	struct:__anon4
di	redis.h	/^    dictIterator *di;$/;"	m	struct:__anon5
dict	redis.h	/^    struct dict *dict;$/;"	m	struct:redisDb	typeref:struct:redisDb::dict
dict	redis.h	/^    struct dict *dict;$/;"	m	struct:zset	typeref:struct:zset::dict
dictid	redis.h	/^    int dictid;$/;"	m	struct:redisClient
direction	redis.h	/^    unsigned char direction; \/* Iteration direction *\/$/;"	m	struct:__anon2
dirty	redis.h	/^    long long dirty;            \/* changes to DB from the last save *\/$/;"	m	struct:redisDb
dnum	redis.h	/^        double dnum;$/;"	m	union:value_item_node::_obj
dnum	redis.h	/^    double dnum;$/;"	m	union:ret_val
dumpThreadInfo	redis.h	/^struct dumpThreadInfo {$/;"	s
dumpThreadInfo	redis.h	/^typedef struct dumpThreadInfo dumpThreadInfo;$/;"	t	typeref:struct:dumpThreadInfo
encoding	redis.h	/^    int encoding;$/;"	m	struct:__anon4
encoding	redis.h	/^    int encoding;$/;"	m	struct:__anon5
encoding	redis.h	/^    unsigned char encoding;$/;"	m	struct:__anon2
encoding	redis.h	/^    unsigned encoding:4;$/;"	m	struct:redisObject
expires	redis.h	/^    struct dict *expires;              \/* Timeout of keys with a timeout set *\/$/;"	m	struct:redisDb	typeref:struct:redisDb::dict
expiretime	redis.h	/^    long expiretime;$/;"	m	struct:redisClient
filename	redis.h	/^    char* filename;$/;"	m	struct:dumpThreadInfo
filterList	redis.h	/^typedef struct filterList {$/;"	s
filterList	redis.h	/^} filterList;$/;"	t	typeref:struct:filterList
filterListIterator	redis.h	/^typedef struct filterListIterator {$/;"	s
filterListIterator	redis.h	/^} filterListIterator;$/;"	t	typeref:struct:filterListIterator
filterNode	redis.h	/^typedef struct filterNode {$/;"	s
filterNode	redis.h	/^} filterNode;$/;"	t	typeref:struct:filterNode
filter_list	redis.h	/^    struct filterList filter_list;$/;"	m	struct:redisDb	typeref:struct:redisDb::filterList
flags	redis.h	/^    int flags;$/;"	m	struct:redisCommand
forward	redis.h	/^        struct zskiplistNode *forward;$/;"	m	struct:zskiplistNode::zskiplistLevel	typeref:struct:zskiplistNode::zskiplistLevel::zskiplistNode
free_load_thread_info	redis.h	897;"	d
hashTypeIterator	redis.h	/^} hashTypeIterator;$/;"	t	typeref:struct:__anon5
hash_max_size	redis.h	/^    int hash_max_size;$/;"	m	struct:redisAreaConf
hash_max_size	redis.h	/^  int hash_max_size;$/;"	m	struct:redisConfig
hash_max_zipmap_entries	redis.h	/^    size_t hash_max_zipmap_entries;$/;"	m	struct:redisServer
hash_max_zipmap_value	redis.h	/^    size_t hash_max_zipmap_value;$/;"	m	struct:redisServer
head	redis.h	/^    struct filterNode* head;$/;"	m	struct:filterList	typeref:struct:filterList::filterNode
head	redis.h	/^    struct filterNode* head;$/;"	m	struct:filterListIterator	typeref:struct:filterListIterator::filterNode
head	redis.h	/^    struct value_item_node* head;$/;"	m	struct:value_item_list	typeref:struct:value_item_list::value_item_node
header	redis.h	/^    struct zskiplistNode *header, *tail;$/;"	m	struct:zskiplist	typeref:struct:zskiplist::zskiplistNode
hit_count	redis.h	/^    int hit_count;$/;"	m	struct:redisDb
id	redis.h	/^    int id;$/;"	m	struct:redisAreaConf
id	redis.h	/^    int id;$/;"	m	struct:redisDb
ii	redis.h	/^    int ii; \/* intset iterator *\/$/;"	m	struct:__anon4
initStaticStringObject	redis.h	305;"	d
lastsave	redis.h	/^    time_t lastsave;$/;"	m	struct:redisDb
len	redis.h	/^    int len;$/;"	m	struct:filterNode
len	redis.h	/^    int len;$/;"	m	struct:value_item_list
length	redis.h	/^    unsigned long length;$/;"	m	struct:zskiplist
level	redis.h	/^    int level;$/;"	m	struct:zskiplist
level	redis.h	/^    } level[];$/;"	m	struct:zskiplistNode	typeref:struct:zskiplistNode::zskiplistLevel
li	redis.h	/^    listTypeIterator *li;$/;"	m	struct:__anon3
listTypeEntry	redis.h	/^} listTypeEntry;$/;"	t	typeref:struct:__anon3
listTypeIterator	redis.h	/^} listTypeIterator;$/;"	t	typeref:struct:__anon2
list_len	redis.h	/^    uint32_t list_len;     \/* after insert, length of list *\/$/;"	m	struct:push_return_value
list_max_size	redis.h	/^    int list_max_size;$/;"	m	struct:redisAreaConf
list_max_size	redis.h	/^  int list_max_size;$/;"	m	struct:redisConfig
list_max_ziplist_entries	redis.h	/^    size_t list_max_ziplist_entries;$/;"	m	struct:redisServer
list_max_ziplist_value	redis.h	/^    size_t list_max_ziplist_value;$/;"	m	struct:redisServer
llnum	redis.h	/^        long long llnum;$/;"	m	union:value_item_node::_obj
llnum	redis.h	/^    long long llnum;$/;"	m	union:ret_val
ln	redis.h	/^    listNode *ln;       \/* Entry in linked list *\/$/;"	m	struct:__anon3
ln	redis.h	/^    listNode *ln;$/;"	m	struct:__anon2
loadThreadInfo	redis.h	/^typedef struct dumpThreadInfo loadThreadInfo;$/;"	t	typeref:struct:dumpThreadInfo
loading	redis.h	/^    int loading;$/;"	m	struct:redisDb
loading_loaded_bytes	redis.h	/^    off_t loading_loaded_bytes;$/;"	m	struct:redisDb
loading_start_time	redis.h	/^    time_t loading_start_time;$/;"	m	struct:redisDb
loading_total_bytes	redis.h	/^    off_t loading_total_bytes;$/;"	m	struct:redisDb
lock	redis.h	/^    pthread_mutex_t lock;$/;"	m	struct:redisAreaConf
lock	redis.h	/^    pthread_mutex_t lock;$/;"	m	struct:redisDb
logfile	redis.h	/^    char *logfile;$/;"	m	struct:redisLogConfig
logiclock	redis.h	/^    uint32_t logiclock;$/;"	m	struct:redisDb
lru	redis.h	/^    unsigned lru:24;        \/* lru time (relative to server.lruclock) *\/$/;"	m	struct:redisObject
lruclock	redis.h	/^    unsigned lruclock:22;        \/* clock incrementing every minute, for LRU *\/$/;"	m	struct:sharedObjectsStruct
lruclock_padding	redis.h	/^    unsigned lruclock_padding:10;$/;"	m	struct:redisServer
mainthread	redis.h	/^    pthread_t mainthread;$/;"	m	struct:redisServer
max_count	redis.h	/^    int max_count;$/;"	m	struct:redisClient
maxmemory	redis.h	/^    unsigned long long maxmemory;$/;"	m	struct:redisDb
maxmemory	redis.h	/^    unsigned long long maxmemory;$/;"	m	struct:redisServer
maxmemory	redis.h	/^  const char* maxmemory;$/;"	m	struct:redisConfig
maxmemory_policy	redis.h	/^    int maxmemory_policy;$/;"	m	struct:redisServer
maxmemory_policy	redis.h	/^  int maxmemory_policy;$/;"	m	struct:redisConfig
maxmemory_samples	redis.h	/^    int maxmemory_samples;$/;"	m	struct:redisDb
maxmemory_samples	redis.h	/^    int maxmemory_samples;$/;"	m	struct:redisServer
maxmemory_samples	redis.h	/^  int maxmemory_samples;$/;"	m	struct:redisConfig
name	redis.h	/^    char *name;$/;"	m	struct:redisCommand
name	redis.h	/^    char *name;$/;"	m	struct:redisFunctionSym
need_remove_key	redis.h	/^    size_t need_remove_key;$/;"	m	struct:redisDb
next	redis.h	/^    struct filterNode* next;$/;"	m	struct:filterListIterator	typeref:struct:filterListIterator::filterNode
next	redis.h	/^    struct filterNode* next;$/;"	m	struct:filterNode	typeref:struct:filterNode::filterNode
next	redis.h	/^    struct value_item_node* next;$/;"	m	struct:value_item_iterator	typeref:struct:value_item_iterator::value_item_node
next	redis.h	/^    struct value_item_node* next;$/;"	m	struct:value_item_node	typeref:struct:value_item_node::value_item_node
now	redis.h	/^    int now;$/;"	m	struct:value_item_iterator
obj	redis.h	/^        void* obj;$/;"	m	union:value_item_node::_obj
obj	redis.h	/^    robj *obj;$/;"	m	struct:_redisSortObject
obj	redis.h	/^    robj *obj;$/;"	m	struct:zskiplistNode
obj	redis.h	/^    } obj;$/;"	m	struct:value_item_node	typeref:union:value_item_node::_obj
old_dbnum	redis.h	/^    int old_dbnum;          \/* last db num *\/$/;"	m	struct:redisClient
oldargc	redis.h	/^    int oldargc;            \/* last max argc *\/$/;"	m	struct:redisClient
password	redis.h	/^    char* password;$/;"	m	struct:redisAreaConf
password	redis.h	/^    char* password;$/;"	m	struct:redisServer
password	redis.h	/^  const char* password;$/;"	m	struct:redisConfig
pattern	redis.h	/^    robj *pattern;$/;"	m	struct:_redisSortOperation
pointer	redis.h	/^    unsigned long pointer;$/;"	m	struct:redisFunctionSym
pre	redis.h	/^    struct value_item_node* pre;$/;"	m	struct:value_item_node	typeref:struct:value_item_node::value_item_node
proc	redis.h	/^    redisCommandProc *proc;$/;"	m	struct:redisCommand
ptr	redis.h	/^    void *ptr;$/;"	m	struct:redisObject
push_return_value	redis.h	/^typedef struct push_return_value {$/;"	s
push_return_value	redis.h	/^} push_return_value;$/;"	t	typeref:struct:push_return_value
pushed_num	redis.h	/^    uint32_t pushed_num;   \/* amount of pushed values successfull*\/$/;"	m	struct:push_return_value
rdb_compression	redis.h	/^    int rdb_compression;$/;"	m	struct:redisServer
read_count	redis.h	/^    int read_count;$/;"	m	struct:redisDb
redisAreaConf	redis.h	/^typedef struct redisAreaConf {$/;"	s
redisAreaConf	redis.h	/^} redisAreaConf;$/;"	t	typeref:struct:redisAreaConf
redisAssert	redis.h	214;"	d
redisClient	redis.h	/^typedef struct redisClient {$/;"	s
redisClient	redis.h	/^} redisClient;$/;"	t	typeref:struct:redisClient
redisCommand	redis.h	/^struct redisCommand {$/;"	s
redisCommandProc	redis.h	/^typedef void redisCommandProc(redisClient *c);$/;"	t
redisConfig	redis.h	/^typedef struct redisConfig {$/;"	s
redisConfig	redis.h	/^} redisConfig;$/;"	t	typeref:struct:redisConfig
redisDb	redis.h	/^typedef struct redisDb {$/;"	s
redisDb	redis.h	/^} redisDb;$/;"	t	typeref:struct:redisDb
redisFunctionSym	redis.h	/^struct redisFunctionSym {$/;"	s
redisLogConfig	redis.h	/^struct redisLogConfig {$/;"	s
redisObject	redis.h	/^typedef struct redisObject {$/;"	s
redisPanic	redis.h	215;"	d
redisServer	redis.h	/^struct redisServer {$/;"	s
redisSortObject	redis.h	/^} redisSortObject;$/;"	t	typeref:struct:_redisSortObject
redisSortOperation	redis.h	/^} redisSortOperation;$/;"	t	typeref:struct:_redisSortOperation
refcount	redis.h	/^    int refcount;$/;"	m	struct:redisObject
remove_count	redis.h	/^    int remove_count;$/;"	m	struct:redisDb
ret_val	redis.h	/^typedef union ret_val {$/;"	u
ret_val	redis.h	/^} ret_val;$/;"	t	typeref:union:ret_val
return_value	redis.h	/^    void* return_value; \/\/return value by list$/;"	m	struct:redisClient
returncode	redis.h	/^    int returncode; \/\/return code for example REDIS_OK;$/;"	m	struct:redisClient
retvalue	redis.h	/^    ret_val retvalue;  \/\/integer or double value$/;"	m	struct:redisClient
robj	redis.h	/^} robj;$/;"	t	typeref:struct:redisObject
saveparam	redis.h	/^struct saveparam {$/;"	s
score	redis.h	/^        double score;$/;"	m	union:_redisSortObject::__anon1
score	redis.h	/^    double score;$/;"	m	struct:zskiplistNode
seconds	redis.h	/^    time_t seconds;$/;"	m	struct:saveparam
server	redis.h	/^    struct redisServer *server;$/;"	m	struct:dumpThreadInfo	typeref:struct:dumpThreadInfo::redisServer
server	redis.h	/^    struct redisServer *server;$/;"	m	struct:redisClient	typeref:struct:redisClient::redisServer
setTypeIterator	redis.h	/^} setTypeIterator;$/;"	t	typeref:struct:__anon4
set_max_intset_entries	redis.h	/^    size_t set_max_intset_entries;$/;"	m	struct:redisServer
set_max_size	redis.h	/^    int set_max_size;$/;"	m	struct:redisAreaConf
set_max_size	redis.h	/^  int set_max_size;$/;"	m	struct:redisConfig
sharedObjectsStruct	redis.h	/^struct sharedObjectsStruct {$/;"	s
size	redis.h	/^    int size;$/;"	m	struct:filterList
size	redis.h	/^    uint32_t size;$/;"	m	struct:value_item_node
span	redis.h	/^        unsigned int span;$/;"	m	struct:zskiplistNode::zskiplistLevel
stat_evictedkeys	redis.h	/^    long long stat_evictedkeys;     \/* number of evicted keys (maxmemory) *\/$/;"	m	struct:redisDb
stat_expiredkeys	redis.h	/^    long long stat_expiredkeys;     \/* number of expired keys *\/$/;"	m	struct:redisDb
stat_numcommands	redis.h	/^    long long stat_numcommands;     \/* number of processed commands *\/$/;"	m	struct:redisServer
stat_numconnections	redis.h	/^    long long stat_numconnections;  \/* number of connections received *\/$/;"	m	struct:redisServer
stat_starttime	redis.h	/^    time_t stat_starttime;          \/* server start time *\/$/;"	m	struct:redisServer
status	redis.h	/^    int status;$/;"	m	struct:redisDb
subject	redis.h	/^    robj *subject;$/;"	m	struct:__anon2
subject	redis.h	/^    robj *subject;$/;"	m	struct:__anon4
syslog_enabled	redis.h	/^    int syslog_enabled;$/;"	m	struct:redisLogConfig
syslog_facility	redis.h	/^    int syslog_facility;$/;"	m	struct:redisLogConfig
syslog_ident	redis.h	/^    char *syslog_ident;$/;"	m	struct:redisLogConfig
tail	redis.h	/^    struct value_item_node* tail;$/;"	m	struct:value_item_list	typeref:struct:value_item_list::value_item_node
tail	redis.h	/^    struct zskiplistNode *header, *tail;$/;"	m	struct:zskiplist	typeref:struct:zskiplist::
timestamp	redis.h	/^    unsigned int timestamp;$/;"	m	struct:__anon5
timestamp	redis.h	/^    unsigned int timestamp;$/;"	m	struct:filterNode
type	redis.h	/^    int type;$/;"	m	struct:_redisSortOperation
type	redis.h	/^    int8_t type;  \/* key or field *\/$/;"	m	struct:filterNode
type	redis.h	/^    int8_t type;$/;"	m	struct:filterListIterator
type	redis.h	/^    int8_t type;\/* NODE_TYPE_ROBJ,NODE_TYPE_BUFFER,NODE_TYPE_LONGLONG *\/$/;"	m	struct:value_item_node
type	redis.h	/^    unsigned type:4;$/;"	m	struct:redisObject
u	redis.h	/^    } u;$/;"	m	struct:_redisSortObject	typeref:union:_redisSortObject::__anon1
unit_num	redis.h	/^    int unit_num;$/;"	m	struct:redisServer
unit_num	redis.h	/^  int unit_num;$/;"	m	struct:redisConfig
value_item_iterator	redis.h	/^typedef struct value_item_iterator {$/;"	s
value_item_iterator	redis.h	/^} value_item_iterator;$/;"	t	typeref:struct:value_item_iterator
value_item_list	redis.h	/^typedef struct value_item_list {$/;"	s
value_item_list	redis.h	/^} value_item_list;$/;"	t	typeref:struct:value_item_list
value_item_node	redis.h	/^typedef struct value_item_node {$/;"	s
value_item_node	redis.h	/^} value_item_node;$/;"	t	typeref:struct:value_item_node
verbosity	redis.h	/^    int verbosity;$/;"	m	struct:redisLogConfig
verbosity	redis.h	/^  int verbosity;$/;"	m	struct:redisConfig
version	redis.h	/^    uint16_t version;$/;"	m	struct:redisClient
version_care	redis.h	/^    char version_care;$/;"	m	struct:redisClient
write_count	redis.h	/^    int write_count;$/;"	m	struct:redisDb
zi	redis.h	/^    unsigned char *zi;  \/* Entry in ziplist *\/$/;"	m	struct:__anon3
zi	redis.h	/^    unsigned char *zi;$/;"	m	struct:__anon2
zi	redis.h	/^    unsigned char *zi;$/;"	m	struct:__anon5
zk	redis.h	/^    unsigned char *zk, *zv;$/;"	m	struct:__anon5
zklen	redis.h	/^    unsigned int zklen, zvlen;$/;"	m	struct:__anon5
zset	redis.h	/^typedef struct zset {$/;"	s
zset	redis.h	/^} zset;$/;"	t	typeref:struct:zset
zset_max_size	redis.h	/^    int zset_max_size;$/;"	m	struct:redisAreaConf
zset_max_size	redis.h	/^  int zset_max_size;$/;"	m	struct:redisConfig
zskiplist	redis.h	/^typedef struct zskiplist {$/;"	s
zskiplist	redis.h	/^} zskiplist;$/;"	t	typeref:struct:zskiplist
zskiplistLevel	redis.h	/^    struct zskiplistLevel {$/;"	s	struct:zskiplistNode
zskiplistNode	redis.h	/^typedef struct zskiplistNode {$/;"	s
zskiplistNode	redis.h	/^} zskiplistNode;$/;"	t	typeref:struct:zskiplistNode
zsl	redis.h	/^    zskiplist *zsl;$/;"	m	struct:zset
zv	redis.h	/^    unsigned char *zk, *zv;$/;"	m	struct:__anon5
zvlen	redis.h	/^    unsigned int zklen, zvlen;$/;"	m	struct:__anon5
REDISLIB_H	redislib.h	2;"	d
SDS_ABORT_ON_OOM	sds.c	37;"	d	file:
hex_digit_to_int	sds.c	/^int hex_digit_to_int(char c) {$/;"	f
is_hex_digit	sds.c	/^int is_hex_digit(char c) {$/;"	f
main	sds.c	/^int main(void) {$/;"	f
sdsMakeRoomFor	sds.c	/^static sds sdsMakeRoomFor(sds s, size_t addlen) {$/;"	f	file:
sdsOomAbort	sds.c	/^static void sdsOomAbort(void) {$/;"	f	file:
sdsavail	sds.c	/^size_t sdsavail(sds s) {$/;"	f
sdscat	sds.c	/^sds sdscat(sds s, char *t) {$/;"	f
sdscatlen	sds.c	/^sds sdscatlen(sds s, void *t, size_t len) {$/;"	f
sdscatprintf	sds.c	/^sds sdscatprintf(sds s, const char *fmt, ...) {$/;"	f
sdscatrepr	sds.c	/^sds sdscatrepr(sds s, char *p, size_t len) {$/;"	f
sdscatvprintf	sds.c	/^sds sdscatvprintf(sds s, const char *fmt, va_list ap) {$/;"	f
sdscmp	sds.c	/^int sdscmp(sds s1, sds s2) {$/;"	f
sdscpy	sds.c	/^sds sdscpy(sds s, char *t) {$/;"	f
sdscpylen	sds.c	/^sds sdscpylen(sds s, char *t, size_t len) {$/;"	f
sdsdup	sds.c	/^sds sdsdup(const sds s) {$/;"	f
sdsempty	sds.c	/^sds sdsempty(void) {$/;"	f
sdsfree	sds.c	/^void sdsfree(sds s) {$/;"	f
sdsfreesplitres	sds.c	/^void sdsfreesplitres(sds *tokens, int count) {$/;"	f
sdsfromlonglong	sds.c	/^sds sdsfromlonglong(long long value) {$/;"	f
sdsgrowzero	sds.c	/^sds sdsgrowzero(sds s, size_t len) {$/;"	f
sdslen	sds.c	/^size_t sdslen(const sds s) {$/;"	f
sdslogiclock	sds.c	/^uint32_t sdslogiclock(const sds s) {$/;"	f
sdslogiclock_update	sds.c	/^void sdslogiclock_update(const sds s, uint32_t logiclock) {$/;"	f
sdsnew	sds.c	/^sds sdsnew(const char *init, uint32_t logiclock, uint16_t version) {$/;"	f
sdsnewlen	sds.c	/^sds sdsnewlen(const void *init, size_t initlen, uint32_t logiclock, uint16_t version) {$/;"	f
sdsrange	sds.c	/^sds sdsrange(sds s, int start, int end) {$/;"	f
sdssplitargs	sds.c	/^sds *sdssplitargs(char *line, int *argc) {$/;"	f
sdssplitlen	sds.c	/^sds *sdssplitlen(char *s, int len, char *sep, int seplen, int *count) {$/;"	f
sdstolower	sds.c	/^void sdstolower(sds s) {$/;"	f
sdstoupper	sds.c	/^void sdstoupper(sds s) {$/;"	f
sdstrim	sds.c	/^sds sdstrim(sds s, const char *cset) {$/;"	f
sdsupdatelen	sds.c	/^void sdsupdatelen(sds s) {$/;"	f
sdsversion	sds.c	/^uint16_t sdsversion(const sds s) {$/;"	f
sdsversion_add	sds.c	/^void sdsversion_add(const sds s, uint16_t version) {$/;"	f
sdsversion_change	sds.c	/^void sdsversion_change(const sds s, uint16_t version) {$/;"	f
__SDS_H	sds.h	32;"	d
buf	sds.h	/^    char buf[];$/;"	m	struct:sdshdr
free	sds.h	/^    int free;$/;"	m	struct:sdshdr
len	sds.h	/^    int len;$/;"	m	struct:sdshdr
logiclock	sds.h	/^    unsigned int logiclock;$/;"	m	struct:sdshdr
sds	sds.h	/^typedef char *sds;$/;"	t
sdshdr	sds.h	/^struct sdshdr {$/;"	s
version	sds.h	/^    unsigned short int  version;$/;"	m	struct:sdshdr
arg	sort.c	/^} arg;$/;"	v	typeref:struct:sortArgument
createSortOperation	sort.c	/^redisSortOperation *createSortOperation(int type, robj *pattern) {$/;"	f
lookupKeyByPattern	sort.c	/^robj *lookupKeyByPattern(redisDb *db, robj *pattern, robj *subst) {$/;"	f
sortArgument	sort.c	/^struct sortArgument {$/;"	s	file:
sortCompare	sort.c	/^int sortCompare(const void *s1, const void *s2) {$/;"	f
sort_alpha	sort.c	/^    int sort_alpha;$/;"	m	struct:sortArgument	file:
sort_bypattern	sort.c	/^    int sort_bypattern;$/;"	m	struct:sortArgument	file:
sort_desc	sort.c	/^    int sort_desc;$/;"	m	struct:sortArgument	file:
CHECK_HASH_LENGTH	t_hash.c	9;"	d	file:
convertToRealHash	t_hash.c	/^void convertToRealHash(robj *o) {$/;"	f
filterCommand	t_hash.c	/^void filterCommand(redisClient *c) {$/;"	f
genericHgetallCommand	t_hash.c	/^void genericHgetallCommand(redisClient *c, int flags) {$/;"	f
hashTypeCurrent	t_hash.c	/^int hashTypeCurrent(hashTypeIterator *hi, int what, robj **objval, unsigned char **v, unsigned int *vlen) {$/;"	f
hashTypeCurrentObject	t_hash.c	/^robj *hashTypeCurrentObject(hashTypeIterator *hi, int what) {$/;"	f
hashTypeDelete	t_hash.c	/^int hashTypeDelete(robj *o, robj *key) {$/;"	f
hashTypeExists	t_hash.c	/^int hashTypeExists(robj *o, robj *key) {$/;"	f
hashTypeGet	t_hash.c	/^int hashTypeGet(robj *o, robj *key, robj **objval, unsigned char **v,$/;"	f
hashTypeGetObject	t_hash.c	/^robj *hashTypeGetObject(robj *o, robj *key) {$/;"	f
hashTypeInitIterator	t_hash.c	/^hashTypeIterator *hashTypeInitIterator(robj *subject) {$/;"	f
hashTypeLength	t_hash.c	/^unsigned long hashTypeLength(robj *o) {$/;"	f
hashTypeLookupWriteOrCreate	t_hash.c	/^robj *hashTypeLookupWriteOrCreate(redisClient *c, robj *key) {$/;"	f
hashTypeNext	t_hash.c	/^int hashTypeNext(hashTypeIterator *hi) {$/;"	f
hashTypeReleaseIterator	t_hash.c	/^void hashTypeReleaseIterator(hashTypeIterator *hi) {$/;"	f
hashTypeSet	t_hash.c	/^int hashTypeSet(redisClient *c, robj *o, robj *key, robj *value) {$/;"	f
hashTypeSimpleDel	t_hash.c	/^static int hashTypeSimpleDel(robj *o, robj *key, dictEntry *de)$/;"	f	file:
hashTypeTryConversion	t_hash.c	/^void hashTypeTryConversion(struct redisClient* c, robj *subject, robj **argv, int start, int end) {$/;"	f
hashTypeTryObjectEncoding	t_hash.c	/^void hashTypeTryObjectEncoding(robj *subject, robj **o1, robj **o2) {$/;"	f
hdelCommand	t_hash.c	/^void hdelCommand(redisClient *c) {$/;"	f
hexistsCommand	t_hash.c	/^void hexistsCommand(redisClient *c) {$/;"	f
hgetCommand	t_hash.c	/^void hgetCommand(redisClient *c) {$/;"	f
hgetallCommand	t_hash.c	/^void hgetallCommand(redisClient *c) {$/;"	f
hincrbyCommand	t_hash.c	/^void hincrbyCommand(redisClient *c) {$/;"	f
hkeysCommand	t_hash.c	/^void hkeysCommand(redisClient *c) {$/;"	f
hlenCommand	t_hash.c	/^void hlenCommand(redisClient *c) {$/;"	f
hmgetCommand	t_hash.c	/^void hmgetCommand(redisClient *c) {$/;"	f
hmsetCommand	t_hash.c	/^void hmsetCommand(redisClient *c) {$/;"	f
hsetCommand	t_hash.c	/^void hsetCommand(redisClient *c) {$/;"	f
hsetnxCommand	t_hash.c	/^void hsetnxCommand(redisClient *c) {$/;"	f
hvalsCommand	t_hash.c	/^void hvalsCommand(redisClient *c) {$/;"	f
getTimeoutFromObject	t_list.c	/^int getTimeoutFromObject(robj *object, time_t *timeout) {$/;"	f
lindexCommand	t_list.c	/^void lindexCommand(redisClient *c) {$/;"	f
linsertCommand	t_list.c	/^void linsertCommand(redisClient *c) {$/;"	f
listTypeConvert	t_list.c	/^void listTypeConvert(robj *subject, int enc) {$/;"	f
listTypeDelete	t_list.c	/^void listTypeDelete(listTypeEntry *entry) {$/;"	f
listTypeEqual	t_list.c	/^int listTypeEqual(listTypeEntry *entry, robj *o) {$/;"	f
listTypeGet	t_list.c	/^robj *listTypeGet(listTypeEntry *entry) {$/;"	f
listTypeInitIterator	t_list.c	/^listTypeIterator *listTypeInitIterator(robj *subject, int index, unsigned char direction) {$/;"	f
listTypeInsert	t_list.c	/^void listTypeInsert(listTypeEntry *entry, robj *value, int where) {$/;"	f
listTypeLength	t_list.c	/^unsigned long listTypeLength(robj *subject) {$/;"	f
listTypeNext	t_list.c	/^int listTypeNext(listTypeIterator *li, listTypeEntry *entry) {$/;"	f
listTypePop	t_list.c	/^robj *listTypePop(robj *subject, int where) {$/;"	f
listTypePush	t_list.c	/^void listTypePush(redisClient *c, robj *subject, robj *value, int where) {$/;"	f
listTypeReleaseIterator	t_list.c	/^void listTypeReleaseIterator(listTypeIterator *li) {$/;"	f
listTypeTryConversion	t_list.c	/^void listTypeTryConversion(redisClient *c, robj *subject, robj *value) {$/;"	f
llenCommand	t_list.c	/^void llenCommand(redisClient *c) {$/;"	f
lpopCommand	t_list.c	/^void lpopCommand(redisClient *c) {$/;"	f
lpushCommand	t_list.c	/^void lpushCommand(redisClient *c) {$/;"	f
lpushxCommand	t_list.c	/^void lpushxCommand(redisClient *c) {$/;"	f
lrangeCommand	t_list.c	/^void lrangeCommand(redisClient *c) {$/;"	f
lremCommand	t_list.c	/^void lremCommand(redisClient *c) {$/;"	f
lsetCommand	t_list.c	/^void lsetCommand(redisClient *c) {$/;"	f
ltrimCommand	t_list.c	/^void ltrimCommand(redisClient *c) {$/;"	f
popnGenericCommand	t_list.c	/^void popnGenericCommand(redisClient *c, int where) {$/;"	f
pushnGenericCommand	t_list.c	/^void pushnGenericCommand(redisClient *c, int where) {$/;"	f
pushxnGenericCommand	t_list.c	/^void pushxnGenericCommand(redisClient *c, robj *refval, robj *val, int where) {$/;"	f
rpopCommand	t_list.c	/^void rpopCommand(redisClient *c) {$/;"	f
rpushCommand	t_list.c	/^void rpushCommand(redisClient *c) {$/;"	f
rpushxCommand	t_list.c	/^void rpushxCommand(redisClient *c) {$/;"	f
qsortCompareSetsByCardinality	t_set.c	/^int qsortCompareSetsByCardinality(const void *s1, const void *s2) {$/;"	f
saddCommand	t_set.c	/^void saddCommand(redisClient *c) {$/;"	f
scardCommand	t_set.c	/^void scardCommand(redisClient *c) {$/;"	f
setTypeAdd	t_set.c	/^int setTypeAdd(struct redisClient *c, robj *subject, robj *value) {$/;"	f
setTypeConvert	t_set.c	/^void setTypeConvert(robj *setobj, int enc) {$/;"	f
setTypeCreate	t_set.c	/^robj *setTypeCreate(robj *value) {$/;"	f
setTypeInitIterator	t_set.c	/^setTypeIterator *setTypeInitIterator(robj *subject) {$/;"	f
setTypeIsMember	t_set.c	/^int setTypeIsMember(robj *subject, robj *value) {$/;"	f
setTypeNext	t_set.c	/^int setTypeNext(setTypeIterator *si, robj **objele, int64_t *llele) {$/;"	f
setTypeNextObject	t_set.c	/^robj *setTypeNextObject(setTypeIterator *si) {$/;"	f
setTypeRandomElement	t_set.c	/^int setTypeRandomElement(robj *setobj, robj **objele, int64_t *llele) {$/;"	f
setTypeReleaseIterator	t_set.c	/^void setTypeReleaseIterator(setTypeIterator *si) {$/;"	f
setTypeRemove	t_set.c	/^int setTypeRemove(robj *setobj, robj *value) {$/;"	f
setTypeSize	t_set.c	/^unsigned long setTypeSize(robj *subject) {$/;"	f
sinterCommand	t_set.c	/^void sinterCommand(redisClient *c) {$/;"	f
sinterGenericCommand	t_set.c	/^void sinterGenericCommand(redisClient *c, robj **setkeys, unsigned long setnum, robj *dstkey) {$/;"	f
sinterstoreCommand	t_set.c	/^void sinterstoreCommand(redisClient *c) {$/;"	f
sismemberCommand	t_set.c	/^void sismemberCommand(redisClient *c) {$/;"	f
smoveCommand	t_set.c	/^void smoveCommand(redisClient *c) {$/;"	f
spopCommand	t_set.c	/^void spopCommand(redisClient *c) {$/;"	f
sremCommand	t_set.c	/^void sremCommand(redisClient *c) {$/;"	f
decrCommand	t_string.c	/^void decrCommand(redisClient *c) {$/;"	f
decrbyCommand	t_string.c	/^void decrbyCommand(redisClient *c) {$/;"	f
getCommand	t_string.c	/^void getCommand(redisClient *c) {$/;"	f
getGenericCommand	t_string.c	/^int getGenericCommand(redisClient *c) {$/;"	f
getsetCommand	t_string.c	/^void getsetCommand(redisClient *c) {$/;"	f
incrCommand	t_string.c	/^void incrCommand(redisClient *c) {$/;"	f
incrDecrCommand	t_string.c	/^void incrDecrCommand(redisClient *c, long long init_value, long long incr) {$/;"	f
incrbyCommand	t_string.c	/^void incrbyCommand(redisClient *c) {$/;"	f
setCommand	t_string.c	/^void setCommand(redisClient *c) {$/;"	f
setGenericCommand	t_string.c	/^void setGenericCommand(redisClient *c, int nx, robj *key, robj *val, robj *expire) {$/;"	f
setexCommand	t_string.c	/^void setexCommand(redisClient *c) {$/;"	f
setnxCommand	t_string.c	/^void setnxCommand(redisClient *c) {$/;"	f
setnxexCommand	t_string.c	/^void setnxexCommand(redisClient *c) {$/;"	f
REDIS_AGGR_MAX	t_zset.c	678;"	d	file:
REDIS_AGGR_MIN	t_zset.c	677;"	d	file:
REDIS_AGGR_SUM	t_zset.c	676;"	d	file:
VERSION_OP	t_zset.c	26;"	d	file:
dict	t_zset.c	/^    dict *dict;$/;"	m	struct:__anon7	file:
genericZrangebyscoreCommand	t_zset.c	/^void genericZrangebyscoreCommand(redisClient *c, int reverse, int justcount) {$/;"	f
max	t_zset.c	/^    double min, max;$/;"	m	struct:__anon6	file:
maxex	t_zset.c	/^    int minex, maxex; \/* are min or max exclusive? *\/$/;"	m	struct:__anon6	file:
min	t_zset.c	/^    double min, max;$/;"	m	struct:__anon6	file:
minex	t_zset.c	/^    int minex, maxex; \/* are min or max exclusive? *\/$/;"	m	struct:__anon6	file:
qsortCompareZsetopsrcByCardinality	t_zset.c	/^int qsortCompareZsetopsrcByCardinality(const void *s1, const void *s2) {$/;"	f
weight	t_zset.c	/^    double weight;$/;"	m	struct:__anon7	file:
zaddCommand	t_zset.c	/^void zaddCommand(redisClient *c) {$/;"	f
zaddGenericCommand	t_zset.c	/^void zaddGenericCommand(redisClient *c, robj *key, robj *ele, double score, int incr) {$/;"	f
zcardCommand	t_zset.c	/^void zcardCommand(redisClient *c) {$/;"	f
zcountCommand	t_zset.c	/^void zcountCommand(redisClient *c) {$/;"	f
zincrbyCommand	t_zset.c	/^void zincrbyCommand(redisClient *c) {$/;"	f
zinterstoreCommand	t_zset.c	/^void zinterstoreCommand(redisClient *c) {$/;"	f
zrangeCommand	t_zset.c	/^void zrangeCommand(redisClient *c) {$/;"	f
zrangeGenericCommand	t_zset.c	/^void zrangeGenericCommand(redisClient *c, int reverse, int withscores) {$/;"	f
zrangebyscoreCommand	t_zset.c	/^void zrangebyscoreCommand(redisClient *c) {$/;"	f
zrangespec	t_zset.c	/^} zrangespec;$/;"	t	typeref:struct:__anon6	file:
zrangewithscoreCommand	t_zset.c	/^void zrangewithscoreCommand(redisClient *c) {$/;"	f
zrankCommand	t_zset.c	/^void zrankCommand(redisClient *c) {$/;"	f
zrankGenericCommand	t_zset.c	/^void zrankGenericCommand(redisClient *c, int reverse) {$/;"	f
zremCommand	t_zset.c	/^void zremCommand(redisClient *c) {$/;"	f
zremrangebyrankCommand	t_zset.c	/^void zremrangebyrankCommand(redisClient *c) {$/;"	f
zremrangebyscoreCommand	t_zset.c	/^void zremrangebyscoreCommand(redisClient *c) {$/;"	f
zrevrangeCommand	t_zset.c	/^void zrevrangeCommand(redisClient *c) {$/;"	f
zrevrangebyscoreCommand	t_zset.c	/^void zrevrangebyscoreCommand(redisClient *c) {$/;"	f
zrevrangewithscoreCommand	t_zset.c	/^void zrevrangewithscoreCommand(redisClient *c) {$/;"	f
zrevrankCommand	t_zset.c	/^void zrevrankCommand(redisClient *c) {$/;"	f
zscoreCommand	t_zset.c	/^void zscoreCommand(redisClient *c) {$/;"	f
zsetopsrc	t_zset.c	/^} zsetopsrc;$/;"	t	typeref:struct:__anon7	file:
zslCreate	t_zset.c	/^zskiplist *zslCreate(void) {$/;"	f
zslCreateNode	t_zset.c	/^zskiplistNode *zslCreateNode(int level, double score, robj *obj) {$/;"	f
zslDelete	t_zset.c	/^int zslDelete(zskiplist *zsl, double score, robj *obj) {$/;"	f
zslDeleteNode	t_zset.c	/^void zslDeleteNode(zskiplist *zsl, zskiplistNode *x, zskiplistNode **update) {$/;"	f
zslDeleteRangeByRank	t_zset.c	/^unsigned long zslDeleteRangeByRank(zskiplist *zsl, unsigned int start, unsigned int end, dict *dict) {$/;"	f
zslDeleteRangeByScore	t_zset.c	/^unsigned long zslDeleteRangeByScore(zskiplist *zsl, zrangespec range, dict *dict) {$/;"	f
zslFirstWithScore	t_zset.c	/^zskiplistNode *zslFirstWithScore(zskiplist *zsl, double score) {$/;"	f
zslFree	t_zset.c	/^void zslFree(zskiplist *zsl) {$/;"	f
zslFreeNode	t_zset.c	/^void zslFreeNode(zskiplistNode *node) {$/;"	f
zslGetElementByRank	t_zset.c	/^zskiplistNode* zslGetElementByRank(zskiplist *zsl, unsigned long rank) {$/;"	f
zslGetRank	t_zset.c	/^unsigned long zslGetRank(zskiplist *zsl, double score, robj *o) {$/;"	f
zslInsert	t_zset.c	/^zskiplistNode *zslInsert(zskiplist *zsl, double score, robj *obj) {$/;"	f
zslParseRange	t_zset.c	/^static int zslParseRange(robj *min, robj *max, zrangespec *spec) {$/;"	f	file:
zslRandomLevel	t_zset.c	/^int zslRandomLevel(void) {$/;"	f
zunionInterAggregate	t_zset.c	/^inline static void zunionInterAggregate(double *target, double val, int aggregate) {$/;"	f	file:
zunionInterDictValue	t_zset.c	679;"	d	file:
zunionInterGenericCommand	t_zset.c	/^void zunionInterGenericCommand(redisClient *c, robj *dstkey, int op) {$/;"	f
zunionstoreCommand	t_zset.c	/^void zunionstoreCommand(redisClient *c) {$/;"	f
isObjectRepresentableAsLongLong	util.c	/^int isObjectRepresentableAsLongLong(robj *o, long long *llongval) {$/;"	f
isStringRepresentableAsLong	util.c	/^int isStringRepresentableAsLong(sds s, long *longval) {$/;"	f
isStringRepresentableAsLongLong	util.c	/^int isStringRepresentableAsLongLong(sds s, long long *llongval) {$/;"	f
ll2string	util.c	/^int ll2string(char *s, size_t len, long long value) {$/;"	f
memtoll	util.c	/^long long memtoll(const char *p, int *err) {$/;"	f
stringmatch	util.c	/^int stringmatch(const char *pattern, const char *string, int nocase) {$/;"	f
stringmatchlen	util.c	/^int stringmatchlen(const char *pattern, int patternLen,$/;"	f
ustime	util.c	/^long long ustime(void) {$/;"	f
__REDIS_UTIL_H	util.h	2;"	d
createDoubleValueItemNode	value_item_list.c	/^value_item_node* createDoubleValueItemNode(double score) {$/;"	f
createGenericValueItemNode	value_item_list.c	/^value_item_node* createGenericValueItemNode(void* buffer,uint32_t size,int type) {$/;"	f
createLongLongValueItemNode	value_item_list.c	/^value_item_node* createLongLongValueItemNode(long long llnum) {$/;"	f
createValueItemIterator	value_item_list.c	/^value_item_iterator* createValueItemIterator(value_item_list* list) {$/;"	f
createValueItemList	value_item_list.c	/^value_item_list* createValueItemList() {$/;"	f
createValueItemNode	value_item_list.c	/^value_item_node* createValueItemNode(robj* obj) {$/;"	f
freeValueItemIterator	value_item_list.c	/^void freeValueItemIterator(value_item_iterator** it) {$/;"	f
freeValueItemList	value_item_list.c	/^void freeValueItemList(value_item_list* list) {$/;"	f
freeValueItemNode	value_item_list.c	/^void freeValueItemNode(value_item_node* node) {$/;"	f
getValueItemNodeSize	value_item_list.c	/^int getValueItemNodeSize(value_item_node* node) {$/;"	f
getValueItemNodeType	value_item_list.c	/^int getValueItemNodeType(value_item_node* node) {$/;"	f
lpopValueItemNode	value_item_list.c	/^value_item_node* lpopValueItemNode(value_item_list* list) {$/;"	f
lpushDoubleValueItemNode	value_item_list.c	/^int lpushDoubleValueItemNode(value_item_list* list,double score) {$/;"	f
lpushGenericValueItemNode	value_item_list.c	/^int lpushGenericValueItemNode(value_item_list* list,void* obj,uint32_t size,int type) {$/;"	f
lpushLongLongValueItemNode	value_item_list.c	/^int lpushLongLongValueItemNode(value_item_list* list,long long llnum) {$/;"	f
lpushValueItemNode	value_item_list.c	/^int lpushValueItemNode(value_item_list* list, robj* obj) {$/;"	f
nextValueItemNode	value_item_list.c	/^value_item_node* nextValueItemNode(value_item_iterator** it) {$/;"	f
removeValueItemNode	value_item_list.c	/^void removeValueItemNode(value_item_node* node) {$/;"	f
rpopValueItemNode	value_item_list.c	/^value_item_node* rpopValueItemNode(value_item_list* list) {$/;"	f
rpushDoubleValueItemNode	value_item_list.c	/^int rpushDoubleValueItemNode(value_item_list* list,double score) {$/;"	f
rpushGenericValueItemNode	value_item_list.c	/^int rpushGenericValueItemNode(value_item_list* list,void* obj,uint32_t size,int type) {$/;"	f
rpushLongLongValueItemNode	value_item_list.c	/^int rpushLongLongValueItemNode(value_item_list* list,long long llnum) {$/;"	f
rpushValueItemNode	value_item_list.c	/^int rpushValueItemNode(value_item_list* list, robj* obj) {$/;"	f
REDIS_VERSION	version.h	1;"	d
ZIPLIST_BYTES	ziplist.c	90;"	d	file:
ZIPLIST_ENTRY_END	ziplist.c	96;"	d	file:
ZIPLIST_ENTRY_HEAD	ziplist.c	94;"	d	file:
ZIPLIST_ENTRY_TAIL	ziplist.c	95;"	d	file:
ZIPLIST_HEADER_SIZE	ziplist.c	93;"	d	file:
ZIPLIST_INCR_LENGTH	ziplist.c	100;"	d	file:
ZIPLIST_LENGTH	ziplist.c	92;"	d	file:
ZIPLIST_TAIL_OFFSET	ziplist.c	91;"	d	file:
ZIP_BIGLEN	ziplist.c	75;"	d	file:
ZIP_END	ziplist.c	74;"	d	file:
ZIP_INT_16B	ziplist.c	81;"	d	file:
ZIP_INT_32B	ziplist.c	82;"	d	file:
ZIP_INT_64B	ziplist.c	83;"	d	file:
ZIP_IS_INT	ziplist.c	87;"	d	file:
ZIP_IS_STR	ziplist.c	86;"	d	file:
ZIP_STR_06B	ziplist.c	78;"	d	file:
ZIP_STR_14B	ziplist.c	79;"	d	file:
ZIP_STR_32B	ziplist.c	80;"	d	file:
__ziplistCascadeUpdate	ziplist.c	/^static unsigned char *__ziplistCascadeUpdate(unsigned char *zl, unsigned char *p) {$/;"	f	file:
__ziplistDelete	ziplist.c	/^static unsigned char *__ziplistDelete(unsigned char *zl, unsigned char *p, unsigned int num) {$/;"	f	file:
__ziplistInsert	ziplist.c	/^static unsigned char *__ziplistInsert(unsigned char *zl, unsigned char *p, unsigned char *s, unsigned int slen) {$/;"	f	file:
createIntList	ziplist.c	/^unsigned char *createIntList() {$/;"	f
createList	ziplist.c	/^unsigned char *createList() {$/;"	f
debug	ziplist.c	801;"	d	file:
encoding	ziplist.c	/^    unsigned char encoding;$/;"	m	struct:zlentry	file:
headersize	ziplist.c	/^    unsigned int headersize;$/;"	m	struct:zlentry	file:
len	ziplist.c	/^    unsigned int lensize, len;$/;"	m	struct:zlentry	file:
lensize	ziplist.c	/^    unsigned int lensize, len;$/;"	m	struct:zlentry	file:
main	ziplist.c	/^int main(int argc, char **argv) {$/;"	f
p	ziplist.c	/^    unsigned char *p;$/;"	m	struct:zlentry	file:
pop	ziplist.c	/^void pop(unsigned char *zl, int where) {$/;"	f
prevrawlen	ziplist.c	/^    unsigned int prevrawlensize, prevrawlen;$/;"	m	struct:zlentry	file:
prevrawlensize	ziplist.c	/^    unsigned int prevrawlensize, prevrawlen;$/;"	m	struct:zlentry	file:
randstring	ziplist.c	/^int randstring(char *target, unsigned int min, unsigned int max) {$/;"	f
stress	ziplist.c	/^void stress(int pos, int num, int maxsize, int dnum) {$/;"	f
usec	ziplist.c	/^long long usec(void) {$/;"	f
zipDecodeLength	ziplist.c	/^static unsigned int zipDecodeLength(unsigned char *p, unsigned int *lensize) {$/;"	f	file:
zipEncodeLength	ziplist.c	/^static unsigned int zipEncodeLength(unsigned char *p, unsigned char encoding, unsigned int rawlen) {$/;"	f	file:
zipEntry	ziplist.c	/^static zlentry zipEntry(unsigned char *p) {$/;"	f	file:
zipEntryEncoding	ziplist.c	/^static unsigned int zipEntryEncoding(unsigned char *p) {$/;"	f	file:
zipIntSize	ziplist.c	/^static unsigned int zipIntSize(unsigned char encoding) {$/;"	f	file:
zipLoadInteger	ziplist.c	/^static int64_t zipLoadInteger(unsigned char *p, unsigned char encoding) {$/;"	f	file:
zipPrevDecodeLength	ziplist.c	/^static unsigned int zipPrevDecodeLength(unsigned char *p, unsigned int *lensize) {$/;"	f	file:
zipPrevEncodeLength	ziplist.c	/^static unsigned int zipPrevEncodeLength(unsigned char *p, unsigned int len) {$/;"	f	file:
zipPrevEncodeLengthForceLarge	ziplist.c	/^static void zipPrevEncodeLengthForceLarge(unsigned char *p, unsigned int len) {$/;"	f	file:
zipPrevLenByteDiff	ziplist.c	/^static int zipPrevLenByteDiff(unsigned char *p, unsigned int len) {$/;"	f	file:
zipRawEntryLength	ziplist.c	/^static unsigned int zipRawEntryLength(unsigned char *p) {$/;"	f	file:
zipSaveInteger	ziplist.c	/^static void zipSaveInteger(unsigned char *p, int64_t value, unsigned char encoding) {$/;"	f	file:
zipTryEncoding	ziplist.c	/^static int zipTryEncoding(unsigned char *entry, unsigned int entrylen, long long *v, unsigned char *encoding) {$/;"	f	file:
ziplistCompare	ziplist.c	/^unsigned int ziplistCompare(unsigned char *p, unsigned char *sstr, unsigned int slen) {$/;"	f
ziplistDelete	ziplist.c	/^unsigned char *ziplistDelete(unsigned char *zl, unsigned char **p) {$/;"	f
ziplistDeleteRange	ziplist.c	/^unsigned char *ziplistDeleteRange(unsigned char *zl, unsigned int index, unsigned int num) {$/;"	f
ziplistGet	ziplist.c	/^unsigned int ziplistGet(unsigned char *p, unsigned char **sstr, unsigned int *slen, long long *sval) {$/;"	f
ziplistIndex	ziplist.c	/^unsigned char *ziplistIndex(unsigned char *zl, int index) {$/;"	f
ziplistInsert	ziplist.c	/^unsigned char *ziplistInsert(unsigned char *zl, unsigned char *p, unsigned char *s, unsigned int slen) {$/;"	f
ziplistLen	ziplist.c	/^unsigned int ziplistLen(unsigned char *zl) {$/;"	f
ziplistNew	ziplist.c	/^unsigned char *ziplistNew(void) {$/;"	f
ziplistNext	ziplist.c	/^unsigned char *ziplistNext(unsigned char *zl, unsigned char *p) {$/;"	f
ziplistPrev	ziplist.c	/^unsigned char *ziplistPrev(unsigned char *zl, unsigned char *p) {$/;"	f
ziplistPush	ziplist.c	/^unsigned char *ziplistPush(unsigned char *zl, unsigned char *s, unsigned int slen, int where) {$/;"	f
ziplistRepr	ziplist.c	/^void ziplistRepr(unsigned char *zl) {$/;"	f
ziplistResize	ziplist.c	/^static unsigned char *ziplistResize(unsigned char *zl, unsigned int len) {$/;"	f	file:
ziplistSize	ziplist.c	/^unsigned int ziplistSize(unsigned char *zl) {$/;"	f
zlentry	ziplist.c	/^typedef struct zlentry {$/;"	s	file:
zlentry	ziplist.c	/^} zlentry;$/;"	t	typeref:struct:zlentry	file:
ZIPLIST_HEAD	ziplist.h	1;"	d
ZIPLIST_TAIL	ziplist.h	2;"	d
ZIPMAP_BIGLEN	zipmap.c	84;"	d	file:
ZIPMAP_END	zipmap.c	85;"	d	file:
ZIPMAP_LEN_BYTES	zipmap.c	94;"	d	file:
ZIPMAP_VALUE_MAX_FREE	zipmap.c	89;"	d	file:
main	zipmap.c	/^int main(void) {$/;"	f
zipmapDecodeLength	zipmap.c	/^static unsigned int zipmapDecodeLength(unsigned char *p) {$/;"	f	file:
zipmapEncodeLength	zipmap.c	/^static unsigned int zipmapEncodeLength(unsigned char *p, unsigned int len) {$/;"	f	file:
zipmapRawKeyLength	zipmap.c	/^static unsigned int zipmapRawKeyLength(unsigned char *p) {$/;"	f	file:
zipmapRawValueLength	zipmap.c	/^static unsigned int zipmapRawValueLength(unsigned char *p) {$/;"	f	file:
zipmapResize	zipmap.c	/^static inline unsigned char *zipmapResize(unsigned char *zm, unsigned int len) {$/;"	f	file:
zipmapXDel	zipmap.c	/^unsigned char *zipmapXDel(unsigned char *zm, unsigned char *key, unsigned int klen, int *deleted) {$/;"	f
zipmapXExists	zipmap.c	/^int zipmapXExists(unsigned char **zm, unsigned char *key,$/;"	f
zipmapXGet	zipmap.c	/^int zipmapXGet(unsigned char **zm, unsigned char *key, unsigned int klen,$/;"	f
zipmapXLen	zipmap.c	/^unsigned int zipmapXLen(unsigned char *zm) {$/;"	f
zipmapXLookupRaw	zipmap.c	/^static unsigned char *zipmapXLookupRaw(unsigned char *zm, unsigned char *key,$/;"	f	file:
zipmapXNew	zipmap.c	/^unsigned char *zipmapXNew(void) {$/;"	f
zipmapXNext	zipmap.c	/^unsigned char *zipmapXNext(unsigned char *zm, unsigned char **key, unsigned int *klen,$/;"	f
zipmapXRawEntryLength	zipmap.c	/^static unsigned int zipmapXRawEntryLength(unsigned char *p) {$/;"	f	file:
zipmapXRepr	zipmap.c	/^void zipmapXRepr(unsigned char *p) {$/;"	f
zipmapXRequiredLength	zipmap.c	/^static unsigned long zipmapXRequiredLength(unsigned int klen, unsigned int vlen) {$/;"	f	file:
zipmapXRewind	zipmap.c	/^unsigned char *zipmapXRewind(unsigned char *zm) {$/;"	f
zipmapXSet	zipmap.c	/^unsigned char *zipmapXSet(unsigned char *zm, unsigned char *key, unsigned int klen,$/;"	f
_ZIPMAP_H	zipmap.h	36;"	d
PREFIX_SIZE	zmalloc.c	40;"	d	file:
PREFIX_SIZE	zmalloc.c	43;"	d	file:
PREFIX_SIZE	zmalloc.c	45;"	d	file:
calloc	zmalloc.c	52;"	d	file:
db_used_memory	zmalloc.c	/^static size_t db_used_memory[MAX_DBNUM];$/;"	v	file:
dbnum	zmalloc.c	/^static __thread int dbnum;$/;"	v	file:
free	zmalloc.c	54;"	d	file:
get_malloc_dbnum	zmalloc.c	/^int get_malloc_dbnum() {$/;"	f
init_db_used_memory	zmalloc.c	/^void init_db_used_memory() {$/;"	f
malloc	zmalloc.c	51;"	d	file:
realloc	zmalloc.c	53;"	d	file:
redis_zcalloc	zmalloc.c	/^void *redis_zcalloc(size_t size) {$/;"	f
set_malloc_dbnum	zmalloc.c	/^void set_malloc_dbnum(int n) {$/;"	f
update_zmalloc_stat_alloc	zmalloc.c	58;"	d	file:
update_zmalloc_stat_free	zmalloc.c	72;"	d	file:
used_memory	zmalloc.c	/^static size_t used_memory = 0;$/;"	v	file:
used_memory_mutex	zmalloc.c	/^static pthread_mutex_t used_memory_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
zfree	zmalloc.c	/^void zfree(void *ptr) {$/;"	f
zfree_simple	zmalloc.c	/^void zfree_simple(void *ptr) {$/;"	f
zmalloc	zmalloc.c	/^void *zmalloc(size_t size) {$/;"	f
zmalloc_db_used_memory	zmalloc.c	/^size_t zmalloc_db_used_memory(int id) {$/;"	f
zmalloc_enable_thread_safeness	zmalloc.c	/^void zmalloc_enable_thread_safeness(void) {$/;"	f
zmalloc_get_fragmentation_ratio	zmalloc.c	/^float zmalloc_get_fragmentation_ratio(void) {$/;"	f
zmalloc_get_rss	zmalloc.c	/^size_t zmalloc_get_rss(void) {$/;"	f
zmalloc_oom	zmalloc.c	/^static void zmalloc_oom(size_t size) {$/;"	f	file:
zmalloc_simple	zmalloc.c	/^void *zmalloc_simple(size_t size) {$/;"	f
zmalloc_thread_safe	zmalloc.c	/^static int zmalloc_thread_safe = 0;$/;"	v	file:
zmalloc_thread_safeness	zmalloc.c	/^int zmalloc_thread_safeness(void) {$/;"	f
zmalloc_used_memory	zmalloc.c	/^size_t zmalloc_used_memory(void) {$/;"	f
zrealloc	zmalloc.c	/^void *zrealloc(void *ptr, size_t size) {$/;"	f
zstrdup	zmalloc.c	/^char *zstrdup(const char *s) {$/;"	f
_ZMALLOC_H	zmalloc.h	32;"	d
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_PROGRAM_VERSION	5.8	//
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
