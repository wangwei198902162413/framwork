MdbShmReader	scripts\mdbshm_reader.py	/^class MdbShmReader: $/;"	c
__init__	scripts\mdbshm_reader.py	/^	def __init__(self,filename):$/;"	m	class:MdbShmReader
getBitMapInfo	scripts\mdbshm_reader.py	/^	def getBitMapInfo(self):$/;"	m	class:MdbShmReader
getCacheInfo	scripts\mdbshm_reader.py	/^	def getCacheInfo(self):$/;"	m	class:MdbShmReader
getHashInfo	scripts\mdbshm_reader.py	/^	def getHashInfo(self):$/;"	m	class:MdbShmReader
getHashTable	scripts\mdbshm_reader.py	/^	def getHashTable(self):$/;"	m	class:MdbShmReader
getPoolInfo	scripts\mdbshm_reader.py	/^	def getPoolInfo(self):$/;"	m	class:MdbShmReader
getSlabInfo	scripts\mdbshm_reader.py	/^	def getSlabInfo(self):$/;"	m	class:MdbShmReader
getStatInfo	scripts\mdbshm_reader.py	/^	def getStatInfo(self):$/;"	m	class:MdbShmReader
getopt	scripts\mdbshm_reader.py	/^import getopt;$/;"	i
idToDetail	scripts\mdbshm_reader.py	/^	def idToDetail(id):$/;"	m	class:MdbShmReader
main	scripts\mdbshm_reader.py	/^def main():$/;"	f
namedtuple	scripts\mdbshm_reader.py	/^from collections import namedtuple;$/;"	i
readFile	scripts\mdbshm_reader.py	/^	def readFile(self):$/;"	m	class:MdbShmReader
sys	scripts\mdbshm_reader.py	/^import sys;$/;"	i
usage	scripts\mdbshm_reader.py	/^def usage():$/;"	f
whichSlab	scripts\mdbshm_reader.py	/^def whichSlab(size):$/;"	f
check_folder	scripts\tair.sh	/^check_folder()$/;"	f
clean	scripts\tair.sh	/^clean()$/;"	f
log_debug2info	scripts\tair.sh	/^log_debug2info()$/;"	f
log_debug2warn	scripts\tair.sh	/^log_debug2warn()$/;"	f
log_info2debug	scripts\tair.sh	/^log_info2debug()$/;"	f
log_warn2debug	scripts\tair.sh	/^log_warn2debug()$/;"	f
start_cs	scripts\tair.sh	/^start_cs()$/;"	f
start_ds	scripts\tair.sh	/^start_ds()$/;"	f
stop_cs	scripts\tair.sh	/^stop_cs()$/;"	f
stop_ds	scripts\tair.sh	/^stop_ds()$/;"	f
tobdb	scripts\tair.sh	/^tobdb()$/;"	f
tofdb	scripts\tair.sh	/^tofdb()$/;"	f
tomdb	scripts\tair.sh	/^tomdb()$/;"	f
tomdb_shm	scripts\tair.sh	/^tomdb_shm()$/;"	f
tordb	scripts\tair.sh	/^tordb()$/;"	f
valgrind_stop_all	scripts\tair.sh	/^valgrind_stop_all()$/;"	f
cancel	src\client\tair_client.cpp	/^   void tair_client::cancel()$/;"	f	class:tair::tair_client
canonical_key	src\client\tair_client.cpp	/^   char *tair_client::canonical_key(char *key, char **akey, int *size)$/;"	f	class:tair::tair_client
do_cmd_addcount	src\client\tair_client.cpp	/^   void tair_client::do_cmd_addcount(VSTRING &param)$/;"	f	class:tair::tair_client
do_cmd_dump_area	src\client\tair_client.cpp	/^   void tair_client::do_cmd_dump_area(VSTRING &param)$/;"	f	class:tair::tair_client
do_cmd_get	src\client\tair_client.cpp	/^   void tair_client::do_cmd_get(VSTRING &param)$/;"	f	class:tair::tair_client
do_cmd_hdel	src\client\tair_client.cpp	/^   void tair_client::do_cmd_hdel(VSTRING &param) {$/;"	f	class:tair::tair_client
do_cmd_help	src\client\tair_client.cpp	/^   void tair_client::do_cmd_help(VSTRING &param)$/;"	f	class:tair::tair_client
do_cmd_hget	src\client\tair_client.cpp	/^   void tair_client::do_cmd_hget(VSTRING &param) {$/;"	f	class:tair::tair_client
do_cmd_hgetall	src\client\tair_client.cpp	/^   void tair_client::do_cmd_hgetall(VSTRING &param) {$/;"	f	class:tair::tair_client
do_cmd_hmget	src\client\tair_client.cpp	/^   void tair_client::do_cmd_hmget(VSTRING &param) {$/;"	f	class:tair::tair_client
do_cmd_hmset	src\client\tair_client.cpp	/^   void tair_client::do_cmd_hmset(VSTRING &param) {$/;"	f	class:tair::tair_client
do_cmd_hset	src\client\tair_client.cpp	/^   void tair_client::do_cmd_hset(VSTRING &param) {$/;"	f	class:tair::tair_client
do_cmd_lazy_remove_area	src\client\tair_client.cpp	/^   void tair_client::do_cmd_lazy_remove_area(VSTRING &param)$/;"	f	class:tair::tair_client
do_cmd_lindex	src\client\tair_client.cpp	/^   void tair_client::do_cmd_lindex(VSTRING &param) {$/;"	f	class:tair::tair_client
do_cmd_lpop	src\client\tair_client.cpp	/^   void tair_client::do_cmd_lpop(VSTRING &param) {$/;"	f	class:tair::tair_client
do_cmd_lpush	src\client\tair_client.cpp	/^   void tair_client::do_cmd_lpush(VSTRING &param) {$/;"	f	class:tair::tair_client
do_cmd_lrpop	src\client\tair_client.cpp	/^   void tair_client::do_cmd_lrpop(int pcode, VSTRING &param) {$/;"	f	class:tair::tair_client
do_cmd_lrpush	src\client\tair_client.cpp	/^   void tair_client::do_cmd_lrpush(int pcode, VSTRING &param) {$/;"	f	class:tair::tair_client
do_cmd_mget	src\client\tair_client.cpp	/^   void tair_client::do_cmd_mget(VSTRING &param)$/;"	f	class:tair::tair_client
do_cmd_mremove	src\client\tair_client.cpp	/^   void tair_client::do_cmd_mremove(VSTRING &param)$/;"	f	class:tair::tair_client
do_cmd_put	src\client\tair_client.cpp	/^   void tair_client::do_cmd_put(VSTRING &param)$/;"	f	class:tair::tair_client
do_cmd_quit	src\client\tair_client.cpp	/^   void tair_client::do_cmd_quit(VSTRING &param)$/;"	f	class:tair::tair_client
do_cmd_remove	src\client\tair_client.cpp	/^   void tair_client::do_cmd_remove(VSTRING &param)$/;"	f	class:tair::tair_client
do_cmd_remove_area	src\client\tair_client.cpp	/^   void tair_client::do_cmd_remove_area(VSTRING &param)$/;"	f	class:tair::tair_client
do_cmd_rpop	src\client\tair_client.cpp	/^   void tair_client::do_cmd_rpop(VSTRING &param) {$/;"	f	class:tair::tair_client
do_cmd_rpush	src\client\tair_client.cpp	/^   void tair_client::do_cmd_rpush(VSTRING &param) {$/;"	f	class:tair::tair_client
do_cmd_sadd	src\client\tair_client.cpp	/^   void tair_client::do_cmd_sadd(VSTRING &param) {$/;"	f	class:tair::tair_client
do_cmd_smembers	src\client\tair_client.cpp	/^   void tair_client::do_cmd_smembers(VSTRING &param) {$/;"	f	class:tair::tair_client
do_cmd_srem	src\client\tair_client.cpp	/^   void tair_client::do_cmd_srem(VSTRING &param) {$/;"	f	class:tair::tair_client
do_cmd_stat	src\client\tair_client.cpp	/^   void tair_client::do_cmd_stat(VSTRING &param) {$/;"	f	class:tair::tair_client
input	src\client\tair_client.cpp	/^   char* tair_client::input(char *buffer, size_t size) {$/;"	f	class:tair::tair_client
main	src\client\tair_client.cpp	/^int main(int argc, char *argv[])$/;"	f
parse_cmd	src\client\tair_client.cpp	/^   cmd_call tair_client::parse_cmd(char *key, VSTRING &param)$/;"	f	class:tair::tair_client
parse_cmd_line	src\client\tair_client.cpp	/^   bool tair_client::parse_cmd_line(int argc, char *const argv[])$/;"	f	class:tair::tair_client
print_help	src\client\tair_client.cpp	/^   void tair_client::print_help(const char *cmd)$/;"	f	class:tair::tair_client
print_usage	src\client\tair_client.cpp	/^   void tair_client::print_usage(char *prog_name)$/;"	f	class:tair::tair_client
sign_handler	src\client\tair_client.cpp	/^void sign_handler(int sig)$/;"	f
start	src\client\tair_client.cpp	/^   bool tair_client::start()$/;"	f	class:tair::tair_client
tair	src\client\tair_client.cpp	/^namespace tair {$/;"	n	file:
tair_client	src\client\tair_client.cpp	/^   tair_client::tair_client()$/;"	f	class:tair::tair_client
update_history	src\client\tair_client.cpp	/^   void tair_client::update_history(const char *line) {$/;"	f	class:tair::tair_client
~tair_client	src\client\tair_client.cpp	/^   tair_client::~tair_client()$/;"	f	class:tair::tair_client
CMD_MAX_LEN	src\client\tair_client.hpp	40;"	d
TAIR_CLIENT_H	src\client\tair_client.hpp	16;"	d
VSTRING	src\client\tair_client.hpp	/^  typedef vector<char*> VSTRING;$/;"	t	namespace:tair
client_helper	src\client\tair_client.hpp	/^      tair_client_impl client_helper;$/;"	m	class:tair::tair_client
cmd_call	src\client\tair_client.hpp	/^  typedef void (tair_client::*cmd_call)(VSTRING &param);$/;"	t	namespace:tair
cmd_file_name	src\client\tair_client.hpp	/^      char *cmd_file_name;$/;"	m	class:tair::tair_client
cmd_line	src\client\tair_client.hpp	/^      char *cmd_line;$/;"	m	class:tair::tair_client
cmd_map	src\client\tair_client.hpp	/^      str_cmdcall_map cmd_map;$/;"	m	class:tair::tair_client
default_area	src\client\tair_client.hpp	/^      int default_area;$/;"	m	class:tair::tair_client
group_name	src\client\tair_client.hpp	/^      char *group_name;$/;"	m	class:tair::tair_client
is_cancel	src\client\tair_client.hpp	/^      bool is_cancel;$/;"	m	class:tair::tair_client
is_config_server	src\client\tair_client.hpp	/^      bool is_config_server;$/;"	m	class:tair::tair_client
key_format	src\client\tair_client.hpp	/^      int key_format;$/;"	m	class:tair::tair_client
server_addr	src\client\tair_client.hpp	/^      const char *server_addr;$/;"	m	class:tair::tair_client
slave_server_addr	src\client\tair_client.hpp	/^      const char *slave_server_addr;$/;"	m	class:tair::tair_client
str_cmdcall_map	src\client\tair_client.hpp	/^  typedef map<string, cmd_call> str_cmdcall_map;$/;"	t	namespace:tair
str_cmdcall_map_iter	src\client\tair_client.hpp	/^  typedef str_cmdcall_map::iterator str_cmdcall_map_iter;$/;"	t	namespace:tair
tair	src\client\tair_client.hpp	/^namespace tair {$/;"	n
tair_client	src\client\tair_client.hpp	/^  class tair_client {$/;"	c	namespace:tair
add_count	src\client\tair_client_api.cpp	/^  int tair_client_api::add_count(int area,$/;"	f	class:tair::tair_client_api
close	src\client\tair_client_api.cpp	/^  void tair_client_api::close()$/;"	f	class:tair::tair_client_api
decr	src\client\tair_client_api.cpp	/^  int tair_client_api::decr(int area,$/;"	f	class:tair::tair_client_api
get	src\client\tair_client_api.cpp	/^  int tair_client_api::get(int area,$/;"	f	class:tair::tair_client_api
get_bucket_count	src\client\tair_client_api.cpp	/^  uint32_t tair_client_api::get_bucket_count() const$/;"	f	class:tair::tair_client_api
get_copy_count	src\client\tair_client_api.cpp	/^  uint32_t tair_client_api::get_copy_count() const$/;"	f	class:tair::tair_client_api
get_error_msg	src\client\tair_client_api.cpp	/^  const char *tair_client_api::get_error_msg(int ret)$/;"	f	class:tair::tair_client_api
get_server_with_key	src\client\tair_client_api.cpp	/^  void tair_client_api::get_server_with_key(const data_entry& key,std::vector<std::string>& servers) const$/;"	f	class:tair::tair_client_api
hdel	src\client\tair_client_api.cpp	/^  int tair_client_api::hdel(const int area, const data_entry &key, const data_entry &field,$/;"	f	class:tair::tair_client_api
hget	src\client\tair_client_api.cpp	/^  int tair_client_api::hget(const int area, const data_entry &key, const data_entry &field,$/;"	f	class:tair::tair_client_api
hgetall	src\client\tair_client_api.cpp	/^  int tair_client_api::hgetall(const int area, const data_entry &key, map<data_entry*, data_entry*> &field_values) {$/;"	f	class:tair::tair_client_api
hmget	src\client\tair_client_api.cpp	/^  int tair_client_api::hmget(const int area, const data_entry &key, const vector<data_entry*> &fields,$/;"	f	class:tair::tair_client_api
hmset	src\client\tair_client_api.cpp	/^  int tair_client_api::hmset(const int area, const data_entry &key,$/;"	f	class:tair::tair_client_api
hset	src\client\tair_client_api.cpp	/^  int tair_client_api::hset(const int area, const data_entry &key, const data_entry &field,$/;"	f	class:tair::tair_client_api
incr	src\client\tair_client_api.cpp	/^  int tair_client_api::incr(int area,$/;"	f	class:tair::tair_client_api
lindex	src\client\tair_client_api.cpp	/^  int tair_client_api::lindex(int area, data_entry &key, int index, data_entry &value)$/;"	f	class:tair::tair_client_api
lpop	src\client\tair_client_api.cpp	/^  int tair_client_api::lpop(int area, data_entry &key, int count, vector<data_entry*> &values,$/;"	f	class:tair::tair_client_api
lpush	src\client\tair_client_api.cpp	/^  int tair_client_api::lpush(int area, data_entry &key, vector<data_entry*> &values,$/;"	f	class:tair::tair_client_api
lrange	src\client\tair_client_api.cpp	/^  int tair_client_api::lrange(int area, data_entry &key, int start, int end, vector<data_entry*> &values)$/;"	f	class:tair::tair_client_api
mdelete	src\client\tair_client_api.cpp	/^  int tair_client_api::mdelete(int area,$/;"	f	class:tair::tair_client_api
mget	src\client\tair_client_api.cpp	/^  int tair_client_api::mget(int area,$/;"	f	class:tair::tair_client_api
minvalid	src\client\tair_client_api.cpp	/^  int tair_client_api::minvalid(int area,$/;"	f	class:tair::tair_client_api
put	src\client\tair_client_api.cpp	/^  int tair_client_api::put(int area,$/;"	f	class:tair::tair_client_api
remove	src\client\tair_client_api.cpp	/^  int tair_client_api::remove(int area,$/;"	f	class:tair::tair_client_api
remove_area	src\client\tair_client_api.cpp	/^  int tair_client_api::remove_area(int area)$/;"	f	class:tair::tair_client_api
rpop	src\client\tair_client_api.cpp	/^  int tair_client_api::rpop(int area, data_entry &key, int count, vector<data_entry*> &values,$/;"	f	class:tair::tair_client_api
rpush	src\client\tair_client_api.cpp	/^  int tair_client_api::rpush(int area, data_entry &key, vector<data_entry*> &values,$/;"	f	class:tair::tair_client_api
sadd	src\client\tair_client_api.cpp	/^  int tair_client_api::sadd(const int area, const data_entry &key, const data_entry &value,$/;"	f	class:tair::tair_client_api
set_timeout	src\client\tair_client_api.cpp	/^  void tair_client_api::set_timeout(int timeout)$/;"	f	class:tair::tair_client_api
smembers	src\client\tair_client_api.cpp	/^  int tair_client_api::smembers(const int area, const data_entry &key, vector<data_entry*> &values) {$/;"	f	class:tair::tair_client_api
srem	src\client\tair_client_api.cpp	/^  int tair_client_api::srem(const int area, const data_entry &key, const data_entry &value,$/;"	f	class:tair::tair_client_api
startup	src\client\tair_client_api.cpp	/^  bool tair_client_api::startup(const char *master_addr,const char *slave_addr,const char *group_name)$/;"	f	class:tair::tair_client_api
tair	src\client\tair_client_api.cpp	/^namespace tair {$/;"	n	file:
tair_client_api	src\client\tair_client_api.cpp	/^  tair_client_api::tair_client_api()$/;"	f	class:tair::tair_client_api
~tair_client_api	src\client\tair_client_api.cpp	/^  tair_client_api::~tair_client_api()$/;"	f	class:tair::tair_client_api
ADD_ITEMS	src\client\tair_client_api.hpp	246;"	d
ALL_ITEMS	src\client\tair_client_api.hpp	/^      static const int ALL_ITEMS = MAX_ITEMS + 1;$/;"	m	class:tair::tair_client_api
GET_ITEMS_FUNC	src\client\tair_client_api.hpp	267;"	d
MAX_ITEMS	src\client\tair_client_api.hpp	/^      static const int MAX_ITEMS = 65535;$/;"	m	class:tair::tair_client_api
TAIR_CLIENT_API	src\client\tair_client_api.hpp	16;"	d
impl	src\client\tair_client_api.hpp	/^      tair_client_impl *impl;$/;"	m	class:tair::tair_client_api
tair	src\client\tair_client_api.hpp	/^namespace tair {$/;"	n
tair_client_api	src\client\tair_client_api.hpp	/^  class tair_client_api$/;"	c	namespace:tair
add_count	src\client\tair_client_api_impl.cpp	/^  int tair_client_impl::add_count(int area,$/;"	f	class:tair::tair_client_impl
close	src\client\tair_client_api_impl.cpp	/^  void tair_client_impl::close()$/;"	f	class:tair::tair_client_impl
data_entry_check	src\client\tair_client_api_impl.cpp	/^  bool tair_client_impl::data_entry_check(const data_entry& data)$/;"	f	class:tair::tair_client_impl
dump_area	src\client\tair_client_api_impl.cpp	/^  int tair_client_impl::dump_area(set<dump_meta_info>& info)$/;"	f	class:tair::tair_client_impl
force_change_dataserver_status	src\client\tair_client_api_impl.cpp	/^  void tair_client_impl::force_change_dataserver_status(uint64_t server_id, int cmd)$/;"	f	class:tair::tair_client_impl
get	src\client\tair_client_api_impl.cpp	/^  int tair_client_impl::get(int area, const data_entry &key, data_entry* &data )$/;"	f	class:tair::tair_client_impl
get_error_msg	src\client\tair_client_api_impl.cpp	/^  const char *tair_client_impl::get_error_msg(int ret)$/;"	f	class:tair::tair_client_impl
get_migrate_status	src\client\tair_client_api_impl.cpp	/^  void tair_client_impl::get_migrate_status(uint64_t server_id,vector<pair<uint64_t,uint32_t> >& result)$/;"	f	class:tair::tair_client_impl
get_response	src\client\tair_client_api_impl.cpp	/^  int tair_client_impl::get_response(wait_object *cwo, int wait_count, vector<base_packet*>& tpacket)$/;"	f	class:tair::tair_client_impl
get_response	src\client\tair_client_api_impl.cpp	/^  int tair_client_impl::get_response(wait_object *cwo,int wait_count,base_packet*& tpacket)$/;"	f	class:tair::tair_client_impl
get_server_id	src\client\tair_client_api_impl.cpp	/^  bool tair_client_impl::get_server_id(const data_entry &key, vector<uint64_t>& server)$/;"	f	class:tair::tair_client_impl
get_server_id	src\client\tair_client_api_impl.cpp	/^  bool tair_client_impl::get_server_id(uint32_t hash, vector<uint64_t>& server)$/;"	f	class:tair::tair_client_impl
get_server_with_key	src\client\tair_client_api_impl.cpp	/^  void tair_client_impl::get_server_with_key(const data_entry& key,std::vector<std::string>& servers)$/;"	f	class:tair::tair_client_impl
handlePacket	src\client\tair_client_api_impl.cpp	/^  tbnet::IPacketHandler::HPRetCode tair_client_impl::handlePacket(tbnet::Packet *packet, void *args)$/;"	f	class:tair::tair_client_impl
hdel	src\client\tair_client_api_impl.cpp	/^  int tair_client_impl::hdel(const int area, const data_entry &key, const data_entry &field,$/;"	f	class:tair::tair_client_impl
hget	src\client\tair_client_api_impl.cpp	/^  int tair_client_impl::hget(const int area, const data_entry &key, const data_entry &field,$/;"	f	class:tair::tair_client_impl
hgetall	src\client\tair_client_api_impl.cpp	/^  int tair_client_impl::hgetall(const int area, const data_entry &key,$/;"	f	class:tair::tair_client_impl
hmget	src\client\tair_client_api_impl.cpp	/^  int tair_client_impl::hmget(const int area, const data_entry &key, const vector<data_entry*> &fields,$/;"	f	class:tair::tair_client_impl
hmset	src\client\tair_client_api_impl.cpp	/^  int tair_client_impl::hmset(const int area, const data_entry &key, const map<data_entry*, data_entry*> &field_values,$/;"	f	class:tair::tair_client_impl
hset	src\client\tair_client_api_impl.cpp	/^  int tair_client_impl::hset(const int area, const data_entry &key, const data_entry &field,$/;"	f	class:tair::tair_client_impl
init_errmsg	src\client\tair_client_api_impl.cpp	/^  std::map<int,string> tair_client_impl::init_errmsg()$/;"	f	class:tair::tair_client_impl
init_request_map	src\client\tair_client_api_impl.cpp	/^  int tair_client_impl::init_request_map(int area, vector<data_entry *>& keys, request_remove_map &request_removes)$/;"	f	class:tair::tair_client_impl
init_request_map	src\client\tair_client_api_impl.cpp	/^  int tair_client_impl::init_request_map(int area, vector<data_entry *>& keys,$/;"	f	class:tair::tair_client_impl
initialize	src\client\tair_client_api_impl.cpp	/^  bool tair_client_impl::initialize()$/;"	f	class:tair::tair_client_impl
key_entry_check	src\client\tair_client_api_impl.cpp	/^  bool tair_client_impl::key_entry_check(const data_entry& key)$/;"	f	class:tair::tair_client_impl
lindex	src\client\tair_client_api_impl.cpp	/^  int tair_client_impl::lindex(int area, data_entry &key, int index, data_entry &value)$/;"	f	class:tair::tair_client_impl
lpop	src\client\tair_client_api_impl.cpp	/^  int tair_client_impl::lpop(int area, data_entry &key, int count, vector<data_entry*> &values,$/;"	f	class:tair::tair_client_impl
lpush	src\client\tair_client_api_impl.cpp	/^  int tair_client_impl::lpush(int area, data_entry &key, vector<data_entry*> &values,$/;"	f	class:tair::tair_client_impl
lrange	src\client\tair_client_api_impl.cpp	/^  int tair_client_impl::lrange(int area, data_entry &key, int start, int end, vector<data_entry*> &values)$/;"	f	class:tair::tair_client_impl
lrpop	src\client\tair_client_api_impl.cpp	/^  int tair_client_impl::lrpop(int pcode, int area, data_entry &key, int count, vector<data_entry*> &values,$/;"	f	class:tair::tair_client_impl
lrpush	src\client\tair_client_api_impl.cpp	/^  int tair_client_impl::lrpush(int pcode, int area, data_entry &key, vector<data_entry*> &values,$/;"	f	class:tair::tair_client_impl
m_errmsg	src\client\tair_client_api_impl.cpp	/^  const std::map<int,string> tair_client_impl::m_errmsg = tair_client_impl::init_errmsg();$/;"	m	class:tair::tair_client_impl	file:
map_data_check	src\client\tair_client_api_impl.cpp	/^  bool tair_client_impl::map_data_check(const map<data_entry*, data_entry*> &md)$/;"	f	class:tair::tair_client_impl
mdelete	src\client\tair_client_api_impl.cpp	/^  int tair_client_impl::mdelete(int area, vector<data_entry*> &keys)$/;"	f	class:tair::tair_client_impl
mget	src\client\tair_client_api_impl.cpp	/^  int tair_client_impl::mget(int area, vector<data_entry*> &keys, tair_keyvalue_map &data)$/;"	f	class:tair::tair_client_impl
mget_impl	src\client\tair_client_api_impl.cpp	/^  int tair_client_impl::mget_impl(int area, vector<data_entry*> &keys, tair_keyvalue_map &data, int server_select)$/;"	f	class:tair::tair_client_impl
put	src\client\tair_client_api_impl.cpp	/^  int tair_client_impl::put(int area,$/;"	f	class:tair::tair_client_impl
query_from_configserver	src\client\tair_client_api_impl.cpp	/^  void tair_client_impl::query_from_configserver(uint32_t query_type, const string group_name, map<string, string>& out, uint64_t serverId)$/;"	f	class:tair::tair_client_impl
remove	src\client\tair_client_api_impl.cpp	/^  int tair_client_impl::remove(int area, const data_entry &key)$/;"	f	class:tair::tair_client_impl
remove_area	src\client\tair_client_api_impl.cpp	/^  int tair_client_impl::remove_area(int area, bool lazy)$/;"	f	class:tair::tair_client_impl
reset	src\client\tair_client_api_impl.cpp	/^  void tair_client_impl::reset() \/\/reset enviroment$/;"	f	class:tair::tair_client_impl
retrieve_server_addr	src\client\tair_client_api_impl.cpp	/^  bool tair_client_impl::retrieve_server_addr()$/;"	f	class:tair::tair_client_impl
rpop	src\client\tair_client_api_impl.cpp	/^  int tair_client_impl::rpop(int area, data_entry &key, int count, vector<data_entry*> &values,$/;"	f	class:tair::tair_client_impl
rpush	src\client\tair_client_api_impl.cpp	/^  int tair_client_impl::rpush(int area, data_entry &key, vector<data_entry*> &values,$/;"	f	class:tair::tair_client_impl
run	src\client\tair_client_api_impl.cpp	/^  void tair_client_impl::run(tbsys::CThread *thread, void *arg)$/;"	f	class:tair::tair_client_impl
sadd	src\client\tair_client_api_impl.cpp	/^  int tair_client_impl::sadd(const int area, const data_entry &key, const data_entry &value,$/;"	f	class:tair::tair_client_impl
send_packet	src\client\tair_client_api_impl.cpp	/^  int tair_client_impl::send_packet(const data_entry &key, base_packet* spacket)$/;"	f	class:tair::tair_client_impl
send_packet	src\client\tair_client_api_impl.cpp	/^  int tair_client_impl::send_packet(const uint32_t hash, base_packet* spacket)$/;"	f	class:tair::tair_client_impl
send_request	src\client\tair_client_api_impl.cpp	/^  int tair_client_impl::send_request(uint64_t server_id, base_packet *packet, int waitId)$/;"	f	class:tair::tair_client_impl
set_timeout	src\client\tair_client_api_impl.cpp	/^  void tair_client_impl::set_timeout(int this_timeout)$/;"	f	class:tair::tair_client_impl
smembers	src\client\tair_client_api_impl.cpp	/^  int tair_client_impl::smembers(const int area, const data_entry &key, vector<data_entry*> &values) {$/;"	f	class:tair::tair_client_impl
srem	src\client\tair_client_api_impl.cpp	/^  int tair_client_impl::srem(const int area, const data_entry &key, const data_entry &value,$/;"	f	class:tair::tair_client_impl
start_tbnet	src\client\tair_client_api_impl.cpp	/^  void tair_client_impl::start_tbnet()$/;"	f	class:tair::tair_client_impl
startup	src\client\tair_client_api_impl.cpp	/^  bool tair_client_impl::startup(const char *master_addr,const char *slave_addr,const char *group_name)$/;"	f	class:tair::tair_client_impl
startup	src\client\tair_client_api_impl.cpp	/^  bool tair_client_impl::startup(uint64_t dataserver)$/;"	f	class:tair::tair_client_impl
startup	src\client\tair_client_api_impl.cpp	/^  bool tair_client_impl::startup(uint64_t master_cfgsvr, uint64_t slave_cfgsvr, const char *group_name)$/;"	f	class:tair::tair_client_impl
stop_tbnet	src\client\tair_client_api_impl.cpp	/^  void tair_client_impl::stop_tbnet()$/;"	f	class:tair::tair_client_impl
tair	src\client\tair_client_api_impl.cpp	/^namespace tair {$/;"	n	file:
vector_data_check	src\client\tair_client_api_impl.cpp	/^  bool tair_client_impl::vector_data_check(const vector<data_entry*> &vd)$/;"	f	class:tair::tair_client_impl
vector_key_check	src\client\tair_client_api_impl.cpp	/^  bool tair_client_impl::vector_key_check(const vector<data_entry*> &vk)$/;"	f	class:tair::tair_client_impl
wait_tbnet	src\client\tair_client_api_impl.cpp	/^  void tair_client_impl::wait_tbnet()$/;"	f	class:tair::tair_client_impl
~tair_client_impl	src\client\tair_client_api_impl.cpp	/^  tair_client_impl::~tair_client_impl()$/;"	f	class:tair::tair_client_impl
CANCEL_EXPIRE	src\client\tair_client_api_impl.hpp	/^  const static int CANCEL_EXPIRE = 0;$/;"	m	namespace:tair
NOT_CARE_EXPIRE	src\client\tair_client_api_impl.hpp	/^  const static int NOT_CARE_EXPIRE = -1;$/;"	m	namespace:tair
NOT_CARE_VERSION	src\client\tair_client_api_impl.hpp	/^  const static short NOT_CARE_VERSION = 0;$/;"	m	namespace:tair
UPDATE_SERVER_TABLE_INTERVAL	src\client\tair_client_api_impl.hpp	/^  const int UPDATE_SERVER_TABLE_INTERVAL = 50;$/;"	m	namespace:tair
__TAIR_CLIENT_IMPL_H	src\client\tair_client_api_impl.hpp	16;"	d
bucket_count	src\client\tair_client_api_impl.hpp	/^      uint32_t bucket_count;$/;"	m	class:tair::tair_client_impl
config_server_list	src\client\tair_client_api_impl.hpp	/^      vector<uint64_t> config_server_list;$/;"	m	class:tair::tair_client_impl
config_version	src\client\tair_client_api_impl.hpp	/^      uint32_t config_version;$/;"	m	class:tair::tair_client_impl
connmgr	src\client\tair_client_api_impl.hpp	/^      tbnet::ConnectionManager *connmgr;$/;"	m	class:tair::tair_client_impl
copy_count	src\client\tair_client_api_impl.hpp	/^      uint32_t copy_count;$/;"	m	class:tair::tair_client_impl
ds_server_list	src\client\tair_client_api_impl.hpp	/^      vector<uint64_t> ds_server_list;   \/\/ds bucket table$/;"	m	class:tair::tair_client_impl
get_bucket_count	src\client\tair_client_api_impl.hpp	/^      uint32_t get_bucket_count() const { return bucket_count;}$/;"	f	class:tair::tair_client_impl
get_copy_count	src\client\tair_client_api_impl.hpp	/^      uint32_t get_copy_count() const { return copy_count;}$/;"	f	class:tair::tair_client_impl
group_name	src\client\tair_client_api_impl.hpp	/^      std::string group_name;$/;"	m	class:tair::tair_client_impl
inited	src\client\tair_client_api_impl.hpp	/^      bool inited;$/;"	m	class:tair::tair_client_impl
is_stop	src\client\tair_client_api_impl.hpp	/^      bool is_stop;$/;"	m	class:tair::tair_client_impl
isinited	src\client\tair_client_api_impl.hpp	/^      bool isinited() {return inited;}$/;"	f	class:tair::tair_client_impl
m_errmsg	src\client\tair_client_api_impl.hpp	/^      static const std::map<int,string> m_errmsg;$/;"	m	class:tair::tair_client_impl
map_to_vector	src\client\tair_client_api_impl.hpp	/^      static bool map_to_vector(const std::map<data_entry*, data_entry*> &_md, std::vector<data_entry*> &_vd) {$/;"	f	class:tair::tair_client_impl
new_config_version	src\client\tair_client_api_impl.hpp	/^      uint32_t new_config_version;$/;"	m	class:tair::tair_client_impl
packet_factory	src\client\tair_client_api_impl.hpp	/^      tair_packet_factory *packet_factory;$/;"	m	class:tair::tair_client_impl
request_get_map	src\client\tair_client_api_impl.hpp	/^  typedef map<uint64_t , request_get *> request_get_map;$/;"	t	namespace:tair
request_remove_map	src\client\tair_client_api_impl.hpp	/^  typedef map<uint64_t , request_remove *> request_remove_map;$/;"	t	namespace:tair
send_fail_count	src\client\tair_client_api_impl.hpp	/^      int send_fail_count;$/;"	m	class:tair::tair_client_impl
streamer	src\client\tair_client_api_impl.hpp	/^      tbnet::DefaultPacketStreamer *streamer;$/;"	m	class:tair::tair_client_impl
tair	src\client\tair_client_api_impl.hpp	/^namespace tair {$/;"	n
tair_client_impl	src\client\tair_client_api_impl.hpp	/^  class tair_client_impl : public tbsys::Runnable, public tbnet::IPacketHandler {$/;"	c	namespace:tair
this_wait_object_manager	src\client\tair_client_api_impl.hpp	/^      wait_object_manager *this_wait_object_manager;$/;"	m	class:tair::tair_client_impl
thread	src\client\tair_client_api_impl.hpp	/^      tbsys::CThread thread;$/;"	m	class:tair::tair_client_impl
timeout	src\client\tair_client_api_impl.hpp	/^      int timeout; \/\/ ms$/;"	m	class:tair::tair_client_impl
transport	src\client\tair_client_api_impl.hpp	/^      tbnet::Transport *transport;$/;"	m	class:tair::tair_client_impl
vector_to_map	src\client\tair_client_api_impl.hpp	/^      static bool vector_to_map(const std::vector<data_entry*> &_vd, std::map<data_entry*, data_entry*> &_md) {$/;"	f	class:tair::tair_client_impl
tair_begin	src\client\tair_client_capi.cpp	/^int tair_begin(tair_handler handler, const char *master_addr,const char *slave_addr, const char *group_name)$/;"	f
tair_decr	src\client\tair_client_capi.cpp	/^int tair_decr(tair_handler handler, int area, tair_data_pair* key, int count, int* ret_count, int init_value, int expire)$/;"	f
tair_deinit	src\client\tair_client_capi.cpp	/^void tair_deinit(tair_handler handler)$/;"	f
tair_get	src\client\tair_client_capi.cpp	/^int tair_get(tair_handler handler, int area, tair_data_pair* key, tair_data_pair* data)$/;"	f
tair_incr	src\client\tair_client_capi.cpp	/^int tair_incr(tair_handler handler, int area, tair_data_pair* key, int count, int* ret_count, int init_value, int expire)$/;"	f
tair_init	src\client\tair_client_capi.cpp	/^tair_handler tair_init()$/;"	f
tair_put	src\client\tair_client_capi.cpp	/^int tair_put(tair_handler handler, int area, tair_data_pair* key, tair_data_pair* data, int expire, int version)$/;"	f
tair_remove	src\client\tair_client_capi.cpp	/^int tair_remove(tair_handler handler, int area, tair_data_pair* key)$/;"	f
tair_set_loglevel	src\client\tair_client_capi.cpp	/^void tair_set_loglevel(const char* level )$/;"	f
CTAIR_CLIENT_API_H	src\client\tair_client_capi.hpp	16;"	d
_TairDataPair	src\client\tair_client_capi.hpp	/^   typedef struct _TairDataPair$/;"	s
data	src\client\tair_client_capi.hpp	/^      char*  data;$/;"	m	struct:_TairDataPair
len	src\client\tair_client_capi.hpp	/^      size_t len;$/;"	m	struct:_TairDataPair
tair_data_pair	src\client\tair_client_capi.hpp	/^   }tair_data_pair;$/;"	t	typeref:struct:_TairDataPair
tair_handler	src\client\tair_client_capi.hpp	/^   typedef void* tair_handler;$/;"	t
BaseQueueNode	src\common\base_queue_node.hpp	/^    BaseQueueNode() {}$/;"	f	class:BaseQueueNode
BaseQueueNode	src\common\base_queue_node.hpp	/^    BaseQueueNode(long long nodeId) {$/;"	f	class:BaseQueueNode
BaseQueueNode	src\common\base_queue_node.hpp	/^class BaseQueueNode {$/;"	c
__BASE_QUEUE_NODE__	src\common\base_queue_node.hpp	2;"	d
_node_id	src\common\base_queue_node.hpp	/^    long long _node_id;$/;"	m	class:BaseQueueNode
get_node_id	src\common\base_queue_node.hpp	/^    long long get_node_id() {return _node_id;}$/;"	f	class:BaseQueueNode
set_node_id	src\common\base_queue_node.hpp	/^    void set_node_id(long long nodeId) {_node_id = nodeId;}$/;"	f	class:BaseQueueNode
~BaseQueueNode	src\common\base_queue_node.hpp	/^    ~BaseQueueNode() {}$/;"	f	class:BaseQueueNode
BINLOG_UNUSED	src\common\binlog.hpp	9;"	d
BIN_LOG_PREFIX	src\common\binlog.hpp	22;"	d
BinLog	src\common\binlog.hpp	/^BinLog::BinLog(const char* filename, int mode) {$/;"	f	class:BinLog
BinLog	src\common\binlog.hpp	/^class BinLog {$/;"	c
BinLogReader	src\common\binlog.hpp	/^    BinLogReader(const char* filename, bool needlock, int mode = SYS_CACHED_LOG)$/;"	f	class:BinLogReader
BinLogReader	src\common\binlog.hpp	/^class BinLogReader:public BinLog {$/;"	c
BinLogWriter	src\common\binlog.hpp	/^    BinLogWriter(const char* filename, bool needlock, int mode = SYS_CACHED_LOG)$/;"	f	class:BinLogWriter
BinLogWriter	src\common\binlog.hpp	/^class BinLogWriter:public BinLog {$/;"	c
NO_CACHED_LOG	src\common\binlog.hpp	/^    NO_CACHED_LOG$/;"	e	enum:__anon1
RECORD_END	src\common\binlog.hpp	25;"	d
RECORD_SIZE	src\common\binlog.hpp	23;"	d
RECORD_START	src\common\binlog.hpp	24;"	d
SYS_CACHED_LOG	src\common\binlog.hpp	/^    SYS_CACHED_LOG,$/;"	e	enum:__anon1
USR_CACHED_LOG	src\common\binlog.hpp	/^    USR_CACHED_LOG,$/;"	e	enum:__anon1
__BINLOG__	src\common\binlog.hpp	2;"	d
_detail_filename	src\common\binlog.hpp	/^    char* _detail_filename;$/;"	m	class:BinLog
_fd	src\common\binlog.hpp	/^    int _fd;$/;"	m	class:BinLog
_file_id	src\common\binlog.hpp	/^    unsigned int _file_id;$/;"	m	class:BinLog
_file_max_record_num	src\common\binlog.hpp	/^    unsigned long long _file_max_record_num;$/;"	m	class:BinLog
_filename	src\common\binlog.hpp	/^    char* _filename;$/;"	m	class:BinLog
_mode	src\common\binlog.hpp	/^    int _mode;$/;"	m	class:BinLog
_mutex	src\common\binlog.hpp	/^    pthread_mutex_t _mutex;$/;"	m	class:BinLogReader
_mutex	src\common\binlog.hpp	/^    pthread_mutex_t _mutex;$/;"	m	class:BinLogWriter
_need_lock	src\common\binlog.hpp	/^    bool _need_lock;$/;"	m	class:BinLogReader
_need_lock	src\common\binlog.hpp	/^    bool _need_lock;$/;"	m	class:BinLogWriter
_need_seek	src\common\binlog.hpp	/^    bool _need_seek;$/;"	m	class:BinLog
_record_num	src\common\binlog.hpp	/^    unsigned long long _record_num;$/;"	m	class:BinLog
append	src\common\binlog.hpp	/^    bool append(const int should_ret, const int but_ret, const int pcode, const data_entry* key) {$/;"	f	class:BinLogWriter
getFD	src\common\binlog.hpp	/^    int getFD() {return _fd;}$/;"	f	class:BinLog
getFileName	src\common\binlog.hpp	/^    char* getFileName() {return _filename;}$/;"	f	class:BinLog
next_log_file	src\common\binlog.hpp	/^bool BinLog::next_log_file() {$/;"	f	class:BinLog
no_cached_write	src\common\binlog.hpp	/^bool BinLog::no_cached_write(const char* buffer, const int buffer_len) {$/;"	f	class:BinLog
read	src\common\binlog.hpp	/^    bool read(int* should_ret, int* but_ret, int* pcode, data_entry** key) {$/;"	f	class:BinLogReader
read	src\common\binlog.hpp	/^bool BinLog::read(int* should_ret, int* but_ret, int* pcode, data_entry** key) {$/;"	f	class:BinLog
setDetailFileName	src\common\binlog.hpp	/^    void setDetailFileName() {$/;"	f	class:BinLog
setFileName	src\common\binlog.hpp	/^    void setFileName(const char* filename) {$/;"	f	class:BinLog
sys_cached_read	src\common\binlog.hpp	/^bool BinLog::sys_cached_read(char** buffer, const int buffer_len) {$/;"	f	class:BinLog
sys_cached_write	src\common\binlog.hpp	/^bool BinLog::sys_cached_write(const char* buffer, const int buffer_len) {$/;"	f	class:BinLog
usr_cached_read	src\common\binlog.hpp	/^bool BinLog::usr_cached_read(char** buffer, const int buffer_len) {$/;"	f	class:BinLog
usr_cached_write	src\common\binlog.hpp	/^bool BinLog::usr_cached_write(const char* buffer, const int buffer_len) {$/;"	f	class:BinLog
write	src\common\binlog.hpp	/^bool BinLog::write(const int should_ret, const int but_ret, const int pcode, const data_entry* key) {$/;"	f	class:BinLog
~BinLog	src\common\binlog.hpp	/^BinLog::~BinLog() {$/;"	f	class:BinLog
~BinLogReader	src\common\binlog.hpp	/^    ~BinLogReader() {$/;"	f	class:BinLogReader
~BinLogWriter	src\common\binlog.hpp	/^    ~BinLogWriter() {$/;"	f	class:BinLogWriter
dump	src\common\data_dumpper.cpp	/^   int data_dumpper::dump(item *p_item)$/;"	f	class:tair::data_dumpper
open_file	src\common\data_dumpper.cpp	/^   bool data_dumpper::open_file()$/;"	f	class:tair::data_dumpper
tair	src\common\data_dumpper.cpp	/^namespace tair {$/;"	n	file:
DATA_DUMP_H_	src\common\data_dumpper.hpp	17;"	d
SECONDS_PER_FILE	src\common\data_dumpper.hpp	/^      static const int SECONDS_PER_FILE = 24 * 60 * 60;$/;"	m	class:tair::data_dumpper
area	src\common\data_dumpper.hpp	/^         int area;$/;"	m	struct:tair::data_dumpper::item
curr_time	src\common\data_dumpper.hpp	/^      time_t curr_time;$/;"	m	class:tair::data_dumpper
data_dumpper	src\common\data_dumpper.hpp	/^      data_dumpper():is_dump(true),fp(NULL),path(NULL),start_time(0),curr_time(0){}$/;"	f	class:tair::data_dumpper
data_dumpper	src\common\data_dumpper.hpp	/^   class data_dumpper {$/;"	c	namespace:tair
fp	src\common\data_dumpper.hpp	/^      FILE *fp;$/;"	m	class:tair::data_dumpper
is_dump	src\common\data_dumpper.hpp	/^      bool is_dump;$/;"	m	class:tair::data_dumpper
item	src\common\data_dumpper.hpp	/^         item():area(0),prop(0),prop_len(0),key(0),key_len(0),value(0),value_len(0){}$/;"	f	struct:tair::data_dumpper::item
item	src\common\data_dumpper.hpp	/^      struct item {$/;"	s	class:tair::data_dumpper
key	src\common\data_dumpper.hpp	/^         char *key;$/;"	m	struct:tair::data_dumpper::item
key_len	src\common\data_dumpper.hpp	/^         int key_len;$/;"	m	struct:tair::data_dumpper::item
path	src\common\data_dumpper.hpp	/^      const char *path;$/;"	m	class:tair::data_dumpper
prop	src\common\data_dumpper.hpp	/^         char *prop;$/;"	m	struct:tair::data_dumpper::item
prop_len	src\common\data_dumpper.hpp	/^         int prop_len;$/;"	m	struct:tair::data_dumpper::item
start_time	src\common\data_dumpper.hpp	/^      time_t start_time;$/;"	m	class:tair::data_dumpper
tair	src\common\data_dumpper.hpp	/^namespace tair {$/;"	n
value	src\common\data_dumpper.hpp	/^         char *value;$/;"	m	struct:tair::data_dumpper::item
value_len	src\common\data_dumpper.hpp	/^         int value_len;$/;"	m	struct:tair::data_dumpper::item
~data_dumpper	src\common\data_dumpper.hpp	/^      ~data_dumpper(){$/;"	f	class:tair::data_dumpper
TAIR_DATA_ENTRY_HPP	src\common\data_entry.hpp	18;"	d
alloc	src\common\data_entry.hpp	/^         bool alloc;$/;"	m	class:tair::common::data_entry
area	src\common\data_entry.hpp	/^         uint32_t area;$/;"	m	class:tair::common::data_entry
clone	src\common\data_entry.hpp	/^         data_entry& clone(const data_entry &entry)$/;"	f	class:tair::common::data_entry
common	src\common\data_entry.hpp	/^   namespace common {$/;"	n	namespace:tair
data	src\common\data_entry.hpp	/^         char *data;$/;"	m	class:tair::common::data_entry
data_entry	src\common\data_entry.hpp	/^         data_entry()$/;"	f	class:tair::common::data_entry
data_entry	src\common\data_entry.hpp	/^         data_entry(const char *data, int size, bool alloc = true)$/;"	f	class:tair::common::data_entry
data_entry	src\common\data_entry.hpp	/^         data_entry(const char *str, bool alloc = true)$/;"	f	class:tair::common::data_entry
data_entry	src\common\data_entry.hpp	/^         data_entry(const data_entry &entry)$/;"	f	class:tair::common::data_entry
data_entry	src\common\data_entry.hpp	/^      class data_entry {$/;"	c	namespace:tair::common
data_entry_comparator	src\common\data_entry.hpp	/^      class data_entry_comparator {$/;"	c	namespace:tair::common
data_entry_hash	src\common\data_entry.hpp	/^      struct data_entry_hash {$/;"	s	namespace:tair::common
data_meta	src\common\data_entry.hpp	/^         item_meta_info data_meta;$/;"	m	class:tair::common::data_entry
decode	src\common\data_entry.hpp	/^         void decode(tbnet::DataBuffer *input)$/;"	f	class:tair::common::data_entry
decode_area	src\common\data_entry.hpp	/^         int decode_area()$/;"	f	class:tair::common::data_entry
decode_meta	src\common\data_entry.hpp	/^         void decode_meta(bool force_decode = false)$/;"	f	class:tair::common::data_entry
encode	src\common\data_entry.hpp	/^         void encode(tbnet::DataBuffer *output) const$/;"	f	class:tair::common::data_entry
free_data	src\common\data_entry.hpp	/^         inline void free_data()$/;"	f	class:tair::common::data_entry
get_cdate	src\common\data_entry.hpp	/^         uint32_t get_cdate() const$/;"	f	class:tair::common::data_entry
get_data	src\common\data_entry.hpp	/^         char *get_data() const$/;"	f	class:tair::common::data_entry
get_hashcode	src\common\data_entry.hpp	/^         uint64_t get_hashcode()$/;"	f	class:tair::common::data_entry
get_size	src\common\data_entry.hpp	/^         int get_size() const$/;"	f	class:tair::common::data_entry
get_version	src\common\data_entry.hpp	/^         uint16_t get_version() const$/;"	f	class:tair::common::data_entry
has_merged	src\common\data_entry.hpp	/^         bool has_merged;$/;"	m	class:tair::common::data_entry
has_meta_merged	src\common\data_entry.hpp	/^         bool has_meta_merged;$/;"	m	class:tair::common::data_entry
hashcode	src\common\data_entry.hpp	/^         uint64_t hashcode;$/;"	m	class:tair::common::data_entry
init	src\common\data_entry.hpp	/^         void init()$/;"	f	class:tair::common::data_entry
is_alloc	src\common\data_entry.hpp	/^         bool is_alloc() const {$/;"	f	class:tair::common::data_entry
m_true_data	src\common\data_entry.hpp	/^         char *m_true_data; \/\/if has_merged arae,same as data,or data=m_true_data+2;$/;"	m	class:tair::common::data_entry
m_true_size	src\common\data_entry.hpp	/^         int m_true_size;  \/\/if has_merged ,or m_true_size=size+2$/;"	m	class:tair::common::data_entry
merge_area	src\common\data_entry.hpp	/^         void merge_area(int area)$/;"	f	class:tair::common::data_entry
merge_meta	src\common\data_entry.hpp	/^         void merge_meta()$/;"	f	class:tair::common::data_entry
operator ()	src\common\data_entry.hpp	/^         bool operator() (const data_entry *a, const data_entry *b)$/;"	f	class:tair::common::data_entry_comparator
operator ()	src\common\data_entry.hpp	/^         size_t operator()(const data_entry *a) const$/;"	f	struct:tair::common::data_entry_hash
operator <	src\common\data_entry.hpp	/^         bool operator<(const data_entry &entry) const$/;"	f	class:tair::common::data_entry
operator =	src\common\data_entry.hpp	/^         data_entry& operator=(const data_entry &entry)$/;"	f	class:tair::common::data_entry
print_out	src\common\data_entry.hpp	/^         void print_out()$/;"	f	class:tair::common::data_entry
server_flag	src\common\data_entry.hpp	/^         uint16_t server_flag;$/;"	m	class:tair::common::data_entry
set_alloced_data	src\common\data_entry.hpp	/^         void set_alloced_data(const char *data, int size)$/;"	f	class:tair::common::data_entry
set_cdate	src\common\data_entry.hpp	/^         void  set_cdate(uint32_t cdate)$/;"	f	class:tair::common::data_entry
set_data	src\common\data_entry.hpp	/^         void set_data(const char *new_data, int new_size, bool alloc = true)$/;"	f	class:tair::common::data_entry
set_version	src\common\data_entry.hpp	/^         void set_version(uint16_t version)$/;"	f	class:tair::common::data_entry
size	src\common\data_entry.hpp	/^         int size;$/;"	m	class:tair::common::data_entry
tair	src\common\data_entry.hpp	/^namespace tair$/;"	n
tair_dataentry_set	src\common\data_entry.hpp	/^      typedef std::set<data_entry*, data_entry_comparator> tair_dataentry_set;$/;"	t	namespace:tair::common
tair_dataentry_vector	src\common\data_entry.hpp	/^      typedef std::vector<data_entry *> tair_dataentry_vector;$/;"	t	namespace:tair::common
tair_keyvalue_map	src\common\data_entry.hpp	/^      typedef __gnu_cxx::hash_map<data_entry*, data_entry*, data_entry_hash> tair_keyvalue_map;$/;"	t	namespace:tair::common
~data_entry	src\common\data_entry.hpp	/^         ~data_entry()$/;"	f	class:tair::common::data_entry
CAN_OVERRIDE	src\common\define.hpp	44;"	d
CONFSERVER_SECTION	src\common\define.hpp	77;"	d
DEFAULT_DUPLICATE_THREAD_NUM	src\common\define.hpp	140;"	d
DUPLICATE_THREAD_NUM	src\common\define.hpp	139;"	d
FDB_BUCKET_SIZE	src\common\define.hpp	168;"	d
FDB_CACHE_SIZE	src\common\define.hpp	167;"	d
FDB_DATA_DIR	src\common\define.hpp	171;"	d
FDB_DEFAULT_DATA_DIR	src\common\define.hpp	172;"	d
FDB_DEFAULT_NAME	src\common\define.hpp	175;"	d
FDB_FREE_BLOCK_MAXSIZE	src\common\define.hpp	170;"	d
FDB_FREE_BLOCK_POOL_SIZE	src\common\define.hpp	169;"	d
FDB_HAS_RAID	src\common\define.hpp	176;"	d
FDB_INDEX_MMAP_SIZE	src\common\define.hpp	166;"	d
FDB_NAME	src\common\define.hpp	174;"	d
HAS_HASH_CODE	src\common\define.hpp	/^   HAS_HASH_CODE = 0x80$/;"	e	enum:__anon5
IS_ADDCOUNT_TYPE	src\common\define.hpp	40;"	d
IS_DELETED	src\common\define.hpp	42;"	d
IS_ITEM_TYPE	src\common\define.hpp	41;"	d
KDB_BUCKET_SIZE	src\common\define.hpp	129;"	d
KDB_BUCKET_SIZE_DEFAULT	src\common\define.hpp	130;"	d
KDB_DATA_DIR	src\common\define.hpp	133;"	d
KDB_DEFAULT_DATA_DIR	src\common\define.hpp	134;"	d
KDB_MAP_SIZE	src\common\define.hpp	127;"	d
KDB_MAP_SIZE_DEFAULT	src\common\define.hpp	128;"	d
KDB_RECORD_ALIGN	src\common\define.hpp	131;"	d
KDB_RECORD_ALIGN_DEFAULT	src\common\define.hpp	132;"	d
LIKELY	src\common\define.hpp	38;"	d
LOCKER_SIZE	src\common\define.hpp	135;"	d
MAX_MUPDATE_PACKET_SIZE	src\common\define.hpp	69;"	d
MISECONDS_BEFOR_SEND_RETRY	src\common\define.hpp	72;"	d
PRI64_PREFIX	src\common\define.hpp	30;"	d
PRI64_PREFIX	src\common\define.hpp	32;"	d
RDB_AREA_DEFAULT_PASSWORD	src\common\define.hpp	162;"	d
RDB_AREA_GROUP_NUM	src\common\define.hpp	147;"	d
RDB_AREA_MAXMEMORY	src\common\define.hpp	149;"	d
RDB_AREA_PASSWORD	src\common\define.hpp	161;"	d
RDB_DATA_DIR	src\common\define.hpp	143;"	d
RDB_DEFAULR_MAXMEMORY_SAMPLES	src\common\define.hpp	155;"	d
RDB_DEFAULT_AREA_GROUP_NUM	src\common\define.hpp	148;"	d
RDB_DEFAULT_AREA_MAXMEMORY	src\common\define.hpp	151;"	d
RDB_DEFAULT_DATA_DIR	src\common\define.hpp	144;"	d
RDB_DEFAULT_MAXMEMORY	src\common\define.hpp	152;"	d
RDB_DEFAULT_UNIT_NUM	src\common\define.hpp	146;"	d
RDB_HASH_MAX_SIZE	src\common\define.hpp	157;"	d
RDB_LIST_MAX_SIZE	src\common\define.hpp	156;"	d
RDB_MAXMEMORY	src\common\define.hpp	150;"	d
RDB_MAXMEMORY_POLICY	src\common\define.hpp	153;"	d
RDB_MAXMEMORY_SAMPLES	src\common\define.hpp	154;"	d
RDB_SET_MAX_SIZE	src\common\define.hpp	159;"	d
RDB_UNIT_NUM	src\common\define.hpp	145;"	d
RDB_ZSET_MAX_SIZE	src\common\define.hpp	158;"	d
SLEEP_MISECONDS	src\common\define.hpp	73;"	d
TAIRFDB_SECTION	src\common\define.hpp	78;"	d
TAIRKDB_SECTION	src\common\define.hpp	79;"	d
TAIRPUBLIC_SECTION	src\common\define.hpp	75;"	d
TAIRRDB_SECTION	src\common\define.hpp	80;"	d
TAIRSERVER_SECTION	src\common\define.hpp	76;"	d
TAIR_BUILD_DIFF_RATIO	src\common\define.hpp	189;"	d
TAIR_BUILD_STRATEGY	src\common\define.hpp	186;"	d
TAIR_CHECK_EXPIRED_HOUR_RANGE	src\common\define.hpp	111;"	d
TAIR_CHECK_SLAB_HOUR_RANGE	src\common\define.hpp	112;"	d
TAIR_CONFIG_MIN_VERSION	src\common\define.hpp	183;"	d
TAIR_CONFIG_SERVER	src\common\define.hpp	88;"	d
TAIR_CONFIG_SERVER_DEFAULT_PORT	src\common\define.hpp	179;"	d
TAIR_DATA_DIR	src\common\define.hpp	94;"	d
TAIR_DATA_NEED_MIGRATE	src\common\define.hpp	67;"	d
TAIR_DEFAULT_BUCKET_NUMBER	src\common\define.hpp	199;"	d
TAIR_DEFAULT_COPY_COUNT	src\common\define.hpp	197;"	d
TAIR_DEFAULT_DATA_DIR	src\common\define.hpp	180;"	d
TAIR_DEFAULT_DUMP_DIR	src\common\define.hpp	99;"	d
TAIR_DEFAULT_REPORT_INTERVAL	src\common\define.hpp	201;"	d
TAIR_DEFINE_H	src\common\define.hpp	18;"	d
TAIR_DEV_NAME	src\common\define.hpp	91;"	d
TAIR_DTM_VERSION	src\common\define.hpp	58;"	d
TAIR_DUMP_DIR	src\common\define.hpp	98;"	d
TAIR_EVICT_DATA_PATH	src\common\define.hpp	95;"	d
TAIR_FLAG_CFG_DOWN	src\common\define.hpp	62;"	d
TAIR_FLAG_NOEXP	src\common\define.hpp	63;"	d
TAIR_FLAG_SERVER	src\common\define.hpp	61;"	d
TAIR_GROUP_FILE	src\common\define.hpp	93;"	d
TAIR_HEARTBEAT_PORT	src\common\define.hpp	83;"	d
TAIR_HTM_VERSION	src\common\define.hpp	59;"	d
TAIR_ITEM_FLAG_ADDCOUNT	src\common\define.hpp	/^   TAIR_ITEM_FLAG_ADDCOUNT = 1,$/;"	e	enum:__anon2
TAIR_ITEM_FLAG_DELETED	src\common\define.hpp	/^   TAIR_ITEM_FLAG_DELETED = 2,$/;"	e	enum:__anon2
TAIR_ITEM_FLAG_ITEM	src\common\define.hpp	/^   TAIR_ITEM_FLAG_ITEM = 4,$/;"	e	enum:__anon2
TAIR_ITEM_FLAG_SET	src\common\define.hpp	/^   TAIR_ITEM_FLAG_SET,$/;"	e	enum:__anon2
TAIR_LOCAL_MODE	src\common\define.hpp	101;"	d
TAIR_LOG_FILE	src\common\define.hpp	87;"	d
TAIR_LOG_LEVEL	src\common\define.hpp	90;"	d
TAIR_MAX_AREA_COUNT	src\common\define.hpp	56;"	d
TAIR_MAX_DATA_SIZE	src\common\define.hpp	55;"	d
TAIR_MAX_FILENAME_LEN	src\common\define.hpp	66;"	d
TAIR_MAX_ITEM_COUNT	src\common\define.hpp	125;"	d
TAIR_MAX_KEY_SIZE	src\common\define.hpp	54;"	d
TAIR_MDB_HASH_BUCKET_SHIFT	src\common\define.hpp	110;"	d
TAIR_MDB_SHM_PATH	src\common\define.hpp	108;"	d
TAIR_MDB_TYPE	src\common\define.hpp	107;"	d
TAIR_PACKET_FLAG	src\common\define.hpp	57;"	d
TAIR_PID_FILE	src\common\define.hpp	89;"	d
TAIR_PORT	src\common\define.hpp	82;"	d
TAIR_POS_MASK	src\common\define.hpp	65;"	d
TAIR_PROCESS_THREAD_COUNT	src\common\define.hpp	86;"	d
TAIR_PROFILER_THRESHOLD	src\common\define.hpp	85;"	d
TAIR_REMOTE_GROUP_NAME	src\common\define.hpp	206;"	d
TAIR_REMOTE_IN_CUlSTER	src\common\define.hpp	207;"	d
TAIR_REMOTE_MASTER_IP	src\common\define.hpp	204;"	d
TAIR_REMOTE_SLAVE_IP	src\common\define.hpp	205;"	d
TAIR_RETURN_ALREADY_EXIST	src\common\define.hpp	/^   TAIR_RETURN_ALREADY_EXIST = -20004,$/;"	e	enum:__anon3
TAIR_RETURN_CANNOT_OVERRIDE	src\common\define.hpp	/^   TAIR_RETURN_CANNOT_OVERRIDE = -3981,$/;"	e	enum:__anon3
TAIR_RETURN_COUNT_ZERO	src\common\define.hpp	/^   TAIR_RETURN_COUNT_ZERO = -3979,$/;"	e	enum:__anon3
TAIR_RETURN_DATA_EXPIRED	src\common\define.hpp	/^   TAIR_RETURN_DATA_EXPIRED = -3988,$/;"	e	enum:__anon3
TAIR_RETURN_DATA_LEN_LIMITED	src\common\define.hpp	/^   TAIR_RETURN_DATA_LEN_LIMITED = -20007,$/;"	e	enum:__anon3
TAIR_RETURN_DATA_NOT_EXIST	src\common\define.hpp	/^   TAIR_RETURN_DATA_NOT_EXIST = -3998,$/;"	e	enum:__anon3
TAIR_RETURN_DUPLICATE_BUSY	src\common\define.hpp	/^   TAIR_RETURN_DUPLICATE_BUSY = -3985,$/;"	e	enum:__anon3
TAIR_RETURN_FAILED	src\common\define.hpp	/^   TAIR_RETURN_FAILED = -3999,$/;"	e	enum:__anon3
TAIR_RETURN_INCDECR_OVERFLOW	src\common\define.hpp	/^   TAIR_RETURN_INCDECR_OVERFLOW = -20006,$/;"	e	enum:__anon3
TAIR_RETURN_INVALID_ARGUMENT	src\common\define.hpp	/^   TAIR_RETURN_INVALID_ARGUMENT = -3982,$/;"	e	enum:__anon3
TAIR_RETURN_IS_NOT_DOUBLE	src\common\define.hpp	/^   TAIR_RETURN_IS_NOT_DOUBLE = -20003,$/;"	e	enum:__anon3
TAIR_RETURN_IS_NOT_IMPLEMENT	src\common\define.hpp	/^   TAIR_RETURN_IS_NOT_IMPLEMENT = -20008,$/;"	e	enum:__anon3
TAIR_RETURN_IS_NOT_INTEGER	src\common\define.hpp	/^   TAIR_RETURN_IS_NOT_INTEGER = -20002,$/;"	e	enum:__anon3
TAIR_RETURN_IS_NOT_NUMBER	src\common\define.hpp	/^   TAIR_RETURN_IS_NOT_NUMBER = -20001,$/;"	e	enum:__anon3
TAIR_RETURN_ITEMSIZE_ERROR	src\common\define.hpp	/^   TAIR_RETURN_ITEMSIZE_ERROR = -3991,$/;"	e	enum:__anon3
TAIR_RETURN_ITEM_EMPTY	src\common\define.hpp	/^   TAIR_RETURN_ITEM_EMPTY = -3993,$/;"	e	enum:__anon3
TAIR_RETURN_MIGRATE_BUSY	src\common\define.hpp	/^   TAIR_RETURN_MIGRATE_BUSY = -3984,$/;"	e	enum:__anon3
TAIR_RETURN_NAMESPACE_ERROR	src\common\define.hpp	/^   TAIR_RETURN_NAMESPACE_ERROR = -7,$/;"	e	enum:__anon3
TAIR_RETURN_OUT_OF_RANGE	src\common\define.hpp	/^   TAIR_RETURN_OUT_OF_RANGE = -3992,$/;"	e	enum:__anon3
TAIR_RETURN_PARTIAL_SUCCESS	src\common\define.hpp	/^   TAIR_RETURN_PARTIAL_SUCCESS = -3983,$/;"	e	enum:__anon3
TAIR_RETURN_PLUGIN_ERROR	src\common\define.hpp	/^   TAIR_RETURN_PLUGIN_ERROR = -3995,$/;"	e	enum:__anon3
TAIR_RETURN_PROXYED	src\common\define.hpp	/^   TAIR_RETURN_PROXYED = -4000,$/;"	e	enum:__anon3
TAIR_RETURN_RANGE_HAVE_NONE	src\common\define.hpp	/^   TAIR_RETURN_RANGE_HAVE_NONE = -20005,$/;"	e	enum:__anon3
TAIR_RETURN_REMOTE_DISKSAVE_FAILED	src\common\define.hpp	/^   TAIR_RETURN_REMOTE_DISKSAVE_FAILED=-5109,$/;"	e	enum:__anon3
TAIR_RETURN_REMOTE_MISS	src\common\define.hpp	/^   TAIR_RETURN_REMOTE_MISS=-5110,$/;"	e	enum:__anon3
TAIR_RETURN_REMOTE_NOLOCAL	src\common\define.hpp	/^   TAIR_RETURN_REMOTE_NOLOCAL=-5112,$/;"	e	enum:__anon3
TAIR_RETURN_REMOTE_NOTINIT	src\common\define.hpp	/^   TAIR_RETURN_REMOTE_NOTINIT= -5108,$/;"	e	enum:__anon3
TAIR_RETURN_REMOTE_NOTINITED	src\common\define.hpp	/^   TAIR_RETURN_REMOTE_NOTINITED= -5106,$/;"	e	enum:__anon3
TAIR_RETURN_REMOTE_RSP_FAILED	src\common\define.hpp	/^   TAIR_RETURN_REMOTE_RSP_FAILED=-5111,$/;"	e	enum:__anon3
TAIR_RETURN_REMOTE_SLOW	src\common\define.hpp	/^   TAIR_RETURN_REMOTE_SLOW= -5107,$/;"	e	enum:__anon3
TAIR_RETURN_SEND_FAILED	src\common\define.hpp	/^   TAIR_RETURN_SEND_FAILED = -3990,$/;"	e	enum:__anon3
TAIR_RETURN_SERIALIZE_ERROR	src\common\define.hpp	/^   TAIR_RETURN_SERIALIZE_ERROR = -3994,$/;"	e	enum:__anon3
TAIR_RETURN_SERVER_CAN_NOT_WORK	src\common\define.hpp	/^   TAIR_RETURN_SERVER_CAN_NOT_WORK = -3987,$/;"	e	enum:__anon3
TAIR_RETURN_SHOULD_PROXY	src\common\define.hpp	/^   TAIR_RETURN_SHOULD_PROXY = -3967,$/;"	e	enum:__anon3
TAIR_RETURN_SUCCESS	src\common\define.hpp	/^   TAIR_RETURN_SUCCESS = 0,$/;"	e	enum:__anon3
TAIR_RETURN_TIMEOUT	src\common\define.hpp	/^   TAIR_RETURN_TIMEOUT = -3989,$/;"	e	enum:__anon3
TAIR_RETURN_TYPE_NOT_MATCH	src\common\define.hpp	/^   TAIR_RETURN_TYPE_NOT_MATCH = -3996,$/;"	e	enum:__anon3
TAIR_RETURN_VERSION_ERROR	src\common\define.hpp	/^   TAIR_RETURN_VERSION_ERROR = -3997,$/;"	e	enum:__anon3
TAIR_RETURN_WRITE_NOT_ON_MASTER	src\common\define.hpp	/^   TAIR_RETURN_WRITE_NOT_ON_MASTER = -3986,$/;"	e	enum:__anon3
TAIR_SENGINE	src\common\define.hpp	84;"	d
TAIR_SERVERFLAG_CLIENT	src\common\define.hpp	/^   TAIR_SERVERFLAG_CLIENT = 0,$/;"	e	enum:__anon4
TAIR_SERVERFLAG_DUPLICATE	src\common\define.hpp	/^   TAIR_SERVERFLAG_DUPLICATE,$/;"	e	enum:__anon4
TAIR_SERVERFLAG_MIGRATE	src\common\define.hpp	/^   TAIR_SERVERFLAG_MIGRATE,$/;"	e	enum:__anon4
TAIR_SERVERFLAG_PROXY	src\common\define.hpp	/^   TAIR_SERVERFLAG_PROXY,$/;"	e	enum:__anon4
TAIR_SERVER_DEFAULT_HB_PORT	src\common\define.hpp	123;"	d
TAIR_SERVER_DEFAULT_PORT	src\common\define.hpp	122;"	d
TAIR_SERVER_DOWNTIME	src\common\define.hpp	195;"	d
TAIR_SLAB_BASE_SIZE	src\common\define.hpp	105;"	d
TAIR_SLAB_FACTOR	src\common\define.hpp	106;"	d
TAIR_SLAB_MEM_SIZE	src\common\define.hpp	104;"	d
TAIR_SLAB_PAGE_SIZE	src\common\define.hpp	109;"	d
TAIR_SLEEP	src\common\define.hpp	52;"	d
TAIR_STAT_DEFAULT_FILEPATH	src\common\define.hpp	97;"	d
TAIR_STAT_FILE_PATH	src\common\define.hpp	96;"	d
TAIR_STR_ACCEPT_STRATEGY	src\common\define.hpp	187;"	d
TAIR_STR_AREA_CAPACITY_LIST	src\common\define.hpp	192;"	d
TAIR_STR_BUCKET_NUMBER	src\common\define.hpp	198;"	d
TAIR_STR_BUILD_DIFF_RATIO	src\common\define.hpp	188;"	d
TAIR_STR_BUILD_STRATEGY	src\common\define.hpp	185;"	d
TAIR_STR_COPY_COUNT	src\common\define.hpp	196;"	d
TAIR_STR_GROUP_DATA_NEED_MOVE	src\common\define.hpp	181;"	d
TAIR_STR_MIN_CONFIG_VERSION	src\common\define.hpp	182;"	d
TAIR_STR_MIN_DATA_SRVER_COUNT	src\common\define.hpp	184;"	d
TAIR_STR_PLUGINS_LIST	src\common\define.hpp	191;"	d
TAIR_STR_POS_MASK	src\common\define.hpp	193;"	d
TAIR_STR_REPORT_INTERVAL	src\common\define.hpp	200;"	d
TAIR_STR_SERVER_DOWNTIME	src\common\define.hpp	194;"	d
TAIR_STR_SERVER_LIST	src\common\define.hpp	190;"	d
TAIR_TASK_QUEUE_SIZE	src\common\define.hpp	100;"	d
TAIR_ULOG_DEFAULT_FILENUM	src\common\define.hpp	118;"	d
TAIR_ULOG_DEFAULT_FILESIZE	src\common\define.hpp	120;"	d
TAIR_ULOG_DIR	src\common\define.hpp	114;"	d
TAIR_ULOG_FILENUM	src\common\define.hpp	117;"	d
TAIR_ULOG_FILESIZE	src\common\define.hpp	119;"	d
TAIR_ULOG_MIGRATE_BASENAME	src\common\define.hpp	115;"	d
TAIR_ULOG_MIGRATE_DEFAULT_BASENAME	src\common\define.hpp	116;"	d
UNLIKELY	src\common\define.hpp	39;"	d
UNUSED	src\common\define.hpp	36;"	d
_FILE_OFFSET_BITS	src\common\define.hpp	28;"	d
_LARGEFILE64_SOURCE	src\common\define.hpp	26;"	d
DEFAULT_QUEUE_NAME	src\common\disk_queue.hpp	/^    const static char* DEFAULT_QUEUE_NAME;$/;"	m	class:DiskQueue
DEFAULT_QUEUE_NAME	src\common\disk_queue.hpp	/^const char* DiskQueue<T>::DEFAULT_QUEUE_NAME = ".queue.list";$/;"	m	class:DiskQueue
DiskQueue	src\common\disk_queue.hpp	/^DiskQueue<T>::DiskQueue(const char* queue_name, const int mode, const int max_file_size,$/;"	f	class:DiskQueue
DiskQueue	src\common\disk_queue.hpp	/^class DiskQueue {$/;"	c
FILE_END_ID_FIELD	src\common\disk_queue.hpp	/^    const static char* FILE_END_ID_FIELD;$/;"	m	class:DiskQueue
FILE_END_ID_FIELD	src\common\disk_queue.hpp	/^const char* DiskQueue<T>::FILE_END_ID_FIELD = "file_end_id";$/;"	m	class:DiskQueue
FILE_END_ID_FIELD_LEN	src\common\disk_queue.hpp	/^    const static int FILE_END_ID_FIELD_LEN;$/;"	m	class:DiskQueue
FILE_END_ID_FIELD_LEN	src\common\disk_queue.hpp	/^const int DiskQueue<T>::FILE_END_ID_FIELD_LEN =            64;$/;"	m	class:DiskQueue
FILE_END_ID_OFFSET_FIELD_LEN	src\common\disk_queue.hpp	/^    const static int FILE_END_ID_OFFSET_FIELD_LEN;$/;"	m	class:DiskQueue
FILE_END_ID_OFFSET_FIELD_LEN	src\common\disk_queue.hpp	/^const int DiskQueue<T>::FILE_END_ID_OFFSET_FIELD_LEN =     64;$/;"	m	class:DiskQueue
FILE_END_OFFSET_FIELD	src\common\disk_queue.hpp	/^    const static char* FILE_END_OFFSET_FIELD;$/;"	m	class:DiskQueue
FILE_END_OFFSET_FIELD	src\common\disk_queue.hpp	/^const char* DiskQueue<T>::FILE_END_OFFSET_FIELD = "file_end_offset";$/;"	m	class:DiskQueue
FILE_START_ID_FIELD	src\common\disk_queue.hpp	/^    const static char* FILE_START_ID_FIELD;$/;"	m	class:DiskQueue
FILE_START_ID_FIELD	src\common\disk_queue.hpp	/^const char* DiskQueue<T>::FILE_START_ID_FIELD = "file_start_id";$/;"	m	class:DiskQueue
FILE_START_ID_FIELD_LEN	src\common\disk_queue.hpp	/^    const static int FILE_START_ID_FIELD_LEN;$/;"	m	class:DiskQueue
FILE_START_ID_FIELD_LEN	src\common\disk_queue.hpp	/^const int DiskQueue<T>::FILE_START_ID_FIELD_LEN =          64;$/;"	m	class:DiskQueue
FILE_START_ID_OFFSET_FIELD_LEN	src\common\disk_queue.hpp	/^    const static int FILE_START_ID_OFFSET_FIELD_LEN;$/;"	m	class:DiskQueue
FILE_START_ID_OFFSET_FIELD_LEN	src\common\disk_queue.hpp	/^const int DiskQueue<T>::FILE_START_ID_OFFSET_FIELD_LEN =   64;$/;"	m	class:DiskQueue
FILE_START_OFFSET_FIELD	src\common\disk_queue.hpp	/^    const static char* FILE_START_OFFSET_FIELD;$/;"	m	class:DiskQueue
FILE_START_OFFSET_FIELD	src\common\disk_queue.hpp	/^const char* DiskQueue<T>::FILE_START_OFFSET_FIELD = "file_start_offset";$/;"	m	class:DiskQueue
MAX_FILE_SIZE_FIELD	src\common\disk_queue.hpp	/^    const static char* MAX_FILE_SIZE_FIELD;$/;"	m	class:DiskQueue
MAX_FILE_SIZE_FIELD	src\common\disk_queue.hpp	/^const char* DiskQueue<T>::MAX_FILE_SIZE_FIELD = "max_file_size";$/;"	m	class:DiskQueue
MAX_FILE_SIZE_FIELD_LEN	src\common\disk_queue.hpp	/^    const static int MAX_FILE_SIZE_FIELD_LEN;$/;"	m	class:DiskQueue
MAX_FILE_SIZE_FIELD_LEN	src\common\disk_queue.hpp	/^const int DiskQueue<T>::MAX_FILE_SIZE_FIELD_LEN =          64;$/;"	m	class:DiskQueue
SEGMENT_END_FLAG	src\common\disk_queue.hpp	/^    const static char* SEGMENT_END_FLAG;$/;"	m	class:DiskQueue
SEGMENT_END_FLAG	src\common\disk_queue.hpp	/^const char* DiskQueue<T>::SEGMENT_END_FLAG = "==END SEGMENT==";$/;"	m	class:DiskQueue
SEGMENT_END_FLAG_LEN	src\common\disk_queue.hpp	/^    const static int SEGMENT_END_FLAG_LEN;$/;"	m	class:DiskQueue
SEGMENT_END_FLAG_LEN	src\common\disk_queue.hpp	/^const int DiskQueue<T>::SEGMENT_END_FLAG_LEN = 15;$/;"	m	class:DiskQueue
__DISK_QUEUE__	src\common\disk_queue.hpp	2;"	d
_deserialize	src\common\disk_queue.hpp	/^    deserialize_func _deserialize;$/;"	m	class:DiskQueue
_file_end_id	src\common\disk_queue.hpp	/^    int _file_end_id;$/;"	m	class:DiskQueue
_file_end_offset	src\common\disk_queue.hpp	/^    int _file_end_offset;$/;"	m	class:DiskQueue
_file_start_id	src\common\disk_queue.hpp	/^    int _file_start_id;$/;"	m	class:DiskQueue
_file_start_offset	src\common\disk_queue.hpp	/^    int _file_start_offset;$/;"	m	class:DiskQueue
_head_fd	src\common\disk_queue.hpp	/^    int _head_fd;$/;"	m	class:DiskQueue
_head_fd_lock	src\common\disk_queue.hpp	/^    pthread_mutex_t _head_fd_lock;$/;"	m	class:DiskQueue
_head_fd_no_need_seek	src\common\disk_queue.hpp	/^    bool _head_fd_no_need_seek;$/;"	m	class:DiskQueue
_is_init	src\common\disk_queue.hpp	/^    int _is_init;$/;"	m	class:DiskQueue
_max_file_size	src\common\disk_queue.hpp	/^    int _max_file_size;$/;"	m	class:DiskQueue
_mode	src\common\disk_queue.hpp	/^    int _mode;$/;"	m	class:DiskQueue
_queue_config_fd	src\common\disk_queue.hpp	/^    int _queue_config_fd;$/;"	m	class:DiskQueue
_queue_name	src\common\disk_queue.hpp	/^    char* _queue_name;$/;"	m	class:DiskQueue
_serialize	src\common\disk_queue.hpp	/^    serialize_func _serialize;$/;"	m	class:DiskQueue
_tail_fd	src\common\disk_queue.hpp	/^    int _tail_fd;$/;"	m	class:DiskQueue
_tail_fd_lock	src\common\disk_queue.hpp	/^    pthread_mutex_t _tail_fd_lock;$/;"	m	class:DiskQueue
_tail_fd_no_need_seek	src\common\disk_queue.hpp	/^    bool _tail_fd_no_need_seek;$/;"	m	class:DiskQueue
deserialize_func	src\common\disk_queue.hpp	/^typedef bool (*deserialize_func)(T** data, tbnet::DataBuffer* dataBuffer);$/;"	t	class:DiskQueue
empty	src\common\disk_queue.hpp	/^bool DiskQueue<T>::empty() {$/;"	f	class:DiskQueue
endSegment	src\common\disk_queue.hpp	/^bool DiskQueue<T>::endSegment(int* fd) {$/;"	f	class:DiskQueue
getMaxFileSize	src\common\disk_queue.hpp	/^    int getMaxFileSize() {return _max_file_size;}$/;"	f	class:DiskQueue
getMode	src\common\disk_queue.hpp	/^    int getMode() {return _mode;}$/;"	f	class:DiskQueue
getQueueName	src\common\disk_queue.hpp	/^    char* getQueueName() {return _queue_name;}$/;"	f	class:DiskQueue
initFD	src\common\disk_queue.hpp	/^int DiskQueue<T>::initFD(const int id, const int mode) {$/;"	f	class:DiskQueue
initMaxFileSize	src\common\disk_queue.hpp	/^void DiskQueue<T>::initMaxFileSize(const int size) {$/;"	f	class:DiskQueue
initMode	src\common\disk_queue.hpp	/^void DiskQueue<T>::initMode(const int mode) {$/;"	f	class:DiskQueue
initQueueHead	src\common\disk_queue.hpp	/^bool DiskQueue<T>::initQueueHead() {$/;"	f	class:DiskQueue
initQueueName	src\common\disk_queue.hpp	/^void DiskQueue<T>::initQueueName(const char* queue_name, const int len) {$/;"	f	class:DiskQueue
initQueueTail	src\common\disk_queue.hpp	/^bool DiskQueue<T>::initQueueTail() {$/;"	f	class:DiskQueue
isInit	src\common\disk_queue.hpp	/^bool DiskQueue<T>::isInit() {$/;"	f	class:DiskQueue
isNeedEndSegment	src\common\disk_queue.hpp	/^bool DiskQueue<T>::isNeedEndSegment() {$/;"	f	class:DiskQueue
loadConfig	src\common\disk_queue.hpp	/^bool DiskQueue<T>::loadConfig() {$/;"	f	class:DiskQueue
newConfig	src\common\disk_queue.hpp	/^bool DiskQueue<T>::newConfig() {$/;"	f	class:DiskQueue
nextSegment	src\common\disk_queue.hpp	/^bool DiskQueue<T>::nextSegment(int* fd, int* id, int* offset, int mode) {$/;"	f	class:DiskQueue
pop	src\common\disk_queue.hpp	/^bool DiskQueue<T>::pop(T** data) {$/;"	f	class:DiskQueue
push	src\common\disk_queue.hpp	/^bool DiskQueue<T>::push(T* data) {$/;"	f	class:DiskQueue
readIntProperty	src\common\disk_queue.hpp	/^bool DiskQueue<T>::readIntProperty(const char* key, int* value, const int maxlen,$/;"	f	class:DiskQueue
readRecord	src\common\disk_queue.hpp	/^bool DiskQueue<T>::readRecord(tbnet::DataBuffer** dataBuffer) {$/;"	f	class:DiskQueue
serialize_func	src\common\disk_queue.hpp	/^typedef bool (*serialize_func)(T* data, tbnet::DataBuffer** dataBuffer);$/;"	t	class:DiskQueue
writeIntProperty	src\common\disk_queue.hpp	/^bool DiskQueue<T>::writeIntProperty(const char* key, const int value,$/;"	f	class:DiskQueue
writeRecord	src\common\disk_queue.hpp	/^bool DiskQueue<T>::writeRecord(tbnet::DataBuffer* dataBuffer) {$/;"	f	class:DiskQueue
~DiskQueue	src\common\disk_queue.hpp	/^DiskQueue<T>::~DiskQueue() {$/;"	f	class:DiskQueue
TAIR_DUMP_DATA_INFO	src\common\dump_data_info.hpp	18;"	d
_dump_meta_info	src\common\dump_data_info.hpp	/^      _dump_meta_info() : start_time(0), end_time(0), area(0) {}$/;"	f	struct:tair::_dump_meta_info
_dump_meta_info	src\common\dump_data_info.hpp	/^   typedef struct _dump_meta_info {$/;"	s	namespace:tair
area	src\common\dump_data_info.hpp	/^      int32_t area;$/;"	m	struct:tair::_dump_meta_info
dump_meta_info	src\common\dump_data_info.hpp	/^   } dump_meta_info;$/;"	t	namespace:tair	typeref:struct:tair::_dump_meta_info
end_time	src\common\dump_data_info.hpp	/^      uint32_t end_time;$/;"	m	struct:tair::_dump_meta_info
operator <	src\common\dump_data_info.hpp	/^      bool operator < (const _dump_meta_info& _info) const$/;"	f	struct:tair::_dump_meta_info
start_time	src\common\dump_data_info.hpp	/^      uint32_t start_time;$/;"	m	struct:tair::_dump_meta_info
tair	src\common\dump_data_info.hpp	/^namespace tair {$/;"	n
FileOp	src\common\file_op.hpp	/^class FileOp {$/;"	c
__FILE_OP__	src\common\file_op.hpp	2;"	d
mkdirs	src\common\file_op.hpp	/^bool FileOp::mkdirs(char *dirpath) $/;"	f	class:FileOp
open	src\common\file_op.hpp	/^int FileOp::open(char* file_name, int mode) {$/;"	f	class:FileOp
read	src\common\file_op.hpp	/^int FileOp::read(const int fd, char** buffer, const int32_t nbytes) {$/;"	f	class:FileOp
seek	src\common\file_op.hpp	/^off_t FileOp::seek(int fd, off_t offset) {$/;"	f	class:FileOp
write	src\common\file_op.hpp	/^int FileOp::write(const int fd, const char* buffer, const int32_t nbytes) {$/;"	f	class:FileOp
TAIR_HASH_H	src\common\hash.hpp	16;"	d
mur_mur_hash2	src\common\hash.hpp	/^inline unsigned int mur_mur_hash2 ( const void * key, int len, unsigned int seed )$/;"	f
ITEM_HEADER_LEN	src\common\item_data_info.hpp	/^   static const size_t ITEM_HEADER_LEN = sizeof(item_meta_info);$/;"	m	namespace:tair
TAIR_ITEM_DATA_INFO	src\common\item_data_info.hpp	18;"	d
_ItemData	src\common\item_data_info.hpp	/^   typedef struct _ItemData{$/;"	s	namespace:tair
_item_meta	src\common\item_data_info.hpp	/^   typedef struct _item_meta {$/;"	s	namespace:tair
cdate	src\common\item_data_info.hpp	/^      uint32_t cdate; \/\/ item create time$/;"	m	struct:tair::_item_meta
checksum	src\common\item_data_info.hpp	/^      uint16_t checksum;$/;"	m	struct:tair::_item_meta
decode	src\common\item_data_info.hpp	/^      void decode(tbnet::DataBuffer *input)$/;"	f	struct:tair::_item_meta
edate	src\common\item_data_info.hpp	/^      uint32_t edate; \/\/ expire date$/;"	m	struct:tair::_item_meta
encode	src\common\item_data_info.hpp	/^      void encode(tbnet::DataBuffer *output) const $/;"	f	struct:tair::_item_meta
flag	src\common\item_data_info.hpp	/^      uint32_t flag : 8; \/\/ for extends$/;"	m	struct:tair::_item_meta
header	src\common\item_data_info.hpp	/^      item_meta_info header;$/;"	m	struct:tair::_ItemData
item_data_info	src\common\item_data_info.hpp	/^   }item_data_info;$/;"	t	namespace:tair	typeref:struct:tair::_ItemData
item_meta_info	src\common\item_data_info.hpp	/^   } item_meta_info;$/;"	t	namespace:tair	typeref:struct:tair::_item_meta
keysize	src\common\item_data_info.hpp	/^      uint16_t keysize; \/\/ key size max: 64KB$/;"	m	struct:tair::_item_meta
log_self	src\common\item_data_info.hpp	/^      void log_self()$/;"	f	struct:tair::_item_meta
m_data	src\common\item_data_info.hpp	/^      char m_data[0];$/;"	m	struct:tair::_ItemData
magic	src\common\item_data_info.hpp	/^      uint16_t magic;$/;"	m	struct:tair::_item_meta
mdate	src\common\item_data_info.hpp	/^      uint32_t mdate; \/\/ item last modified time$/;"	m	struct:tair::_item_meta
padsize	src\common\item_data_info.hpp	/^      uint32_t padsize; \/\/ padding size: 64KB$/;"	m	struct:tair::_item_meta
tair	src\common\item_data_info.hpp	/^namespace tair {$/;"	n
valsize	src\common\item_data_info.hpp	/^      uint32_t valsize : 24; \/\/ value size$/;"	m	struct:tair::_item_meta
version	src\common\item_data_info.hpp	/^      uint16_t version;$/;"	m	struct:tair::_item_meta
DISK_QUEUE_CONFIG_FILE	src\common\local_queue.hpp	13;"	d
LocalQueue	src\common\local_queue.hpp	/^    LocalQueue(serialize_func_ serializer, deserialize_func_ deserializer) :$/;"	f	class:LocalQueue
LocalQueue	src\common\local_queue.hpp	/^class LocalQueue {$/;"	c
__LOCAL_QUEUE__	src\common\local_queue.hpp	2;"	d
_disk_queue	src\common\local_queue.hpp	/^    DiskQueue<BaseQueueNode> _disk_queue;$/;"	m	class:LocalQueue
_head_index_lock	src\common\local_queue.hpp	/^    pthread_mutex_t _head_index_lock;$/;"	m	class:LocalQueue
_may_next_in_disk	src\common\local_queue.hpp	/^    BaseQueueNode* _may_next_in_disk;$/;"	m	class:LocalQueue
_may_next_in_mem	src\common\local_queue.hpp	/^    BaseQueueNode* _may_next_in_mem;$/;"	m	class:LocalQueue
_mem_queue	src\common\local_queue.hpp	/^    MemQueue<BaseQueueNode> _mem_queue;$/;"	m	class:LocalQueue
_mode	src\common\local_queue.hpp	/^    int _mode;$/;"	m	class:LocalQueue
_pop_next_node_id	src\common\local_queue.hpp	/^    long long _pop_next_node_id;$/;"	m	class:LocalQueue
_push_next_node_id	src\common\local_queue.hpp	/^    long long _push_next_node_id;$/;"	m	class:LocalQueue
_tail_index_lock	src\common\local_queue.hpp	/^    pthread_mutex_t _tail_index_lock;$/;"	m	class:LocalQueue
deserialize_func_	src\common\local_queue.hpp	/^typedef bool (*deserialize_func_)(BaseQueueNode** data, tbnet::DataBuffer *buffer);$/;"	t	class:LocalQueue
failed_deal_switch	src\common\local_queue.hpp	/^    bool failed_deal_switch;$/;"	m	class:LocalQueue
init	src\common\local_queue.hpp	/^void LocalQueue::init() {$/;"	f	class:LocalQueue
isInit	src\common\local_queue.hpp	/^bool LocalQueue::isInit() {$/;"	f	class:LocalQueue
pop	src\common\local_queue.hpp	/^bool LocalQueue::pop(BaseQueueNode** node) {$/;"	f	class:LocalQueue
push	src\common\local_queue.hpp	/^bool LocalQueue::push(BaseQueueNode* node) {$/;"	f	class:LocalQueue
serialize_func_	src\common\local_queue.hpp	/^typedef bool (*serialize_func_)(BaseQueueNode* data, tbnet::DataBuffer **buffer);$/;"	t	class:LocalQueue
~LocalQueue	src\common\local_queue.hpp	/^    ~LocalQueue() {}$/;"	f	class:LocalQueue
TAIR_LOG_H	src\common\log.hpp	18;"	d
log_debug	src\common\log.hpp	25;"	d
log_error	src\common\log.hpp	22;"	d
log_info	src\common\log.hpp	24;"	d
log_warn	src\common\log.hpp	23;"	d
tair	src\common\log.hpp	/^namespace tair {$/;"	n
MemQueue	src\common\mem_queue.hpp	/^MemQueue<T>::MemQueue(const int mode, const int size) {$/;"	f	class:MemQueue
MemQueue	src\common\mem_queue.hpp	/^class MemQueue {$/;"	c
__MEM_QUEUE__	src\common\mem_queue.hpp	2;"	d
_default_max_size	src\common\mem_queue.hpp	/^    const static int _default_max_size;$/;"	m	class:MemQueue
_default_max_size	src\common\mem_queue.hpp	/^const int MemQueue<T>::_default_max_size = 4*1024;$/;"	m	class:MemQueue
_head_index	src\common\mem_queue.hpp	/^    int _head_index;$/;"	m	class:MemQueue
_head_index_lock	src\common\mem_queue.hpp	/^    pthread_mutex_t _head_index_lock;$/;"	m	class:MemQueue
_is_inited	src\common\mem_queue.hpp	/^    bool _is_inited;$/;"	m	class:MemQueue
_max_size	src\common\mem_queue.hpp	/^    int _max_size;$/;"	m	class:MemQueue
_mem_queue	src\common\mem_queue.hpp	/^    T** _mem_queue;$/;"	m	class:MemQueue
_mode	src\common\mem_queue.hpp	/^    int _mode;$/;"	m	class:MemQueue
_tail_index	src\common\mem_queue.hpp	/^    int _tail_index;$/;"	m	class:MemQueue
_tail_index_lock	src\common\mem_queue.hpp	/^    pthread_mutex_t _tail_index_lock;$/;"	m	class:MemQueue
empty	src\common\mem_queue.hpp	/^bool MemQueue<T>::empty() {$/;"	f	class:MemQueue
full	src\common\mem_queue.hpp	/^bool MemQueue<T>::full() {$/;"	f	class:MemQueue
isInit	src\common\mem_queue.hpp	/^bool MemQueue<T>::isInit() {$/;"	f	class:MemQueue
pop	src\common\mem_queue.hpp	/^bool MemQueue<T>::pop(T** data) {$/;"	f	class:MemQueue
push	src\common\mem_queue.hpp	/^bool MemQueue<T>::push(T* data) {$/;"	f	class:MemQueue
~MemQueue	src\common\mem_queue.hpp	/^MemQueue<T>::~MemQueue() {$/;"	f	class:MemQueue
TAIR_MMAP_FILE_H	src\common\mmap_file.hpp	18;"	d
close_file	src\common\mmap_file.hpp	/^      void close_file()$/;"	f	class:tair::file_mapper
data	src\common\mmap_file.hpp	/^      void *data;$/;"	m	class:tair::file_mapper
fd	src\common\mmap_file.hpp	/^      int fd;$/;"	m	class:tair::file_mapper
file_mapper	src\common\mmap_file.hpp	/^      file_mapper()$/;"	f	class:tair::file_mapper
file_mapper	src\common\mmap_file.hpp	/^   class file_mapper {$/;"	c	namespace:tair
get_data	src\common\mmap_file.hpp	/^      void *get_data() const$/;"	f	class:tair::file_mapper
get_modify_time	src\common\mmap_file.hpp	/^      int get_modify_time() const$/;"	f	class:tair::file_mapper
get_size	src\common\mmap_file.hpp	/^      int get_size() const$/;"	f	class:tair::file_mapper
open_file	src\common\mmap_file.hpp	/^      bool open_file(const char* file_name, int create_length = 0) $/;"	f	class:tair::file_mapper
size	src\common\mmap_file.hpp	/^      int size;$/;"	m	class:tair::file_mapper
sync_file	src\common\mmap_file.hpp	/^      void sync_file()$/;"	f	class:tair::file_mapper
tair	src\common\mmap_file.hpp	/^namespace tair {$/;"	n
~file_mapper	src\common\mmap_file.hpp	/^      ~file_mapper()$/;"	f	class:tair::file_mapper
MULTI_READ_MULTI_WRITE	src\common\queue_config.h	/^    MULTI_READ_MULTI_WRITE = 3$/;"	e	enum:__anon6
MULTI_READ_ONE_WRITE	src\common\queue_config.h	/^    MULTI_READ_ONE_WRITE = 1,$/;"	e	enum:__anon6
ONE_READ_MULTI_WRITE	src\common\queue_config.h	/^    ONE_READ_MULTI_WRITE = 2,$/;"	e	enum:__anon6
ONE_READ_ONE_WRITE	src\common\queue_config.h	/^    ONE_READ_ONE_WRITE = 0,$/;"	e	enum:__anon6
__QUEUE_CONFIG__	src\common\queue_config.h	2;"	d
do_compress	src\common\stat_helper.cpp	/^   void stat_helper::do_compress()$/;"	f	class:tair::stat_helper
get_and_reset	src\common\stat_helper.cpp	/^   char *stat_helper::get_and_reset()$/;"	f	class:tair::stat_helper
get_curr_stats	src\common\stat_helper.cpp	/^   tair_stat *stat_helper::get_curr_stats()$/;"	f	class:tair::stat_helper
get_size	src\common\stat_helper.cpp	/^   int stat_helper::get_size()$/;"	f	class:tair::stat_helper
get_stats	src\common\stat_helper.cpp	/^   tair_stat *stat_helper::get_stats()$/;"	f	class:tair::stat_helper
init	src\common\stat_helper.cpp	/^   void stat_helper::init()$/;"	f	class:tair::stat_helper
reset	src\common\stat_helper.cpp	/^   void stat_helper::reset()$/;"	f	class:tair::stat_helper
run	src\common\stat_helper.cpp	/^   void stat_helper::run(tbsys::CThread *thread, void *arg)$/;"	f	class:tair::stat_helper
stat_evict	src\common\stat_helper.cpp	/^   void stat_helper::stat_evict(int area)$/;"	f	class:tair::stat_helper
stat_get	src\common\stat_helper.cpp	/^   void stat_helper::stat_get(int area, int rc)$/;"	f	class:tair::stat_helper
stat_helper	src\common\stat_helper.cpp	/^   stat_helper::stat_helper()$/;"	f	class:tair::stat_helper
stat_helper_instance	src\common\stat_helper.cpp	/^   stat_helper stat_helper::stat_helper_instance;$/;"	m	class:tair::stat_helper	file:
stat_put	src\common\stat_helper.cpp	/^   void stat_helper::stat_put(int area)$/;"	f	class:tair::stat_helper
stat_remove	src\common\stat_helper.cpp	/^   void stat_helper::stat_remove(int area)$/;"	f	class:tair::stat_helper
tair	src\common\stat_helper.cpp	/^namespace tair {$/;"	n	file:
~stat_helper	src\common\stat_helper.cpp	/^   stat_helper::~stat_helper()$/;"	f	class:tair::stat_helper
STAT_LENGTH	src\common\stat_helper.hpp	/^   const static int STAT_LENGTH = TAIR_MAX_AREA_COUNT;$/;"	m	namespace:tair
STAT_TOTAL_SIZE	src\common\stat_helper.hpp	/^   const static int STAT_TOTAL_SIZE = STAT_LENGTH * sizeof(tair_stat);$/;"	m	namespace:tair
TAIR_STAT	src\common\stat_helper.hpp	31;"	d
TAIR_STAT_HELPER_H	src\common\stat_helper.hpp	18;"	d
compressed_data	src\common\stat_helper.hpp	/^      char *compressed_data;$/;"	m	class:tair::stat_helper
curr_stat	src\common\stat_helper.hpp	/^      tair_stat *curr_stat;$/;"	m	class:tair::stat_helper
data_size	src\common\stat_helper.hpp	/^      int data_size;$/;"	m	class:tair::stat_helper
last_send_time	src\common\stat_helper.hpp	/^      uint64_t last_send_time;$/;"	m	class:tair::stat_helper
sent	src\common\stat_helper.hpp	/^      bool sent;$/;"	m	class:tair::stat_helper
set_storage_manager	src\common\stat_helper.hpp	/^      void set_storage_manager(tair::storage::storage_manager *storage_mgr) {$/;"	f	class:tair::stat_helper
stat	src\common\stat_helper.hpp	/^      tair_stat *stat;$/;"	m	class:tair::stat_helper
stat_helper	src\common\stat_helper.hpp	/^   class stat_helper : public tbsys::CDefaultRunnable {$/;"	c	namespace:tair
stat_helper_instance	src\common\stat_helper.hpp	/^      static stat_helper stat_helper_instance;$/;"	m	class:tair::stat_helper
storage_mgr	src\common\stat_helper.hpp	/^      tair::storage::storage_manager *storage_mgr;$/;"	m	class:tair::stat_helper
tair	src\common\stat_helper.hpp	/^namespace tair {$/;"	n
TAIR_STATINFO_H	src\common\stat_info.hpp	18;"	d
add_data_size	src\common\stat_info.hpp	/^      void add_data_size(uint64_t ds) { data_size_value += ds; }$/;"	f	class:tair::tair_pstat
add_item_count	src\common\stat_info.hpp	/^      void add_item_count(int c=1) { item_count_value += c; }$/;"	f	class:tair::tair_pstat
add_use_size	src\common\stat_info.hpp	/^      void add_use_size(uint64_t ds) { use_size_value += ds; }$/;"	f	class:tair::tair_pstat
data_size	src\common\stat_info.hpp	/^      uint64_t data_size() { return data_size_value; }$/;"	f	class:tair::tair_pstat
data_size	src\common\stat_info.hpp	/^      uint64_t data_size() { return data_size_value; }$/;"	f	class:tair::tair_stat
data_size_value	src\common\stat_info.hpp	/^      uint64_t data_size_value;$/;"	m	class:tair::tair_pstat
data_size_value	src\common\stat_info.hpp	/^      uint64_t data_size_value;$/;"	m	class:tair::tair_stat
evict_count	src\common\stat_info.hpp	/^      int evict_count() { return atomic_read(&evict_count_value); }$/;"	f	class:tair::tair_stat
evict_count_value	src\common\stat_info.hpp	/^      atomic_t evict_count_value;$/;"	m	class:tair::tair_stat
get_count	src\common\stat_info.hpp	/^      int get_count() { return atomic_read(&get_count_value); }$/;"	f	class:tair::tair_stat
get_count_value	src\common\stat_info.hpp	/^      atomic_t get_count_value;$/;"	m	class:tair::tair_stat
hit_count	src\common\stat_info.hpp	/^      int hit_count() { return atomic_read(&hit_count_value); }$/;"	f	class:tair::tair_stat
hit_count_value	src\common\stat_info.hpp	/^      atomic_t hit_count_value;$/;"	m	class:tair::tair_stat
inc_evict_count	src\common\stat_info.hpp	/^      void inc_evict_count() { atomic_inc(&evict_count_value); }$/;"	f	class:tair::tair_stat
inc_get_count	src\common\stat_info.hpp	/^      void inc_get_count() { atomic_inc(&get_count_value); }$/;"	f	class:tair::tair_stat
inc_hit_count	src\common\stat_info.hpp	/^      void inc_hit_count() { atomic_inc(&hit_count_value); }$/;"	f	class:tair::tair_stat
inc_put_count	src\common\stat_info.hpp	/^      void inc_put_count() { atomic_inc(&put_count_value); }$/;"	f	class:tair::tair_stat
inc_remove_count	src\common\stat_info.hpp	/^      void inc_remove_count() { atomic_inc(&remove_count_value); }$/;"	f	class:tair::tair_stat
item_count	src\common\stat_info.hpp	/^      uint64_t item_count() { return item_count_value; }$/;"	f	class:tair::tair_pstat
item_count	src\common\stat_info.hpp	/^      uint64_t item_count() { return item_count_value; }$/;"	f	class:tair::tair_stat
item_count_value	src\common\stat_info.hpp	/^      uint64_t item_count_value;$/;"	m	class:tair::tair_pstat
item_count_value	src\common\stat_info.hpp	/^      uint64_t item_count_value;$/;"	m	class:tair::tair_stat
put_count	src\common\stat_info.hpp	/^      int put_count() { return atomic_read(&put_count_value); }$/;"	f	class:tair::tair_stat
put_count_value	src\common\stat_info.hpp	/^      atomic_t put_count_value;$/;"	m	class:tair::tair_stat
remove_count	src\common\stat_info.hpp	/^      int remove_count() { return atomic_read(&remove_count_value); }$/;"	f	class:tair::tair_stat
remove_count_value	src\common\stat_info.hpp	/^      atomic_t remove_count_value;$/;"	m	class:tair::tair_stat
set_evict_count	src\common\stat_info.hpp	/^      void set_evict_count(int new_value) { atomic_set(&evict_count_value, new_value); }$/;"	f	class:tair::tair_stat
set_get_count	src\common\stat_info.hpp	/^      void set_get_count(int new_value) { atomic_set(&get_count_value, new_value); }$/;"	f	class:tair::tair_stat
set_hit_count	src\common\stat_info.hpp	/^      void set_hit_count(int newValue) { atomic_set(&hit_count_value, newValue); }$/;"	f	class:tair::tair_stat
set_put_count	src\common\stat_info.hpp	/^      void set_put_count(int new_value) { atomic_set(&put_count_value, new_value); }$/;"	f	class:tair::tair_stat
set_remove_count	src\common\stat_info.hpp	/^      void set_remove_count(int newValue) { atomic_set(&remove_count_value, newValue); }$/;"	f	class:tair::tair_stat
sub_data_size	src\common\stat_info.hpp	/^      void sub_data_size(uint64_t ds) { data_size_value -= ds; }$/;"	f	class:tair::tair_pstat
sub_item_count	src\common\stat_info.hpp	/^      void sub_item_count(int c=1) { item_count_value -= c; }$/;"	f	class:tair::tair_pstat
sub_use_size	src\common\stat_info.hpp	/^      void sub_use_size(uint64_t ds) { use_size_value -= ds; }$/;"	f	class:tair::tair_pstat
tair	src\common\stat_info.hpp	/^namespace tair {$/;"	n
tair_pstat	src\common\stat_info.hpp	/^      tair_pstat() {$/;"	f	class:tair::tair_pstat
tair_pstat	src\common\stat_info.hpp	/^   class tair_pstat {$/;"	c	namespace:tair
tair_stat	src\common\stat_info.hpp	/^      tair_stat() {$/;"	f	class:tair::tair_stat
tair_stat	src\common\stat_info.hpp	/^   class tair_stat {$/;"	c	namespace:tair
use_size	src\common\stat_info.hpp	/^      uint64_t use_size() { return use_size_value; }$/;"	f	class:tair::tair_pstat
use_size	src\common\stat_info.hpp	/^      uint64_t use_size() { return use_size_value; }$/;"	f	class:tair::tair_stat
use_size_value	src\common\stat_info.hpp	/^      uint64_t use_size_value;$/;"	m	class:tair::tair_pstat
use_size_value	src\common\stat_info.hpp	/^      uint64_t use_size_value;$/;"	m	class:tair::tair_stat
ip	src\common\util.cpp	/^      uint64_t local_server_ip::ip;$/;"	m	class:tair::util::local_server_ip	file:
tair	src\common\util.cpp	/^namespace tair {$/;"	n	file:
util	src\common\util.cpp	/^   namespace util {$/;"	n	namespace:tair	file:
TAIR_MHASH_HPP	src\common\util.hpp	18;"	d
conv_raw_string	src\common\util.hpp	/^         static void conv_raw_string(const char *str, char *result, int *size)$/;"	f	class:tair::util::string_util
conv_show_string	src\common\util.hpp	/^         static char *conv_show_string(char *str, int size, char *ret = NULL, int msize = 0) $/;"	f	class:tair::util::string_util
hash_util	src\common\util.hpp	/^      class hash_util$/;"	c	namespace:tair::util
ip	src\common\util.hpp	/^         static uint64_t ip;$/;"	m	class:tair::util::local_server_ip
local_server_ip	src\common\util.hpp	/^      class local_server_ip {$/;"	c	namespace:tair::util
mhash1	src\common\util.hpp	/^         static unsigned int mhash1(char *key, int size)$/;"	f	class:tair::util::hash_util
mhash2	src\common\util.hpp	/^         static unsigned int mhash2(char *key, int size)$/;"	f	class:tair::util::hash_util
mur_mur_hash	src\common\util.hpp	/^         static unsigned int mur_mur_hash(const void *key, int len)$/;"	f	class:tair::util::string_util
string_util	src\common\util.hpp	/^      class string_util$/;"	c	namespace:tair::util
tair	src\common\util.hpp	/^namespace tair$/;"	n
util	src\common\util.hpp	/^   namespace util$/;"	n	namespace:tair
TAIR_WAIT_OBJECT	src\common\wait_object.hpp	18;"	d
add_new_wait_object	src\common\wait_object.hpp	/^         void add_new_wait_object(wait_object *cwo)$/;"	f	class:tair::common::wait_object_manager
common	src\common\wait_object.hpp	/^   namespace common {$/;"	n	namespace:tair
cond	src\common\wait_object.hpp	/^         tbsys::CThreadCond cond;$/;"	m	class:tair::common::wait_object
create_wait_object	src\common\wait_object.hpp	/^         wait_object* create_wait_object()$/;"	f	class:tair::common::wait_object_manager
create_wait_object	src\common\wait_object.hpp	/^         wait_object* create_wait_object(const set<tbnet_pcode_type>& except_set)$/;"	f	class:tair::common::wait_object_manager
create_wait_object	src\common\wait_object.hpp	/^         wait_object* create_wait_object(const tbnet_pcode_type& except)$/;"	f	class:tair::common::wait_object_manager
destroy_wait_object	src\common\wait_object.hpp	/^         void destroy_wait_object(wait_object *cwo)$/;"	f	class:tair::common::wait_object_manager
done	src\common\wait_object.hpp	/^         void done() {$/;"	f	class:tair::common::wait_object
done_count	src\common\wait_object.hpp	/^         int done_count;$/;"	m	class:tair::common::wait_object
except_pcode	src\common\wait_object.hpp	/^         tbnet_pcode_type except_pcode;$/;"	m	class:tair::common::wait_object
except_pcode_set	src\common\wait_object.hpp	/^         set<tbnet_pcode_type> except_pcode_set;$/;"	m	class:tair::common::wait_object
get_id	src\common\wait_object.hpp	/^         int get_id() const$/;"	f	class:tair::common::wait_object
get_packet	src\common\wait_object.hpp	/^         base_packet *get_packet(int index=0)$/;"	f	class:tair::common::wait_object
get_packet_count	src\common\wait_object.hpp	/^         int get_packet_count()$/;"	f	class:tair::common::wait_object
id	src\common\wait_object.hpp	/^         int id;$/;"	m	class:tair::common::wait_object
init	src\common\wait_object.hpp	/^         void init(){$/;"	f	class:tair::common::wait_object
insert_packet	src\common\wait_object.hpp	/^         bool insert_packet(base_packet* packet)$/;"	f	class:tair::common::wait_object
mutex	src\common\wait_object.hpp	/^         tbsys::CThreadMutex mutex;$/;"	m	class:tair::common::wait_object
mutex	src\common\wait_object.hpp	/^         tbsys::CThreadMutex mutex;$/;"	m	class:tair::common::wait_object_manager
null_pcode	src\common\wait_object.hpp	/^      const tbnet_pcode_type null_pcode = -1;$/;"	m	namespace:tair::common
resp	src\common\wait_object.hpp	/^         base_packet *resp;$/;"	m	class:tair::common::wait_object
resp_list	src\common\wait_object.hpp	/^         vector<base_packet*> *resp_list;$/;"	m	class:tair::common::wait_object
set_no_free	src\common\wait_object.hpp	/^         void set_no_free()$/;"	f	class:tair::common::wait_object
tair	src\common\wait_object.hpp	/^namespace tair {$/;"	n
tbnet_pcode_type	src\common\wait_object.hpp	/^      typedef int tbnet_pcode_type;$/;"	t	namespace:tair::common
wait_done	src\common\wait_object.hpp	/^         bool wait_done(int count, int timeout = 0)$/;"	f	class:tair::common::wait_object
wait_object	src\common\wait_object.hpp	/^         wait_object()$/;"	f	class:tair::common::wait_object
wait_object	src\common\wait_object.hpp	/^         wait_object(const set<tbnet_pcode_type>& except_set)$/;"	f	class:tair::common::wait_object
wait_object	src\common\wait_object.hpp	/^         wait_object(const tbnet_pcode_type& except)$/;"	f	class:tair::common::wait_object
wait_object	src\common\wait_object.hpp	/^      class wait_object {$/;"	c	namespace:tair::common
wait_object_manager	src\common\wait_object.hpp	/^         wait_object_manager()$/;"	f	class:tair::common::wait_object_manager
wait_object_manager	src\common\wait_object.hpp	/^      class wait_object_manager {$/;"	c	namespace:tair::common
wait_object_map	src\common\wait_object.hpp	/^         hash_map<int, wait_object*> wait_object_map;$/;"	m	class:tair::common::wait_object_manager
wait_object_seq_id	src\common\wait_object.hpp	/^         int wait_object_seq_id;$/;"	m	class:tair::common::wait_object_manager
wakeup_wait_object	src\common\wait_object.hpp	/^         void wakeup_wait_object(int id, base_packet *packet)$/;"	f	class:tair::common::wait_object_manager
~wait_object	src\common\wait_object.hpp	/^         ~wait_object()$/;"	f	class:tair::common::wait_object
~wait_object_manager	src\common\wait_object.hpp	/^         ~wait_object_manager()$/;"	f	class:tair::common::wait_object_manager
bucket_count	src\configserver\conf_server_table_checker.cpp	/^uint32_t bucket_count;$/;"	v
buckets_list_type	src\configserver\conf_server_table_checker.cpp	/^typedef vector<int> buckets_list_type;$/;"	t	file:
build_ds_bucket_structs	src\configserver\conf_server_table_checker.cpp	/^void build_ds_bucket_structs(){$/;"	f
caculate_ds_count	src\configserver\conf_server_table_checker.cpp	/^int caculate_ds_count(hash_table_type & hash_table){$/;"	f
copy_count	src\configserver\conf_server_table_checker.cpp	/^uint32_t copy_count;$/;"	v
d_hash_table	src\configserver\conf_server_table_checker.cpp	/^hash_table_type d_hash_table;$/;"	v
ds_bucket	src\configserver\conf_server_table_checker.cpp	/^ds_bucket_map ds_bucket;$/;"	v
ds_bucket_map	src\configserver\conf_server_table_checker.cpp	/^typedef map<uint64_t, buckets_list_type> ds_bucket_map;$/;"	t	file:
ds_list	src\configserver\conf_server_table_checker.cpp	/^vector<uint64_t> ds_list;$/;"	v
hash_table	src\configserver\conf_server_table_checker.cpp	/^hash_table_type hash_table;$/;"	v
hash_table_line_type	src\configserver\conf_server_table_checker.cpp	/^typedef vector<server_id_type> hash_table_line_type;$/;"	t	file:
hash_table_type	src\configserver\conf_server_table_checker.cpp	/^typedef map<int, hash_table_line_type> hash_table_type;$/;"	t	file:
load_hash_table	src\configserver\conf_server_table_checker.cpp	/^void load_hash_table(hash_table_type & hash_table_data, uint64_t * p_hash_table)$/;"	f
m_hash_table	src\configserver\conf_server_table_checker.cpp	/^hash_table_type m_hash_table;$/;"	v
main	src\configserver\conf_server_table_checker.cpp	/^int main(int argc, char **argv)$/;"	f
pos_mask	src\configserver\conf_server_table_checker.cpp	/^uint32_t pos_mask;$/;"	v
print_hash_table_order_by_bucket	src\configserver\conf_server_table_checker.cpp	/^void print_hash_table_order_by_bucket(hash_table_type & hash_table){$/;"	f
print_hash_table_order_by_ds	src\configserver\conf_server_table_checker.cpp	/^void print_hash_table_order_by_ds(){$/;"	f
server_id_type	src\configserver\conf_server_table_checker.cpp	/^typedef pair<uint64_t, uint32_t> server_id_type;$/;"	t	file:
close	src\configserver\conf_server_table_manager.cpp	/^    void conf_server_table_manager::close()$/;"	f	class:tair::config_server::conf_server_table_manager
conf_server_table_manager	src\configserver\conf_server_table_manager.cpp	/^    conf_server_table_manager::conf_server_table_manager()$/;"	f	class:tair::config_server::conf_server_table_manager
config_server	src\configserver\conf_server_table_manager.cpp	/^  namespace config_server {$/;"	n	namespace:tair	file:
create	src\configserver\conf_server_table_manager.cpp	/^    bool conf_server_table_manager::create(const string & file_name,$/;"	f	class:tair::config_server::conf_server_table_manager
deflate_hash_table	src\configserver\conf_server_table_manager.cpp	/^      deflate_hash_table(int &hash_table_deflate_size,$/;"	f	class:tair::config_server::conf_server_table_manager
deflate_hash_table	src\configserver\conf_server_table_manager.cpp	/^    void conf_server_table_manager::deflate_hash_table()$/;"	f	class:tair::config_server::conf_server_table_manager
get_SVR_table_size	src\configserver\conf_server_table_manager.cpp	/^    uint32_t conf_server_table_manager::get_SVR_table_size() const$/;"	f	class:tair::config_server::conf_server_table_manager
get_copy_count	src\configserver\conf_server_table_manager.cpp	/^    uint32_t conf_server_table_manager::get_copy_count() const$/;"	f	class:tair::config_server::conf_server_table_manager
get_data	src\configserver\conf_server_table_manager.cpp	/^    char *conf_server_table_manager::get_data()$/;"	f	class:tair::config_server::conf_server_table_manager
get_dest_data_skip	src\configserver\conf_server_table_manager.cpp	/^    uint32_t conf_server_table_manager::get_dest_data_skip() const$/;"	f	class:tair::config_server::conf_server_table_manager
get_hash_table_byte_size	src\configserver\conf_server_table_manager.cpp	/^    uint32_t conf_server_table_manager::get_hash_table_byte_size() const$/;"	f	class:tair::config_server::conf_server_table_manager
get_hash_table_size	src\configserver\conf_server_table_manager.cpp	/^    uint32_t conf_server_table_manager::get_hash_table_size() const$/;"	f	class:tair::config_server::conf_server_table_manager
get_mig_data_skip	src\configserver\conf_server_table_manager.cpp	/^    uint32_t conf_server_table_manager::get_mig_data_skip() const$/;"	f	class:tair::config_server::conf_server_table_manager
get_server_bucket_count	src\configserver\conf_server_table_manager.cpp	/^    uint32_t conf_server_table_manager::get_server_bucket_count() const$/;"	f	class:tair::config_server::conf_server_table_manager
get_size	src\configserver\conf_server_table_manager.cpp	/^    int conf_server_table_manager::get_size()$/;"	f	class:tair::config_server::conf_server_table_manager
init	src\configserver\conf_server_table_manager.cpp	/^    void conf_server_table_manager::init()$/;"	f	class:tair::config_server::conf_server_table_manager
is_file_opened	src\configserver\conf_server_table_manager.cpp	/^    bool conf_server_table_manager::is_file_opened() const$/;"	f	class:tair::config_server::conf_server_table_manager
map_meta_data	src\configserver\conf_server_table_manager.cpp	/^    char *conf_server_table_manager::map_meta_data()$/;"	f	class:tair::config_server::conf_server_table_manager
open	src\configserver\conf_server_table_manager.cpp	/^    bool conf_server_table_manager::open(const string & file_name)$/;"	f	class:tair::config_server::conf_server_table_manager
print_hash_table	src\configserver\conf_server_table_manager.cpp	/^    void conf_server_table_manager::print_hash_table(const uint64_t * root) const$/;"	f	class:tair::config_server::conf_server_table_manager
print_info	src\configserver\conf_server_table_manager.cpp	/^    void conf_server_table_manager::print_info() const$/;"	f	class:tair::config_server::conf_server_table_manager
print_table	src\configserver\conf_server_table_manager.cpp	/^    void conf_server_table_manager::print_table() const$/;"	f	class:tair::config_server::conf_server_table_manager
set_copy_count	src\configserver\conf_server_table_manager.cpp	/^    bool conf_server_table_manager::set_copy_count(uint32_t copy_count)$/;"	f	class:tair::config_server::conf_server_table_manager
set_server_bucket_count	src\configserver\conf_server_table_manager.cpp	/^      set_server_bucket_count(uint32_t bucket_count)$/;"	f	class:tair::config_server::conf_server_table_manager
sync	src\configserver\conf_server_table_manager.cpp	/^    void conf_server_table_manager::sync()$/;"	f	class:tair::config_server::conf_server_table_manager
tair	src\configserver\conf_server_table_manager.cpp	/^namespace tair {$/;"	n	file:
translate_from_txt2binary	src\configserver\conf_server_table_manager.cpp	/^      translate_from_txt2binary(const string & src_file_name,$/;"	f	class:tair::config_server::conf_server_table_manager
~conf_server_table_manager	src\configserver\conf_server_table_manager.cpp	/^    conf_server_table_manager::~conf_server_table_manager()$/;"	f	class:tair::config_server::conf_server_table_manager
CONF_SERVER_TABLE_MANAGER_H	src\configserver\conf_server_table_manager.hpp	16;"	d
area_capacity_version	src\configserver\conf_server_table_manager.hpp	/^      uint32_t *area_capacity_version;$/;"	m	class:tair::config_server::conf_server_table_manager
client_version	src\configserver\conf_server_table_manager.hpp	/^      uint32_t *client_version;$/;"	m	class:tair::config_server::conf_server_table_manager
conf_server_table_manager	src\configserver\conf_server_table_manager.hpp	/^    class conf_server_table_manager {$/;"	c	namespace:tair::config_server
config_server	src\configserver\conf_server_table_manager.hpp	/^  namespace config_server {$/;"	n	namespace:tair
d_hash_table	src\configserver\conf_server_table_manager.hpp	/^      uint64_t *d_hash_table;$/;"	m	class:tair::config_server::conf_server_table_manager
file_name	src\configserver\conf_server_table_manager.hpp	/^        std::string file_name;$/;"	m	class:tair::config_server::conf_server_table_manager
file_opened	src\configserver\conf_server_table_manager.hpp	/^      bool file_opened;$/;"	m	class:tair::config_server::conf_server_table_manager
flag	src\configserver\conf_server_table_manager.hpp	/^      uint32_t *flag;$/;"	m	class:tair::config_server::conf_server_table_manager
get_d_hash_table	src\configserver\conf_server_table_manager.hpp	/^      uint64_t * get_d_hash_table(){$/;"	f	class:tair::config_server::conf_server_table_manager
get_file_name	src\configserver\conf_server_table_manager.hpp	/^      inline std::string get_file_name() const$/;"	f	class:tair::config_server::conf_server_table_manager
get_hash_table	src\configserver\conf_server_table_manager.hpp	/^      uint64_t * get_hash_table(){$/;"	f	class:tair::config_server::conf_server_table_manager
get_m_hash_table	src\configserver\conf_server_table_manager.hpp	/^      uint64_t * get_m_hash_table(){$/;"	f	class:tair::config_server::conf_server_table_manager
hash_table	src\configserver\conf_server_table_manager.hpp	/^      uint64_t *hash_table;$/;"	m	class:tair::config_server::conf_server_table_manager
hash_table_deflate_data_for_client	src\configserver\conf_server_table_manager.hpp	/^      char *hash_table_deflate_data_for_client;$/;"	m	class:tair::config_server::conf_server_table_manager
hash_table_deflate_data_for_client_size	src\configserver\conf_server_table_manager.hpp	/^      int hash_table_deflate_data_for_client_size;$/;"	m	class:tair::config_server::conf_server_table_manager
hash_table_deflate_data_for_data_server	src\configserver\conf_server_table_manager.hpp	/^      char *hash_table_deflate_data_for_data_server;$/;"	m	class:tair::config_server::conf_server_table_manager
hash_table_deflate_data_for_data_server_size	src\configserver\conf_server_table_manager.hpp	/^      int hash_table_deflate_data_for_data_server_size;$/;"	m	class:tair::config_server::conf_server_table_manager
last_load_config_time	src\configserver\conf_server_table_manager.hpp	/^      uint32_t *last_load_config_time;$/;"	m	class:tair::config_server::conf_server_table_manager
m_hash_table	src\configserver\conf_server_table_manager.hpp	/^      uint64_t *m_hash_table;$/;"	m	class:tair::config_server::conf_server_table_manager
migrate_block_count	src\configserver\conf_server_table_manager.hpp	/^      int32_t *migrate_block_count;$/;"	m	class:tair::config_server::conf_server_table_manager
mmap_file	src\configserver\conf_server_table_manager.hpp	/^      file_mapper mmap_file;$/;"	m	class:tair::config_server::conf_server_table_manager
plugins_version	src\configserver\conf_server_table_manager.hpp	/^      uint32_t *plugins_version;$/;"	m	class:tair::config_server::conf_server_table_manager
server_bucket_count	src\configserver\conf_server_table_manager.hpp	/^      uint32_t *server_bucket_count;$/;"	m	class:tair::config_server::conf_server_table_manager
server_copy_count	src\configserver\conf_server_table_manager.hpp	/^      uint32_t *server_copy_count;$/;"	m	class:tair::config_server::conf_server_table_manager
server_version	src\configserver\conf_server_table_manager.hpp	/^      uint32_t *server_version;$/;"	m	class:tair::config_server::conf_server_table_manager
tair	src\configserver\conf_server_table_manager.hpp	/^namespace tair {$/;"	n
main	src\configserver\conf_server_table_monitor.cpp	/^main(int argc, char **argv)$/;"	f
main	src\configserver\conf_server_table_transfer.cpp	/^main(int argc, char **argv)$/;"	f
main	src\configserver\const_parameter_pinter.cpp	/^main()$/;"	f
check_migrate_complete	src\configserver\group_info.cpp	/^    bool group_info::check_migrate_complete(uint64_t slave_server_id)$/;"	f	class:tair::config_server::group_info
config_server	src\configserver\group_info.cpp	/^  namespace config_server {$/;"	n	namespace:tair	file:
correct_server_info	src\configserver\group_info.cpp	/^    void group_info::correct_server_info(bool is_sync)$/;"	f	class:tair::config_server::group_info
deflate_hash_table	src\configserver\group_info.cpp	/^    void group_info::deflate_hash_table()$/;"	f	class:tair::config_server::group_info
do_finish_migrate	src\configserver\group_info.cpp	/^    bool group_info::do_finish_migrate(uint64_t server_id,$/;"	f	class:tair::config_server::group_info
do_proxy_report	src\configserver\group_info.cpp	/^    void group_info::do_proxy_report(const request_heartbeat & req)$/;"	f	class:tair::config_server::group_info
fill_migrate_machine	src\configserver\group_info.cpp	/^    int group_info::fill_migrate_machine()$/;"	f	class:tair::config_server::group_info
find_available_server	src\configserver\group_info.cpp	/^    void group_info::find_available_server()$/;"	f	class:tair::config_server::group_info
get_SVR_table_size	src\configserver\group_info.cpp	/^    uint32_t group_info::get_SVR_table_size() const$/;"	f	class:tair::config_server::group_info
get_area_capacity_info	src\configserver\group_info.cpp	/^    const map<uint32_t, uint64_t> &group_info::get_area_capacity_info() const$/;"	f	class:tair::config_server::group_info
get_area_capacity_version	src\configserver\group_info.cpp	/^    uint32_t group_info::get_area_capacity_version() const$/;"	f	class:tair::config_server::group_info
get_client_version	src\configserver\group_info.cpp	/^    uint32_t group_info::get_client_version() const$/;"	f	class:tair::config_server::group_info
get_common_map	src\configserver\group_info.cpp	/^    tbsys::STR_STR_MAP * group_info::get_common_map()$/;"	f	class:tair::config_server::group_info
get_copy_count	src\configserver\group_info.cpp	/^    uint32_t group_info::get_copy_count() const$/;"	f	class:tair::config_server::group_info
get_group_name	src\configserver\group_info.cpp	/^    const char *group_info::get_group_name() const$/;"	f	class:tair::config_server::group_info
get_hash_table	src\configserver\group_info.cpp	/^    const uint64_t *group_info::get_hash_table(int mode) const$/;"	f	class:tair::config_server::group_info
get_hash_table_byte_size	src\configserver\group_info.cpp	/^    uint32_t group_info::get_hash_table_byte_size() const$/;"	f	class:tair::config_server::group_info
get_hash_table_deflate_data	src\configserver\group_info.cpp	/^    const char *group_info::get_hash_table_deflate_data(int mode) const$/;"	f	class:tair::config_server::group_info
get_hash_table_deflate_size	src\configserver\group_info.cpp	/^    int group_info::get_hash_table_deflate_size(int mode) const$/;"	f	class:tair::config_server::group_info
get_hash_table_size	src\configserver\group_info.cpp	/^    uint32_t group_info::get_hash_table_size() const$/;"	f	class:tair::config_server::group_info
get_migrating_machines	src\configserver\group_info.cpp	/^    void group_info::get_migrating_machines(vector <pair< uint64_t, uint32_t > >&vec_server_id_count) const$/;"	f	class:tair::config_server::group_info
get_plugins_version	src\configserver\group_info.cpp	/^    uint32_t group_info::get_plugins_version() const$/;"	f	class:tair::config_server::group_info
get_server_bucket_count	src\configserver\group_info.cpp	/^    uint32_t group_info::get_server_bucket_count() const$/;"	f	class:tair::config_server::group_info
get_server_down_time	src\configserver\group_info.cpp	/^    int group_info::get_server_down_time() const$/;"	f	class:tair::config_server::group_info
get_server_table_data	src\configserver\group_info.cpp	/^    const char *group_info::get_server_table_data() const$/;"	f	class:tair::config_server::group_info
get_server_table_size	src\configserver\group_info.cpp	/^    int group_info::get_server_table_size() const$/;"	f	class:tair::config_server::group_info
get_server_version	src\configserver\group_info.cpp	/^    uint32_t group_info::get_server_version() const$/;"	f	class:tair::config_server::group_info
get_stat_info	src\configserver\group_info.cpp	/^    void group_info::get_stat_info(uint64_t server_id,$/;"	f	class:tair::config_server::group_info
get_up_node	src\configserver\group_info.cpp	/^    void group_info::get_up_node(set<node_info *>& upnode_list)$/;"	f	class:tair::config_server::group_info
group_info	src\configserver\group_info.cpp	/^    group_info::group_info(const char *p_group_name,$/;"	f	class:tair::config_server::group_info
handlePacket	src\configserver\group_info.cpp	/^    tbnet::IPacketHandler::HPRetCode group_info::handlePacket(tbnet::Packet *$/;"	f	class:tair::config_server::group_info
hard_check_migrate_complete	src\configserver\group_info.cpp	/^    void group_info::hard_check_migrate_complete(uint64_t \/* nouse *\/ )$/;"	f	class:tair::config_server::group_info
inc_version	src\configserver\group_info.cpp	/^    void group_info::inc_version(const uint32_t inc_step)$/;"	f	class:tair::config_server::group_info
inc_version	src\configserver\group_info.cpp	/^    void group_info::inc_version(uint32_t* value, const uint32_t inc_step)$/;"	f	class:tair::config_server::group_info
is_migrating	src\configserver\group_info.cpp	/^    bool group_info::is_migrating() const$/;"	f	class:tair::config_server::group_info
is_need_rebuild	src\configserver\group_info.cpp	/^    bool group_info::is_need_rebuild() const$/;"	f	class:tair::config_server::group_info
load_config	src\configserver\group_info.cpp	/^    bool group_info::load_config(tbsys::CConfig & config, uint32_t version,$/;"	f	class:tair::config_server::group_info
parse_area_capacity_list	src\configserver\group_info.cpp	/^    void group_info::parse_area_capacity_list(vector<const char *>&a_c)$/;"	f	class:tair::config_server::group_info
parse_plugins_list	src\configserver\group_info.cpp	/^    void group_info::parse_plugins_list(vector<const char *>&plugins)$/;"	f	class:tair::config_server::group_info
parse_server_list	src\configserver\group_info.cpp	/^    void group_info::parse_server_list(node_info_set & list,$/;"	f	class:tair::config_server::group_info
print_server_count	src\configserver\group_info.cpp	/^    void group_info::print_server_count()$/;"	f	class:tair::config_server::group_info
rebuild	src\configserver\group_info.cpp	/^    void group_info::rebuild(uint64_t slave_server_id,$/;"	f	class:tair::config_server::group_info
select_build_strategy	src\configserver\group_info.cpp	/^    int group_info::select_build_strategy(const std::set<node_info*>& ava_server)$/;"	f	class:tair::config_server::group_info
send_server_table_packet	src\configserver\group_info.cpp	/^    void group_info::send_server_table_packet(uint64_t slave_server_id)$/;"	f	class:tair::config_server::group_info
set_force_rebuild	src\configserver\group_info.cpp	/^    void group_info::set_force_rebuild()$/;"	f	class:tair::config_server::group_info
set_migrating_hashtable	src\configserver\group_info.cpp	/^    void group_info::set_migrating_hashtable(size_t bucket_id,$/;"	f	class:tair::config_server::group_info
set_stat_info	src\configserver\group_info.cpp	/^    void group_info::set_stat_info(uint64_t server_id,$/;"	f	class:tair::config_server::group_info
tair	src\configserver\group_info.cpp	/^namespace tair {$/;"	n	file:
write_server_table_packet	src\configserver\group_info.cpp	/^    bool group_info::write_server_table_packet(char *data, int size)$/;"	f	class:tair::config_server::group_info
~group_info	src\configserver\group_info.cpp	/^    group_info::~group_info() {$/;"	f	class:tair::config_server::group_info
GROUP_AUTO_ACCEPT_STRATEGY	src\configserver\group_info.hpp	/^      GROUP_AUTO_ACCEPT_STRATEGY$/;"	e	enum:tair::config_server::GroupAcceptStrategy
GROUP_DEFAULT_ACCEPT_STRATEGY	src\configserver\group_info.hpp	/^      GROUP_DEFAULT_ACCEPT_STRATEGY = 0,$/;"	e	enum:tair::config_server::GroupAcceptStrategy
GroupAcceptStrategy	src\configserver\group_info.hpp	/^    enum GroupAcceptStrategy {$/;"	g	namespace:tair::config_server
TAIR_GROUP_INFO_H	src\configserver\group_info.hpp	16;"	d
accept_strategy	src\configserver\group_info.hpp	/^      GroupAcceptStrategy accept_strategy;$/;"	m	class:tair::config_server::group_info
area_capacity_info	src\configserver\group_info.hpp	/^      std::map<uint32_t, uint64_t> area_capacity_info;        \/\/<area, capacity>$/;"	m	class:tair::config_server::group_info
available_server	src\configserver\group_info.hpp	/^      std::set<uint64_t> available_server;$/;"	m	class:tair::config_server::group_info
build_strategy	src\configserver\group_info.hpp	/^      int build_strategy;$/;"	m	class:tair::config_server::group_info
common_map	src\configserver\group_info.hpp	/^      tbsys::STR_STR_MAP common_map;$/;"	m	class:tair::config_server::group_info
config_server	src\configserver\group_info.hpp	/^  namespace config_server {$/;"	n	namespace:tair
connmgr	src\configserver\group_info.hpp	/^      tbnet::ConnectionManager * connmgr;$/;"	m	class:tair::config_server::group_info
data_need_move	src\configserver\group_info.hpp	/^      int data_need_move;$/;"	m	class:tair::config_server::group_info
diff_ratio	src\configserver\group_info.hpp	/^      float diff_ratio;$/;"	m	class:tair::config_server::group_info
find_plugin	src\configserver\group_info.hpp	/^      std::set<std::string>::const_iterator find_plugin(const std::string & dll_name) const$/;"	f	class:tair::config_server::group_info
get_accept_strategy	src\configserver\group_info.hpp	/^      GroupAcceptStrategy get_accept_strategy() const$/;"	f	class:tair::config_server::group_info
get_available_server_id	src\configserver\group_info.hpp	/^      std::set<uint64_t> get_available_server_id() const$/;"	f	class:tair::config_server::group_info
get_data_need_move	src\configserver\group_info.hpp	/^      int get_data_need_move() const$/;"	f	class:tair::config_server::group_info
get_group_is_OK	src\configserver\group_info.hpp	/^      bool get_group_is_OK() const$/;"	f	class:tair::config_server::group_info
get_group_status	src\configserver\group_info.hpp	/^      bool get_group_status() const$/;"	f	class:tair::config_server::group_info
get_node_info	src\configserver\group_info.hpp	/^      node_info_set get_node_info() const$/;"	f	class:tair::config_server::group_info
get_plugins_count	src\configserver\group_info.hpp	/^      uint32_t get_plugins_count() const$/;"	f	class:tair::config_server::group_info
get_plugins_info	src\configserver\group_info.hpp	/^      std::set<std::string> get_plugins_info() const$/;"	f	class:tair::config_server::group_info
group_can_work	src\configserver\group_info.hpp	/^      bool group_can_work;$/;"	m	class:tair::config_server::group_info
group_info	src\configserver\group_info.hpp	/^    class group_info:public tbnet::IPacketHandler {$/;"	c	namespace:tair::config_server
group_info_map	src\configserver\group_info.hpp	/^      __gnu_cxx::hash <const char *>, tbsys::char_equal> group_info_map;$/;"	t	namespace:tair::config_server
group_is_OK	src\configserver\group_info.hpp	/^      bool group_is_OK;$/;"	m	class:tair::config_server::group_info
group_name	src\configserver\group_info.hpp	/^      char *group_name;$/;"	m	class:tair::config_server::group_info
hash_table_set_mutex	src\configserver\group_info.hpp	/^      tbsys::CThreadMutex hash_table_set_mutex;$/;"	m	class:tair::config_server::group_info
interval_seconds	src\configserver\group_info.hpp	/^      uint32_t interval_seconds;$/;"	m	class:tair::config_server::group_info
load_config_count	src\configserver\group_info.hpp	/^      uint32_t load_config_count;$/;"	m	class:tair::config_server::group_info
migrate_machine	src\configserver\group_info.hpp	/^      std::map<uint64_t, int>migrate_machine;$/;"	m	class:tair::config_server::group_info
min_config_version	src\configserver\group_info.hpp	/^      uint32_t min_config_version;$/;"	m	class:tair::config_server::group_info
min_data_server_count	src\configserver\group_info.hpp	/^      uint32_t min_data_server_count;        \/\/ if we can not get at lesat min_data_server_count data servers,$/;"	m	class:tair::config_server::group_info
need_rebuild_hash_table	src\configserver\group_info.hpp	/^      int need_rebuild_hash_table;$/;"	m	class:tair::config_server::group_info
node_list	src\configserver\group_info.hpp	/^      node_info_set node_list;$/;"	m	class:tair::config_server::group_info
plugin_end	src\configserver\group_info.hpp	/^      std::set<std::string>::const_iterator plugin_end() const$/;"	f	class:tair::config_server::group_info
plugins_name_info	src\configserver\group_info.hpp	/^      std::set<std::string> plugins_name_info;$/;"	m	class:tair::config_server::group_info
pos_mask	src\configserver\group_info.hpp	/^      uint64_t pos_mask;$/;"	m	class:tair::config_server::group_info
reported_serverid	src\configserver\group_info.hpp	/^      std::set<uint64_t> reported_serverid;$/;"	m	class:tair::config_server::group_info
server_down_time	src\configserver\group_info.hpp	/^      int server_down_time;$/;"	m	class:tair::config_server::group_info
server_info_maps	src\configserver\group_info.hpp	/^      server_info_map *server_info_maps;        \/\/  => server$/;"	m	class:tair::config_server::group_info
server_table_manager	src\configserver\group_info.hpp	/^      conf_server_table_manager server_table_manager;$/;"	m	class:tair::config_server::group_info
set_group_is_OK	src\configserver\group_info.hpp	/^      void set_group_is_OK(bool status)$/;"	f	class:tair::config_server::group_info
set_group_status	src\configserver\group_info.hpp	/^      void set_group_status(bool status)$/;"	f	class:tair::config_server::group_info
set_table_builded	src\configserver\group_info.hpp	/^      void set_table_builded()$/;"	f	class:tair::config_server::group_info
should_syn_mig_info	src\configserver\group_info.hpp	/^      bool should_syn_mig_info;$/;"	m	class:tair::config_server::group_info
stat_info	src\configserver\group_info.hpp	/^      std::map<uint64_t, node_stat_info> stat_info;        \/\/<server_id, statInfo>$/;"	m	class:tair::config_server::group_info
stat_info_rw_locker	src\configserver\group_info.hpp	/^      mutable tbsys::CRWSimpleLock stat_info_rw_locker;        \/\/node_stat_info has its own lock, this only for the map stat_info$/;"	m	class:tair::config_server::group_info
tair	src\configserver\group_info.hpp	/^namespace tair {$/;"	n
HARD_CHECK_MIG_COMPLETE	src\configserver\server_conf_thread.cpp	/^  const int HARD_CHECK_MIG_COMPLETE = 300;$/;"	m	namespace:__anon7	file:
backup_and_write_file	src\configserver\server_conf_thread.cpp	/^    bool server_conf_thread::backup_and_write_file(const char *file_name,$/;"	f	class:tair::config_server::server_conf_thread
build_table	src\configserver\server_conf_thread.cpp	/^    void server_conf_thread::table_builder_thread::build_table(vector <$/;"	f	class:tair::config_server::server_conf_thread::table_builder_thread
check_config_server_status	src\configserver\server_conf_thread.cpp	/^    void server_conf_thread::check_config_server_status(uint32_t loop_count)$/;"	f	class:tair::config_server::server_conf_thread
check_server_status	src\configserver\server_conf_thread.cpp	/^    void server_conf_thread::check_server_status(uint32_t loop_count)$/;"	f	class:tair::config_server::server_conf_thread
config_server	src\configserver\server_conf_thread.cpp	/^  namespace config_server {$/;"	n	namespace:tair	file:
do_conf_heartbeat_packet	src\configserver\server_conf_thread.cpp	/^      do_conf_heartbeat_packet(request_conf_heartbeart * req)$/;"	f	class:tair::config_server::server_conf_thread
do_finish_migrate_packet	src\configserver\server_conf_thread.cpp	/^    int server_conf_thread::do_finish_migrate_packet(request_migrate_finish *$/;"	f	class:tair::config_server::server_conf_thread
do_get_server_table_packet	src\configserver\server_conf_thread.cpp	/^      do_get_server_table_packet(request_get_server_table * req,$/;"	f	class:tair::config_server::server_conf_thread
do_group_names_packet	src\configserver\server_conf_thread.cpp	/^    void server_conf_thread::do_group_names_packet(response_group_names *$/;"	f	class:tair::config_server::server_conf_thread
do_heartbeat_packet	src\configserver\server_conf_thread.cpp	/^    void server_conf_thread::do_heartbeat_packet(request_heartbeat * req,$/;"	f	class:tair::config_server::server_conf_thread
do_query_info_packet	src\configserver\server_conf_thread.cpp	/^    void server_conf_thread::do_query_info_packet(request_query_info * req,$/;"	f	class:tair::config_server::server_conf_thread
do_set_master_packet	src\configserver\server_conf_thread.cpp	/^    bool server_conf_thread::do_set_master_packet(request_set_master * req)$/;"	f	class:tair::config_server::server_conf_thread
do_set_server_table_packet	src\configserver\server_conf_thread.cpp	/^      do_set_server_table_packet(response_get_server_table * packet)$/;"	f	class:tair::config_server::server_conf_thread
find_group_host	src\configserver\server_conf_thread.cpp	/^    void server_conf_thread::find_group_host(request_get_group * req,$/;"	f	class:tair::config_server::server_conf_thread
force_change_server_status	src\configserver\server_conf_thread.cpp	/^      force_change_server_status(request_data_server_ctrl * packet)$/;"	f	class:tair::config_server::server_conf_thread
get_file_time	src\configserver\server_conf_thread.cpp	/^    uint32_t server_conf_thread::get_file_time(const char *file_name)$/;"	f	class:tair::config_server::server_conf_thread
get_group_info_map	src\configserver\server_conf_thread.cpp	/^    group_info_map *server_conf_thread::get_group_info_map()$/;"	f	class:tair::config_server::server_conf_thread
get_master_config_server	src\configserver\server_conf_thread.cpp	/^    uint64_t server_conf_thread::get_master_config_server(uint64_t id,$/;"	f	class:tair::config_server::server_conf_thread
get_migrating_machines	src\configserver\server_conf_thread.cpp	/^      get_migrating_machines(request_get_migrate_machine * req,$/;"	f	class:tair::config_server::server_conf_thread
get_server_info_map	src\configserver\server_conf_thread.cpp	/^    server_info_map *server_conf_thread::get_server_info_map()$/;"	f	class:tair::config_server::server_conf_thread
get_server_table	src\configserver\server_conf_thread.cpp	/^    void server_conf_thread::get_server_table(uint64_t sync_config_server_id,$/;"	f	class:tair::config_server::server_conf_thread
get_slave_server_id	src\configserver\server_conf_thread.cpp	/^    uint64_t server_conf_thread::get_slave_server_id()$/;"	f	class:tair::config_server::server_conf_thread
handlePacket	src\configserver\server_conf_thread.cpp	/^    tbnet::IPacketHandler::HPRetCode server_conf_thread::handlePacket(tbnet::$/;"	f	class:tair::config_server::server_conf_thread
load_config_server	src\configserver\server_conf_thread.cpp	/^    void server_conf_thread::load_config_server()$/;"	f	class:tair::config_server::server_conf_thread
load_group_file	src\configserver\server_conf_thread.cpp	/^    void server_conf_thread::load_group_file(const char *file_name,$/;"	f	class:tair::config_server::server_conf_thread
read_group_file_to_packet	src\configserver\server_conf_thread.cpp	/^      read_group_file_to_packet(response_get_server_table * resp)$/;"	f	class:tair::config_server::server_conf_thread
run	src\configserver\server_conf_thread.cpp	/^    void server_conf_thread::run(tbsys::CThread * thread, void *arg)$/;"	f	class:tair::config_server::server_conf_thread
run	src\configserver\server_conf_thread.cpp	/^    void server_conf_thread::table_builder_thread::run(tbsys::CThread *$/;"	f	class:tair::config_server::server_conf_thread::table_builder_thread
send_group_file_packet	src\configserver\server_conf_thread.cpp	/^    void server_conf_thread::send_group_file_packet()$/;"	f	class:tair::config_server::server_conf_thread
server_conf_thread	src\configserver\server_conf_thread.cpp	/^    server_conf_thread::server_conf_thread():builder_thread(this)$/;"	f	class:tair::config_server::server_conf_thread
set_stat_interval_time	src\configserver\server_conf_thread.cpp	/^    void server_conf_thread::set_stat_interval_time(int stat_interval_time_v)$/;"	f	class:tair::config_server::server_conf_thread
set_thread_parameter	src\configserver\server_conf_thread.cpp	/^    void server_conf_thread::set_thread_parameter(tbnet::Transport *$/;"	f	class:tair::config_server::server_conf_thread
table_builder_thread	src\configserver\server_conf_thread.cpp	/^      table_builder_thread(server_conf_thread * serveconf) {$/;"	f	class:tair::config_server::server_conf_thread::table_builder_thread
tair	src\configserver\server_conf_thread.cpp	/^namespace tair {$/;"	n	file:
~server_conf_thread	src\configserver\server_conf_thread.cpp	/^    server_conf_thread::~server_conf_thread()$/;"	f	class:tair::config_server::server_conf_thread
~table_builder_thread	src\configserver\server_conf_thread.cpp	/^    server_conf_thread::table_builder_thread::~table_builder_thread() {$/;"	f	class:tair::config_server::server_conf_thread::table_builder_thread
GROUP_CONF	src\configserver\server_conf_thread.hpp	/^        GROUP_CONF$/;"	e	enum:tair::config_server::server_conf_thread::__anon8
GROUP_DATA	src\configserver\server_conf_thread.hpp	/^        GROUP_DATA = 0,$/;"	e	enum:tair::config_server::server_conf_thread::__anon8
TAIR_SERVER_CONF_THREAD_H	src\configserver\server_conf_thread.hpp	16;"	d
builder_thread	src\configserver\server_conf_thread.hpp	/^      table_builder_thread builder_thread;$/;"	m	class:tair::config_server::server_conf_thread
config_server	src\configserver\server_conf_thread.hpp	/^  namespace config_server {$/;"	n	namespace:tair
config_server_info_list	src\configserver\server_conf_thread.hpp	/^      vector<server_info *>config_server_info_list;$/;"	m	class:tair::config_server::server_conf_thread
config_server_info_map	src\configserver\server_conf_thread.hpp	/^      server_info_map config_server_info_map;$/;"	m	class:tair::config_server::server_conf_thread
connmgr	src\configserver\server_conf_thread.hpp	/^      tbnet::ConnectionManager * connmgr;$/;"	m	class:tair::config_server::server_conf_thread
connmgr_heartbeat	src\configserver\server_conf_thread.hpp	/^      tbnet::ConnectionManager * connmgr_heartbeat;$/;"	m	class:tair::config_server::server_conf_thread
data_server_info_map	src\configserver\server_conf_thread.hpp	/^      server_info_map data_server_info_map;$/;"	m	class:tair::config_server::server_conf_thread
down_slave_config_server	src\configserver\server_conf_thread.hpp	/^      uint64_t down_slave_config_server;$/;"	m	class:tair::config_server::server_conf_thread
group_info_map_data	src\configserver\server_conf_thread.hpp	/^      group_info_map group_info_map_data;$/;"	m	class:tair::config_server::server_conf_thread
group_info_rw_locker	src\configserver\server_conf_thread.hpp	/^      tbsys::CRWSimpleLock group_info_rw_locker;$/;"	m	class:tair::config_server::server_conf_thread
group_need_build	src\configserver\server_conf_thread.hpp	/^          public:vector<group_info *>group_need_build;$/;"	m	class:tair::config_server::server_conf_thread::table_builder_thread
heartbeat_curr_time	src\configserver\server_conf_thread.hpp	/^      int heartbeat_curr_time;$/;"	m	class:tair::config_server::server_conf_thread
is_ready	src\configserver\server_conf_thread.hpp	/^      bool is_ready;$/;"	m	class:tair::config_server::server_conf_thread
master_config_server_id	src\configserver\server_conf_thread.hpp	/^      uint64_t master_config_server_id;$/;"	m	class:tair::config_server::server_conf_thread
mutex_grp_need_build	src\configserver\server_conf_thread.hpp	/^      tbsys::CThreadMutex mutex_grp_need_build;$/;"	m	class:tair::config_server::server_conf_thread
my_wait_object_manager	src\configserver\server_conf_thread.hpp	/^      tair::common::wait_object_manager my_wait_object_manager;$/;"	m	class:tair::config_server::server_conf_thread
p_server_conf	src\configserver\server_conf_thread.hpp	/^          server_conf_thread * p_server_conf;$/;"	m	class:tair::config_server::server_conf_thread::table_builder_thread
server_conf_thread	src\configserver\server_conf_thread.hpp	/^    class server_conf_thread:public tbsys::CDefaultRunnable,$/;"	c	namespace:tair::config_server
server_info_rw_locker	src\configserver\server_conf_thread.hpp	/^      tbsys::CRWSimpleLock server_info_rw_locker;$/;"	m	class:tair::config_server::server_conf_thread
server_up_inc_step	src\configserver\server_conf_thread.hpp	/^      static const uint32_t server_up_inc_step = 100;$/;"	m	class:tair::config_server::server_conf_thread
stat_interval_time	src\configserver\server_conf_thread.hpp	/^      int stat_interval_time;$/;"	m	class:tair::config_server::server_conf_thread
table_builder_thread	src\configserver\server_conf_thread.hpp	/^        class table_builder_thread:public tbsys::CDefaultRunnable$/;"	c	class:tair::config_server::server_conf_thread
tair	src\configserver\server_conf_thread.hpp	/^namespace tair {$/;"	n
config_server	src\configserver\server_info.cpp	/^  namespace config_server {$/;"	n	namespace:tair	file:
node_info	src\configserver\server_info.cpp	/^    node_info::node_info(server_info * m) {$/;"	f	class:tair::config_server::node_info
operator <	src\configserver\server_info.cpp	/^    bool node_info::operator<(const node_info & node) const$/;"	f	class:tair::config_server::node_info
print	src\configserver\server_info.cpp	/^    void server_info::print()$/;"	f	class:tair::config_server::server_info
server_info	src\configserver\server_info.cpp	/^    server_info::server_info()$/;"	f	class:tair::config_server::server_info
tair	src\configserver\server_info.cpp	/^namespace tair {$/;"	n	file:
~node_info	src\configserver\server_info.cpp	/^    node_info::~node_info() {$/;"	f	class:tair::config_server::node_info
~server_info	src\configserver\server_info.cpp	/^    server_info::~server_info()$/;"	f	class:tair::config_server::server_info
ALIVE	src\configserver\server_info.hpp	/^        ALIVE = 0,$/;"	e	enum:tair::config_server::server_info::__anon9
DOWN	src\configserver\server_info.hpp	/^        DOWN,$/;"	e	enum:tair::config_server::server_info::__anon9
FORCE_DOWN	src\configserver\server_info.hpp	/^        FORCE_DOWN,$/;"	e	enum:tair::config_server::server_info::__anon9
TAIR_SERVER_INFO_H	src\configserver\server_info.hpp	16;"	d
config_server	src\configserver\server_info.hpp	/^  namespace config_server {$/;"	n	namespace:tair
group_info_data	src\configserver\server_info.hpp	/^      group_info *group_info_data;$/;"	m	struct:tair::config_server::server_info
last_time	src\configserver\server_info.hpp	/^      uint32_t last_time;$/;"	m	struct:tair::config_server::server_info
node_info	src\configserver\server_info.hpp	/^    class node_info$/;"	c	namespace:tair::config_server
node_info_compare	src\configserver\server_info.hpp	/^    class node_info_compare$/;"	c	namespace:tair::config_server
node_info_data	src\configserver\server_info.hpp	/^      node_info *node_info_data;$/;"	m	struct:tair::config_server::server_info
node_info_set	src\configserver\server_info.hpp	/^    typedef std::set<node_info *, node_info_compare> node_info_set;$/;"	t	namespace:tair::config_server
operator ()	src\configserver\server_info.hpp	/^      bool operator() (const node_info * a, const node_info * b)$/;"	f	class:tair::config_server::node_info_compare
server	src\configserver\server_info.hpp	/^        server_info * server;$/;"	m	class:tair::config_server::node_info
server_id	src\configserver\server_info.hpp	/^        uint64_t server_id;        \/\/ ip + port$/;"	m	struct:tair::config_server::server_info
server_info	src\configserver\server_info.hpp	/^    struct server_info$/;"	s	namespace:tair::config_server
server_info_map	src\configserver\server_info.hpp	/^    typedef __gnu_cxx::hash_map<uint64_t, server_info *, __gnu_cxx::hash<int> >server_info_map;$/;"	t	namespace:tair::config_server
status	src\configserver\server_info.hpp	/^      int8_t status;                \/\/ 0 - alive, 1 - down$/;"	m	struct:tair::config_server::server_info
tair	src\configserver\server_info.hpp	/^namespace tair {$/;"	n
config_server	src\configserver\server_info_allocator.cpp	/^  namespace config_server {$/;"	n	namespace:tair	file:
new_server_info	src\configserver\server_info_allocator.cpp	/^    server_info *server_info_allocator::new_server_info(group_info * group,$/;"	f	class:tair::config_server::server_info_allocator
server_info_allocator	src\configserver\server_info_allocator.cpp	/^      server_info_allocator::server_info_allocator()$/;"	f	class:tair::config_server::server_info_allocator
server_info_allocator_instance	src\configserver\server_info_allocator.cpp	/^      server_info_allocator_instance;$/;"	m	class:tair::config_server::server_info_allocator	file:
tair	src\configserver\server_info_allocator.cpp	/^namespace tair {$/;"	n	file:
~server_info_allocator	src\configserver\server_info_allocator.cpp	/^    server_info_allocator::~server_info_allocator()$/;"	f	class:tair::config_server::server_info_allocator
SERVER_INFO_ALLOCATOR_H	src\configserver\server_info_allocator.hpp	16;"	d
config_server	src\configserver\server_info_allocator.hpp	/^  namespace config_server {$/;"	n	namespace:tair
server_info_allocator	src\configserver\server_info_allocator.hpp	/^    class server_info_allocator {$/;"	c	namespace:tair::config_server
server_info_allocator_instance	src\configserver\server_info_allocator.hpp	/^      static server_info_allocator server_info_allocator_instance;$/;"	m	class:tair::config_server::server_info_allocator
tair	src\configserver\server_info_allocator.hpp	/^namespace tair {$/;"	n
use_size	src\configserver\server_info_allocator.hpp	/^      uint32_t use_size;$/;"	m	class:tair::config_server::server_info_allocator
vec_server_infos	src\configserver\server_info_allocator.hpp	/^        vector<server_info_file_mapper *>vec_server_infos;$/;"	m	class:tair::config_server::server_info_allocator
close	src\configserver\server_info_file_mapper.cpp	/^    void server_info_file_mapper::close()$/;"	f	class:tair::config_server::server_info_file_mapper
config_server	src\configserver\server_info_file_mapper.cpp	/^  namespace config_server {$/;"	n	namespace:tair	file:
get_server_info	src\configserver\server_info_file_mapper.cpp	/^    server_info *server_info_file_mapper::get_server_info(int idx)$/;"	f	class:tair::config_server::server_info_file_mapper
getp_group_name	src\configserver\server_info_file_mapper.cpp	/^    char *server_info_file_mapper::getp_group_name(int idx)$/;"	f	class:tair::config_server::server_info_file_mapper
init	src\configserver\server_info_file_mapper.cpp	/^    void server_info_file_mapper::init()$/;"	f	class:tair::config_server::server_info_file_mapper
open	src\configserver\server_info_file_mapper.cpp	/^    bool server_info_file_mapper::open(const string & file_name,$/;"	f	class:tair::config_server::server_info_file_mapper
print_cell	src\configserver\server_info_file_mapper.cpp	/^    void server_info_file_mapper::print_cell(int idx)$/;"	f	class:tair::config_server::server_info_file_mapper
print_head	src\configserver\server_info_file_mapper.cpp	/^    void server_info_file_mapper::print_head()$/;"	f	class:tair::config_server::server_info_file_mapper
server_info_file_mapper	src\configserver\server_info_file_mapper.cpp	/^    server_info_file_mapper::server_info_file_mapper()$/;"	f	class:tair::config_server::server_info_file_mapper
set_group_name	src\configserver\server_info_file_mapper.cpp	/^    void server_info_file_mapper::set_group_name(int idx, const char *name)$/;"	f	class:tair::config_server::server_info_file_mapper
set_zero	src\configserver\server_info_file_mapper.cpp	/^    void server_info_file_mapper::set_zero(int idx)$/;"	f	class:tair::config_server::server_info_file_mapper
tair	src\configserver\server_info_file_mapper.cpp	/^namespace tair {$/;"	n	file:
~server_info_file_mapper	src\configserver\server_info_file_mapper.cpp	/^    server_info_file_mapper::~server_info_file_mapper()$/;"	f	class:tair::config_server::server_info_file_mapper
CELL_COUNT_PER_FILE	src\configserver\server_info_file_mapper.hpp	/^      static const int CELL_COUNT_PER_FILE = 512;$/;"	m	class:tair::config_server::server_info_file_mapper
CELL_SIZE	src\configserver\server_info_file_mapper.hpp	/^      static const int CELL_SIZE = sizeof(server_info) + GROUP_NAME_LEN;$/;"	m	class:tair::config_server::server_info_file_mapper
GROUP_NAME_LEN	src\configserver\server_info_file_mapper.hpp	/^      static const int GROUP_NAME_LEN = 64;$/;"	m	class:tair::config_server::server_info_file_mapper
SERVER_INFO_FILE_MAPPER_H	src\configserver\server_info_file_mapper.hpp	16;"	d
config_server	src\configserver\server_info_file_mapper.hpp	/^  namespace config_server {$/;"	n	namespace:tair
data_start	src\configserver\server_info_file_mapper.hpp	/^      char *data_start;$/;"	m	class:tair::config_server::server_info_file_mapper
getp_cell_size	src\configserver\server_info_file_mapper.hpp	/^      int32_t *&getp_cell_size()$/;"	f	class:tair::config_server::server_info_file_mapper
getp_magic_number	src\configserver\server_info_file_mapper.hpp	/^      int32_t *&getp_magic_number()$/;"	f	class:tair::config_server::server_info_file_mapper
getp_used_counter	src\configserver\server_info_file_mapper.hpp	/^      int32_t *&getp_used_counter()$/;"	f	class:tair::config_server::server_info_file_mapper
map_file	src\configserver\server_info_file_mapper.hpp	/^      file_mapper map_file;$/;"	m	class:tair::config_server::server_info_file_mapper
p_cell_size	src\configserver\server_info_file_mapper.hpp	/^      int32_t *p_cell_size;$/;"	m	class:tair::config_server::server_info_file_mapper
p_magic_number	src\configserver\server_info_file_mapper.hpp	/^      int32_t *p_magic_number;$/;"	m	class:tair::config_server::server_info_file_mapper
p_used_counter	src\configserver\server_info_file_mapper.hpp	/^      int32_t *p_used_counter;$/;"	m	class:tair::config_server::server_info_file_mapper
server_info_file_mapper	src\configserver\server_info_file_mapper.hpp	/^    class server_info_file_mapper {$/;"	c	namespace:tair::config_server
tair	src\configserver\server_info_file_mapper.hpp	/^namespace tair {$/;"	n
main	src\configserver\server_info_file_monitor.cpp	/^main(int argc, char **argv)$/;"	f
add_unit_value	src\configserver\stat_info.cpp	/^    int64_t stat_info_detail::add_unit_value(uint32_t unit_index, int64_t v)$/;"	f	class:tair::config_server::stat_info_detail
config_server	src\configserver\stat_info.cpp	/^  namespace config_server {$/;"	n	namespace:tair	file:
decode	src\configserver\stat_info.cpp	/^    void node_stat_info::decode(tbnet::DataBuffer * input)$/;"	f	class:tair::config_server::node_stat_info
decode	src\configserver\stat_info.cpp	/^    void stat_info_detail::decode(tbnet::DataBuffer * input)$/;"	f	class:tair::config_server::stat_info_detail
encode	src\configserver\stat_info.cpp	/^    void node_stat_info::encode(tbnet::DataBuffer * output) const$/;"	f	class:tair::config_server::node_stat_info
encode	src\configserver\stat_info.cpp	/^    void stat_info_detail::encode(tbnet::DataBuffer * output) const$/;"	f	class:tair::config_server::stat_info_detail
format_detail	src\configserver\stat_info.cpp	/^    void stat_info_detail::format_detail(const char *prefix,$/;"	f	class:tair::config_server::stat_info_detail
format_info	src\configserver\stat_info.cpp	/^    void node_stat_info::format_info(std::map<std::string,$/;"	f	class:tair::config_server::node_stat_info
format_str	src\configserver\stat_info.cpp	/^  char *format_str[] = {$/;"	m	namespace:__anon10	file:
insert_stat_info_detail	src\configserver\stat_info.cpp	/^      insert_stat_info_detail(const stat_info_detail & sv)$/;"	f	class:tair::config_server::stat_info_detail
operator =	src\configserver\stat_info.cpp	/^    node_stat_info & node_stat_info::operator =(const node_stat_info & rv)$/;"	f	class:tair::config_server::node_stat_info
set_unit_value	src\configserver\stat_info.cpp	/^    int64_t stat_info_detail::set_unit_value(uint32_t unit_index, int64_t v)$/;"	f	class:tair::config_server::stat_info_detail
tair	src\configserver\stat_info.cpp	/^namespace tair {$/;"	n	file:
update_stat_info	src\configserver\stat_info.cpp	/^    void node_stat_info::update_stat_info(const node_stat_info & rv)$/;"	f	class:tair::config_server::node_stat_info
update_stat_info_detail	src\configserver\stat_info.cpp	/^      update_stat_info_detail(const stat_info_detail & sv)$/;"	f	class:tair::config_server::stat_info_detail
DATASIZE	src\configserver\stat_info.hpp	/^        DATASIZE,$/;"	e	enum:tair::config_server::stat_info_detail::__anon11
EVICTCOUNT	src\configserver\stat_info.hpp	/^        EVICTCOUNT,$/;"	e	enum:tair::config_server::stat_info_detail::__anon11
GETCOUNT	src\configserver\stat_info.hpp	/^        GETCOUNT = 0,$/;"	e	enum:tair::config_server::stat_info_detail::__anon11
HITCOUNT	src\configserver\stat_info.hpp	/^        HITCOUNT,$/;"	e	enum:tair::config_server::stat_info_detail::__anon11
ITEMCOUNT	src\configserver\stat_info.hpp	/^        ITEMCOUNT,$/;"	e	enum:tair::config_server::stat_info_detail::__anon11
PUTCOUNT	src\configserver\stat_info.hpp	/^        PUTCOUNT,$/;"	e	enum:tair::config_server::stat_info_detail::__anon11
REMOVECOUNT	src\configserver\stat_info.hpp	/^        REMOVECOUNT,$/;"	e	enum:tair::config_server::stat_info_detail::__anon11
TAIR_STAT_INFO_H	src\configserver\stat_info.hpp	16;"	d
USESIZE	src\configserver\stat_info.hpp	/^        USESIZE,$/;"	e	enum:tair::config_server::stat_info_detail::__anon11
clear	src\configserver\stat_info.hpp	/^      void clear()$/;"	f	class:tair::config_server::node_stat_info
clear	src\configserver\stat_info.hpp	/^      void clear()$/;"	f	class:tair::config_server::stat_info_detail
config_server	src\configserver\stat_info.hpp	/^  namespace config_server {$/;"	n	namespace:tair
data_holder	src\configserver\stat_info.hpp	/^        std::vector<int64_t> data_holder;$/;"	m	class:tair::config_server::stat_info_detail
data_holder	src\configserver\stat_info.hpp	/^      std::map<uint32_t, stat_info_detail> data_holder;        \/\/<area, infoDetail>$/;"	m	class:tair::config_server::node_stat_info
get_last_update_time	src\configserver\stat_info.hpp	/^      uint32_t get_last_update_time() const$/;"	f	class:tair::config_server::node_stat_info
get_stat_data	src\configserver\stat_info.hpp	/^      std::map<uint32_t, stat_info_detail> get_stat_data() const$/;"	f	class:tair::config_server::node_stat_info
get_unit_size	src\configserver\stat_info.hpp	/^      size_t get_unit_size() const$/;"	f	class:tair::config_server::stat_info_detail
get_unit_value	src\configserver\stat_info.hpp	/^      uint64_t get_unit_value(uint32_t unit_index) const$/;"	f	class:tair::config_server::stat_info_detail
insert_stat_detail	src\configserver\stat_info.hpp	/^      void insert_stat_detail(uint32_t area, const stat_info_detail & detail)$/;"	f	class:tair::config_server::node_stat_info
last_update_time	src\configserver\stat_info.hpp	/^      uint32_t last_update_time;        \/\/this value only for config server$/;"	m	class:tair::config_server::node_stat_info
node_stat_info	src\configserver\stat_info.hpp	/^      node_stat_info():last_update_time(0)$/;"	f	class:tair::config_server::node_stat_info
node_stat_info	src\configserver\stat_info.hpp	/^      node_stat_info(const node_stat_info & rv):last_update_time(rv.$/;"	f	class:tair::config_server::node_stat_info
node_stat_info	src\configserver\stat_info.hpp	/^    class node_stat_info {$/;"	c	namespace:tair::config_server
set_last_update_time	src\configserver\stat_info.hpp	/^      void set_last_update_time(uint32_t time)$/;"	f	class:tair::config_server::node_stat_info
stat_info_detail	src\configserver\stat_info.hpp	/^        stat_info_detail()$/;"	f	class:tair::config_server::stat_info_detail
stat_info_detail	src\configserver\stat_info.hpp	/^    class stat_info_detail {$/;"	c	namespace:tair::config_server
tair	src\configserver\stat_info.hpp	/^namespace tair {$/;"	n
update_stat_info	src\configserver\stat_info.hpp	/^      void update_stat_info(uint32_t area, const stat_info_detail & detail)$/;"	f	class:tair::config_server::node_stat_info
main	src\configserver\stat_info_test.cpp	/^main()$/;"	f
build_index	src\configserver\table_builder.cpp	/^    void table_builder::build_index(const map<server_id_type,  int>&collector, map<int, server_list_type> &indexer)$/;"	f	class:tair::config_server::table_builder
build_quick_table	src\configserver\table_builder.cpp	/^    bool table_builder::build_quick_table(hash_table_type & hash_table_dest)$/;"	f	class:tair::config_server::table_builder
change_master_node	src\configserver\table_builder.cpp	/^    bool table_builder::change_master_node(size_t idx,$/;"	f	class:tair::config_server::table_builder
change_tokens_count_in_node	src\configserver\table_builder.cpp	/^    void table_builder::change_tokens_count_in_node(map<server_id_type, int>&count_in_node,$/;"	f	class:tair::config_server::table_builder
config_server	src\configserver\table_builder.cpp	/^  namespace config_server {$/;"	n	namespace:tair	file:
get_suitable_node	src\configserver\table_builder.cpp	/^      get_suitable_node(int line_num, size_t node_idx,$/;"	f	class:tair::config_server::table_builder
init_candidate	src\configserver\table_builder.cpp	/^    void table_builder::init_candidate(map < int,$/;"	f	class:tair::config_server::table_builder
init_token_count	src\configserver\table_builder.cpp	/^    void table_builder::init_token_count(map<server_id_type, int>&collector)$/;"	f	class:tair::config_server::table_builder
invaliad_node	src\configserver\table_builder.cpp	/^    void table_builder::invaliad_node(int line_num, size_t node_idx,$/;"	f	class:tair::config_server::table_builder
is_node_availble	src\configserver\table_builder.cpp	/^    bool table_builder::is_node_availble(server_id_type node_id)$/;"	f	class:tair::config_server::table_builder
load_hash_table	src\configserver\table_builder.cpp	/^    void table_builder::load_hash_table(hash_table_type & hash_table_data,$/;"	f	class:tair::config_server::table_builder
print_available_server	src\configserver\table_builder.cpp	/^    void table_builder::print_available_server()$/;"	f	class:tair::config_server::table_builder
print_capabale	src\configserver\table_builder.cpp	/^    void table_builder::print_capabale()$/;"	f	class:tair::config_server::table_builder
print_count_server	src\configserver\table_builder.cpp	/^    void table_builder::print_count_server()$/;"	f	class:tair::config_server::table_builder
print_hash_table	src\configserver\table_builder.cpp	/^    void table_builder::print_hash_table(hash_table_type & hash_table)$/;"	f	class:tair::config_server::table_builder
print_tokens_in_node	src\configserver\table_builder.cpp	/^    void table_builder::print_tokens_in_node()$/;"	f	class:tair::config_server::table_builder
rebuild_table	src\configserver\table_builder.cpp	/^      rebuild_table(const hash_table_type & hash_table_source,$/;"	f	class:tair::config_server::table_builder
set_available_server	src\configserver\table_builder.cpp	/^    void table_builder::set_available_server(const set <$/;"	f	class:tair::config_server::table_builder
tair	src\configserver\table_builder.cpp	/^namespace tair {$/;"	n	file:
update_node	src\configserver\table_builder.cpp	/^    void table_builder::update_node(int line_num, size_t node_idx,$/;"	f	class:tair::config_server::table_builder
update_node_count	src\configserver\table_builder.cpp	/^    bool table_builder::update_node_count(server_id_type node_id,$/;"	f	class:tair::config_server::table_builder
write_hash_table	src\configserver\table_builder.cpp	/^      write_hash_table(const hash_table_type & hash_table_data,$/;"	f	class:tair::config_server::table_builder
~table_builder	src\configserver\table_builder.cpp	/^    table_builder::~table_builder()$/;"	f	class:tair::config_server::table_builder
BUILD_ERROR	src\configserver\table_builder.hpp	/^    const int BUILD_ERROR = 0;$/;"	m	namespace:tair::config_server
BUILD_OK	src\configserver\table_builder.hpp	/^    const int BUILD_OK = 1;$/;"	m	namespace:tair::config_server
BUILD_QUICK	src\configserver\table_builder.hpp	/^    const int BUILD_QUICK = 2;$/;"	m	namespace:tair::config_server
CONSIDER_ALL	src\configserver\table_builder.hpp	/^    const int CONSIDER_ALL = 0;$/;"	m	namespace:tair::config_server
CONSIDER_BASE	src\configserver\table_builder.hpp	/^    const int CONSIDER_BASE = 2;$/;"	m	namespace:tair::config_server
CONSIDER_FORCE	src\configserver\table_builder.hpp	/^    const int CONSIDER_FORCE = 3;$/;"	m	namespace:tair::config_server
CONSIDER_POS	src\configserver\table_builder.hpp	/^    const int CONSIDER_POS = 1;$/;"	m	namespace:tair::config_server
INVALID_FLAG	src\configserver\table_builder.hpp	/^    const uint64_t INVALID_FLAG = 0;$/;"	m	namespace:tair::config_server
INVALID_NODE	src\configserver\table_builder.hpp	/^    const int INVALID_NODE = 1;$/;"	m	namespace:tair::config_server
NODE_OK	src\configserver\table_builder.hpp	/^    const int NODE_OK = 0;$/;"	m	namespace:tair::config_server
SAME_NODE	src\configserver\table_builder.hpp	/^    const int SAME_NODE = 4;$/;"	m	namespace:tair::config_server
SAME_POS	src\configserver\table_builder.hpp	/^    const int SAME_POS = 5;$/;"	m	namespace:tair::config_server
TABLE_BUILDER_H	src\configserver\table_builder.hpp	16;"	d
TOOMANY_BUCKET	src\configserver\table_builder.hpp	/^    const int TOOMANY_BUCKET = 3;$/;"	m	namespace:tair::config_server
TOOMANY_MASTER	src\configserver\table_builder.hpp	/^    const int TOOMANY_MASTER = 2;$/;"	m	namespace:tair::config_server
available_server	src\configserver\table_builder.hpp	/^        server_list_type available_server;$/;"	m	class:tair::config_server::table_builder
bucket_count	src\configserver\table_builder.hpp	/^        uint32_t bucket_count;$/;"	m	class:tair::config_server::table_builder
config_server	src\configserver\table_builder.hpp	/^  namespace config_server {$/;"	n	namespace:tair
copy_count	src\configserver\table_builder.hpp	/^        uint32_t copy_count;$/;"	m	class:tair::config_server::table_builder
count_server	src\configserver\table_builder.hpp	/^        map<int, server_list_type> count_server;$/;"	m	class:tair::config_server::table_builder
hash_table_line_type	src\configserver\table_builder.hpp	/^        typedef vector<server_id_type> hash_table_line_type;$/;"	t	class:tair::config_server::table_builder
hash_table_type	src\configserver\table_builder.hpp	/^        typedef map<int, hash_table_line_type> hash_table_type;$/;"	t	class:tair::config_server::table_builder
master_server_capable	src\configserver\table_builder.hpp	/^        server_capable_type master_server_capable;$/;"	m	class:tair::config_server::table_builder
max_count_now	src\configserver\table_builder.hpp	/^        int max_count_now;$/;"	m	class:tair::config_server::table_builder
mcandidate_node	src\configserver\table_builder.hpp	/^        map<int, server_list_type> mcandidate_node;$/;"	m	class:tair::config_server::table_builder
mcount_server	src\configserver\table_builder.hpp	/^        map<int, server_list_type> mcount_server;$/;"	m	class:tair::config_server::table_builder
mtokens_count_in_node	src\configserver\table_builder.hpp	/^        map<server_id_type, int>mtokens_count_in_node;$/;"	m	class:tair::config_server::table_builder
pos_mask	src\configserver\table_builder.hpp	/^        uint64_t pos_mask;$/;"	m	class:tair::config_server::table_builder
scandidate_node	src\configserver\table_builder.hpp	/^        map<int, server_list_type> scandidate_node;$/;"	m	class:tair::config_server::table_builder
server_capable	src\configserver\table_builder.hpp	/^        server_capable_type server_capable;$/;"	m	class:tair::config_server::table_builder
server_capable_type	src\configserver\table_builder.hpp	/^        typedef map<server_id_type, int>server_capable_type;$/;"	t	class:tair::config_server::table_builder
server_id_type	src\configserver\table_builder.hpp	/^        typedef pair<uint64_t, uint32_t> server_id_type;$/;"	t	class:tair::config_server::table_builder
server_list_type	src\configserver\table_builder.hpp	/^        typedef set<server_id_type> server_list_type;$/;"	t	class:tair::config_server::table_builder
set_pos_mask	src\configserver\table_builder.hpp	/^        void set_pos_mask(uint64_t m)$/;"	f	class:tair::config_server::table_builder
table_builder	src\configserver\table_builder.hpp	/^        table_builder(uint32_t bucket_c,$/;"	f	class:tair::config_server::table_builder
table_builder	src\configserver\table_builder.hpp	/^    class table_builder {$/;"	c	namespace:tair::config_server
tair	src\configserver\table_builder.hpp	/^namespace tair {$/;"	n
tokens_count_in_node	src\configserver\table_builder.hpp	/^        map <server_id_type, int>tokens_count_in_node;$/;"	m	class:tair::config_server::table_builder
tokens_count_in_node_now	src\configserver\table_builder.hpp	/^        map<server_id_type, int>tokens_count_in_node_now;$/;"	m	class:tair::config_server::table_builder
caculate_capable	src\configserver\table_builder1.cpp	/^    void table_builder1::caculate_capable()$/;"	f	class:tair::config_server::table_builder1
config_server	src\configserver\table_builder1.cpp	/^  namespace config_server {$/;"	n	namespace:tair	file:
is_this_node_OK	src\configserver\table_builder1.cpp	/^    int table_builder1::is_this_node_OK(server_id_type node_id, int line_num,$/;"	f	class:tair::config_server::table_builder1
table_builder1	src\configserver\table_builder1.cpp	/^    table_builder1::table_builder1(uint32_t b_c,$/;"	f	class:tair::config_server::table_builder1
tair	src\configserver\table_builder1.cpp	/^namespace tair {$/;"	n	file:
~table_builder1	src\configserver\table_builder1.cpp	/^    table_builder1::~table_builder1()$/;"	f	class:tair::config_server::table_builder1
TABLE_BUILDER1_H	src\configserver\table_builder1.hpp	16;"	d
config_server	src\configserver\table_builder1.hpp	/^  namespace config_server {$/;"	n	namespace:tair
get_tokens_per_node	src\configserver\table_builder1.hpp	/^      int get_tokens_per_node(const server_id_type &)$/;"	f	class:tair::config_server::table_builder1
master_tokens_per_node_max_count	src\configserver\table_builder1.hpp	/^      int master_tokens_per_node_max_count;$/;"	m	class:tair::config_server::table_builder1
master_tokens_per_node_min	src\configserver\table_builder1.hpp	/^      int master_tokens_per_node_min;$/;"	m	class:tair::config_server::table_builder1
master_tokens_per_node_min_count	src\configserver\table_builder1.hpp	/^      int master_tokens_per_node_min_count;$/;"	m	class:tair::config_server::table_builder1
table_builder1	src\configserver\table_builder1.hpp	/^    class table_builder1:public table_builder {$/;"	c	namespace:tair::config_server
tair	src\configserver\table_builder1.hpp	/^namespace tair {$/;"	n
tokens_per_node_max_count	src\configserver\table_builder1.hpp	/^      int tokens_per_node_max_count;        \/\/ how many data server handle tokenPerNode_min + 1 buckets$/;"	m	class:tair::config_server::table_builder1
tokens_per_node_min	src\configserver\table_builder1.hpp	/^      int tokens_per_node_min;        \/\/try my bset to make every data server handles tokens_per_node_min$/;"	m	class:tair::config_server::table_builder1
tokens_per_node_min_count	src\configserver\table_builder1.hpp	/^      int tokens_per_node_min_count;        \/\/ how many data server handles tokenPerNode_min buckets$/;"	m	class:tair::config_server::table_builder1
caculate_capable	src\configserver\table_builder2.cpp	/^    void table_builder2::caculate_capable()$/;"	f	class:tair::config_server::table_builder2
config_server	src\configserver\table_builder2.cpp	/^  namespace config_server {$/;"	n	namespace:tair	file:
is_this_node_OK	src\configserver\table_builder2.cpp	/^    int table_builder2::is_this_node_OK(server_id_type node_id, int line_num,$/;"	f	class:tair::config_server::table_builder2
rebuild_table	src\configserver\table_builder2.cpp	/^      rebuild_table(const hash_table_type & hash_table_source,$/;"	f	class:tair::config_server::table_builder2
set_available_server	src\configserver\table_builder2.cpp	/^    void table_builder2::set_available_server(const set <$/;"	f	class:tair::config_server::table_builder2
tair	src\configserver\table_builder2.cpp	/^namespace tair {$/;"	n	file:
TABLE_BUILDER2_H	src\configserver\table_builder2.hpp	16;"	d
build_stat_normal	src\configserver\table_builder2.hpp	/^      bool build_stat_normal;$/;"	m	class:tair::config_server::table_builder2
config_server	src\configserver\table_builder2.hpp	/^  namespace config_server {$/;"	n	namespace:tair
get_tokens_per_node	src\configserver\table_builder2.hpp	/^      int get_tokens_per_node(const server_id_type & node_id)$/;"	f	class:tair::config_server::table_builder2
max_machine_room_id	src\configserver\table_builder2.hpp	/^      uint32_t max_machine_room_id;$/;"	m	class:tair::config_server::table_builder2
mtokens_per_node_max_count	src\configserver\table_builder2.hpp	/^      int mtokens_per_node_max_count;        \/\/ how many data server handle tokenPerNode_min + 1 bucket$/;"	m	class:tair::config_server::table_builder2
mtokens_per_node_min	src\configserver\table_builder2.hpp	/^      int mtokens_per_node_min;        \/\/try my bset to make every data server handles tokens_per_node_min$/;"	m	class:tair::config_server::table_builder2
mtokens_per_node_min_count	src\configserver\table_builder2.hpp	/^      int mtokens_per_node_min_count;        \/\/ how many data server handles tokenPerNode_min buckets$/;"	m	class:tair::config_server::table_builder2
otokens_per_node_max_count	src\configserver\table_builder2.hpp	/^      int otokens_per_node_max_count;$/;"	m	class:tair::config_server::table_builder2
otokens_per_node_min	src\configserver\table_builder2.hpp	/^      int otokens_per_node_min;$/;"	m	class:tair::config_server::table_builder2
otokens_per_node_min_count	src\configserver\table_builder2.hpp	/^      int otokens_per_node_min_count;$/;"	m	class:tair::config_server::table_builder2
pos_max	src\configserver\table_builder2.hpp	/^      int pos_max;                \/\/ max (count in each rack)$/;"	m	class:tair::config_server::table_builder2
stat_change_ratio	src\configserver\table_builder2.hpp	/^      float stat_change_ratio;$/;"	m	class:tair::config_server::table_builder2
table_builder2	src\configserver\table_builder2.hpp	/^      table_builder2(float change_ratio, uint32_t bucket_c, uint32_t copy_c)$/;"	f	class:tair::config_server::table_builder2
table_builder2	src\configserver\table_builder2.hpp	/^    class table_builder2:public table_builder {$/;"	c	namespace:tair::config_server
tair	src\configserver\table_builder2.hpp	/^namespace tair {$/;"	n
~table_builder2	src\configserver\table_builder2.hpp	/^       ~table_builder2()$/;"	f	class:tair::config_server::table_builder2
config_server	src\configserver\tair_cfg_svr.cpp	/^  namespace config_server {$/;"	n	namespace:tair	file:
destroy	src\configserver\tair_cfg_svr.cpp	/^    int tair_config_server::destroy()$/;"	f	class:tair::config_server::tair_config_server
gmutex	src\configserver\tair_cfg_svr.cpp	/^tbsys::CThreadMutex gmutex;$/;"	v
handlePacket	src\configserver\tair_cfg_svr.cpp	/^    tbnet::IPacketHandler::HPRetCode tair_config_server::handlePacket(tbnet::$/;"	f	class:tair::config_server::tair_config_server
handlePacketQueue	src\configserver\tair_cfg_svr.cpp	/^    bool tair_config_server::handlePacketQueue(tbnet::Packet * apacket,$/;"	f	class:tair::config_server::tair_config_server
initialize	src\configserver\tair_cfg_svr.cpp	/^    int tair_config_server::initialize()$/;"	f	class:tair::config_server::tair_config_server
main	src\configserver\tair_cfg_svr.cpp	/^main(int argc, char *argv[])$/;"	f
parse_cmd_line	src\configserver\tair_cfg_svr.cpp	/^parse_cmd_line(int argc, char *const argv[])$/;"	f
print_usage	src\configserver\tair_cfg_svr.cpp	/^print_usage(char *prog_name)$/;"	f
sign_handler	src\configserver\tair_cfg_svr.cpp	/^sign_handler(int sig)$/;"	f
start	src\configserver\tair_cfg_svr.cpp	/^    void tair_config_server::start()$/;"	f	class:tair::config_server::tair_config_server
stop	src\configserver\tair_cfg_svr.cpp	/^    void tair_config_server::stop()$/;"	f	class:tair::config_server::tair_config_server
tair	src\configserver\tair_cfg_svr.cpp	/^namespace tair {$/;"	n	file:
tair_config_server	src\configserver\tair_cfg_svr.cpp	/^    tair_config_server::tair_config_server()$/;"	f	class:tair::config_server::tair_config_server
~tair_config_server	src\configserver\tair_cfg_svr.cpp	/^    tair_config_server::~tair_config_server()$/;"	f	class:tair::config_server::tair_config_server
TAIR_CONFIG_SERVER_H	src\configserver\tair_cfg_svr.hpp	16;"	d
config_server	src\configserver\tair_cfg_svr.hpp	/^  namespace config_server {$/;"	n	namespace:tair
heartbeat_transport	src\configserver\tair_cfg_svr.hpp	/^        tbnet::Transport heartbeat_transport;        \/\/$/;"	m	class:tair::config_server::tair_config_server
my_server_conf_thread	src\configserver\tair_cfg_svr.hpp	/^      server_conf_thread my_server_conf_thread;$/;"	m	class:tair::config_server::tair_config_server
packet_factory	src\configserver\tair_cfg_svr.hpp	/^      tair_packet_factory packet_factory;$/;"	m	class:tair::config_server::tair_config_server
packet_streamer	src\configserver\tair_cfg_svr.hpp	/^        tbnet::DefaultPacketStreamer packet_streamer;$/;"	m	class:tair::config_server::tair_config_server
packet_transport	src\configserver\tair_cfg_svr.hpp	/^        tbnet::Transport packet_transport;$/;"	m	class:tair::config_server::tair_config_server
stop_flag	src\configserver\tair_cfg_svr.hpp	/^      int stop_flag;$/;"	m	class:tair::config_server::tair_config_server
tair	src\configserver\tair_cfg_svr.hpp	/^namespace tair {$/;"	n
tair_config_server	src\configserver\tair_cfg_svr.hpp	/^    class tair_config_server:public tbnet::IServerAdapter,$/;"	c	namespace:tair::config_server
task_queue_thread	src\configserver\tair_cfg_svr.hpp	/^        tbnet::PacketQueueThread task_queue_thread;$/;"	m	class:tair::config_server::tair_config_server
TAIR_IMIGRATE_MANAGER_H	src\dataserver\base_migrate.hpp	18;"	d
base_migrate	src\dataserver\base_migrate.hpp	/^   class base_migrate{$/;"	c	namespace:tair
tair	src\dataserver\base_migrate.hpp	/^namespace tair {$/;"	n
~base_migrate	src\dataserver\base_migrate.hpp	/^      virtual ~base_migrate(){}$/;"	f	class:tair::base_migrate
PROFILER_BEGIN	src\dataserver\base_tair_manager.hpp	23;"	d
PROFILER_DUMP	src\dataserver\base_tair_manager.hpp	25;"	d
PROFILER_END	src\dataserver\base_tair_manager.hpp	24;"	d
PROFILER_SET_STATUS	src\dataserver\base_tair_manager.hpp	27;"	d
PROFILER_SET_THRESHOLD	src\dataserver\base_tair_manager.hpp	26;"	d
PROFILER_START	src\dataserver\base_tair_manager.hpp	21;"	d
PROFILER_STOP	src\dataserver\base_tair_manager.hpp	22;"	d
TAIR_ICACHE_MANAGER_H	src\dataserver\base_tair_manager.hpp	18;"	d
base_tair_manager	src\dataserver\base_tair_manager.hpp	/^      base_tair_manager() {}$/;"	f	class:tair::base_tair_manager
base_tair_manager	src\dataserver\base_tair_manager.hpp	/^   class base_tair_manager {$/;"	c	namespace:tair
tair	src\dataserver\base_tair_manager.hpp	/^namespace tair {$/;"	n
~base_tair_manager	src\dataserver\base_tair_manager.hpp	/^      virtual ~base_tair_manager() {}$/;"	f	class:tair::base_tair_manager
TAIR_DUPLICATE_BASE_H	src\dataserver\duplicate_base.hpp	16;"	d
base_duplicator	src\dataserver\duplicate_base.hpp	/^      base_duplicator(){};$/;"	f	class:tair::base_duplicator
base_duplicator	src\dataserver\duplicate_base.hpp	/^   class base_duplicator {$/;"	c	namespace:tair
tair	src\dataserver\duplicate_base.hpp	/^namespace tair{$/;"	n
~base_duplicator	src\dataserver\duplicate_base.hpp	/^      virtual ~base_duplicator(){};$/;"	f	class:tair::base_duplicator
bucket_waiting_queue	src\dataserver\duplicate_manager.cpp	/^   bucket_waiting_queue::bucket_waiting_queue(duplicate_sender_manager* psm, uint32_t bucket_number)$/;"	f	class:tair::bucket_waiting_queue
do_duplicate_response	src\dataserver\duplicate_manager.cpp	/^   void duplicate_sender_manager::do_duplicate_response(uint32_t bucket_id, uint64_t d_serverId, uint32_t packet_id)$/;"	f	class:tair::duplicate_sender_manager
do_hash_table_changed	src\dataserver\duplicate_manager.cpp	/^   void duplicate_sender_manager::do_hash_table_changed()$/;"	f	class:tair::duplicate_sender_manager
do_server_table_change	src\dataserver\duplicate_manager.cpp	/^   void bucket_waiting_queue::do_server_table_change(const set<uint64_t>& available_server_tmp)$/;"	f	class:tair::bucket_waiting_queue
duplicate_data	src\dataserver\duplicate_manager.cpp	/^   void duplicate_sender_manager::duplicate_data(int area, const data_entry* key, const data_entry* value,$/;"	f	class:tair::duplicate_sender_manager
duplicate_sender_manager	src\dataserver\duplicate_manager.cpp	/^   duplicate_sender_manager::duplicate_sender_manager( tbnet::Transport *transport,$/;"	f	class:tair::duplicate_sender_manager
handlePacket	src\dataserver\duplicate_manager.cpp	/^   tbnet::IPacketHandler::HPRetCode duplicate_sender_manager::handlePacket(tbnet::Packet *packet, void *args)$/;"	f	class:tair::duplicate_sender_manager
has_bucket_duplicate_done	src\dataserver\duplicate_manager.cpp	/^   bool duplicate_sender_manager::has_bucket_duplicate_done(int bucketNumber)$/;"	f	class:tair::duplicate_sender_manager
is_bucket_available	src\dataserver\duplicate_manager.cpp	/^   bool duplicate_sender_manager::is_bucket_available(uint32_t bucket_number)$/;"	f	class:tair::duplicate_sender_manager
pop	src\dataserver\duplicate_manager.cpp	/^   bool bucket_waiting_queue::pop(uint32_t packet_id, uint64_t server_id)$/;"	f	class:tair::bucket_waiting_queue
pop	src\dataserver\duplicate_manager.cpp	/^   void bucket_waiting_queue::pop(uint64_t server_id)$/;"	f	class:tair::bucket_waiting_queue
push	src\dataserver\duplicate_manager.cpp	/^   void bucket_waiting_queue::push(request_duplicate_packet& p_packet, uint64_t server_id)$/;"	f	class:tair::bucket_waiting_queue
run	src\dataserver\duplicate_manager.cpp	/^   void duplicate_sender_manager::run(tbsys::CThread *thread, void *arg)$/;"	f	class:tair::duplicate_sender_manager
send	src\dataserver\duplicate_manager.cpp	/^   bool bucket_waiting_queue::send(int64_t now)$/;"	f	class:tair::bucket_waiting_queue
size	src\dataserver\duplicate_manager.cpp	/^   size_t bucket_waiting_queue::size()$/;"	f	class:tair::bucket_waiting_queue
tair	src\dataserver\duplicate_manager.cpp	/^namespace tair{$/;"	n	file:
~bucket_waiting_queue	src\dataserver\duplicate_manager.cpp	/^   bucket_waiting_queue:: ~bucket_waiting_queue()$/;"	f	class:tair::bucket_waiting_queue
~duplicate_sender_manager	src\dataserver\duplicate_manager.cpp	/^   duplicate_sender_manager::~duplicate_sender_manager()$/;"	f	class:tair::duplicate_sender_manager
DUPLICATE_MANAGER_H	src\dataserver\duplicate_manager.hpp	16;"	d
bucket_number	src\dataserver\duplicate_manager.hpp	/^      uint32_t bucket_number;$/;"	m	class:tair::bucket_waiting_queue
bucket_waiting_queue	src\dataserver\duplicate_manager.hpp	/^   class bucket_waiting_queue {$/;"	c	namespace:tair
conn_mgr	src\dataserver\duplicate_manager.hpp	/^      tbnet::ConnectionManager* conn_mgr;$/;"	m	class:tair::duplicate_sender_manager
duplicate_sender_manager	src\dataserver\duplicate_manager.hpp	/^   class duplicate_sender_manager : public base_duplicator, public tbsys::CDefaultRunnable, public tbnet::IPacketHandler {$/;"	c	namespace:tair
get_bucket_number	src\dataserver\duplicate_manager.hpp	/^      uint64_t get_bucket_number() const {$/;"	f	class:tair::bucket_waiting_queue
have_data_to_send	src\dataserver\duplicate_manager.hpp	/^      volatile int have_data_to_send;$/;"	m	class:tair::duplicate_sender_manager
last_send_time	src\dataserver\duplicate_manager.hpp	/^      map<uint64_t, int64_t> last_send_time;  \/\/ will set this to 0 when receive the response$/;"	m	class:tair::bucket_waiting_queue
max_queue_size	src\dataserver\duplicate_manager.hpp	/^      uint32_t max_queue_size;$/;"	m	class:tair::duplicate_sender_manager
mutex	src\dataserver\duplicate_manager.hpp	/^      tbsys::CThreadMutex mutex;$/;"	m	class:tair::bucket_waiting_queue
packages_mgr_mutex	src\dataserver\duplicate_manager.hpp	/^      tbsys::CRWSimpleLock packages_mgr_mutex;$/;"	m	class:tair::duplicate_sender_manager
packet_id_creater	src\dataserver\duplicate_manager.hpp	/^      atomic_t packet_id_creater;$/;"	m	class:tair::bucket_waiting_queue
packets_mgr	src\dataserver\duplicate_manager.hpp	/^      map<uint32_t, bucket_waiting_queue> packets_mgr;$/;"	m	class:tair::duplicate_sender_manager
packets_queue	src\dataserver\duplicate_manager.hpp	/^      map<uint64_t, packets_queue_type> packets_queue;$/;"	m	class:tair::bucket_waiting_queue
packets_queue_type	src\dataserver\duplicate_manager.hpp	/^      typedef queue<request_duplicate_packet> packets_queue_type;$/;"	t	class:tair::bucket_waiting_queue
psm	src\dataserver\duplicate_manager.hpp	/^      duplicate_sender_manager* psm;$/;"	m	class:tair::bucket_waiting_queue
request_duplicate_packet	src\dataserver\duplicate_manager.hpp	/^      typedef boost::shared_ptr<request_duplicate> request_duplicate_packet;$/;"	t	class:tair::bucket_waiting_queue
set_max_queue_size	src\dataserver\duplicate_manager.hpp	/^      void set_max_queue_size(uint32_t max_queue_size) {$/;"	f	class:tair::duplicate_sender_manager
table_mgr	src\dataserver\duplicate_manager.hpp	/^      table_manager* table_mgr;$/;"	m	class:tair::duplicate_sender_manager
tair	src\dataserver\duplicate_manager.hpp	/^namespace tair {$/;"	n
get_client_version	src\dataserver\heartbeat_thread.cpp	/^   uint32_t heartbeat_thread::get_client_version()$/;"	f	class:tair::heartbeat_thread
get_config_servers	src\dataserver\heartbeat_thread.cpp	/^   vector<uint64_t> heartbeat_thread::get_config_servers()$/;"	f	class:tair::heartbeat_thread
get_plugins_version	src\dataserver\heartbeat_thread.cpp	/^   uint32_t heartbeat_thread::get_plugins_version()$/;"	f	class:tair::heartbeat_thread
get_server_version	src\dataserver\heartbeat_thread.cpp	/^   uint32_t heartbeat_thread::get_server_version()$/;"	f	class:tair::heartbeat_thread
handlePacket	src\dataserver\heartbeat_thread.cpp	/^   tbnet::IPacketHandler::HPRetCode heartbeat_thread::handlePacket(tbnet::Packet *packet, void *args)$/;"	f	class:tair::heartbeat_thread
heartbeat_thread	src\dataserver\heartbeat_thread.cpp	/^   heartbeat_thread::heartbeat_thread()$/;"	f	class:tair::heartbeat_thread
run	src\dataserver\heartbeat_thread.cpp	/^   void heartbeat_thread::run(tbsys::CThread *thread, void *arg)$/;"	f	class:tair::heartbeat_thread
set_thread_parameter	src\dataserver\heartbeat_thread.cpp	/^   void heartbeat_thread::set_thread_parameter(tbnet::IServerAdapter *adaptor,$/;"	f	class:tair::heartbeat_thread
tair	src\dataserver\heartbeat_thread.cpp	/^namespace tair {$/;"	n	file:
~heartbeat_thread	src\dataserver\heartbeat_thread.cpp	/^   heartbeat_thread::~heartbeat_thread()$/;"	f	class:tair::heartbeat_thread
TAIR_HEART_BEAT_THREAD_H	src\dataserver\heartbeat_thread.hpp	18;"	d
bucket_count	src\dataserver\heartbeat_thread.hpp	/^      uint32_t bucket_count;$/;"	m	class:tair::server_table_updater
client_version	src\dataserver\heartbeat_thread.hpp	/^      uint32_t client_version;$/;"	m	class:tair::heartbeat_thread
config_server_list	src\dataserver\heartbeat_thread.hpp	/^      vector<uint64_t> config_server_list;$/;"	m	class:tair::heartbeat_thread
conn_mgr	src\dataserver\heartbeat_thread.hpp	/^      tbnet::ConnectionManager *conn_mgr;$/;"	m	class:tair::heartbeat_thread
copy_count	src\dataserver\heartbeat_thread.hpp	/^      uint32_t copy_count;$/;"	m	class:tair::server_table_updater
curr_load	src\dataserver\heartbeat_thread.hpp	/^      uint32_t curr_load;$/;"	m	class:tair::heartbeat_thread
current_state_table	src\dataserver\heartbeat_thread.hpp	/^      vector<uint64_t> current_state_table;$/;"	m	class:tair::server_table_updater
data_need_move	src\dataserver\heartbeat_thread.hpp	/^      int32_t  data_need_move;$/;"	m	class:tair::server_table_updater
have_config_server_down	src\dataserver\heartbeat_thread.hpp	/^      bool have_config_server_down;$/;"	m	class:tair::heartbeat_thread
heartbeat_packet	src\dataserver\heartbeat_thread.hpp	/^      request_heartbeat heartbeat_packet;$/;"	m	class:tair::heartbeat_thread
heartbeat_thread	src\dataserver\heartbeat_thread.hpp	/^   class heartbeat_thread : public tbsys::CDefaultRunnable, public tbnet::IPacketHandler {$/;"	c	namespace:tair
plugins_dll_names_list	src\dataserver\heartbeat_thread.hpp	/^      std::set<std::string>  plugins_dll_names_list;$/;"	m	class:tair::plugins_updater
plugins_updater	src\dataserver\heartbeat_thread.hpp	/^      plugins_updater(tair_manager* tair_mgr, const std::vector<std::string>& plugins_dll_names_list)$/;"	f	class:tair::plugins_updater
plugins_updater	src\dataserver\heartbeat_thread.hpp	/^   class plugins_updater : public tbsys::CDefaultRunnable {$/;"	c	namespace:tair
plugins_version	src\dataserver\heartbeat_thread.hpp	/^      uint32_t plugins_version;$/;"	m	class:tair::heartbeat_thread
request_count	src\dataserver\heartbeat_thread.hpp	/^      uint64_t request_count;$/;"	m	class:tair::heartbeat_thread
run	src\dataserver\heartbeat_thread.hpp	/^      void run(tbsys::CThread *thread, void *arg)$/;"	f	class:tair::plugins_updater
run	src\dataserver\heartbeat_thread.hpp	/^      void run(tbsys::CThread *thread, void *arg)$/;"	f	class:tair::server_table_updater
server_list	src\dataserver\heartbeat_thread.hpp	/^      uint64_t *server_list;$/;"	m	class:tair::server_table_updater
server_list_count	src\dataserver\heartbeat_thread.hpp	/^      int server_list_count;$/;"	m	class:tair::server_table_updater
server_table_updater	src\dataserver\heartbeat_thread.hpp	/^      server_table_updater(tair_manager *tair_mgr, uint64_t *server_list, int server_list_count, uint32_t server_version, int32_t data_need_move, vector<uint64_t> current_state_table, uint32_t copy_count, uint32_t bucket_count)$/;"	f	class:tair::server_table_updater
server_table_updater	src\dataserver\heartbeat_thread.hpp	/^   class server_table_updater : public tbsys::CDefaultRunnable {$/;"	c	namespace:tair
server_version	src\dataserver\heartbeat_thread.hpp	/^      uint32_t server_version;$/;"	m	class:tair::heartbeat_thread
server_version	src\dataserver\heartbeat_thread.hpp	/^      uint32_t server_version;$/;"	m	class:tair::server_table_updater
tair	src\dataserver\heartbeat_thread.hpp	/^namespace tair {$/;"	n
tair_mgr	src\dataserver\heartbeat_thread.hpp	/^      tair_manager *tair_mgr;$/;"	m	class:tair::heartbeat_thread
tair_mgr	src\dataserver\heartbeat_thread.hpp	/^      tair_manager *tair_mgr;$/;"	m	class:tair::server_table_updater
tair_mgr	src\dataserver\heartbeat_thread.hpp	/^      tair_manager* tair_mgr;$/;"	m	class:tair::plugins_updater
transport	src\dataserver\heartbeat_thread.hpp	/^      tbnet::Transport transport;$/;"	m	class:tair::heartbeat_thread
~plugins_updater	src\dataserver\heartbeat_thread.hpp	/^      ~plugins_updater()$/;"	f	class:tair::plugins_updater
~server_table_updater	src\dataserver\heartbeat_thread.hpp	/^      ~server_table_updater()$/;"	f	class:tair::server_table_updater
do_migrate	src\dataserver\migrate_manager.cpp	/^   void migrate_manager::do_migrate()$/;"	f	class:tair::migrate_manager
do_migrate_one_bucket	src\dataserver\migrate_manager.cpp	/^   void migrate_manager::do_migrate_one_bucket(int bucket_number, vector<uint64_t> dest_servers)$/;"	f	class:tair::migrate_manager
do_run	src\dataserver\migrate_manager.cpp	/^   void migrate_manager::do_run()$/;"	f	class:tair::migrate_manager
do_server_list_changed	src\dataserver\migrate_manager.cpp	/^   void migrate_manager::do_server_list_changed()$/;"	f	class:tair::migrate_manager
finish_migrate_bucket	src\dataserver\migrate_manager.cpp	/^   void migrate_manager::finish_migrate_bucket(int bucket_number)$/;"	f	class:tair::migrate_manager
get_migrated_buckets	src\dataserver\migrate_manager.cpp	/^   vector<uint64_t> migrate_manager::get_migrated_buckets()$/;"	f	class:tair::migrate_manager
handlePacket	src\dataserver\migrate_manager.cpp	/^   tbnet::IPacketHandler::HPRetCode migrate_manager::handlePacket(tbnet::Packet *packet, void *args)$/;"	f	class:tair::migrate_manager
is_bucket_available	src\dataserver\migrate_manager.cpp	/^   bool migrate_manager::is_bucket_available(int bucket_number)$/;"	f	class:tair::migrate_manager
is_bucket_migrating	src\dataserver\migrate_manager.cpp	/^   bool migrate_manager::is_bucket_migrating(int bucket_number)$/;"	f	class:tair::migrate_manager
is_migrating	src\dataserver\migrate_manager.cpp	/^   bool migrate_manager::is_migrating()$/;"	f	class:tair::migrate_manager
migrate_data_file	src\dataserver\migrate_manager.cpp	/^   bool migrate_manager::migrate_data_file(int db_id, vector<uint64_t> dest_servers)$/;"	f	class:tair::migrate_manager
migrate_log	src\dataserver\migrate_manager.cpp	/^   bool migrate_manager::migrate_log(int db_id, vector<uint64_t> dest_servers, lsn_type start_lsn, lsn_type end_lsn)$/;"	f	class:tair::migrate_manager
migrate_manager	src\dataserver\migrate_manager.cpp	/^   migrate_manager::migrate_manager(tbnet::Transport *transport, tbnet::DefaultPacketStreamer *streamer, base_duplicator *this_duplicator, tair_manager *tair_mgr, tair::storage::storage_manager *storage_mgr)$/;"	f	class:tair::migrate_manager
run	src\dataserver\migrate_manager.cpp	/^   void migrate_manager::run(tbsys::CThread *thread, void *arg)$/;"	f	class:tair::migrate_manager
send_packet	src\dataserver\migrate_manager.cpp	/^   bool migrate_manager::send_packet(vector<uint64_t> dest_servers, request_mupdate *packet, int db_id)$/;"	f	class:tair::migrate_manager
set_log	src\dataserver\migrate_manager.cpp	/^   void migrate_manager::set_log(update_log *log)$/;"	f	class:tair::migrate_manager
set_migrate_server_list	src\dataserver\migrate_manager.cpp	/^   void migrate_manager::set_migrate_server_list(bucket_server_map migrate_server_list, uint32_t version)$/;"	f	class:tair::migrate_manager
signal	src\dataserver\migrate_manager.cpp	/^   void migrate_manager::signal()$/;"	f	class:tair::migrate_manager
stop	src\dataserver\migrate_manager.cpp	/^   void migrate_manager::stop()$/;"	f	class:tair::migrate_manager
tair	src\dataserver\migrate_manager.cpp	/^namespace tair {$/;"	n	file:
~migrate_manager	src\dataserver\migrate_manager.cpp	/^   migrate_manager::~migrate_manager()$/;"	f	class:tair::migrate_manager
MIGRATE_LOCK_LOG_LEN	src\dataserver\migrate_manager.hpp	/^   const static uint MIGRATE_LOCK_LOG_LEN = 1 * 1024 * 1024;$/;"	m	namespace:tair
MISECONDS_WAITED_FOR_WRITE	src\dataserver\migrate_manager.hpp	/^   const static int MISECONDS_WAITED_FOR_WRITE = 500000;$/;"	m	namespace:tair
MUPDATE_PACKET_HEADER_LEN	src\dataserver\migrate_manager.hpp	/^   const static uint MUPDATE_PACKET_HEADER_LEN = 8 + 4;$/;"	m	namespace:tair
TAIR_MIGRATE_HPP	src\dataserver\migrate_manager.hpp	18;"	d
condition	src\dataserver\migrate_manager.hpp	/^      tbsys::CThreadCond        condition;$/;"	m	class:tair::migrate_manager
config_server_list	src\dataserver\migrate_manager.hpp	/^      vector<uint64_t> config_server_list;$/;"	m	class:tair::migrate_manager
conn_mgr	src\dataserver\migrate_manager.hpp	/^      tbnet::ConnectionManager* conn_mgr;$/;"	m	class:tair::migrate_manager
current_locked_bucket	src\dataserver\migrate_manager.hpp	/^      volatile int current_locked_bucket;$/;"	m	class:tair::migrate_manager
current_migrating_bucket	src\dataserver\migrate_manager.hpp	/^      volatile int current_migrating_bucket;$/;"	m	class:tair::migrate_manager
duplicator	src\dataserver\migrate_manager.hpp	/^      base_duplicator *duplicator;$/;"	m	class:tair::migrate_manager
get_data_mutex	src\dataserver\migrate_manager.hpp	/^      tbsys::CThreadMutex get_data_mutex;$/;"	m	class:tair::migrate_manager
get_migrating_buckets_mutex	src\dataserver\migrate_manager.hpp	/^      tbsys::CThreadMutex get_migrating_buckets_mutex;$/;"	m	class:tair::migrate_manager
is_alive	src\dataserver\migrate_manager.hpp	/^      bool is_alive;$/;"	m	class:tair::migrate_manager
is_running	src\dataserver\migrate_manager.hpp	/^      int       is_running;$/;"	m	class:tair::migrate_manager
is_signaled	src\dataserver\migrate_manager.hpp	/^      bool      is_signaled;$/;"	m	class:tair::migrate_manager
is_stopped	src\dataserver\migrate_manager.hpp	/^      bool      is_stopped;$/;"	m	class:tair::migrate_manager
log	src\dataserver\migrate_manager.hpp	/^      update_log *log;$/;"	m	class:tair::migrate_manager
migrate_manager	src\dataserver\migrate_manager.hpp	/^   class migrate_manager: public base_migrate, public tbsys::CDefaultRunnable, public tbnet::IPacketHandler {$/;"	c	namespace:tair
migrate_servers	src\dataserver\migrate_manager.hpp	/^      bucket_server_map migrate_servers;$/;"	m	class:tair::migrate_manager
migrated_buckets	src\dataserver\migrate_manager.hpp	/^      vector<uint64_t> migrated_buckets;$/;"	m	class:tair::migrate_manager
mutex	src\dataserver\migrate_manager.hpp	/^      tbsys::CThreadMutex mutex;$/;"	m	class:tair::migrate_manager
storage_mgr	src\dataserver\migrate_manager.hpp	/^      tair::storage::storage_manager *storage_mgr;$/;"	m	class:tair::migrate_manager
tair	src\dataserver\migrate_manager.hpp	/^namespace tair {$/;"	n
tair_mgr	src\dataserver\migrate_manager.hpp	/^      tair_manager *tair_mgr;$/;"	m	class:tair::migrate_manager
temp_servers	src\dataserver\migrate_manager.hpp	/^      bucket_server_map temp_servers;$/;"	m	class:tair::migrate_manager
timeout	src\dataserver\migrate_manager.hpp	/^      uint timeout;$/;"	m	class:tair::migrate_manager
version	src\dataserver\migrate_manager.hpp	/^      uint32_t version;$/;"	m	class:tair::migrate_manager
wait_object_mgr	src\dataserver\migrate_manager.hpp	/^      wait_object_manager wait_object_mgr;$/;"	m	class:tair::migrate_manager
PROC_AFTER	src\dataserver\request_processor.cpp	31;"	d	file:
PROC_BEFORE	src\dataserver\request_processor.cpp	26;"	d	file:
do_duplicate	src\dataserver\request_processor.cpp	/^   bool request_processor::do_duplicate(int rc, T* & request) {$/;"	f	class:tair::request_processor
do_proxy	src\dataserver\request_processor.cpp	/^   bool request_processor::do_proxy(uint64_t target_server_id, base_packet *proxy_packet, base_packet *packet)$/;"	f	class:tair::request_processor
is_need_duplicate	src\dataserver\request_processor.cpp	19;"	d	file:
process	src\dataserver\request_processor.cpp	/^   int request_processor::process (request_addfilter * request, bool & send_return)$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process (request_dump_area * request, bool & send_return)$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process (request_exists * request, bool & send_return)$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process (request_expire * request,$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process (request_expireat * request,$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process (request_generic_zrangebyscore * request,$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process (request_get_ns_attr * request, bool & send_return)$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process (request_getset * request, bool & send_return)$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process (request_hdel * request, bool & send_return)$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process (request_hexists * request, bool & send_return)$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process (request_hget * request, bool & send_return)$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process (request_hgetall * request,$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process (request_hincrby * request,$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process (request_hkeys * request, bool & send_return)$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process (request_hlen * request, bool & send_return)$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process (request_hmget * request, bool & send_return)$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process (request_hmset * request, bool & send_return)$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process (request_hset * request, bool & send_return)$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process (request_hsetnx * request,$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process (request_hvals * request, bool & send_return)$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process (request_info * request, bool & send_return)$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process (request_lazy_remove_area * request, bool & send_return)$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process (request_lindex * request,$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process (request_llen * request, bool & send_return)$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process (request_load_area * request, bool & send_return)$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process (request_lrange * request,$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process (request_lrem * request, bool & send_return)$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process (request_lrpop * request, bool & send_return)$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process (request_lrpush * request,$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process (request_lrpush_limit * request, bool & send_return)$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process (request_ltrim * request, bool & send_return)$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process (request_persist * request,$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process (request_removefilter * request, bool & send_return)$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process (request_sadd * request, bool & send_return)$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process (request_sadd_multi * request,$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process (request_scard * request, bool & send_return)$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process (request_set_ns_attr * request, bool & send_return)$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process (request_smembers * request,$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process (request_smembers_multi * request,$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process (request_spop * request, bool & send_return)$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process (request_srem * request, bool &send_return)$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process (request_srem_multi * request,$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process (request_ttl * request, bool & send_return)$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process (request_type * request, bool & send_return)$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process (request_zadd * request, bool & send_return)$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process (request_zcard * request, bool & send_return)$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process (request_zcount * request, bool & send_return)$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process (request_zincrby * request, bool & send_return)$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process (request_zrange * request,$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process (request_zrangebyscore * request,$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process (request_zrank * request, bool & send_return)$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process (request_zrem * request, bool &send_return)$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process (request_zremrangebyrank * request, bool &send_return)$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process (request_zremrangebyscore * request, bool &send_return)$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process (request_zrevrange * request,$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process (request_zrevrank * request, bool & send_return)$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process (request_zscore * request,$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process(request_duplicate *request, bool &sendReturn)$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process(request_get *request, bool &send_return)$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process(request_inc_dec *request, bool &send_return)$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process(request_mupdate *request,bool &send_return)$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process(request_put *request, bool &send_return)$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process(request_putnx *request, bool &send_return)$/;"	f	class:tair::request_processor
process	src\dataserver\request_processor.cpp	/^   int request_processor::process(request_remove *request, bool &send_return)$/;"	f	class:tair::request_processor
process_after	src\dataserver\request_processor.cpp	/^   int request_processor::process_after(heartbeat_thread *heart_beat,$/;"	f	class:tair::request_processor
process_before	src\dataserver\request_processor.cpp	/^   int request_processor::process_before(request_processor *processor,$/;"	f	class:tair::request_processor
request_processor	src\dataserver\request_processor.cpp	/^   request_processor::request_processor(tair_manager *tair_mgr, heartbeat_thread *heart_beat,$/;"	f	class:tair::request_processor
tair	src\dataserver\request_processor.cpp	/^namespace tair {$/;"	n	file:
~request_processor	src\dataserver\request_processor.cpp	/^   request_processor::~request_processor()$/;"	f	class:tair::request_processor
connection_mgr	src\dataserver\request_processor.hpp	/^      tbnet::ConnectionManager *connection_mgr;$/;"	m	class:tair::request_processor
heart_beat	src\dataserver\request_processor.hpp	/^      heartbeat_thread *heart_beat;$/;"	m	class:tair::request_processor
request_processor	src\dataserver\request_processor.hpp	/^   class request_processor {$/;"	c	namespace:tair
tair	src\dataserver\request_processor.hpp	/^namespace tair {$/;"	n
tair_mgr	src\dataserver\request_processor.hpp	/^      tair_manager *tair_mgr;$/;"	m	class:tair::request_processor
MISECONDS_ASSURANCE_TIME	src\dataserver\table_manager.cpp	/^   const int MISECONDS_ASSURANCE_TIME = 30;$/;"	m	namespace:__anon12	file:
calculate_migrates	src\dataserver\table_manager.cpp	/^   void table_manager::calculate_migrates(uint64_t *table, int index)$/;"	f	class:tair::table_manager
calculate_release_bucket	src\dataserver\table_manager.cpp	/^   void table_manager::calculate_release_bucket(vector<int> &new_holding_bucket)$/;"	f	class:tair::table_manager
clear_available_server	src\dataserver\table_manager.cpp	/^   void table_manager::clear_available_server()$/;"	f	class:tair::table_manager
do_update_table	src\dataserver\table_manager.cpp	/^   void table_manager::do_update_table(uint64_t *new_table, size_t size, uint32_t table_version, uint32_t copy_count, uint32_t bucket_count)$/;"	f	class:tair::table_manager
get_available_server_ids	src\dataserver\table_manager.cpp	/^   set<uint64_t> table_manager::get_available_server_ids() const$/;"	f	class:tair::table_manager
get_bucket_count	src\dataserver\table_manager.cpp	/^   uint32_t table_manager::get_bucket_count() const$/;"	f	class:tair::table_manager
get_copy_count	src\dataserver\table_manager.cpp	/^   uint32_t table_manager::get_copy_count() const$/;"	f	class:tair::table_manager
get_hash_table_size	src\dataserver\table_manager.cpp	/^   uint32_t table_manager::get_hash_table_size() const$/;"	f	class:tair::table_manager
get_holding_buckets	src\dataserver\table_manager.cpp	/^   vector<int> table_manager::get_holding_buckets() const$/;"	f	class:tair::table_manager
get_migrate_target	src\dataserver\table_manager.cpp	/^   uint64_t table_manager::get_migrate_target(int bucket_number) const$/;"	f	class:tair::table_manager
get_migrates	src\dataserver\table_manager.cpp	/^   bucket_server_map table_manager::get_migrates() const$/;"	f	class:tair::table_manager
get_padding_buckets	src\dataserver\table_manager.cpp	/^   vector<int> table_manager::get_padding_buckets() const$/;"	f	class:tair::table_manager
get_release_buckets	src\dataserver\table_manager.cpp	/^   vector<int> table_manager::get_release_buckets() const$/;"	f	class:tair::table_manager
get_server_table	src\dataserver\table_manager.cpp	/^   const uint64_t* table_manager::get_server_table() const$/;"	f	class:tair::table_manager
get_slaves	src\dataserver\table_manager.cpp	/^   vector<uint64_t> table_manager::get_slaves(int bucket_number, bool is_migrating) const$/;"	f	class:tair::table_manager
get_version	src\dataserver\table_manager.cpp	/^   uint32_t table_manager::get_version() const$/;"	f	class:tair::table_manager
init_migrate_done_set	src\dataserver\table_manager.cpp	/^   void table_manager::init_migrate_done_set(boost::dynamic_bitset<> &migrate_done_set, const vector<uint64_t> &current_state_table)$/;"	f	class:tair::table_manager
is_master	src\dataserver\table_manager.cpp	/^   bool table_manager::is_master(int bucket_number, int server_flag) const$/;"	f	class:tair::table_manager
set_table_for_localmode	src\dataserver\table_manager.cpp	/^   void table_manager::set_table_for_localmode()$/;"	f	class:tair::table_manager
table_manager	src\dataserver\table_manager.cpp	/^   table_manager::table_manager()$/;"	f	class:tair::table_manager
tair	src\dataserver\table_manager.cpp	/^namespace tair {$/;"	n	file:
~table_manager	src\dataserver\table_manager.cpp	/^   table_manager::~table_manager()$/;"	f	class:tair::table_manager
TAIR_TABLE_MANAGER_H	src\dataserver\table_manager.hpp	18;"	d
available_server_ids	src\dataserver\table_manager.hpp	/^      std::set<uint64_t> available_server_ids;$/;"	m	class:tair::table_manager
bucket_count	src\dataserver\table_manager.hpp	/^      uint32_t bucket_count;$/;"	m	class:tair::table_manager
bucket_server_map	src\dataserver\table_manager.hpp	/^   typedef __gnu_cxx::hash_map<int, std::vector<uint64_t>, __gnu_cxx::hash<int> > bucket_server_map;$/;"	t	namespace:tair
bucket_server_map_it	src\dataserver\table_manager.hpp	/^   typedef __gnu_cxx::hash_map<int, std::vector<uint64_t>, __gnu_cxx::hash<int> >::iterator bucket_server_map_it;$/;"	t	namespace:tair
copy_count	src\dataserver\table_manager.hpp	/^      uint32_t copy_count;$/;"	m	class:tair::table_manager
holding_buckets	src\dataserver\table_manager.hpp	/^      std::vector<int> holding_buckets; \/\/ the buckets this server holding$/;"	m	class:tair::table_manager
migrates	src\dataserver\table_manager.hpp	/^      bucket_server_map migrates; \/\/ buckets that need to be migrate <bucket number, target server ids>$/;"	m	class:tair::table_manager
padding_buckets	src\dataserver\table_manager.hpp	/^      std::vector<int> padding_buckets;$/;"	m	class:tair::table_manager
release_buckets	src\dataserver\table_manager.hpp	/^      std::vector<int> release_buckets;$/;"	m	class:tair::table_manager
server_table	src\dataserver\table_manager.hpp	/^      uint64_t *server_table;$/;"	m	class:tair::table_manager
table_manager	src\dataserver\table_manager.hpp	/^   class table_manager {$/;"	c	namespace:tair
table_version	src\dataserver\table_manager.hpp	/^      uint32_t table_version;$/;"	m	class:tair::table_manager
tair	src\dataserver\table_manager.hpp	/^namespace tair {$/;"	n
update_mutex	src\dataserver\table_manager.hpp	/^      tbsys::CThreadMutex update_mutex;$/;"	m	class:tair::table_manager
STAT_KEY_VERIFY	src\dataserver\tair_manager.cpp	36;"	d	file:
TAIR_DUPLICATE_BUSY_RETRY_COUNT	src\dataserver\tair_manager.cpp	/^   const int TAIR_DUPLICATE_BUSY_RETRY_COUNT = 10;$/;"	m	namespace:__anon13	file:
TAIR_OPERATION_DUPLICATE	src\dataserver\tair_manager.cpp	/^   const int TAIR_OPERATION_DUPLICATE = 2;$/;"	m	namespace:__anon13	file:
TAIR_OPERATION_REMOTE	src\dataserver\tair_manager.cpp	/^   const int TAIR_OPERATION_REMOTE    = 4;$/;"	m	namespace:__anon13	file:
TAIR_OPERATION_VERSION	src\dataserver\tair_manager.cpp	/^   const int TAIR_OPERATION_VERSION   = 1;$/;"	m	namespace:__anon13	file:
add_count	src\dataserver\tair_manager.cpp	/^   int tair_manager::add_count(int area, data_entry &key, int count, int init_value, int *result_value, int expire_time)$/;"	f	class:tair::tair_manager
addfilter	src\dataserver\tair_manager.cpp	/^   int tair_manager::addfilter (int area, data_entry & key,$/;"	f	class:tair::tair_manager
clear	src\dataserver\tair_manager.cpp	/^   int tair_manager::clear(int area)$/;"	f	class:tair::tair_manager
direct_put	src\dataserver\tair_manager.cpp	/^   int tair_manager::direct_put(data_entry &key, data_entry &value)$/;"	f	class:tair::tair_manager
direct_remove	src\dataserver\tair_manager.cpp	/^   int tair_manager::direct_remove(data_entry &key)$/;"	f	class:tair::tair_manager
do_dump	src\dataserver\tair_manager.cpp	/^   void tair_manager::do_dump(set<dump_meta_info> dump_meta_infos)$/;"	f	class:tair::tair_manager
dumparea	src\dataserver\tair_manager.cpp	/^   int tair_manager::dumparea(int area)$/;"	f	class:tair::tair_manager
exists	src\dataserver\tair_manager.cpp	/^   int tair_manager::exists (int area, data_entry & key)$/;"	f	class:tair::tair_manager
expire	src\dataserver\tair_manager.cpp	/^   int tair_manager::expire (int area, data_entry & key, int32_t expiretime)$/;"	f	class:tair::tair_manager
expireat	src\dataserver\tair_manager.cpp	/^   int tair_manager::expireat (int area, data_entry & key, int32_t expiretime)$/;"	f	class:tair::tair_manager
genericHgetall	src\dataserver\tair_manager.cpp	/^   int tair_manager::genericHgetall (int area, data_entry & key, vector<data_entry *>& field_val, int method)$/;"	f	class:tair::tair_manager
get	src\dataserver\tair_manager.cpp	/^   int tair_manager::get(int area, data_entry &key, data_entry &value)$/;"	f	class:tair::tair_manager
get_bucket_number	src\dataserver\tair_manager.cpp	/^   uint32_t tair_manager::get_bucket_number(data_entry &key)$/;"	f	class:tair::tair_manager
get_bucket_number	src\dataserver\tair_manager.cpp	/^   uint32_t tair_manager::get_bucket_number(uint32_t hashcode)$/;"	f	class:tair::tair_manager
get_mutex_index	src\dataserver\tair_manager.cpp	/^   int tair_manager::get_mutex_index(data_entry &key)$/;"	f	class:tair::tair_manager
get_op_flag	src\dataserver\tair_manager.cpp	/^   int tair_manager::get_op_flag(int server_flag)$/;"	f	class:tair::tair_manager
get_proxying_buckets	src\dataserver\tair_manager.cpp	/^   void tair_manager::get_proxying_buckets(vector<uint32_t> &buckets)$/;"	f	class:tair::tair_manager
get_slaves	src\dataserver\tair_manager.cpp	/^   void tair_manager::get_slaves(int server_flag, int bucket_number, vector<uint64_t> &slaves) {$/;"	f	class:tair::tair_manager
getnsattr	src\dataserver\tair_manager.cpp	/^   int tair_manager::getnsattr(int area, const char* attr, const int attr_len,$/;"	f	class:tair::tair_manager
getset	src\dataserver\tair_manager.cpp	/^   int tair_manager::getset(int area, data_entry & key, data_entry & value, data_entry & oldvalue,$/;"	f	class:tair::tair_manager
hdel	src\dataserver\tair_manager.cpp	/^   int tair_manager::hdel (int area, data_entry & key, data_entry & field,$/;"	f	class:tair::tair_manager
hexists	src\dataserver\tair_manager.cpp	/^   int tair_manager::hexists (int area, data_entry & key,$/;"	f	class:tair::tair_manager
hget	src\dataserver\tair_manager.cpp	/^   int tair_manager::hget (int area, data_entry & key, data_entry & field,$/;"	f	class:tair::tair_manager
hgetall	src\dataserver\tair_manager.cpp	/^   int tair_manager::hgetall (int area, data_entry & key,$/;"	f	class:tair::tair_manager
hincrby	src\dataserver\tair_manager.cpp	/^   int tair_manager::hincrby (int area, data_entry & key, data_entry & field,$/;"	f	class:tair::tair_manager
hkeys	src\dataserver\tair_manager.cpp	/^   int tair_manager::hkeys (int area, data_entry & key,$/;"	f	class:tair::tair_manager
hlen	src\dataserver\tair_manager.cpp	/^   int tair_manager::hlen(int area, data_entry & key, long long *retlen)$/;"	f	class:tair::tair_manager
hmget	src\dataserver\tair_manager.cpp	/^   int tair_manager::hmget (int area, data_entry & key,$/;"	f	class:tair::tair_manager
hmset	src\dataserver\tair_manager.cpp	/^   int tair_manager::hmset (int area, data_entry & key,$/;"	f	class:tair::tair_manager
hset	src\dataserver\tair_manager.cpp	/^   int tair_manager::hset (int area, data_entry & key,$/;"	f	class:tair::tair_manager
hsetnx	src\dataserver\tair_manager.cpp	/^   int tair_manager::hsetnx (int area, data_entry & key,$/;"	f	class:tair::tair_manager
hvals	src\dataserver\tair_manager.cpp	/^   int tair_manager::hvals (int area, data_entry & key,$/;"	f	class:tair::tair_manager
info	src\dataserver\tair_manager.cpp	/^   int tair_manager::info (data_entry & info)$/;"	f	class:tair::tair_manager
init_migrate_log	src\dataserver\tair_manager.cpp	/^   void tair_manager::init_migrate_log()$/;"	f	class:tair::tair_manager
initialize	src\dataserver\tair_manager.cpp	/^   bool tair_manager::initialize(tbnet::Transport *transport, tbnet::DefaultPacketStreamer *streamer)$/;"	f	class:tair::tair_manager
is_localmode	src\dataserver\tair_manager.cpp	/^   bool tair_manager::is_localmode() {$/;"	f	class:tair::tair_manager
is_migrating	src\dataserver\tair_manager.cpp	/^   bool tair_manager::is_migrating()$/;"	f	class:tair::tair_manager
is_working	src\dataserver\tair_manager.cpp	/^   bool tair_manager::is_working()$/;"	f	class:tair::tair_manager
lazyclear	src\dataserver\tair_manager.cpp	/^   int tair_manager::lazyclear(int area, const char* password, const int pwd_len)$/;"	f	class:tair::tair_manager
lindex	src\dataserver\tair_manager.cpp	/^   int tair_manager::lindex(int area, data_entry & key,$/;"	f	class:tair::tair_manager
llen	src\dataserver\tair_manager.cpp	/^   int tair_manager::llen (int area, data_entry & key, long long* retlen)$/;"	f	class:tair::tair_manager
loadarea	src\dataserver\tair_manager.cpp	/^   int tair_manager::loadarea(int area)$/;"	f	class:tair::tair_manager
lrange	src\dataserver\tair_manager.cpp	/^   int tair_manager::lrange (int area, data_entry & key, int32_t start,$/;"	f	class:tair::tair_manager
lrem	src\dataserver\tair_manager.cpp	/^   int tair_manager::lrem (int area, data_entry & key, int32_t count,$/;"	f	class:tair::tair_manager
lrpop	src\dataserver\tair_manager.cpp	/^   int tair_manager::lrpop (int area, data_entry & key,$/;"	f	class:tair::tair_manager
lrpush	src\dataserver\tair_manager.cpp	/^   int tair_manager::lrpush(int area, data_entry &key, vector<data_entry *> &value,$/;"	f	class:tair::tair_manager
ltrim	src\dataserver\tair_manager.cpp	/^   int tair_manager::ltrim (int area, data_entry & key, int32_t start,$/;"	f	class:tair::tair_manager
need_do_migrate_log	src\dataserver\tair_manager.cpp	/^   bool tair_manager::need_do_migrate_log(int bucket_number)$/;"	f	class:tair::tair_manager
persist	src\dataserver\tair_manager.cpp	/^   int tair_manager::persist (int area, data_entry & key)$/;"	f	class:tair::tair_manager
put	src\dataserver\tair_manager.cpp	/^   int tair_manager::put(int area, data_entry &key, data_entry &value, int expire_time)$/;"	f	class:tair::tair_manager
putnx	src\dataserver\tair_manager.cpp	/^   int tair_manager::putnx(int area, data_entry &key, data_entry &value, int expire_time)$/;"	f	class:tair::tair_manager
remove	src\dataserver\tair_manager.cpp	/^   int tair_manager::remove(int area, data_entry &key)$/;"	f	class:tair::tair_manager
removefilter	src\dataserver\tair_manager.cpp	/^   int tair_manager::removefilter(int area, data_entry & key,$/;"	f	class:tair::tair_manager
sadd	src\dataserver\tair_manager.cpp	/^   int tair_manager::sadd (int area, data_entry & key, data_entry & value,$/;"	f	class:tair::tair_manager
scard	src\dataserver\tair_manager.cpp	/^   int tair_manager::scard (int area, data_entry & key, long long * retnum)$/;"	f	class:tair::tair_manager
set_migrate_done	src\dataserver\tair_manager.cpp	/^   void tair_manager::set_migrate_done(int bucket_number)$/;"	f	class:tair::tair_manager
set_solitary	src\dataserver\tair_manager.cpp	/^   void tair_manager::set_solitary()$/;"	f	class:tair::tair_manager
setnsattr	src\dataserver\tair_manager.cpp	/^   int tair_manager::setnsattr(int area, const char* attr, const int attr_len,$/;"	f	class:tair::tair_manager
should_proxy	src\dataserver\tair_manager.cpp	/^   bool tair_manager::should_proxy(data_entry &key, uint64_t &target_server_id)$/;"	f	class:tair::tair_manager
should_proxy	src\dataserver\tair_manager.cpp	/^   bool tair_manager::should_proxy(uint32_t hashcode, uint64_t &target_server_id)$/;"	f	class:tair::tair_manager
should_write_local	src\dataserver\tair_manager.cpp	/^   bool tair_manager::should_write_local(int bucket_number, int server_flag, int op_flag, int &rc)$/;"	f	class:tair::tair_manager
smembers	src\dataserver\tair_manager.cpp	/^   int tair_manager::smembers (int area, data_entry & key,$/;"	f	class:tair::tair_manager
spop	src\dataserver\tair_manager.cpp	/^   int tair_manager::spop (int area, data_entry & key, data_entry & value,$/;"	f	class:tair::tair_manager
srem	src\dataserver\tair_manager.cpp	/^   int tair_manager::srem (int area, data_entry & key, data_entry & value,$/;"	f	class:tair::tair_manager
tair	src\dataserver\tair_manager.cpp	/^namespace tair {$/;"	n	file:
tair_manager	src\dataserver\tair_manager.cpp	/^   tair_manager::tair_manager() : migrate_done_set(0)$/;"	f	class:tair::tair_manager
ttl	src\dataserver\tair_manager.cpp	/^   int tair_manager::ttl (int area, data_entry & key, long long* time_remain)$/;"	f	class:tair::tair_manager
type	src\dataserver\tair_manager.cpp	/^   int tair_manager::type (int area, data_entry & key, long long* what_type)$/;"	f	class:tair::tair_manager
update_server_table	src\dataserver\tair_manager.cpp	/^   void tair_manager::update_server_table(uint64_t *server_table, int server_table_size, uint32_t server_table_version,$/;"	f	class:tair::tair_manager
zadd	src\dataserver\tair_manager.cpp	/^   int tair_manager::zadd (int area, data_entry & key, double score,$/;"	f	class:tair::tair_manager
zcard	src\dataserver\tair_manager.cpp	/^   int tair_manager::zcard (int area, data_entry & key, long long * retnum)$/;"	f	class:tair::tair_manager
zcount	src\dataserver\tair_manager.cpp	/^   int tair_manager::zcount(int area, data_entry & key, double start, double end,$/;"	f	class:tair::tair_manager
zincrby	src\dataserver\tair_manager.cpp	/^   int tair_manager::zincrby (int area, data_entry & key, data_entry & value,$/;"	f	class:tair::tair_manager
zrange	src\dataserver\tair_manager.cpp	/^   int tair_manager::zrange (int area, data_entry & key,$/;"	f	class:tair::tair_manager
zrangebyscore	src\dataserver\tair_manager.cpp	/^   int tair_manager::zrangebyscore (int area, data_entry & key, double start,$/;"	f	class:tair::tair_manager
zrank	src\dataserver\tair_manager.cpp	/^   int tair_manager::zrank (int area, data_entry & key, data_entry & value,$/;"	f	class:tair::tair_manager
zrem	src\dataserver\tair_manager.cpp	/^   int tair_manager::zrem (int area, data_entry & key, data_entry & value,$/;"	f	class:tair::tair_manager
zremrangebyrank	src\dataserver\tair_manager.cpp	/^   int tair_manager::zremrangebyrank (int area, data_entry & key, int start,$/;"	f	class:tair::tair_manager
zremrangebyscore	src\dataserver\tair_manager.cpp	/^   int tair_manager::zremrangebyscore (int area, data_entry & key, double start,$/;"	f	class:tair::tair_manager
zrevrange	src\dataserver\tair_manager.cpp	/^   int tair_manager::zrevrange (int area, data_entry & key, int32_t start,$/;"	f	class:tair::tair_manager
zrevrangebyscore	src\dataserver\tair_manager.cpp	/^   int tair_manager::zrevrangebyscore (int area, data_entry & key, double start,$/;"	f	class:tair::tair_manager
zrevrank	src\dataserver\tair_manager.cpp	/^   int tair_manager::zrevrank (int area, data_entry & key, data_entry & value,$/;"	f	class:tair::tair_manager
zscore	src\dataserver\tair_manager.cpp	/^   int tair_manager::zscore (int area, data_entry & key,$/;"	f	class:tair::tair_manager
~tair_manager	src\dataserver\tair_manager.cpp	/^   tair_manager::~tair_manager()$/;"	f	class:tair::tair_manager
ELEMENT_TYPE_DOUBLE	src\dataserver\tair_manager.hpp	/^      ELEMENT_TYPE_DOUBLE,\/\/double$/;"	e	enum:tair::__anon14
ELEMENT_TYPE_INT	src\dataserver\tair_manager.hpp	/^      ELEMENT_TYPE_INT = 0, \/\/int 32bit$/;"	e	enum:tair::__anon14
ELEMENT_TYPE_INVALID	src\dataserver\tair_manager.hpp	/^      ELEMENT_TYPE_INVALID,$/;"	e	enum:tair::__anon14
ELEMENT_TYPE_LLONG	src\dataserver\tair_manager.hpp	/^      ELEMENT_TYPE_LLONG,\/\/ long long 64 bit$/;"	e	enum:tair::__anon14
ELEMENT_TYPE_STRING	src\dataserver\tair_manager.hpp	/^      ELEMENT_TYPE_STRING,\/\/string$/;"	e	enum:tair::__anon14
ITEM_HEAD_LENGTH	src\dataserver\tair_manager.hpp	/^   const int ITEM_HEAD_LENGTH = 2;$/;"	m	namespace:tair
METHOD_HGETALL	src\dataserver\tair_manager.hpp	59;"	d
METHOD_HKEYS	src\dataserver\tair_manager.hpp	60;"	d
METHOD_HVALS	src\dataserver\tair_manager.hpp	61;"	d
STATUS_CAN_WORK	src\dataserver\tair_manager.hpp	/^         STATUS_CAN_WORK,$/;"	e	enum:tair::tair_manager::__anon15
STATUS_INITED	src\dataserver\tair_manager.hpp	/^         STATUS_INITED,$/;"	e	enum:tair::tair_manager::__anon15
STATUS_NOT_INITED	src\dataserver\tair_manager.hpp	/^         STATUS_NOT_INITED,$/;"	e	enum:tair::tair_manager::__anon15
TAIR_MANAGER_H	src\dataserver\tair_manager.hpp	18;"	d
counter_mutex	src\dataserver\tair_manager.hpp	/^      tbsys::CThreadMutex counter_mutex[mutex_array_size];$/;"	m	class:tair::tair_manager
dump_mgr	src\dataserver\tair_manager.hpp	/^      tair::storage::dump_manager *dump_mgr;$/;"	m	class:tair::tair_manager
duplicator	src\dataserver\tair_manager.hpp	/^      duplicate_sender_manager *duplicator;$/;"	m	class:tair::tair_manager
item_mutex	src\dataserver\tair_manager.hpp	/^      tbsys::CThreadMutex item_mutex[mutex_array_size];$/;"	m	class:tair::tair_manager
localmode	src\dataserver\tair_manager.hpp	/^      bool localmode;$/;"	m	class:tair::tair_manager
migrate_done_set	src\dataserver\tair_manager.hpp	/^      boost::dynamic_bitset<> migrate_done_set;$/;"	m	class:tair::tair_manager
migrate_log	src\dataserver\tair_manager.hpp	/^      update_log *migrate_log;$/;"	m	class:tair::tair_manager
migrate_mgr	src\dataserver\tair_manager.hpp	/^      migrate_manager *migrate_mgr;$/;"	m	class:tair::tair_manager
mutex_array_size	src\dataserver\tair_manager.hpp	/^      const static int mutex_array_size = 1000;$/;"	m	class:tair::tair_manager
plugins_manager	src\dataserver\tair_manager.hpp	/^      plugin::plugins_manager plugins_manager;$/;"	m	class:tair::tair_manager
set_area_quota	src\dataserver\tair_manager.hpp	/^      void set_area_quota(int area,uint64_t quota) {$/;"	f	class:tair::tair_manager
status	src\dataserver\tair_manager.hpp	/^      int status;$/;"	m	class:tair::tair_manager
storage_mgr	src\dataserver\tair_manager.hpp	/^      tair::storage::storage_manager *storage_mgr;$/;"	m	class:tair::tair_manager
table_mgr	src\dataserver\tair_manager.hpp	/^      table_manager *table_mgr;$/;"	m	class:tair::tair_manager
tair	src\dataserver\tair_manager.hpp	/^namespace tair {$/;"	n
tair_manager	src\dataserver\tair_manager.hpp	/^   class tair_manager {$/;"	c	namespace:tair
update_server_table_mutex	src\dataserver\tair_manager.hpp	/^      tbsys::CThreadMutex update_server_table_mutex;$/;"	m	class:tair::tair_manager
destroy	src\dataserver\tair_server.cpp	/^   bool tair_server::destroy()$/;"	f	class:tair::tair_server
handleBatchPacket	src\dataserver\tair_server.cpp	/^   bool tair_server::handleBatchPacket(tbnet::Connection *connection, tbnet::PacketQueue &packetQueue)$/;"	f	class:tair::tair_server
handlePacket	src\dataserver\tair_server.cpp	/^   tbnet::IPacketHandler::HPRetCode tair_server::handlePacket(tbnet::Connection *connection, tbnet::Packet *packet)$/;"	f	class:tair::tair_server
handlePacket	src\dataserver\tair_server.cpp	/^   tbnet::IPacketHandler::HPRetCode tair_server::handlePacket(tbnet::Packet *packet, void *args)$/;"	f	class:tair::tair_server
handlePacketQueue	src\dataserver\tair_server.cpp	/^   bool tair_server::handlePacketQueue(tbnet::Packet *apacket, void *args)$/;"	f	class:tair::tair_server
initialize	src\dataserver\tair_server.cpp	/^   bool tair_server::initialize()$/;"	f	class:tair::tair_server
ip	src\dataserver\tair_server.cpp	/^uint64_t tair::common::local_server_ip::ip = 0;$/;"	m	class:tair::common::local_server_ip	file:
main	src\dataserver\tair_server.cpp	/^int main(int argc, char *argv[])$/;"	f
mutex	src\dataserver\tair_server.cpp	/^tbsys::CThreadMutex mutex;$/;"	v
parse_cmd_line	src\dataserver\tair_server.cpp	/^char *parse_cmd_line(int argc, char *const argv[])$/;"	f
print_usage	src\dataserver\tair_server.cpp	/^void print_usage(char *prog_name)$/;"	f
sign_handler	src\dataserver\tair_server.cpp	/^void sign_handler(int sig)$/;"	f
start	src\dataserver\tair_server.cpp	/^   void tair_server::start()$/;"	f	class:tair::tair_server
stop	src\dataserver\tair_server.cpp	/^   void tair_server::stop()$/;"	f	class:tair::tair_server
tair	src\dataserver\tair_server.cpp	/^namespace tair {$/;"	n	file:
tair_server	src\dataserver\tair_server.cpp	/^   tair_server::tair_server()$/;"	f	class:tair::tair_server
~tair_server	src\dataserver\tair_server.cpp	/^   tair_server::~tair_server()$/;"	f	class:tair::tair_server
TAIR_SERVER_H	src\dataserver\tair_server.hpp	18;"	d
async_task_queue_thread	src\dataserver\tair_server.hpp	/^      tbnet::PacketQueueThread async_task_queue_thread;$/;"	m	class:tair::tair_server
conn_manager	src\dataserver\tair_server.hpp	/^      tbnet::ConnectionManager *conn_manager;$/;"	m	class:tair::tair_server
duplicate_task_queue_thread	src\dataserver\tair_server.hpp	/^      tbnet::PacketQueueThread duplicate_task_queue_thread;$/;"	m	class:tair::tair_server
duplicate_thread_count	src\dataserver\tair_server.hpp	/^      int duplicate_thread_count;$/;"	m	class:tair::tair_server
factory	src\dataserver\tair_server.hpp	/^      tair_packet_factory factory;$/;"	m	class:tair::tair_server
get_tair_manager	src\dataserver\tair_server.hpp	/^      tair_manager* get_tair_manager(void) {return tair_mgr; }$/;"	f	class:tair::tair_server
heartbeat	src\dataserver\tair_server.hpp	/^      heartbeat_thread heartbeat;$/;"	m	class:tair::tair_server
is_stoped	src\dataserver\tair_server.hpp	/^      int is_stoped;$/;"	m	class:tair::tair_server
req_processor	src\dataserver\tair_server.hpp	/^      request_processor *req_processor;$/;"	m	class:tair::tair_server
streamer	src\dataserver\tair_server.hpp	/^      tbnet::DefaultPacketStreamer streamer;$/;"	m	class:tair::tair_server
tair	src\dataserver\tair_server.hpp	/^namespace tair {$/;"	n
tair_mgr	src\dataserver\tair_server.hpp	/^      tair_manager *tair_mgr;$/;"	m	class:tair::tair_server
tair_server	src\dataserver\tair_server.hpp	/^   class tair_server : public tbnet::IServerAdapter, public tbnet::IPacketQueueHandler, public tbnet::IPacketHandler {$/;"	c	namespace:tair
task_queue_size	src\dataserver\tair_server.hpp	/^      int task_queue_size;$/;"	m	class:tair::tair_server
task_queue_thread	src\dataserver\tair_server.hpp	/^      tbnet::PacketQueueThread task_queue_thread;$/;"	m	class:tair::tair_server
transport	src\dataserver\tair_server.hpp	/^      tbnet::Transport transport;$/;"	m	class:tair::tair_server
wait_object_mgr	src\dataserver\tair_server.hpp	/^      wait_object_manager wait_object_mgr;$/;"	m	class:tair::tair_server
worker_thread_count	src\dataserver\tair_server.hpp	/^      int worker_thread_count;$/;"	m	class:tair::tair_server
begin_scan	src\dataserver\update_log.cpp	/^   log_scan_hander* log_reader::begin_scan(int bucketno, lsn_type start_lsn, lsn_type endLsn) const$/;"	f	class:tair::log_reader
begin_scan	src\dataserver\update_log.cpp	/^   log_scan_hander* update_log::begin_scan(int db_id, lsn_type start_lsn, lsn_type end_lsn)$/;"	f	class:tair::update_log
close	src\dataserver\update_log.cpp	/^   void control_file::close()$/;"	f	class:tair::control_file
close	src\dataserver\update_log.cpp	/^   void log_file::close()$/;"	f	class:tair::log_file
close	src\dataserver\update_log.cpp	/^   void log_file_manager::close()$/;"	f	class:tair::log_file_manager
close	src\dataserver\update_log.cpp	/^   void update_log::close() $/;"	f	class:tair::update_log
control_file	src\dataserver\update_log.cpp	/^   control_file::control_file(file_operation *file)$/;"	f	class:tair::control_file
create_new_file	src\dataserver\update_log.cpp	/^   log_file* log_file_manager::create_new_file(lsn_type start_lsn)$/;"	f	class:tair::log_file_manager
current_lsn	src\dataserver\update_log.cpp	/^   lsn_type log_scan_hander::current_lsn() const$/;"	f	class:tair::log_scan_hander
end_scan	src\dataserver\update_log.cpp	/^   void log_reader::end_scan(log_scan_hander *handle)$/;"	f	class:tair::log_reader
end_scan	src\dataserver\update_log.cpp	/^   void update_log::end_scan(log_scan_hander *handle)$/;"	f	class:tair::update_log
file_name	src\dataserver\update_log.cpp	/^   string control_file::file_name = "fdb.ctrl";$/;"	m	class:tair::control_file	file:
filter	src\dataserver\update_log.cpp	/^   int update_log::filter(const struct dirent* dirp, const char *name)$/;"	f	class:tair::update_log
find_log_file	src\dataserver\update_log.cpp	/^   log_file* log_file_manager::find_log_file(lsn_type lsn, bool is_lock)$/;"	f	class:tair::log_file_manager
find_log_tail	src\dataserver\update_log.cpp	/^   lsn_type update_log::find_log_tail()$/;"	f	class:tair::update_log
find_reused_log_file	src\dataserver\update_log.cpp	/^   log_file* log_file_manager::find_reused_log_file(lsn_type cp_lsn)$/;"	f	class:tair::log_file_manager
flush	src\dataserver\update_log.cpp	/^   bool log_file::flush()$/;"	f	class:tair::log_file
full	src\dataserver\update_log.cpp	/^   bool log_file::full() {$/;"	f	class:tair::log_file
full	src\dataserver\update_log.cpp	/^   void log_file::full(bool isFull) $/;"	f	class:tair::log_file
get_buffer_offset	src\dataserver\update_log.cpp	/^   uint32_t log_read_buffer::get_buffer_offset() $/;"	f	class:tair::log_read_buffer
get_current_file	src\dataserver\update_log.cpp	/^   log_file* log_writer::get_current_file() $/;"	f	class:tair::log_writer
get_current_log_file	src\dataserver\update_log.cpp	/^   log_file* log_file_manager::get_current_log_file()$/;"	f	class:tair::log_file_manager
get_current_lsn	src\dataserver\update_log.cpp	/^   lsn_type update_log::get_current_lsn()$/;"	f	class:tair::update_log
get_end_lsn	src\dataserver\update_log.cpp	/^   lsn_type log_file::get_end_lsn(bool is_lock)$/;"	f	class:tair::log_file
get_flsn	src\dataserver\update_log.cpp	/^   lsn_type update_log::get_flsn()$/;"	f	class:tair::update_log
get_flush_lsn	src\dataserver\update_log.cpp	/^   lsn_type control_file::get_flush_lsn()$/;"	f	class:tair::control_file
get_hlsn	src\dataserver\update_log.cpp	/^   lsn_type control_file::get_hlsn()$/;"	f	class:tair::control_file
get_hlsn	src\dataserver\update_log.cpp	/^   lsn_type update_log::get_hlsn()$/;"	f	class:tair::update_log
get_log_entry	src\dataserver\update_log.cpp	/^   const log_record_entry* log_scan_hander::get_log_entry() const $/;"	f	class:tair::log_scan_hander
get_next	src\dataserver\update_log.cpp	/^   log_record_entry* log_read_buffer::get_next(int db_id, lsn_type lsn, lsn_type end_lsn, lsn_type *nlsn)$/;"	f	class:tair::log_read_buffer
get_next	src\dataserver\update_log.cpp	/^   log_record_entry* log_reader::get_next(int db_id, lsn_type lsn, lsn_type end_lsn, lsn_type *next_lsn)$/;"	f	class:tair::log_reader
get_next	src\dataserver\update_log.cpp	/^   log_scan_hander* log_reader::get_next(log_scan_hander *handle)$/;"	f	class:tair::log_reader
get_next	src\dataserver\update_log.cpp	/^   log_scan_hander* update_log::get_next(log_scan_hander *handle)$/;"	f	class:tair::update_log
get_next_lsn	src\dataserver\update_log.cpp	/^   lsn_type log_scan_hander::get_next_lsn() const$/;"	f	class:tair::log_scan_hander
get_next_write_lsn	src\dataserver\update_log.cpp	/^   lsn_type log_writer::get_next_write_lsn()$/;"	f	class:tair::log_writer
get_offset	src\dataserver\update_log.cpp	/^   uint32_t log_read_buffer::get_offset ()$/;"	f	class:tair::log_read_buffer
get_offset	src\dataserver\update_log.cpp	/^   uint32_t log_writer::get_offset()$/;"	f	class:tair::log_writer
get_size	src\dataserver\update_log.cpp	/^   uint32_t log_file::get_size() const $/;"	f	class:tair::log_file
get_start_lsn	src\dataserver\update_log.cpp	/^   lsn_type log_file::get_start_lsn()$/;"	f	class:tair::log_file
get_tail_hint	src\dataserver\update_log.cpp	/^   lsn_type log_file::get_tail_hint() const$/;"	f	class:tair::log_file
init	src\dataserver\update_log.cpp	/^   void update_log::init()$/;"	f	class:tair::update_log
init_on_first_open	src\dataserver\update_log.cpp	/^   lsn_type log_file_manager::init_on_first_open ()$/;"	f	class:tair::log_file_manager
log	src\dataserver\update_log.cpp	/^   void update_log::log(sn_operation_type operation_type, data_entry &key, data_entry &value, uint16_t db_id)$/;"	f	class:tair::update_log
log	src\dataserver\update_log.cpp	/^   void update_log::log(sn_operation_type operation_type, data_entry &key, vector<data_entry* > &values, uint16_t db_id)$/;"	f	class:tair::update_log
log_file	src\dataserver\update_log.cpp	/^   log_file::log_file(const char *filename):ctrl_page(NULL)$/;"	f	class:tair::log_file
log_file_manager	src\dataserver\update_log.cpp	/^   log_file_manager::log_file_manager(const char *base_name, uint32_t size)$/;"	f	class:tair::log_file_manager
log_read_buffer	src\dataserver\update_log.cpp	/^   log_read_buffer::log_read_buffer(log_file_manager *file_manager, uint this_size)$/;"	f	class:tair::log_read_buffer
log_reader	src\dataserver\update_log.cpp	/^   log_reader::log_reader(log_read_buffer *buff, uint32_t size)$/;"	f	class:tair::log_reader
log_writer	src\dataserver\update_log.cpp	/^   log_writer::log_writer(update_log *log, lsn_type lsn)$/;"	f	class:tair::log_writer
make_file_name	src\dataserver\update_log.cpp	/^   std::string log_file_manager::make_file_name(const char* basename, uint32_t index)$/;"	f	class:tair::log_file_manager
make_file_name	src\dataserver\update_log.cpp	/^   std::string log_file_manager::make_file_name(uint32_t index)$/;"	f	class:tair::log_file_manager
open	src\dataserver\update_log.cpp	/^   control_file* control_file::open(const char *path)$/;"	f	class:tair::control_file
open	src\dataserver\update_log.cpp	/^   log_file* log_file::open(const char *file_name, int flags)$/;"	f	class:tair::log_file
open	src\dataserver\update_log.cpp	/^   log_file_manager* log_file_manager::open(update_log *log, const char *base_name, uint32_t log_file_number, uint32_t current_log_file_number, uint32_t file_size)$/;"	f	class:tair::log_file_manager
open	src\dataserver\update_log.cpp	/^   update_log* update_log::open(const char *dir, const char *name, uint32_t log_file_number, bool is_migrating, uint32_t file_size)$/;"	f	class:tair::update_log
read	src\dataserver\update_log.cpp	/^   uint32_t log_file::read(char *buff, uint32_t size, uint32_t offset)$/;"	f	class:tair::log_file
read_control_page	src\dataserver\update_log.cpp	/^   void log_file::read_control_page()$/;"	f	class:tair::log_file
remove_incomplete_log_entry	src\dataserver\update_log.cpp	/^   lsn_type update_log::remove_incomplete_log_entry(lsn_type tail_lsn)$/;"	f	class:tair::update_log
reset	src\dataserver\update_log.cpp	/^   void control_file::reset() {$/;"	f	class:tair::control_file
reset	src\dataserver\update_log.cpp	/^   void log_file::reset(lsn_type startLsn)$/;"	f	class:tair::log_file
reset	src\dataserver\update_log.cpp	/^   void log_file_manager::reset()$/;"	f	class:tair::log_file_manager
reset	src\dataserver\update_log.cpp	/^   void log_read_buffer::reset()$/;"	f	class:tair::log_read_buffer
reset	src\dataserver\update_log.cpp	/^   void log_reader::reset()$/;"	f	class:tair::log_reader
restart	src\dataserver\update_log.cpp	/^   void log_file::restart()$/;"	f	class:tair::log_file
scan_log_directory	src\dataserver\update_log.cpp	/^   uint32_t update_log::scan_log_directory(const char *dir, const char *name)$/;"	f	class:tair::update_log
set_current_file	src\dataserver\update_log.cpp	/^   void log_read_buffer::set_current_file(log_file *file) $/;"	f	class:tair::log_read_buffer
set_current_file	src\dataserver\update_log.cpp	/^   void log_reader::set_current_file(log_file *file)$/;"	f	class:tair::log_reader
set_current_file	src\dataserver\update_log.cpp	/^   void log_writer::set_current_file(log_file *file)$/;"	f	class:tair::log_writer
set_current_log_file	src\dataserver\update_log.cpp	/^   void log_file_manager::set_current_log_file(lsn_type lsn)$/;"	f	class:tair::log_file_manager
set_end_lsn	src\dataserver\update_log.cpp	/^   void log_file::set_end_lsn(lsn_type lsn) $/;"	f	class:tair::log_file
set_flsn	src\dataserver\update_log.cpp	/^   void update_log::set_flsn(lsn_type lsn)$/;"	f	class:tair::update_log
set_flush_lsn	src\dataserver\update_log.cpp	/^   void control_file::set_flush_lsn(lsn_type lsn)$/;"	f	class:tair::control_file
set_hlsn	src\dataserver\update_log.cpp	/^   void control_file::set_hlsn(lsn_type lsn)$/;"	f	class:tair::control_file
set_hlsn	src\dataserver\update_log.cpp	/^   void update_log::set_hlsn(lsn_type lsn)$/;"	f	class:tair::update_log
set_log	src\dataserver\update_log.cpp	/^   void log_file_manager::set_log(update_log *log) $/;"	f	class:tair::log_file_manager
set_offset	src\dataserver\update_log.cpp	/^   void log_read_buffer::set_offset(uint32_t offset)$/;"	f	class:tair::log_read_buffer
set_offset	src\dataserver\update_log.cpp	/^   void log_reader::set_offset(uint32_t offset)$/;"	f	class:tair::log_reader
set_offset	src\dataserver\update_log.cpp	/^   void log_writer::set_offset(uint32_t offset) $/;"	f	class:tair::log_writer
set_start_lsn	src\dataserver\update_log.cpp	/^   void log_file::set_start_lsn(lsn_type lsn) $/;"	f	class:tair::log_file
set_tail_hint	src\dataserver\update_log.cpp	/^   void log_file::set_tail_hint(lsn_type lsn) $/;"	f	class:tair::log_file
start_up	src\dataserver\update_log.cpp	/^   void update_log::start_up(bool is_migrating)$/;"	f	class:tair::update_log
switch_log_file	src\dataserver\update_log.cpp	/^   log_file* update_log::switch_log_file(lsn_type start_lsn)$/;"	f	class:tair::update_log
switch_read_new_file	src\dataserver\update_log.cpp	/^   log_file* log_file_manager::switch_read_new_file(lsn_type next_lsn)$/;"	f	class:tair::log_file_manager
tair	src\dataserver\update_log.cpp	/^namespace tair {$/;"	n	file:
truncate	src\dataserver\update_log.cpp	/^   void log_file::truncate(uint32_t size)$/;"	f	class:tair::log_file
update_log	src\dataserver\update_log.cpp	/^   update_log::update_log(bool is_migrating)$/;"	f	class:tair::update_log
write	src\dataserver\update_log.cpp	/^   bool log_file::write(char *buff, uint32_t size, uint32_t offset)$/;"	f	class:tair::log_file
write	src\dataserver\update_log.cpp	/^   bool log_writer::write(char *data, uint size)$/;"	f	class:tair::log_writer
write_control_file	src\dataserver\update_log.cpp	/^   bool control_file::write_control_file()$/;"	f	class:tair::control_file
write_control_page	src\dataserver\update_log.cpp	/^   void log_file::write_control_page() $/;"	f	class:tair::log_file
write_simple_log	src\dataserver\update_log.cpp	/^   bool log_writer::write_simple_log(char *data , uint size)$/;"	f	class:tair::log_writer
~log_file	src\dataserver\update_log.cpp	/^   log_file::~log_file() $/;"	f	class:tair::log_file
~log_file_manager	src\dataserver\update_log.cpp	/^   log_file_manager::~log_file_manager() $/;"	f	class:tair::log_file_manager
~log_read_buffer	src\dataserver\update_log.cpp	/^   log_read_buffer::~log_read_buffer() $/;"	f	class:tair::log_read_buffer
~log_reader	src\dataserver\update_log.cpp	/^   log_reader::~log_reader()$/;"	f	class:tair::log_reader
~update_log	src\dataserver\update_log.cpp	/^   update_log::~update_log() $/;"	f	class:tair::update_log
CTRL_FILE_HDR_SIZE	src\dataserver\update_log.hpp	/^   static const size_t CTRL_FILE_HDR_SIZE = sizeof(control_file_header);$/;"	m	namespace:tair
FILE_PAYLOAD	src\dataserver\update_log.hpp	/^   static const uint64_t FILE_PAYLOAD = LOG_FIZE_SIZE - LOG_PAGE_HDR_SIZE;$/;"	m	namespace:tair
INVALID_LSN	src\dataserver\update_log.hpp	37;"	d
LOG_FIZE_SIZE	src\dataserver\update_log.hpp	/^   static const uint LOG_FIZE_SIZE = 64 * 1024 * 1024;$/;"	m	namespace:tair
LOG_PAGE_HDR_SIZE	src\dataserver\update_log.hpp	/^   static const size_t LOG_PAGE_HDR_SIZE = align_round(offsetof(log_file_control_page, pad));$/;"	m	namespace:tair
LOG_READ_BUFF_SIZE	src\dataserver\update_log.hpp	/^   static const uint LOG_READ_BUFF_SIZE = 2 * 1024 * 1024;$/;"	m	namespace:tair
LOG_RECORD_HDR_SIZE	src\dataserver\update_log.hpp	/^   static const size_t LOG_RECORD_HDR_SIZE = sizeof(item_meta_info);$/;"	m	namespace:tair
LOG_RECORD_HDR_TSIZE	src\dataserver\update_log.hpp	/^   static const size_t LOG_RECORD_HDR_TSIZE = LOG_RECORD_HDR_SIZE + 3;$/;"	m	namespace:tair
MIN_LSN	src\dataserver\update_log.hpp	/^   static const uint64_t MIN_LSN = sizeof(log_file_control_page);$/;"	m	namespace:tair
SN_LPOP	src\dataserver\update_log.hpp	/^      SN_LPOP,$/;"	e	enum:tair::__anon16
SN_LPUSH	src\dataserver\update_log.hpp	/^      SN_LPUSH,$/;"	e	enum:tair::__anon16
SN_LPUSHX	src\dataserver\update_log.hpp	/^      SN_LPUSHX,$/;"	e	enum:tair::__anon16
SN_PUT	src\dataserver\update_log.hpp	/^      SN_PUT = 1,$/;"	e	enum:tair::__anon16
SN_REMOVE	src\dataserver\update_log.hpp	/^      SN_REMOVE,$/;"	e	enum:tair::__anon16
SN_RPOP	src\dataserver\update_log.hpp	/^      SN_RPOP$/;"	e	enum:tair::__anon16
SN_RPUSH	src\dataserver\update_log.hpp	/^      SN_RPUSH,$/;"	e	enum:tair::__anon16
SN_RPUSHX	src\dataserver\update_log.hpp	/^      SN_RPUSHX,$/;"	e	enum:tair::__anon16
TAIR_FDB_MIGRATE_LOG_HPP	src\dataserver\update_log.hpp	18;"	d
align_round	src\dataserver\update_log.hpp	/^   template<typename T> inline T align_round(T v) {$/;"	f	namespace:tair
base_name	src\dataserver\update_log.hpp	/^      char *base_name;$/;"	m	class:tair::update_log
base_name	src\dataserver\update_log.hpp	/^      std::string base_name;$/;"	m	class:tair::log_file_manager
block_number	src\dataserver\update_log.hpp	/^      uint16_t block_number;$/;"	m	struct:tair::log_record_header
buffer	src\dataserver\update_log.hpp	/^      char *buffer;$/;"	m	class:tair::log_read_buffer
buffer	src\dataserver\update_log.hpp	/^      log_read_buffer *buffer;$/;"	m	class:tair::log_reader
buffer_offset	src\dataserver\update_log.hpp	/^      uint32_t buffer_offset;$/;"	m	class:tair::log_read_buffer
checksum	src\dataserver\update_log.hpp	/^      uint64_t  checksum;$/;"	m	struct:tair::log_file_control_page
control_file	src\dataserver\update_log.hpp	/^   class control_file{$/;"	c	namespace:tair
control_file_header	src\dataserver\update_log.hpp	/^   struct control_file_header{$/;"	s	namespace:tair
ctr_file	src\dataserver\update_log.hpp	/^      control_file *ctr_file;$/;"	m	class:tair::update_log
ctrl_file	src\dataserver\update_log.hpp	/^      file_operation *ctrl_file;$/;"	m	class:tair::control_file
ctrl_file_hdr	src\dataserver\update_log.hpp	/^      control_file_header *ctrl_file_hdr;$/;"	m	class:tair::control_file
ctrl_page	src\dataserver\update_log.hpp	/^      log_file_control_page *ctrl_page;$/;"	m	class:tair::log_file
cur_log_file	src\dataserver\update_log.hpp	/^      log_file *cur_log_file;$/;"	m	class:tair::log_writer
current_file	src\dataserver\update_log.hpp	/^      log_file *current_file;$/;"	m	class:tair::log_read_buffer
current_log_file	src\dataserver\update_log.hpp	/^      log_file *current_log_file;$/;"	m	class:tair::log_file_manager
current_log_file_number	src\dataserver\update_log.hpp	/^      uint32_t current_log_file_number;$/;"	m	class:tair::update_log
db_id	src\dataserver\update_log.hpp	/^      int db_id;$/;"	m	class:tair::log_scan_hander
end	src\dataserver\update_log.hpp	/^      lsn_type  end;$/;"	m	struct:tair::log_file_control_page
end_lsn	src\dataserver\update_log.hpp	/^      lsn_type end_lsn;$/;"	m	class:tair::log_scan_hander
end_lsn_lock	src\dataserver\update_log.hpp	/^      tbsys::CRWSimpleLock      end_lsn_lock;$/;"	m	class:tair::log_file
file	src\dataserver\update_log.hpp	/^      file_operation *file;$/;"	m	class:tair::log_file
file_manager	src\dataserver\update_log.hpp	/^      log_file_manager *file_manager;$/;"	m	class:tair::update_log
file_mgr	src\dataserver\update_log.hpp	/^      log_file_manager *file_mgr;$/;"	m	class:tair::log_read_buffer
file_name	src\dataserver\update_log.hpp	/^      static std::string file_name;$/;"	m	class:tair::control_file
file_number	src\dataserver\update_log.hpp	/^      uint32_t file_number;$/;"	m	class:tair::log_file_manager
file_size	src\dataserver\update_log.hpp	/^      uint32_t file_size;$/;"	m	class:tair::log_file_manager
file_size	src\dataserver\update_log.hpp	/^      uint32_t file_size;$/;"	m	class:tair::update_log
flush_last	src\dataserver\update_log.hpp	/^      lsn_type flush_last;$/;"	m	class:tair::log_writer
flush_lock	src\dataserver\update_log.hpp	/^      tbsys::CRWSimpleLock      flush_lock;$/;"	m	class:tair::log_writer
full	src\dataserver\update_log.hpp	/^      uint8_t           full;$/;"	m	struct:tair::log_file_control_page
has_read	src\dataserver\update_log.hpp	/^      bool has_read;$/;"	m	class:tair::log_read_buffer
header	src\dataserver\update_log.hpp	/^      item_meta_info header;$/;"	m	struct:tair::log_record_entry
header	src\dataserver\update_log.hpp	/^      item_meta_info header;$/;"	m	struct:tair::log_record_header
is_migrating	src\dataserver\update_log.hpp	/^      bool is_migrating;$/;"	m	class:tair::update_log
key	src\dataserver\update_log.hpp	/^      data_entry key;$/;"	m	struct:tair::log_record_entry
last_length	src\dataserver\update_log.hpp	/^      uint32_t last_length;$/;"	m	class:tair::log_read_buffer
log	src\dataserver\update_log.hpp	/^      update_log *log;$/;"	m	class:tair::log_file_manager
log	src\dataserver\update_log.hpp	/^      update_log *log;$/;"	m	class:tair::log_writer
log_entry	src\dataserver\update_log.hpp	/^      log_record_entry *log_entry;$/;"	m	class:tair::log_scan_hander
log_file	src\dataserver\update_log.hpp	/^   class log_file {$/;"	c	namespace:tair
log_file_control_page	src\dataserver\update_log.hpp	/^   struct log_file_control_page {$/;"	s	namespace:tair
log_file_equaler	src\dataserver\update_log.hpp	/^   struct log_file_equaler {$/;"	s	namespace:tair
log_file_hasher	src\dataserver\update_log.hpp	/^   struct log_file_hasher {$/;"	s	namespace:tair
log_file_manager	src\dataserver\update_log.hpp	/^   class log_file_manager {$/;"	c	namespace:tair
log_file_number	src\dataserver\update_log.hpp	/^      uint32_t log_file_number;$/;"	m	class:tair::update_log
log_files	src\dataserver\update_log.hpp	/^      std::vector<log_file *> log_files;$/;"	m	class:tair::log_file_manager
log_read_buffer	src\dataserver\update_log.hpp	/^   class log_read_buffer {$/;"	c	namespace:tair
log_reader	src\dataserver\update_log.hpp	/^   class log_reader {$/;"	c	namespace:tair
log_record_entry	src\dataserver\update_log.hpp	/^   struct log_record_entry {$/;"	s	namespace:tair
log_record_header	src\dataserver\update_log.hpp	/^   struct log_record_header{$/;"	s	namespace:tair
log_scan_hander	src\dataserver\update_log.hpp	/^      log_scan_hander() {$/;"	f	class:tair::log_scan_hander
log_scan_hander	src\dataserver\update_log.hpp	/^   class log_scan_hander {$/;"	c	namespace:tair
log_writer	src\dataserver\update_log.hpp	/^   class log_writer {$/;"	c	namespace:tair
lsn	src\dataserver\update_log.hpp	/^      lsn_type lsn;$/;"	m	class:tair::log_scan_hander
lsn_type	src\dataserver\update_log.hpp	/^   typedef uint64_t lsn_type;$/;"	t	namespace:tair
m_flsn	src\dataserver\update_log.hpp	/^      lsn_type m_flsn;$/;"	m	struct:tair::control_file_header
m_hlsn	src\dataserver\update_log.hpp	/^      lsn_type m_hlsn;$/;"	m	struct:tair::control_file_header
mutex	src\dataserver\update_log.hpp	/^      tbsys::CThreadCond  mutex;$/;"	m	class:tair::log_file_manager
mutex	src\dataserver\update_log.hpp	/^      tbsys::CThreadCond  mutex;$/;"	m	class:tair::update_log
next_lsn	src\dataserver\update_log.hpp	/^      lsn_type next_lsn;$/;"	m	class:tair::log_scan_hander
offset	src\dataserver\update_log.hpp	/^      uint offset;$/;"	m	class:tair::log_writer
offset	src\dataserver\update_log.hpp	/^      uint32_t offset;$/;"	m	class:tair::log_read_buffer
operation_type	src\dataserver\update_log.hpp	/^      uint8_t operation_type;$/;"	m	struct:tair::log_record_entry
operation_type	src\dataserver\update_log.hpp	/^      uint8_t operation_type;$/;"	m	struct:tair::log_record_header
operator ()	src\dataserver\update_log.hpp	/^      inline bool operator() (lsn_type startLsn, log_file *file) const {$/;"	f	struct:tair::log_file_equaler
operator ()	src\dataserver\update_log.hpp	/^      inline lsn_type operator() (log_file *file) const {$/;"	f	struct:tair::log_file_hasher
pad	src\dataserver\update_log.hpp	/^      uint8_t           pad[3];$/;"	m	struct:tair::log_file_control_page
read_length	src\dataserver\update_log.hpp	/^      uint32_t read_length;$/;"	m	class:tair::log_read_buffer
reader	src\dataserver\update_log.hpp	/^      log_reader *reader;$/;"	m	class:tair::update_log
size	src\dataserver\update_log.hpp	/^      uint size;$/;"	m	class:tair::log_read_buffer
size	src\dataserver\update_log.hpp	/^      uint32_t          size;$/;"	m	struct:tair::log_file_control_page
size	src\dataserver\update_log.hpp	/^      uint32_t size;$/;"	m	class:tair::log_reader
sn_operation_type	src\dataserver\update_log.hpp	/^   }sn_operation_type;$/;"	t	namespace:tair	typeref:enum:tair::__anon16
start	src\dataserver\update_log.hpp	/^      lsn_type  start;$/;"	m	struct:tair::log_file_control_page
tail_hint	src\dataserver\update_log.hpp	/^      lsn_type tail_hint;$/;"	m	struct:tair::log_file_control_page
tair	src\dataserver\update_log.hpp	/^namespace tair {$/;"	n
update_log	src\dataserver\update_log.hpp	/^   class update_log {$/;"	c	namespace:tair
value	src\dataserver\update_log.hpp	/^      data_entry value;$/;"	m	struct:tair::log_record_entry
want_length	src\dataserver\update_log.hpp	/^      uint32_t want_length;$/;"	m	class:tair::log_read_buffer
write_last	src\dataserver\update_log.hpp	/^      lsn_type write_last;$/;"	m	class:tair::log_writer
write_lock	src\dataserver\update_log.hpp	/^      tbsys::CRWSimpleLock      write_lock;$/;"	m	class:tair::log_writer
write_next	src\dataserver\update_log.hpp	/^      lsn_type write_next;$/;"	m	class:tair::log_writer
writer	src\dataserver\update_log.hpp	/^      log_writer *writer;$/;"	m	class:tair::update_log
TAIR_PACKET_ADD_FILTER_PACKET_H	src\packets\addfilter_packet.hpp	18;"	d
area	src\packets\addfilter_packet.hpp	/^      int area;$/;"	m	class:tair::request_addfilter
decode	src\packets\addfilter_packet.hpp	/^      bool decode(tbnet::DataBuffer *input, tbnet::PacketHeader *header)$/;"	f	class:tair::request_addfilter
encode	src\packets\addfilter_packet.hpp	/^      bool encode(tbnet::DataBuffer *output)$/;"	f	class:tair::request_addfilter
field	src\packets\addfilter_packet.hpp	/^      data_entry field;$/;"	m	class:tair::request_addfilter
key	src\packets\addfilter_packet.hpp	/^      data_entry key;$/;"	m	class:tair::request_addfilter
request_addfilter	src\packets\addfilter_packet.hpp	/^      request_addfilter()$/;"	f	class:tair::request_addfilter
request_addfilter	src\packets\addfilter_packet.hpp	/^      request_addfilter(request_addfilter &packet)$/;"	f	class:tair::request_addfilter
request_addfilter	src\packets\addfilter_packet.hpp	/^   class request_addfilter : public base_packet {$/;"	c	namespace:tair
tair	src\packets\addfilter_packet.hpp	/^namespace tair {$/;"	n
value	src\packets\addfilter_packet.hpp	/^      data_entry value;$/;"	m	class:tair::request_addfilter
~request_addfilter	src\packets\addfilter_packet.hpp	/^      ~request_addfilter()$/;"	f	class:tair::request_addfilter
BYTES_TO_DOUBLE	src\packets\base_packet.hpp	421;"	d
CLEAR_DATA_VECTOR	src\packets\base_packet.hpp	299;"	d
CREATE_HEADER	src\packets\base_packet.hpp	453;"	d
DIRECTION_RECEIVE	src\packets\base_packet.hpp	/^    DIRECTION_RECEIVE = 1,$/;"	e	enum:tair::__anon18
DIRECTION_SEND	src\packets\base_packet.hpp	/^    DIRECTION_SEND$/;"	e	enum:tair::__anon18
DOUBLE_TO_BYTES	src\packets\base_packet.hpp	423;"	d
GETKEY_FROM_DATAENTRY	src\packets\base_packet.hpp	357;"	d
GETKEY_FROM_DATAVECTOR	src\packets\base_packet.hpp	425;"	d
GETKEY_FROM_DOUBLE	src\packets\base_packet.hpp	410;"	d
GETKEY_FROM_INT16	src\packets\base_packet.hpp	396;"	d
GETKEY_FROM_INT32	src\packets\base_packet.hpp	386;"	d
GETKEY_FROM_INT64	src\packets\base_packet.hpp	376;"	d
GET_CSTR_FROM_BUFFER	src\packets\base_packet.hpp	333;"	d
HEADER_VERIFY	src\packets\base_packet.hpp	458;"	d
PUT_CSTR_TO_BUFFER	src\packets\base_packet.hpp	323;"	d
PUT_DATAENTRY_TO_BUFFER	src\packets\base_packet.hpp	328;"	d
PUT_DATAVECTOR_TO_BUFFER	src\packets\base_packet.hpp	312;"	d
PUT_DOUBLE_TO_BUFFER	src\packets\base_packet.hpp	404;"	d
PUT_INT16_TO_BUFFER	src\packets\base_packet.hpp	394;"	d
PUT_INT32_TO_BUFFER	src\packets\base_packet.hpp	384;"	d
PUT_INT64_TO_BUFFER	src\packets\base_packet.hpp	374;"	d
TAIR_PACKETS_BASE_H	src\packets\base_packet.hpp	18;"	d
TAIR_REQ_ADDITEMS_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_ADDITEMS_PACKET = 1400,$/;"	e	enum:tair::__anon17
TAIR_REQ_ADD_FILTER_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_ADD_FILTER_PACKET = 2162,$/;"	e	enum:tair::__anon17
TAIR_REQ_CONFHB_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_CONFHB_PACKET,$/;"	e	enum:tair::__anon17
TAIR_REQ_DATASERVER_CTRL_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_DATASERVER_CTRL_PACKET = 1500,$/;"	e	enum:tair::__anon17
TAIR_REQ_DUMP_AREA_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_DUMP_AREA_PACKET = 2164,$/;"	e	enum:tair::__anon17
TAIR_REQ_DUMP_BUCKET_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_DUMP_BUCKET_PACKET = 1200,$/;"	e	enum:tair::__anon17
TAIR_REQ_DUMP_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_DUMP_PACKET,$/;"	e	enum:tair::__anon17
TAIR_REQ_DUPLICATE_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_DUPLICATE_PACKET = 1300,$/;"	e	enum:tair::__anon17
TAIR_REQ_EXISTS_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_EXISTS_PACKET = 2153,$/;"	e	enum:tair::__anon17
TAIR_REQ_EXPIREAT_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_EXPIREAT_PACKET = 2131,$/;"	e	enum:tair::__anon17
TAIR_REQ_EXPIRE_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_EXPIRE_PACKET = 2127,$/;"	e	enum:tair::__anon17
TAIR_REQ_GENERIC_ZRANGEBYSCORE_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_GENERIC_ZRANGEBYSCORE_PACKET = 2151,$/;"	e	enum:tair::__anon17
TAIR_REQ_GETANDREMOVEITEMS_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_GETANDREMOVEITEMS_PACKET,$/;"	e	enum:tair::__anon17
TAIR_REQ_GETITEMSCOUNT_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_GETITEMSCOUNT_PACKET,$/;"	e	enum:tair::__anon17
TAIR_REQ_GETITEMS_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_GETITEMS_PACKET,$/;"	e	enum:tair::__anon17
TAIR_REQ_GETSET_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_GETSET_PACKET = 2155,$/;"	e	enum:tair::__anon17
TAIR_REQ_GET_GROUP_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_GET_GROUP_PACKET = 1002,$/;"	e	enum:tair::__anon17
TAIR_REQ_GET_MIGRATE_MACHINE_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_GET_MIGRATE_MACHINE_PACKET,$/;"	e	enum:tair::__anon17
TAIR_REQ_GET_NS_ATTR_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_GET_NS_ATTR_PACKET = 2167$/;"	e	enum:tair::__anon17
TAIR_REQ_GET_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_GET_PACKET,$/;"	e	enum:tair::__anon17
TAIR_REQ_GET_SVRTAB_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_GET_SVRTAB_PACKET,$/;"	e	enum:tair::__anon17
TAIR_REQ_GROUP_NAMES_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_GROUP_NAMES_PACKET,$/;"	e	enum:tair::__anon17
TAIR_REQ_HDEL_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_HDEL_PACKET = 2115,$/;"	e	enum:tair::__anon17
TAIR_REQ_HEARTBEAT_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_HEARTBEAT_PACKET,$/;"	e	enum:tair::__anon17
TAIR_REQ_HEXISTS_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_HEXISTS_PACKET = 2161,$/;"	e	enum:tair::__anon17
TAIR_REQ_HGETALL_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_HGETALL_PACKET = 2107,$/;"	e	enum:tair::__anon17
TAIR_REQ_HGET_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_HGET_PACKET = 2112,$/;"	e	enum:tair::__anon17
TAIR_REQ_HINCRBY_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_HINCRBY_PACKET = 2108,$/;"	e	enum:tair::__anon17
TAIR_REQ_HKEYS_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_HKEYS_PACKET = 2156,$/;"	e	enum:tair::__anon17
TAIR_REQ_HLEN_PACKET	src\packets\base_packet.hpp	/^	TAIR_REQ_HLEN_PACKET = 2136,$/;"	e	enum:tair::__anon17
TAIR_REQ_HMGET_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_HMGET_PACKET = 2113,$/;"	e	enum:tair::__anon17
TAIR_REQ_HMSET_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_HMSET_PACKET = 2109,$/;"	e	enum:tair::__anon17
TAIR_REQ_HSETNX_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_HSETNX_PACKET = 2111,$/;"	e	enum:tair::__anon17
TAIR_REQ_HSET_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_HSET_PACKET = 2110,$/;"	e	enum:tair::__anon17
TAIR_REQ_HVALS_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_HVALS_PACKET = 2114,$/;"	e	enum:tair::__anon17
TAIR_REQ_INCDEC_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_INCDEC_PACKET = 11,$/;"	e	enum:tair::__anon17
TAIR_REQ_INFO_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_INFO_PACKET = 2154,$/;"	e	enum:tair::__anon17
TAIR_REQ_LAZY_REMOVE_AREA_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_LAZY_REMOVE_AREA_PACKET = 2152,$/;"	e	enum:tair::__anon17
TAIR_REQ_LINDEX_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_LINDEX_PACKET = 2106,$/;"	e	enum:tair::__anon17
TAIR_REQ_LLEN_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_LLEN_PACKET = 2133,$/;"	e	enum:tair::__anon17
TAIR_REQ_LOAD_AREA_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_LOAD_AREA_PACKET = 2165,$/;"	e	enum:tair::__anon17
TAIR_REQ_LPOP_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_LPOP_PACKET = 2100,$/;"	e	enum:tair::__anon17
TAIR_REQ_LPUSHX_LIMIT_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_LPUSHX_LIMIT_PACKET = 2159,$/;"	e	enum:tair::__anon17
TAIR_REQ_LPUSHX_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_LPUSHX_PACKET = 2104,$/;"	e	enum:tair::__anon17
TAIR_REQ_LPUSH_LIMIT_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_LPUSH_LIMIT_PACKET = 2157,$/;"	e	enum:tair::__anon17
TAIR_REQ_LPUSH_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_LPUSH_PACKET = 2101,$/;"	e	enum:tair::__anon17
TAIR_REQ_LRANGE_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_LRANGE_PACKET = 2130,$/;"	e	enum:tair::__anon17
TAIR_REQ_LREM_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_LREM_PACKET = 2129,$/;"	e	enum:tair::__anon17
TAIR_REQ_LTRIM_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_LTRIM_PACKET = 2128,$/;"	e	enum:tair::__anon17
TAIR_REQ_MIG_FINISH_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_MIG_FINISH_PACKET,$/;"	e	enum:tair::__anon17
TAIR_REQ_MPUTNX_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_MPUTNX_PACKET = 2150,$/;"	e	enum:tair::__anon17
TAIR_REQ_MPUT_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_MPUT_PACKET = 15,$/;"	e	enum:tair::__anon17
TAIR_REQ_MUPDATE_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_MUPDATE_PACKET = 13,$/;"	e	enum:tair::__anon17
TAIR_REQ_PARAM_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_PARAM_PACKET,$/;"	e	enum:tair::__anon17
TAIR_REQ_PERSIST_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_PERSIST_PACKET = 2132,$/;"	e	enum:tair::__anon17
TAIR_REQ_PING_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_PING_PACKET,$/;"	e	enum:tair::__anon17
TAIR_REQ_PUTNX_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_PUTNX_PACKET = 2149,$/;"	e	enum:tair::__anon17
TAIR_REQ_PUT_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_PUT_PACKET = 1,$/;"	e	enum:tair::__anon17
TAIR_REQ_QUERY_INFO_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_QUERY_INFO_PACKET = 1009,$/;"	e	enum:tair::__anon17
TAIR_REQ_REMOVEITEMS_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_REMOVEITEMS_PACKET,$/;"	e	enum:tair::__anon17
TAIR_REQ_REMOVE_AREA_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_REMOVE_AREA_PACKET,$/;"	e	enum:tair::__anon17
TAIR_REQ_REMOVE_FILTER_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_REMOVE_FILTER_PACKET = 2163,$/;"	e	enum:tair::__anon17
TAIR_REQ_REMOVE_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_REMOVE_PACKET,$/;"	e	enum:tair::__anon17
TAIR_REQ_RPOP_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_RPOP_PACKET = 2102,$/;"	e	enum:tair::__anon17
TAIR_REQ_RPUSHX_LIMIT_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_RPUSHX_LIMIT_PACKET = 2160,$/;"	e	enum:tair::__anon17
TAIR_REQ_RPUSHX_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_RPUSHX_PACKET = 2105,$/;"	e	enum:tair::__anon17
TAIR_REQ_RPUSH_LIMIT_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_RPUSH_LIMIT_PACKET = 2158,$/;"	e	enum:tair::__anon17
TAIR_REQ_RPUSH_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_RPUSH_PACKET = 2103,$/;"	e	enum:tair::__anon17
TAIR_REQ_SADDMULTI_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_SADDMULTI_PACKET = 2146,$/;"	e	enum:tair::__anon17
TAIR_REQ_SADD_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_SADD_PACKET = 2118,$/;"	e	enum:tair::__anon17
TAIR_REQ_SCARD_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_SCARD_PACKET = 2116,$/;"	e	enum:tair::__anon17
TAIR_REQ_SETMASTER_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_SETMASTER_PACKET,$/;"	e	enum:tair::__anon17
TAIR_REQ_SET_NS_ATTR_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_SET_NS_ATTR_PACKET = 2166,$/;"	e	enum:tair::__anon17
TAIR_REQ_SMEMBERSMULTI_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_SMEMBERSMULTI_PACKET = 2148,$/;"	e	enum:tair::__anon17
TAIR_REQ_SMEMBERS_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_SMEMBERS_PACKET = 2117,$/;"	e	enum:tair::__anon17
TAIR_REQ_SPOP_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_SPOP_PACKET = 2119,$/;"	e	enum:tair::__anon17
TAIR_REQ_SREMMULTI_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_SREMMULTI_PACKET = 2147,$/;"	e	enum:tair::__anon17
TAIR_REQ_SREM_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_SREM_PACKET = 2145,$/;"	e	enum:tair::__anon17
TAIR_REQ_STAT_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_STAT_PACKET,$/;"	e	enum:tair::__anon17
TAIR_REQ_TTL_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_TTL_PACKET = 2134,$/;"	e	enum:tair::__anon17
TAIR_REQ_TYPE_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_TYPE_PACKET = 2135,$/;"	e	enum:tair::__anon17
TAIR_REQ_ZADD_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_ZADD_PACKET = 2124,$/;"	e	enum:tair::__anon17
TAIR_REQ_ZCARD_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_ZCARD_PACKET = 2126,$/;"	e	enum:tair::__anon17
TAIR_REQ_ZCOUNT_PACKET	src\packets\base_packet.hpp	/^	TAIR_REQ_ZCOUNT_PACKET = 2141,$/;"	e	enum:tair::__anon17
TAIR_REQ_ZINCRBY_PACKET	src\packets\base_packet.hpp	/^	TAIR_REQ_ZINCRBY_PACKET = 2142,$/;"	e	enum:tair::__anon17
TAIR_REQ_ZRANGEBYSCORE_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_ZRANGEBYSCORE_PACKET = 2123,$/;"	e	enum:tair::__anon17
TAIR_REQ_ZRANGE_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_ZRANGE_PACKET = 2120,$/;"	e	enum:tair::__anon17
TAIR_REQ_ZRANK_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_ZRANK_PACKET = 2125,$/;"	e	enum:tair::__anon17
TAIR_REQ_ZREMRANGEBYRANK_PACKET	src\packets\base_packet.hpp	/^	TAIR_REQ_ZREMRANGEBYRANK_PACKET = 2138,$/;"	e	enum:tair::__anon17
TAIR_REQ_ZREMRANGEBYSCORE_PACKET	src\packets\base_packet.hpp	/^	TAIR_REQ_ZREMRANGEBYSCORE_PACKET = 2139,$/;"	e	enum:tair::__anon17
TAIR_REQ_ZREM_PACKET	src\packets\base_packet.hpp	/^	TAIR_REQ_ZREM_PACKET = 2137,$/;"	e	enum:tair::__anon17
TAIR_REQ_ZREVRANGE_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_ZREVRANGE_PACKET = 2121,$/;"	e	enum:tair::__anon17
TAIR_REQ_ZREVRANK_PACKET	src\packets\base_packet.hpp	/^	TAIR_REQ_ZREVRANK_PACKET = 2140,$/;"	e	enum:tair::__anon17
TAIR_REQ_ZSCORE_PACKET	src\packets\base_packet.hpp	/^    TAIR_REQ_ZSCORE_PACKET = 2122,$/;"	e	enum:tair::__anon17
TAIR_RESP_DUPLICATE_PACKET	src\packets\base_packet.hpp	/^    TAIR_RESP_DUPLICATE_PACKET,$/;"	e	enum:tair::__anon17
TAIR_RESP_EXPIREAT_PACKET	src\packets\base_packet.hpp	/^    TAIR_RESP_EXPIREAT_PACKET = 2231,$/;"	e	enum:tair::__anon17
TAIR_RESP_EXPIRE_PACKET	src\packets\base_packet.hpp	/^    TAIR_RESP_EXPIRE_PACKET = 2227,$/;"	e	enum:tair::__anon17
TAIR_RESP_GENERIC_ZRANGEBYSCORE_PACKET	src\packets\base_packet.hpp	/^    TAIR_RESP_GENERIC_ZRANGEBYSCORE_PACKET = 2251,$/;"	e	enum:tair::__anon17
TAIR_RESP_GETITEMS_PACKET	src\packets\base_packet.hpp	/^    TAIR_RESP_GETITEMS_PACKET,$/;"	e	enum:tair::__anon17
TAIR_RESP_GETSET_PACKET	src\packets\base_packet.hpp	/^    TAIR_RESP_GETSET_PACKET = 2255,$/;"	e	enum:tair::__anon17
TAIR_RESP_GET_GROUP_PACKET	src\packets\base_packet.hpp	/^    TAIR_RESP_GET_GROUP_PACKET = 1102,$/;"	e	enum:tair::__anon17
TAIR_RESP_GET_MIGRATE_MACHINE_PACKET	src\packets\base_packet.hpp	/^    TAIR_RESP_GET_MIGRATE_MACHINE_PACKET,$/;"	e	enum:tair::__anon17
TAIR_RESP_GET_PACKET	src\packets\base_packet.hpp	/^    TAIR_RESP_GET_PACKET,$/;"	e	enum:tair::__anon17
TAIR_RESP_GET_SVRTAB_PACKET	src\packets\base_packet.hpp	/^    TAIR_RESP_GET_SVRTAB_PACKET,$/;"	e	enum:tair::__anon17
TAIR_RESP_GROUP_NAMES_PACKET	src\packets\base_packet.hpp	/^    TAIR_RESP_GROUP_NAMES_PACKET,$/;"	e	enum:tair::__anon17
TAIR_RESP_HDEL_PACKET	src\packets\base_packet.hpp	/^    TAIR_RESP_HDEL_PACKET = 2215,$/;"	e	enum:tair::__anon17
TAIR_RESP_HEARTBEAT_PACKET	src\packets\base_packet.hpp	/^    TAIR_RESP_HEARTBEAT_PACKET,$/;"	e	enum:tair::__anon17
TAIR_RESP_HGETALL_PACKET	src\packets\base_packet.hpp	/^    TAIR_RESP_HGETALL_PACKET = 2207,$/;"	e	enum:tair::__anon17
TAIR_RESP_HGET_PACKET	src\packets\base_packet.hpp	/^    TAIR_RESP_HGET_PACKET = 2212,$/;"	e	enum:tair::__anon17
TAIR_RESP_HINCRBY_PACKET	src\packets\base_packet.hpp	/^    TAIR_RESP_HINCRBY_PACKET = 2208,$/;"	e	enum:tair::__anon17
TAIR_RESP_HKEYS_PACKET	src\packets\base_packet.hpp	/^    TAIR_RESP_HKEYS_PACKET = 2256,$/;"	e	enum:tair::__anon17
TAIR_RESP_HLEN_PACKET	src\packets\base_packet.hpp	/^	TAIR_RESP_HLEN_PACKET = 2236,$/;"	e	enum:tair::__anon17
TAIR_RESP_HMGET_PACKET	src\packets\base_packet.hpp	/^    TAIR_RESP_HMGET_PACKET = 2213,$/;"	e	enum:tair::__anon17
TAIR_RESP_HMSET_PACKET	src\packets\base_packet.hpp	/^    TAIR_RESP_HMSET_PACKET = 2209,$/;"	e	enum:tair::__anon17
TAIR_RESP_HSETNX_PACKET	src\packets\base_packet.hpp	/^    TAIR_RESP_HSETNX_PACKET = 2211,$/;"	e	enum:tair::__anon17
TAIR_RESP_HSET_PACKET	src\packets\base_packet.hpp	/^    TAIR_RESP_HSET_PACKET = 2210,$/;"	e	enum:tair::__anon17
TAIR_RESP_HVALS_PACKET	src\packets\base_packet.hpp	/^    TAIR_RESP_HVALS_PACKET = 2214,$/;"	e	enum:tair::__anon17
TAIR_RESP_INCDEC_PACKET	src\packets\base_packet.hpp	/^    TAIR_RESP_INCDEC_PACKET,$/;"	e	enum:tair::__anon17
TAIR_RESP_INFO_PACKET	src\packets\base_packet.hpp	/^    TAIR_RESP_INFO_PACKET = 2254,$/;"	e	enum:tair::__anon17
TAIR_RESP_LINDEX_PACKET	src\packets\base_packet.hpp	/^    TAIR_RESP_LINDEX_PACKET = 2206,$/;"	e	enum:tair::__anon17
TAIR_RESP_LLEN_PACKET	src\packets\base_packet.hpp	/^    TAIR_RESP_LLEN_PACKET = 2233,$/;"	e	enum:tair::__anon17
TAIR_RESP_LPOP_PACKET	src\packets\base_packet.hpp	/^    TAIR_RESP_LPOP_PACKET = 2200,$/;"	e	enum:tair::__anon17
TAIR_RESP_LPUSHX_PACKET	src\packets\base_packet.hpp	/^    TAIR_RESP_LPUSHX_PACKET = 2204,$/;"	e	enum:tair::__anon17
TAIR_RESP_LPUSH_PACKET	src\packets\base_packet.hpp	/^    TAIR_RESP_LPUSH_PACKET = 2201,$/;"	e	enum:tair::__anon17
TAIR_RESP_LRANGE_PACKET	src\packets\base_packet.hpp	/^    TAIR_RESP_LRANGE_PACKET = 2230,$/;"	e	enum:tair::__anon17
TAIR_RESP_LREM_PACKET	src\packets\base_packet.hpp	/^    TAIR_RESP_LREM_PACKET = 2229,$/;"	e	enum:tair::__anon17
TAIR_RESP_LTRIM_PACKET	src\packets\base_packet.hpp	/^    TAIR_RESP_LTRIM_PACKET = 2228,$/;"	e	enum:tair::__anon17
TAIR_RESP_PERSIST_PACKET	src\packets\base_packet.hpp	/^    TAIR_RESP_PERSIST_PACKET = 2232,$/;"	e	enum:tair::__anon17
TAIR_RESP_QUERY_INFO_PACKET	src\packets\base_packet.hpp	/^    TAIR_RESP_QUERY_INFO_PACKET = 1106,$/;"	e	enum:tair::__anon17
TAIR_RESP_RETURN_PACKET	src\packets\base_packet.hpp	/^    TAIR_RESP_RETURN_PACKET = 101,$/;"	e	enum:tair::__anon17
TAIR_RESP_RPOP_PACKET	src\packets\base_packet.hpp	/^    TAIR_RESP_RPOP_PACKET = 2202,$/;"	e	enum:tair::__anon17
TAIR_RESP_RPUSHX_PACKET	src\packets\base_packet.hpp	/^    TAIR_RESP_RPUSHX_PACKET = 2205,$/;"	e	enum:tair::__anon17
TAIR_RESP_RPUSH_PACKET	src\packets\base_packet.hpp	/^    TAIR_RESP_RPUSH_PACKET = 2203,$/;"	e	enum:tair::__anon17
TAIR_RESP_SADDMULTI_PACKET	src\packets\base_packet.hpp	/^    TAIR_RESP_SADDMULTI_PACKET = 2246,$/;"	e	enum:tair::__anon17
TAIR_RESP_SADD_PACKET	src\packets\base_packet.hpp	/^    TAIR_RESP_SADD_PACKET = 2218,$/;"	e	enum:tair::__anon17
TAIR_RESP_SCARD_PACKET	src\packets\base_packet.hpp	/^    TAIR_RESP_SCARD_PACKET = 2216,$/;"	e	enum:tair::__anon17
TAIR_RESP_SIMPLE_PACKET	src\packets\base_packet.hpp	/^    TAIR_RESP_SIMPLE_PACKET = 2257,$/;"	e	enum:tair::__anon17
TAIR_RESP_SMEMBERSMULTI_PACKET	src\packets\base_packet.hpp	/^    TAIR_RESP_SMEMBERSMULTI_PACKET = 2248,$/;"	e	enum:tair::__anon17
TAIR_RESP_SMEMBERS_PACKET	src\packets\base_packet.hpp	/^    TAIR_RESP_SMEMBERS_PACKET = 2217,$/;"	e	enum:tair::__anon17
TAIR_RESP_SPOP_PACKET	src\packets\base_packet.hpp	/^    TAIR_RESP_SPOP_PACKET = 2219,$/;"	e	enum:tair::__anon17
TAIR_RESP_SREMMULTI_PACKET	src\packets\base_packet.hpp	/^    TAIR_RESP_SREMMULTI_PACKET = 2247,$/;"	e	enum:tair::__anon17
TAIR_RESP_SREM_PACKET	src\packets\base_packet.hpp	/^	TAIR_RESP_SREM_PACKET = 2245,$/;"	e	enum:tair::__anon17
TAIR_RESP_STAT_PACKET	src\packets\base_packet.hpp	/^    TAIR_RESP_STAT_PACKET,$/;"	e	enum:tair::__anon17
TAIR_RESP_TTL_PACKET	src\packets\base_packet.hpp	/^    TAIR_RESP_TTL_PACKET = 2234,$/;"	e	enum:tair::__anon17
TAIR_RESP_TYPE_PACKET	src\packets\base_packet.hpp	/^    TAIR_RESP_TYPE_PACKET = 2235,$/;"	e	enum:tair::__anon17
TAIR_RESP_ZADD_PACKET	src\packets\base_packet.hpp	/^    TAIR_RESP_ZADD_PACKET = 2224,$/;"	e	enum:tair::__anon17
TAIR_RESP_ZCARD_PACKET	src\packets\base_packet.hpp	/^    TAIR_RESP_ZCARD_PACKET = 2226,$/;"	e	enum:tair::__anon17
TAIR_RESP_ZCOUNT_PACKET	src\packets\base_packet.hpp	/^	TAIR_RESP_ZCOUNT_PACKET = 2241,$/;"	e	enum:tair::__anon17
TAIR_RESP_ZINCRBY_PACKET	src\packets\base_packet.hpp	/^	TAIR_RESP_ZINCRBY_PACKET = 2242,$/;"	e	enum:tair::__anon17
TAIR_RESP_ZRANGEBYSCORE_PACKET	src\packets\base_packet.hpp	/^    TAIR_RESP_ZRANGEBYSCORE_PACKET = 2223,$/;"	e	enum:tair::__anon17
TAIR_RESP_ZRANGEWITHSCORE_PACKET	src\packets\base_packet.hpp	/^    TAIR_RESP_ZRANGEWITHSCORE_PACKET = 2243,$/;"	e	enum:tair::__anon17
TAIR_RESP_ZRANGE_PACKET	src\packets\base_packet.hpp	/^    TAIR_RESP_ZRANGE_PACKET = 2220,$/;"	e	enum:tair::__anon17
TAIR_RESP_ZRANK_PACKET	src\packets\base_packet.hpp	/^    TAIR_RESP_ZRANK_PACKET = 2225,$/;"	e	enum:tair::__anon17
TAIR_RESP_ZREMRANGEBYRANK_PACKET	src\packets\base_packet.hpp	/^	TAIR_RESP_ZREMRANGEBYRANK_PACKET = 2238,$/;"	e	enum:tair::__anon17
TAIR_RESP_ZREMRANGEBYSCORE_PACKET	src\packets\base_packet.hpp	/^	TAIR_RESP_ZREMRANGEBYSCORE_PACKET = 2239,$/;"	e	enum:tair::__anon17
TAIR_RESP_ZREM_PACKET	src\packets\base_packet.hpp	/^	TAIR_RESP_ZREM_PACKET = 2237,$/;"	e	enum:tair::__anon17
TAIR_RESP_ZREVRANGEWITHSCORE_PACKET	src\packets\base_packet.hpp	/^    TAIR_RESP_ZREVRANGEWITHSCORE_PACKET = 2244,$/;"	e	enum:tair::__anon17
TAIR_RESP_ZREVRANGE_PACKET	src\packets\base_packet.hpp	/^    TAIR_RESP_ZREVRANGE_PACKET = 2221,$/;"	e	enum:tair::__anon17
TAIR_RESP_ZREVRANK_PACKET	src\packets\base_packet.hpp	/^	TAIR_RESP_ZREVRANK_PACKET = 2240,$/;"	e	enum:tair::__anon17
TAIR_RESP_ZSCORE_PACKET	src\packets\base_packet.hpp	/^    TAIR_RESP_ZSCORE_PACKET = 2222,$/;"	e	enum:tair::__anon17
TAIR_SIMPLE_STREAM_PACKET	src\packets\base_packet.hpp	/^    TAIR_SIMPLE_STREAM_PACKET = 0,$/;"	e	enum:tair::__anon17
TAIR_STAT_AREA	src\packets\base_packet.hpp	/^    TAIR_STAT_AREA = 4,$/;"	e	enum:tair::__anon19
TAIR_STAT_GET_MAXAREA	src\packets\base_packet.hpp	/^    TAIR_STAT_GET_MAXAREA = 5,$/;"	e	enum:tair::__anon19
TAIR_STAT_HASH	src\packets\base_packet.hpp	/^    TAIR_STAT_HASH = 3,$/;"	e	enum:tair::__anon19
TAIR_STAT_ONEHOST	src\packets\base_packet.hpp	/^    TAIR_STAT_ONEHOST = 256$/;"	e	enum:tair::__anon19
TAIR_STAT_SLAB	src\packets\base_packet.hpp	/^    TAIR_STAT_SLAB = 2,$/;"	e	enum:tair::__anon19
TAIR_STAT_TOTAL	src\packets\base_packet.hpp	/^    TAIR_STAT_TOTAL = 1,$/;"	e	enum:tair::__anon19
base_packet	src\packets\base_packet.hpp	/^    base_packet ()$/;"	f	class:tair::base_packet
base_packet	src\packets\base_packet.hpp	/^  class base_packet:public tbnet::Packet$/;"	c	namespace:tair
connection	src\packets\base_packet.hpp	/^    tbnet::Connection * connection;$/;"	m	class:tair::base_packet
direction	src\packets\base_packet.hpp	/^    int direction;$/;"	m	class:tair::base_packet
free	src\packets\base_packet.hpp	/^    void free ()$/;"	f	class:tair::base_packet
get_code	src\packets\base_packet.hpp	/^    virtual int get_code()$/;"	f	class:tair::base_packet
get_connection	src\packets\base_packet.hpp	/^    tbnet::Connection * get_connection ()$/;"	f	class:tair::base_packet
get_direction	src\packets\base_packet.hpp	/^    int get_direction ()$/;"	f	class:tair::base_packet
hash_code	src\packets\base_packet.hpp	/^    int64_t hash_code;$/;"	m	class:tair::base_packet
no_free	src\packets\base_packet.hpp	/^    bool no_free;$/;"	m	class:tair::base_packet
request_time	src\packets\base_packet.hpp	/^    int64_t request_time;$/;"	m	class:tair::base_packet
server_flag	src\packets\base_packet.hpp	/^    uint8_t server_flag;$/;"	m	class:tair::base_packet
set_connection	src\packets\base_packet.hpp	/^    void set_connection (tbnet::Connection * connection)$/;"	f	class:tair::base_packet
set_direction	src\packets\base_packet.hpp	/^    void set_direction (int direction)$/;"	f	class:tair::base_packet
set_no_free	src\packets\base_packet.hpp	/^    void set_no_free ()$/;"	f	class:tair::base_packet
tair	src\packets\base_packet.hpp	/^namespace tair$/;"	n
~base_packet	src\packets\base_packet.hpp	/^    virtual ~ base_packet ()$/;"	f	class:tair::base_packet
TAIR_PACKET_CONF_HB_PACKET_H	src\packets\conf_heartbeat_packet.hpp	18;"	d
decode	src\packets\conf_heartbeat_packet.hpp	/^      bool decode(tbnet::DataBuffer *input, tbnet::PacketHeader *header)$/;"	f	class:tair::request_conf_heartbeart
encode	src\packets\conf_heartbeat_packet.hpp	/^      bool encode(tbnet::DataBuffer *output) {$/;"	f	class:tair::request_conf_heartbeart
loop_count	src\packets\conf_heartbeat_packet.hpp	/^      uint32_t loop_count;$/;"	m	class:tair::request_conf_heartbeart
request_conf_heartbeart	src\packets\conf_heartbeat_packet.hpp	/^      request_conf_heartbeart()$/;"	f	class:tair::request_conf_heartbeart
request_conf_heartbeart	src\packets\conf_heartbeat_packet.hpp	/^      request_conf_heartbeart(request_conf_heartbeart &packet)$/;"	f	class:tair::request_conf_heartbeart
request_conf_heartbeart	src\packets\conf_heartbeat_packet.hpp	/^   class request_conf_heartbeart : public base_packet {$/;"	c	namespace:tair
server_id	src\packets\conf_heartbeat_packet.hpp	/^      uint64_t server_id;$/;"	m	class:tair::request_conf_heartbeart
tair	src\packets\conf_heartbeat_packet.hpp	/^namespace tair {$/;"	n
~request_conf_heartbeart	src\packets\conf_heartbeat_packet.hpp	/^      ~request_conf_heartbeart() {$/;"	f	class:tair::request_conf_heartbeart
CTRL_DOWN	src\packets\data_server_ctrl_packet.hpp	/^         CTRL_DOWN$/;"	e	enum:tair::request_data_server_ctrl::__anon20
CTRL_UP	src\packets\data_server_ctrl_packet.hpp	/^         CTRL_UP = 1,$/;"	e	enum:tair::request_data_server_ctrl::__anon20
TAIR_PACKET_DATASERVER_CTRL_H	src\packets\data_server_ctrl_packet.hpp	18;"	d
cmd	src\packets\data_server_ctrl_packet.hpp	/^      uint16_t cmd;$/;"	m	class:tair::request_data_server_ctrl
decode	src\packets\data_server_ctrl_packet.hpp	/^      bool decode(tbnet::DataBuffer *input, tbnet::PacketHeader *header)$/;"	f	class:tair::request_data_server_ctrl
encode	src\packets\data_server_ctrl_packet.hpp	/^      bool encode(tbnet::DataBuffer *output)$/;"	f	class:tair::request_data_server_ctrl
request_data_server_ctrl	src\packets\data_server_ctrl_packet.hpp	/^      request_data_server_ctrl()$/;"	f	class:tair::request_data_server_ctrl
request_data_server_ctrl	src\packets\data_server_ctrl_packet.hpp	/^      request_data_server_ctrl(const request_data_server_ctrl &packet) $/;"	f	class:tair::request_data_server_ctrl
request_data_server_ctrl	src\packets\data_server_ctrl_packet.hpp	/^   class request_data_server_ctrl :public base_packet {$/;"	c	namespace:tair
server_id	src\packets\data_server_ctrl_packet.hpp	/^      uint64_t server_id;$/;"	m	class:tair::request_data_server_ctrl
tair	src\packets\data_server_ctrl_packet.hpp	/^namespace tair {$/;"	n
TAIR_PACKET_DUMP_AREA_PACKET_H	src\packets\dump_area_packet.hpp	18;"	d
area	src\packets\dump_area_packet.hpp	/^      int area;$/;"	m	class:tair::request_dump_area
decode	src\packets\dump_area_packet.hpp	/^      bool decode(tbnet::DataBuffer *input, tbnet::PacketHeader *header)$/;"	f	class:tair::request_dump_area
encode	src\packets\dump_area_packet.hpp	/^      bool encode(tbnet::DataBuffer *output)$/;"	f	class:tair::request_dump_area
request_dump_area	src\packets\dump_area_packet.hpp	/^      request_dump_area()$/;"	f	class:tair::request_dump_area
request_dump_area	src\packets\dump_area_packet.hpp	/^      request_dump_area(request_dump_area &packet)$/;"	f	class:tair::request_dump_area
request_dump_area	src\packets\dump_area_packet.hpp	/^   class request_dump_area : public base_packet {$/;"	c	namespace:tair
tair	src\packets\dump_area_packet.hpp	/^namespace tair {$/;"	n
~request_dump_area	src\packets\dump_area_packet.hpp	/^      ~request_dump_area()$/;"	f	class:tair::request_dump_area
TAIR_PACKET_DUMP_BUCKET_PACKET_H	src\packets\dump_bucket_packet.hpp	18;"	d
dbid	src\packets\dump_bucket_packet.hpp	/^      int                     dbid;$/;"	m	class:tair::request_dump_bucket
decode	src\packets\dump_bucket_packet.hpp	/^      bool decode(tbnet::DataBuffer *input, tbnet::PacketHeader *header)$/;"	f	class:tair::request_dump_bucket
encode	src\packets\dump_bucket_packet.hpp	/^      bool encode(tbnet::DataBuffer *output)$/;"	f	class:tair::request_dump_bucket
path	src\packets\dump_bucket_packet.hpp	/^      char                    path[TAIR_MAX_FILENAME_LEN];$/;"	m	class:tair::request_dump_bucket
request_dump_bucket	src\packets\dump_bucket_packet.hpp	/^      request_dump_bucket()$/;"	f	class:tair::request_dump_bucket
request_dump_bucket	src\packets\dump_bucket_packet.hpp	/^      request_dump_bucket(request_dump_bucket &packet)$/;"	f	class:tair::request_dump_bucket
request_dump_bucket	src\packets\dump_bucket_packet.hpp	/^   class request_dump_bucket : public base_packet {$/;"	c	namespace:tair
set_path	src\packets\dump_bucket_packet.hpp	/^      void set_path(const char *path_str)$/;"	f	class:tair::request_dump_bucket
tair	src\packets\dump_bucket_packet.hpp	/^namespace tair {$/;"	n
~request_dump_bucket	src\packets\dump_bucket_packet.hpp	/^      ~request_dump_bucket()$/;"	f	class:tair::request_dump_bucket
TAIR_PACKET_DUMP_PACKET_H	src\packets\dump_packet.hpp	18;"	d
add_dump_info	src\packets\dump_packet.hpp	/^      void add_dump_info(dump_meta_info info)$/;"	f	class:tair::request_dump
decode	src\packets\dump_packet.hpp	/^      bool decode(tbnet::DataBuffer *input, tbnet::PacketHeader *header)$/;"	f	class:tair::request_dump
encode	src\packets\dump_packet.hpp	/^      bool encode(tbnet::DataBuffer *output)$/;"	f	class:tair::request_dump
info_set	src\packets\dump_packet.hpp	/^      set<dump_meta_info> info_set;$/;"	m	class:tair::request_dump
request_dump	src\packets\dump_packet.hpp	/^      request_dump()$/;"	f	class:tair::request_dump
request_dump	src\packets\dump_packet.hpp	/^      request_dump(request_dump &packet)$/;"	f	class:tair::request_dump
request_dump	src\packets\dump_packet.hpp	/^   class request_dump : public base_packet {$/;"	c	namespace:tair
tair	src\packets\dump_packet.hpp	/^namespace tair {$/;"	n
~request_dump	src\packets\dump_packet.hpp	/^      ~request_dump() {$/;"	f	class:tair::request_dump
TAIR_PACKET_DUPLICATE_PACKET_H	src\packets\duplicate_packet.hpp	18;"	d
area	src\packets\duplicate_packet.hpp	/^      int           area;$/;"	m	class:tair::request_duplicate
bucket_id	src\packets\duplicate_packet.hpp	/^      int32_t         bucket_id;$/;"	m	class:tair::response_duplicate
bucket_number	src\packets\duplicate_packet.hpp	/^      int           bucket_number;$/;"	m	class:tair::request_duplicate
data	src\packets\duplicate_packet.hpp	/^      data_entry    data;$/;"	m	class:tair::request_duplicate
decode	src\packets\duplicate_packet.hpp	/^      bool decode(tbnet::DataBuffer *input, tbnet::PacketHeader *header) $/;"	f	class:tair::request_duplicate
decode	src\packets\duplicate_packet.hpp	/^      bool decode(tbnet::DataBuffer *input, tbnet::PacketHeader *header) $/;"	f	class:tair::response_duplicate
encode	src\packets\duplicate_packet.hpp	/^      bool encode(tbnet::DataBuffer *output)$/;"	f	class:tair::request_duplicate
encode	src\packets\duplicate_packet.hpp	/^      bool encode(tbnet::DataBuffer *output)$/;"	f	class:tair::response_duplicate
key	src\packets\duplicate_packet.hpp	/^      data_entry    key;$/;"	m	class:tair::request_duplicate
packet_id	src\packets\duplicate_packet.hpp	/^      uint32_t        packet_id;$/;"	m	class:tair::response_duplicate
packet_id	src\packets\duplicate_packet.hpp	/^      uint32_t      packet_id;$/;"	m	class:tair::request_duplicate
request_duplicate	src\packets\duplicate_packet.hpp	/^      request_duplicate()$/;"	f	class:tair::request_duplicate
request_duplicate	src\packets\duplicate_packet.hpp	/^      request_duplicate(const request_duplicate &packet)$/;"	f	class:tair::request_duplicate
request_duplicate	src\packets\duplicate_packet.hpp	/^   class request_duplicate : public base_packet {$/;"	c	namespace:tair
response_duplicate	src\packets\duplicate_packet.hpp	/^      response_duplicate()$/;"	f	class:tair::response_duplicate
response_duplicate	src\packets\duplicate_packet.hpp	/^   class response_duplicate : public base_packet {$/;"	c	namespace:tair
server_id	src\packets\duplicate_packet.hpp	/^      uint64_t        server_id;$/;"	m	class:tair::response_duplicate
tair	src\packets\duplicate_packet.hpp	/^namespace tair {$/;"	n
~request_duplicate	src\packets\duplicate_packet.hpp	/^      ~request_duplicate()$/;"	f	class:tair::request_duplicate
~response_duplicate	src\packets\duplicate_packet.hpp	/^      ~response_duplicate()$/;"	f	class:tair::response_duplicate
TAIR_PACKET_EXISTS_PACKET_H	src\packets\exists_packet.hpp	18;"	d
area	src\packets\exists_packet.hpp	/^    uint16_t area;$/;"	m	class:tair::request_exists
decode	src\packets\exists_packet.hpp	/^    bool decode(tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::request_exists
encode	src\packets\exists_packet.hpp	/^    bool encode(tbnet::DataBuffer * output)$/;"	f	class:tair::request_exists
key	src\packets\exists_packet.hpp	/^    data_entry key;$/;"	m	class:tair::request_exists
request_exists	src\packets\exists_packet.hpp	/^    request_exists()$/;"	f	class:tair::request_exists
request_exists	src\packets\exists_packet.hpp	/^    request_exists(const uint16_t iarea, const data_entry &ikey)$/;"	f	class:tair::request_exists
request_exists	src\packets\exists_packet.hpp	/^    request_exists(request_exists & packet)$/;"	f	class:tair::request_exists
request_exists	src\packets\exists_packet.hpp	/^  class request_exists:public base_packet$/;"	c	namespace:tair
tair	src\packets\exists_packet.hpp	/^namespace tair$/;"	n
TAIR_PACKET_EXPIRE_PACKET_H	src\packets\expire_packet.hpp	18;"	d
area	src\packets\expire_packet.hpp	/^    uint16_t area;$/;"	m	class:tair::request_expire
code	src\packets\expire_packet.hpp	/^    int32_t code;$/;"	m	class:tair::response_expire
config_version	src\packets\expire_packet.hpp	/^    uint32_t config_version;$/;"	m	class:tair::response_expire
decode	src\packets\expire_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::request_expire
decode	src\packets\expire_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::response_expire
encode	src\packets\expire_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::request_expire
encode	src\packets\expire_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::response_expire
expiretime	src\packets\expire_packet.hpp	/^    int32_t expiretime;$/;"	m	class:tair::request_expire
get_code	src\packets\expire_packet.hpp	/^    int get_code ()$/;"	f	class:tair::response_expire
key	src\packets\expire_packet.hpp	/^    data_entry key;$/;"	m	class:tair::request_expire
request_expire	src\packets\expire_packet.hpp	/^    request_expire ()$/;"	f	class:tair::request_expire
request_expire	src\packets\expire_packet.hpp	/^    request_expire (request_expire & packet)$/;"	f	class:tair::request_expire
request_expire	src\packets\expire_packet.hpp	/^  class request_expire:public base_packet$/;"	c	namespace:tair
response_expire	src\packets\expire_packet.hpp	/^    response_expire ()$/;"	f	class:tair::response_expire
response_expire	src\packets\expire_packet.hpp	/^  class response_expire:public base_packet$/;"	c	namespace:tair
set_code	src\packets\expire_packet.hpp	/^    void set_code (int cde)$/;"	f	class:tair::response_expire
set_meta	src\packets\expire_packet.hpp	/^    void set_meta (uint32_t config_version, uint32_t code)$/;"	f	class:tair::response_expire
set_version	src\packets\expire_packet.hpp	/^	void set_version(uint16_t version) {}$/;"	f	class:tair::response_expire
tair	src\packets\expire_packet.hpp	/^namespace tair$/;"	n
~response_expire	src\packets\expire_packet.hpp	/^     ~response_expire ()$/;"	f	class:tair::response_expire
TAIR_PACKET_EXPIREAT_PACKET_H	src\packets\expireat_packet.hpp	18;"	d
area	src\packets\expireat_packet.hpp	/^    uint16_t area;$/;"	m	class:tair::request_expireat
code	src\packets\expireat_packet.hpp	/^    int32_t code;$/;"	m	class:tair::response_expireat
config_version	src\packets\expireat_packet.hpp	/^    uint32_t config_version;$/;"	m	class:tair::response_expireat
decode	src\packets\expireat_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::request_expireat
decode	src\packets\expireat_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::response_expireat
encode	src\packets\expireat_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::request_expireat
encode	src\packets\expireat_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::response_expireat
expiretime	src\packets\expireat_packet.hpp	/^    int32_t expiretime;$/;"	m	class:tair::request_expireat
get_code	src\packets\expireat_packet.hpp	/^    int get_code ()$/;"	f	class:tair::response_expireat
key	src\packets\expireat_packet.hpp	/^    data_entry key;$/;"	m	class:tair::request_expireat
request_expireat	src\packets\expireat_packet.hpp	/^    request_expireat ()$/;"	f	class:tair::request_expireat
request_expireat	src\packets\expireat_packet.hpp	/^    request_expireat (request_expireat & packet)$/;"	f	class:tair::request_expireat
request_expireat	src\packets\expireat_packet.hpp	/^  class request_expireat:public base_packet$/;"	c	namespace:tair
response_expireat	src\packets\expireat_packet.hpp	/^    response_expireat ()$/;"	f	class:tair::response_expireat
response_expireat	src\packets\expireat_packet.hpp	/^  class response_expireat:public base_packet$/;"	c	namespace:tair
set_code	src\packets\expireat_packet.hpp	/^    void set_code (int cde)$/;"	f	class:tair::response_expireat
set_meta	src\packets\expireat_packet.hpp	/^    void set_meta (uint32_t config_version, uint32_t code)$/;"	f	class:tair::response_expireat
set_version	src\packets\expireat_packet.hpp	/^	void set_version(uint16_t version) {}$/;"	f	class:tair::response_expireat
tair	src\packets\expireat_packet.hpp	/^namespace tair$/;"	n
~response_expireat	src\packets\expireat_packet.hpp	/^     ~response_expireat ()$/;"	f	class:tair::response_expireat
RESPONSE_VALUES_MAXSIZE	src\packets\generic_zrangebyscore_packet.hpp	93;"	d
TAIR_PACKET_GENERIC_ZRANGEBYSCORE_PACKET_H	src\packets\generic_zrangebyscore_packet.hpp	18;"	d
add_data	src\packets\generic_zrangebyscore_packet.hpp	/^    void add_data(data_entry * data)$/;"	f	class:tair::response_generic_zrangebyscore
area	src\packets\generic_zrangebyscore_packet.hpp	/^    uint16_t    area;$/;"	m	class:tair::request_generic_zrangebyscore
code	src\packets\generic_zrangebyscore_packet.hpp	/^    int32_t code;$/;"	m	class:tair::response_generic_zrangebyscore
config_version	src\packets\generic_zrangebyscore_packet.hpp	/^    uint32_t config_version;$/;"	m	class:tair::response_generic_zrangebyscore
decode	src\packets\generic_zrangebyscore_packet.hpp	/^    bool decode(tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::request_generic_zrangebyscore
decode	src\packets\generic_zrangebyscore_packet.hpp	/^    bool decode(tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::response_generic_zrangebyscore
encode	src\packets\generic_zrangebyscore_packet.hpp	/^    bool encode(tbnet::DataBuffer * output)$/;"	f	class:tair::request_generic_zrangebyscore
encode	src\packets\generic_zrangebyscore_packet.hpp	/^    bool encode(tbnet::DataBuffer * output)$/;"	f	class:tair::response_generic_zrangebyscore
end	src\packets\generic_zrangebyscore_packet.hpp	/^    double      end;$/;"	m	class:tair::request_generic_zrangebyscore
key	src\packets\generic_zrangebyscore_packet.hpp	/^    data_entry  key;$/;"	m	class:tair::request_generic_zrangebyscore
limit	src\packets\generic_zrangebyscore_packet.hpp	/^    int         limit;$/;"	m	class:tair::request_generic_zrangebyscore
request_generic_zrangebyscore	src\packets\generic_zrangebyscore_packet.hpp	/^    request_generic_zrangebyscore()$/;"	f	class:tair::request_generic_zrangebyscore
request_generic_zrangebyscore	src\packets\generic_zrangebyscore_packet.hpp	/^    request_generic_zrangebyscore(request_generic_zrangebyscore & packet)$/;"	f	class:tair::request_generic_zrangebyscore
request_generic_zrangebyscore	src\packets\generic_zrangebyscore_packet.hpp	/^  class request_generic_zrangebyscore:public base_packet$/;"	c	namespace:tair
response_generic_zrangebyscore	src\packets\generic_zrangebyscore_packet.hpp	/^    response_generic_zrangebyscore()$/;"	f	class:tair::response_generic_zrangebyscore
response_generic_zrangebyscore	src\packets\generic_zrangebyscore_packet.hpp	/^  class response_generic_zrangebyscore:public base_packet$/;"	c	namespace:tair
reverse	src\packets\generic_zrangebyscore_packet.hpp	/^    int         reverse;$/;"	m	class:tair::request_generic_zrangebyscore
scores	src\packets\generic_zrangebyscore_packet.hpp	/^    vector<double> scores;$/;"	m	class:tair::response_generic_zrangebyscore
set_meta	src\packets\generic_zrangebyscore_packet.hpp	/^    void set_meta(uint32_t config_version, uint32_t code)$/;"	f	class:tair::response_generic_zrangebyscore
set_version	src\packets\generic_zrangebyscore_packet.hpp	/^    void set_version(uint16_t version)$/;"	f	class:tair::response_generic_zrangebyscore
start	src\packets\generic_zrangebyscore_packet.hpp	/^    double      start;$/;"	m	class:tair::request_generic_zrangebyscore
tair	src\packets\generic_zrangebyscore_packet.hpp	/^namespace tair$/;"	n
values	src\packets\generic_zrangebyscore_packet.hpp	/^    vector<data_entry *> values;$/;"	m	class:tair::response_generic_zrangebyscore
version	src\packets\generic_zrangebyscore_packet.hpp	/^    uint16_t version;$/;"	m	class:tair::response_generic_zrangebyscore
withscore	src\packets\generic_zrangebyscore_packet.hpp	/^    int         withscore;$/;"	m	class:tair::request_generic_zrangebyscore
~response_generic_zrangebyscore	src\packets\generic_zrangebyscore_packet.hpp	/^    ~response_generic_zrangebyscore()$/;"	f	class:tair::response_generic_zrangebyscore
TAIR_PACKET_GET_GROUP_PACKET_H	src\packets\get_group_packet.hpp	18;"	d
available_server_ids	src\packets\get_group_packet.hpp	/^      set<uint64_t> available_server_ids;$/;"	m	class:tair::response_get_group
bucket_count	src\packets\get_group_packet.hpp	/^      uint32_t  bucket_count;$/;"	m	class:tair::response_get_group
config_map	src\packets\get_group_packet.hpp	/^      tbsys::STR_STR_MAP config_map;$/;"	m	class:tair::response_get_group
config_version	src\packets\get_group_packet.hpp	/^      uint32_t  config_version;$/;"	m	class:tair::response_get_group
config_version	src\packets\get_group_packet.hpp	/^      uint32_t config_version;$/;"	m	class:tair::request_get_group
copy_count	src\packets\get_group_packet.hpp	/^      uint32_t  copy_count;$/;"	m	class:tair::response_get_group
decode	src\packets\get_group_packet.hpp	/^      bool decode(tbnet::DataBuffer *input, tbnet::PacketHeader *header)$/;"	f	class:tair::request_get_group
decode	src\packets\get_group_packet.hpp	/^      bool decode(tbnet::DataBuffer *input, tbnet::PacketHeader *header)$/;"	f	class:tair::response_get_group
encode	src\packets\get_group_packet.hpp	/^      bool encode(tbnet::DataBuffer *output)$/;"	f	class:tair::request_get_group
encode	src\packets\get_group_packet.hpp	/^      bool encode(tbnet::DataBuffer *output)$/;"	f	class:tair::response_get_group
group_name	src\packets\get_group_packet.hpp	/^      char group_name[64];$/;"	m	class:tair::request_get_group
request_get_group	src\packets\get_group_packet.hpp	/^      request_get_group()$/;"	f	class:tair::request_get_group
request_get_group	src\packets\get_group_packet.hpp	/^      request_get_group(const request_get_group &packet)$/;"	f	class:tair::request_get_group
request_get_group	src\packets\get_group_packet.hpp	/^   class request_get_group : public base_packet {$/;"	c	namespace:tair
response_get_group	src\packets\get_group_packet.hpp	/^      response_get_group()$/;"	f	class:tair::response_get_group
response_get_group	src\packets\get_group_packet.hpp	/^   class response_get_group : public base_packet, public server_hash_table_packet {$/;"	c	namespace:tair
set_group_name	src\packets\get_group_packet.hpp	/^      void set_group_name(const char *group_name_value) $/;"	f	class:tair::request_get_group
tair	src\packets\get_group_packet.hpp	/^namespace tair {$/;"	n
~request_get_group	src\packets\get_group_packet.hpp	/^      ~request_get_group()$/;"	f	class:tair::request_get_group
~response_get_group	src\packets\get_group_packet.hpp	/^      ~response_get_group()$/;"	f	class:tair::response_get_group
TAIR_PACKET_GET_MIGRATE_MACHINR_PACKET_H	src\packets\get_migrate_machine.hpp	18;"	d
decode	src\packets\get_migrate_machine.hpp	/^      bool decode(tbnet::DataBuffer *input, tbnet::PacketHeader *header)$/;"	f	class:tair::request_get_migrate_machine
decode	src\packets\get_migrate_machine.hpp	/^      bool decode(tbnet::DataBuffer *input, tbnet::PacketHeader *header)$/;"	f	class:tair::response_get_migrate_machine
encode	src\packets\get_migrate_machine.hpp	/^      bool encode(tbnet::DataBuffer *output)$/;"	f	class:tair::request_get_migrate_machine
encode	src\packets\get_migrate_machine.hpp	/^      bool encode(tbnet::DataBuffer *output)$/;"	f	class:tair::response_get_migrate_machine
request_get_migrate_machine	src\packets\get_migrate_machine.hpp	/^      request_get_migrate_machine()$/;"	f	class:tair::request_get_migrate_machine
request_get_migrate_machine	src\packets\get_migrate_machine.hpp	/^   class request_get_migrate_machine : public base_packet {$/;"	c	namespace:tair
response_get_migrate_machine	src\packets\get_migrate_machine.hpp	/^      response_get_migrate_machine()$/;"	f	class:tair::response_get_migrate_machine
response_get_migrate_machine	src\packets\get_migrate_machine.hpp	/^   class response_get_migrate_machine : public base_packet {$/;"	c	namespace:tair
server_id	src\packets\get_migrate_machine.hpp	/^      uint64_t server_id;$/;"	m	class:tair::request_get_migrate_machine
tair	src\packets\get_migrate_machine.hpp	/^namespace tair {$/;"	n
vec_ms	src\packets\get_migrate_machine.hpp	/^      vector<pair<uint64_t, uint32_t> > vec_ms;      \/\/serverId, and bucket count$/;"	m	class:tair::response_get_migrate_machine
~request_get_migrate_machine	src\packets\get_migrate_machine.hpp	/^      ~request_get_migrate_machine()$/;"	f	class:tair::request_get_migrate_machine
~response_get_migrate_machine	src\packets\get_migrate_machine.hpp	/^      ~response_get_migrate_machine()$/;"	f	class:tair::response_get_migrate_machine
TAIR_PACKET_GET_NS_ATTR_PACKET_H	src\packets\get_ns_attr_packet.hpp	2;"	d
area	src\packets\get_ns_attr_packet.hpp	/^    uint16_t area;$/;"	m	class:tair::request_get_ns_attr
attr	src\packets\get_ns_attr_packet.hpp	/^    char* attr;$/;"	m	class:tair::request_get_ns_attr
attr_len	src\packets\get_ns_attr_packet.hpp	/^    int attr_len;$/;"	m	class:tair::request_get_ns_attr
decode	src\packets\get_ns_attr_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::request_get_ns_attr
encode	src\packets\get_ns_attr_packet.hpp	/^    bool encode(tbnet::DataBuffer * output)$/;"	f	class:tair::request_get_ns_attr
key	src\packets\get_ns_attr_packet.hpp	/^    data_entry key;$/;"	m	class:tair::request_get_ns_attr
request_get_ns_attr	src\packets\get_ns_attr_packet.hpp	/^    request_get_ns_attr()$/;"	f	class:tair::request_get_ns_attr
request_get_ns_attr	src\packets\get_ns_attr_packet.hpp	/^    request_get_ns_attr(request_get_ns_attr & packet)$/;"	f	class:tair::request_get_ns_attr
request_get_ns_attr	src\packets\get_ns_attr_packet.hpp	/^  class request_get_ns_attr:public base_packet$/;"	c	namespace:tair
tair	src\packets\get_ns_attr_packet.hpp	/^namespace tair$/;"	n
~request_get_ns_attr	src\packets\get_ns_attr_packet.hpp	/^    ~request_get_ns_attr()$/;"	f	class:tair::request_get_ns_attr
TAIR_PACKET_GET_PACKET_H	src\packets\get_packet.hpp	18;"	d
add_key	src\packets\get_packet.hpp	/^      void add_key(char *str_key, int str_size)$/;"	f	class:tair::request_get
add_key_data	src\packets\get_packet.hpp	/^      void add_key_data(data_entry *key, data_entry *data)$/;"	f	class:tair::response_get
add_proxyed_key	src\packets\get_packet.hpp	/^      void add_proxyed_key(data_entry *proxyed_Key_value)$/;"	f	class:tair::response_get
area	src\packets\get_packet.hpp	/^      uint16_t           area;$/;"	m	class:tair::request_get
code	src\packets\get_packet.hpp	/^      int code;$/;"	m	class:tair::response_get
config_version	src\packets\get_packet.hpp	/^      uint32_t config_version;$/;"	m	class:tair::response_get
data	src\packets\get_packet.hpp	/^      data_entry *data;$/;"	m	class:tair::response_get
decode	src\packets\get_packet.hpp	/^      bool decode(tbnet::DataBuffer *input, tbnet::PacketHeader *header)$/;"	f	class:tair::request_get
decode	src\packets\get_packet.hpp	/^      bool decode(tbnet::DataBuffer *input, tbnet::PacketHeader *header)$/;"	f	class:tair::response_get
encode	src\packets\get_packet.hpp	/^      bool encode(tbnet::DataBuffer *output)$/;"	f	class:tair::request_get
encode	src\packets\get_packet.hpp	/^      bool encode(tbnet::DataBuffer *output)$/;"	f	class:tair::response_get
get_code	src\packets\get_packet.hpp	/^      int get_code()$/;"	f	class:tair::response_get
key	src\packets\get_packet.hpp	/^      data_entry       *key;$/;"	m	class:tair::request_get
key	src\packets\get_packet.hpp	/^      data_entry *key;$/;"	m	class:tair::response_get
key_count	src\packets\get_packet.hpp	/^      uint32_t           key_count;$/;"	m	class:tair::request_get
key_count	src\packets\get_packet.hpp	/^      uint32_t key_count;$/;"	m	class:tair::response_get
key_data_map	src\packets\get_packet.hpp	/^      tair_keyvalue_map *key_data_map;$/;"	m	class:tair::response_get
key_list	src\packets\get_packet.hpp	/^      tair_dataentry_set  *key_list;$/;"	m	class:tair::request_get
proxyed_key_list	src\packets\get_packet.hpp	/^      tair_dataentry_set  *proxyed_key_list;$/;"	m	class:tair::response_get
request_get	src\packets\get_packet.hpp	/^      request_get()$/;"	f	class:tair::request_get
request_get	src\packets\get_packet.hpp	/^      request_get(request_get &packet)$/;"	f	class:tair::request_get
request_get	src\packets\get_packet.hpp	/^      request_get(uint16_t area, data_entry* key)$/;"	f	class:tair::request_get
request_get	src\packets\get_packet.hpp	/^   class request_get : public base_packet {$/;"	c	namespace:tair
response_get	src\packets\get_packet.hpp	/^      response_get()$/;"	f	class:tair::response_get
response_get	src\packets\get_packet.hpp	/^   class response_get : public base_packet {$/;"	c	namespace:tair
set_code	src\packets\get_packet.hpp	/^      void set_code(int code)$/;"	f	class:tair::response_get
tair	src\packets\get_packet.hpp	/^namespace tair {$/;"	n
~request_get	src\packets\get_packet.hpp	/^      ~request_get()$/;"	f	class:tair::request_get
~response_get	src\packets\get_packet.hpp	/^      ~response_get()$/;"	f	class:tair::response_get
TAIR_PACKET_GET_SERVER_TABLE_PACKET_H	src\packets\get_server_table_packet.hpp	18;"	d
data	src\packets\get_server_table_packet.hpp	/^      char *data;$/;"	m	class:tair::response_get_server_table
decode	src\packets\get_server_table_packet.hpp	/^      bool decode(tbnet::DataBuffer *input, tbnet::PacketHeader *header)$/;"	f	class:tair::response_get_server_table
encode	src\packets\get_server_table_packet.hpp	/^      bool encode(tbnet::DataBuffer *output)$/;"	f	class:tair::response_get_server_table
group_name	src\packets\get_server_table_packet.hpp	/^      char group_name[64];$/;"	m	class:tair::response_get_server_table
modified_time	src\packets\get_server_table_packet.hpp	/^      int modified_time;$/;"	m	class:tair::response_get_server_table
request_get_server_table	src\packets\get_server_table_packet.hpp	/^      request_get_server_table() : request_get_group()$/;"	f	class:tair::request_get_server_table
request_get_server_table	src\packets\get_server_table_packet.hpp	/^      request_get_server_table(request_get_server_table &packet) : request_get_group(packet)$/;"	f	class:tair::request_get_server_table
request_get_server_table	src\packets\get_server_table_packet.hpp	/^   class request_get_server_table : public request_get_group {$/;"	c	namespace:tair
response_get_server_table	src\packets\get_server_table_packet.hpp	/^      response_get_server_table()$/;"	f	class:tair::response_get_server_table
response_get_server_table	src\packets\get_server_table_packet.hpp	/^   class response_get_server_table : public base_packet {$/;"	c	namespace:tair
set_data	src\packets\get_server_table_packet.hpp	/^      void set_data(const char *data_value, int size_value)$/;"	f	class:tair::response_get_server_table
set_group_name	src\packets\get_server_table_packet.hpp	/^      void set_group_name(const char *group_name_value)$/;"	f	class:tair::response_get_server_table
size	src\packets\get_server_table_packet.hpp	/^      int size;$/;"	m	class:tair::response_get_server_table
tair	src\packets\get_server_table_packet.hpp	/^namespace tair {$/;"	n
type	src\packets\get_server_table_packet.hpp	/^      int type;$/;"	m	class:tair::response_get_server_table
~response_get_server_table	src\packets\get_server_table_packet.hpp	/^      ~response_get_server_table()$/;"	f	class:tair::response_get_server_table
TAIR_PACKET_GETSET_PACKET_H	src\packets\getset_packet.hpp	18;"	d
request_getset	src\packets\getset_packet.hpp	/^    request_getset() : request_sadd()$/;"	f	class:tair::request_getset
request_getset	src\packets\getset_packet.hpp	/^    request_getset(const uint16_t iarea, const uint16_t iversion,$/;"	f	class:tair::request_getset
request_getset	src\packets\getset_packet.hpp	/^  class request_getset:public request_sadd$/;"	c	namespace:tair
response_getset	src\packets\getset_packet.hpp	/^    response_getset () : response_hget()$/;"	f	class:tair::response_getset
response_getset	src\packets\getset_packet.hpp	/^  class response_getset:public response_hget$/;"	c	namespace:tair
tair	src\packets\getset_packet.hpp	/^namespace tair$/;"	n
TAIR_PACKET_GROUP_NAMES_PACKET	src\packets\group_names_packet.hpp	18;"	d
add_group_name	src\packets\group_names_packet.hpp	/^      void add_group_name(const char *group_name)$/;"	f	class:tair::response_group_names
decode	src\packets\group_names_packet.hpp	/^      bool decode(tbnet::DataBuffer *input, tbnet::PacketHeader *header)$/;"	f	class:tair::response_group_names
encode	src\packets\group_names_packet.hpp	/^      bool encode(tbnet::DataBuffer *output) $/;"	f	class:tair::response_group_names
group_name_list	src\packets\group_names_packet.hpp	/^      vector<string> group_name_list;$/;"	m	class:tair::response_group_names
request_group_names	src\packets\group_names_packet.hpp	/^      request_group_names() : request_ping()$/;"	f	class:tair::request_group_names
request_group_names	src\packets\group_names_packet.hpp	/^      request_group_names(request_group_names &packet) : request_ping(packet)$/;"	f	class:tair::request_group_names
request_group_names	src\packets\group_names_packet.hpp	/^   class request_group_names : public request_ping {$/;"	c	namespace:tair
response_group_names	src\packets\group_names_packet.hpp	/^      response_group_names()$/;"	f	class:tair::response_group_names
response_group_names	src\packets\group_names_packet.hpp	/^   class response_group_names : public base_packet {$/;"	c	namespace:tair
status	src\packets\group_names_packet.hpp	/^      int status;$/;"	m	class:tair::response_group_names
tair	src\packets\group_names_packet.hpp	/^namespace tair {$/;"	n
~response_group_names	src\packets\group_names_packet.hpp	/^      ~response_group_names() $/;"	f	class:tair::response_group_names
TAIR_PACKET_HDEL_PACKET_H	src\packets\hdel_packet.hpp	18;"	d
area	src\packets\hdel_packet.hpp	/^    uint16_t area;$/;"	m	class:tair::request_hdel
code	src\packets\hdel_packet.hpp	/^    int32_t code;$/;"	m	class:tair::response_hdel
config_version	src\packets\hdel_packet.hpp	/^    uint32_t config_version;$/;"	m	class:tair::response_hdel
decode	src\packets\hdel_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::request_hdel
decode	src\packets\hdel_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::response_hdel
encode	src\packets\hdel_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::request_hdel
encode	src\packets\hdel_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::response_hdel
expire	src\packets\hdel_packet.hpp	/^    int32_t expire;$/;"	m	class:tair::request_hdel
field	src\packets\hdel_packet.hpp	/^    data_entry field;$/;"	m	class:tair::request_hdel
get_code	src\packets\hdel_packet.hpp	/^    int get_code ()$/;"	f	class:tair::response_hdel
key	src\packets\hdel_packet.hpp	/^    data_entry key;$/;"	m	class:tair::request_hdel
request_hdel	src\packets\hdel_packet.hpp	/^    request_hdel (request_hdel & packet)$/;"	f	class:tair::request_hdel
request_hdel	src\packets\hdel_packet.hpp	/^    request_hdel()$/;"	f	class:tair::request_hdel
request_hdel	src\packets\hdel_packet.hpp	/^    request_hdel(const uint16_t iarea, const uint16_t iversion,$/;"	f	class:tair::request_hdel
request_hdel	src\packets\hdel_packet.hpp	/^  class request_hdel:public base_packet$/;"	c	namespace:tair
response_hdel	src\packets\hdel_packet.hpp	/^    response_hdel ()$/;"	f	class:tair::response_hdel
response_hdel	src\packets\hdel_packet.hpp	/^  class response_hdel:public base_packet$/;"	c	namespace:tair
set_code	src\packets\hdel_packet.hpp	/^    void set_code (int cde)$/;"	f	class:tair::response_hdel
set_meta	src\packets\hdel_packet.hpp	/^    void set_meta (uint32_t config_version, uint32_t code)$/;"	f	class:tair::response_hdel
set_version	src\packets\hdel_packet.hpp	/^    void set_version(uint16_t version) {}$/;"	f	class:tair::response_hdel
tair	src\packets\hdel_packet.hpp	/^namespace tair$/;"	n
version	src\packets\hdel_packet.hpp	/^    uint16_t version;$/;"	m	class:tair::request_hdel
TAIR_PACKET_HEARTBEAT_PACKET_H	src\packets\heartbeat_packet.hpp	18;"	d
area_capacity_version	src\packets\heartbeat_packet.hpp	/^      uint32_t  area_capacity_version;$/;"	m	class:tair::request_heartbeat
area_capacity_version	src\packets\heartbeat_packet.hpp	/^      uint32_t area_capacity_version;$/;"	m	class:tair::response_heartbeat
bucket_count	src\packets\heartbeat_packet.hpp	/^      uint32_t bucket_count;$/;"	m	class:tair::response_heartbeat
client_version	src\packets\heartbeat_packet.hpp	/^      uint32_t client_version;$/;"	m	class:tair::response_heartbeat
config_version	src\packets\heartbeat_packet.hpp	/^      uint32_t config_version;$/;"	m	class:tair::request_heartbeat
copy_count	src\packets\heartbeat_packet.hpp	/^      uint32_t copy_count;$/;"	m	class:tair::response_heartbeat
data_need_move	src\packets\heartbeat_packet.hpp	/^      int32_t  data_need_move;$/;"	m	class:tair::response_heartbeat
decode	src\packets\heartbeat_packet.hpp	/^      bool decode(tbnet::DataBuffer *input, tbnet::PacketHeader *header)$/;"	f	class:tair::request_heartbeat
decode	src\packets\heartbeat_packet.hpp	/^      bool decode(tbnet::DataBuffer *input, tbnet::PacketHeader *header)$/;"	f	class:tair::response_heartbeat
down_slave_config_server	src\packets\heartbeat_packet.hpp	/^      uint64_t down_slave_config_server;$/;"	m	class:tair::response_heartbeat
encode	src\packets\heartbeat_packet.hpp	/^      bool encode(tbnet::DataBuffer *output)$/;"	f	class:tair::request_heartbeat
encode	src\packets\heartbeat_packet.hpp	/^      bool encode(tbnet::DataBuffer *output)$/;"	f	class:tair::response_heartbeat
get_stat	src\packets\heartbeat_packet.hpp	/^      tair_stat *get_stat()$/;"	f	class:tair::request_heartbeat
group_name	src\packets\heartbeat_packet.hpp	/^      char group_name[64];$/;"	m	class:tair::response_heartbeat
have_plugins_info	src\packets\heartbeat_packet.hpp	/^      bool have_plugins_info()$/;"	f	class:tair::response_heartbeat
loop_count	src\packets\heartbeat_packet.hpp	/^      uint32_t loop_count;$/;"	m	class:tair::request_heartbeat
migrated_info	src\packets\heartbeat_packet.hpp	/^      vector<uint64_t> migrated_info;$/;"	m	class:tair::response_heartbeat
plugins_dll_names	src\packets\heartbeat_packet.hpp	/^      vector<string>  plugins_dll_names;$/;"	m	class:tair::response_heartbeat
plugins_flag	src\packets\heartbeat_packet.hpp	/^      int32_t plugins_flag;$/;"	m	class:tair::response_heartbeat
plugins_version	src\packets\heartbeat_packet.hpp	/^      uint32_t  plugins_version;$/;"	m	class:tair::request_heartbeat
plugins_version	src\packets\heartbeat_packet.hpp	/^      uint32_t plugins_version;$/;"	m	class:tair::response_heartbeat
pull_migrated_info	src\packets\heartbeat_packet.hpp	/^      uint8_t  pull_migrated_info;   \/\/ 0 don't need migrated info, 1 need migrated info$/;"	m	class:tair::request_heartbeat
request_heartbeat	src\packets\heartbeat_packet.hpp	/^      request_heartbeat()$/;"	f	class:tair::request_heartbeat
request_heartbeat	src\packets\heartbeat_packet.hpp	/^      request_heartbeat(request_heartbeat &packet)$/;"	f	class:tair::request_heartbeat
request_heartbeat	src\packets\heartbeat_packet.hpp	/^   class request_heartbeat : public base_packet {$/;"	c	namespace:tair
response_heartbeat	src\packets\heartbeat_packet.hpp	/^      response_heartbeat() $/;"	f	class:tair::response_heartbeat
response_heartbeat	src\packets\heartbeat_packet.hpp	/^   class response_heartbeat : public base_packet, public server_hash_table_packet {$/;"	c	namespace:tair
server_id	src\packets\heartbeat_packet.hpp	/^      uint64_t server_id;$/;"	m	class:tair::request_heartbeat
server_version	src\packets\heartbeat_packet.hpp	/^      uint32_t server_version;$/;"	m	class:tair::response_heartbeat
set_area_capacity	src\packets\heartbeat_packet.hpp	/^      void set_area_capacity(const std::map<uint32_t, uint64_t>& capacity, uint32_t copy_count, uint32_t server_count )$/;"	f	class:tair::response_heartbeat
set_plugins_names	src\packets\heartbeat_packet.hpp	/^      void set_plugins_names(const std::set<std::string>& dll_names)$/;"	f	class:tair::response_heartbeat
set_stat_info	src\packets\heartbeat_packet.hpp	/^      void set_stat_info(const char *stat_info_value, int size)$/;"	f	class:tair::request_heartbeat
stat_info	src\packets\heartbeat_packet.hpp	/^      char *stat_info;$/;"	m	class:tair::request_heartbeat
stat_info_size	src\packets\heartbeat_packet.hpp	/^      int stat_info_size;$/;"	m	class:tair::request_heartbeat
stats	src\packets\heartbeat_packet.hpp	/^      tair_stat *stats;$/;"	m	class:tair::request_heartbeat
status	src\packets\heartbeat_packet.hpp	/^      uint32_t status; \/\/ server status, {0: alive, 1: down, 2: initing, 3: synced}$/;"	m	class:tair::request_heartbeat
tair	src\packets\heartbeat_packet.hpp	/^namespace tair {$/;"	n
vec_area_capacity_info	src\packets\heartbeat_packet.hpp	/^      vector<pair<uint32_t, uint64_t> > vec_area_capacity_info;$/;"	m	class:tair::request_heartbeat
vec_area_capacity_info	src\packets\heartbeat_packet.hpp	/^      vector<pair<uint32_t, uint64_t> > vec_area_capacity_info;$/;"	m	class:tair::response_heartbeat
vec_bucket_no	src\packets\heartbeat_packet.hpp	/^      vector<uint32_t> vec_bucket_no;$/;"	m	class:tair::request_heartbeat
~request_heartbeat	src\packets\heartbeat_packet.hpp	/^      ~request_heartbeat()$/;"	f	class:tair::request_heartbeat
~response_heartbeat	src\packets\heartbeat_packet.hpp	/^      ~response_heartbeat()$/;"	f	class:tair::response_heartbeat
TAIR_PACKET_HEXISTS_PACKET_H	src\packets\hexists_packet.hpp	18;"	d
area	src\packets\hexists_packet.hpp	/^    uint16_t area;$/;"	m	class:tair::request_hexists
decode	src\packets\hexists_packet.hpp	/^    bool decode(tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::request_hexists
encode	src\packets\hexists_packet.hpp	/^    bool encode(tbnet::DataBuffer * output)$/;"	f	class:tair::request_hexists
field	src\packets\hexists_packet.hpp	/^    data_entry field;$/;"	m	class:tair::request_hexists
key	src\packets\hexists_packet.hpp	/^    data_entry key;$/;"	m	class:tair::request_hexists
request_hexists	src\packets\hexists_packet.hpp	/^    request_hexists()$/;"	f	class:tair::request_hexists
request_hexists	src\packets\hexists_packet.hpp	/^    request_hexists(const uint16_t iarea, const data_entry &ikey, const data_entry &ifield)$/;"	f	class:tair::request_hexists
request_hexists	src\packets\hexists_packet.hpp	/^    request_hexists(request_hexists & packet)$/;"	f	class:tair::request_hexists
request_hexists	src\packets\hexists_packet.hpp	/^  class request_hexists:public base_packet$/;"	c	namespace:tair
tair	src\packets\hexists_packet.hpp	/^namespace tair$/;"	n
TAIR_PACKET_HGET_PACKET_H	src\packets\hget_packet.hpp	18;"	d
area	src\packets\hget_packet.hpp	/^    uint16_t area;$/;"	m	class:tair::request_hget
code	src\packets\hget_packet.hpp	/^    int32_t code;$/;"	m	class:tair::response_hget
config_version	src\packets\hget_packet.hpp	/^    uint32_t config_version;$/;"	m	class:tair::response_hget
decode	src\packets\hget_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::response_hget
decode	src\packets\hget_packet.hpp	/^    bool decode(tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::request_hget
encode	src\packets\hget_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::response_hget
encode	src\packets\hget_packet.hpp	/^    bool encode(tbnet::DataBuffer * output)$/;"	f	class:tair::request_hget
field	src\packets\hget_packet.hpp	/^    data_entry field;$/;"	m	class:tair::request_hget
get_code	src\packets\hget_packet.hpp	/^    int get_code ()$/;"	f	class:tair::response_hget
key	src\packets\hget_packet.hpp	/^    data_entry key;$/;"	m	class:tair::request_hget
request_hget	src\packets\hget_packet.hpp	/^    request_hget()$/;"	f	class:tair::request_hget
request_hget	src\packets\hget_packet.hpp	/^    request_hget(const uint16_t iarea, const data_entry &ikey, const data_entry &ifield)$/;"	f	class:tair::request_hget
request_hget	src\packets\hget_packet.hpp	/^    request_hget(request_hget & packet)$/;"	f	class:tair::request_hget
request_hget	src\packets\hget_packet.hpp	/^  class request_hget:public base_packet$/;"	c	namespace:tair
response_hget	src\packets\hget_packet.hpp	/^    response_hget ()$/;"	f	class:tair::response_hget
response_hget	src\packets\hget_packet.hpp	/^  class response_hget:public base_packet$/;"	c	namespace:tair
set_code	src\packets\hget_packet.hpp	/^    void set_code (int cde)$/;"	f	class:tair::response_hget
set_meta	src\packets\hget_packet.hpp	/^    void set_meta (uint32_t config_version, uint32_t code)$/;"	f	class:tair::response_hget
set_version	src\packets\hget_packet.hpp	/^    void set_version (uint16_t version)$/;"	f	class:tair::response_hget
tair	src\packets\hget_packet.hpp	/^namespace tair$/;"	n
value	src\packets\hget_packet.hpp	/^    data_entry value;$/;"	m	class:tair::response_hget
version	src\packets\hget_packet.hpp	/^    uint16_t version;$/;"	m	class:tair::response_hget
RESPONSE_VALUES_MAXSIZE	src\packets\hgetall_packet.hpp	75;"	d
TAIR_PACKET_HGETALL_PACKET_H	src\packets\hgetall_packet.hpp	18;"	d
add_data	src\packets\hgetall_packet.hpp	/^    void add_data (data_entry * data)$/;"	f	class:tair::response_hgetall
alloc_free	src\packets\hgetall_packet.hpp	/^    void alloc_free(int ifree)$/;"	f	class:tair::response_hgetall
area	src\packets\hgetall_packet.hpp	/^    uint16_t area;$/;"	m	class:tair::request_hgetall
code	src\packets\hgetall_packet.hpp	/^    int32_t  code;$/;"	m	class:tair::response_hgetall
config_version	src\packets\hgetall_packet.hpp	/^    uint32_t config_version;$/;"	m	class:tair::response_hgetall
decode	src\packets\hgetall_packet.hpp	/^    bool decode(tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::request_hgetall
decode	src\packets\hgetall_packet.hpp	/^    bool decode(tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::response_hgetall
encode	src\packets\hgetall_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::response_hgetall
encode	src\packets\hgetall_packet.hpp	/^    bool encode(tbnet::DataBuffer * output)$/;"	f	class:tair::request_hgetall
get_code	src\packets\hgetall_packet.hpp	/^    int get_code()$/;"	f	class:tair::response_hgetall
key	src\packets\hgetall_packet.hpp	/^    data_entry key;$/;"	m	class:tair::request_hgetall
request_hgetall	src\packets\hgetall_packet.hpp	/^    request_hgetall()$/;"	f	class:tair::request_hgetall
request_hgetall	src\packets\hgetall_packet.hpp	/^    request_hgetall(const int iarea, const data_entry &ikey)$/;"	f	class:tair::request_hgetall
request_hgetall	src\packets\hgetall_packet.hpp	/^    request_hgetall(request_hgetall & packet)$/;"	f	class:tair::request_hgetall
request_hgetall	src\packets\hgetall_packet.hpp	/^  class request_hgetall:public base_packet$/;"	c	namespace:tair
response_hgetall	src\packets\hgetall_packet.hpp	/^    response_hgetall()$/;"	f	class:tair::response_hgetall
response_hgetall	src\packets\hgetall_packet.hpp	/^  class response_hgetall:public base_packet$/;"	c	namespace:tair
set_meta	src\packets\hgetall_packet.hpp	/^    void set_meta (uint32_t config_version, uint32_t code)$/;"	f	class:tair::response_hgetall
set_version	src\packets\hgetall_packet.hpp	/^    void set_version(uint16_t version)$/;"	f	class:tair::response_hgetall
sfree	src\packets\hgetall_packet.hpp	/^    int sfree;$/;"	m	class:tair::response_hgetall
tair	src\packets\hgetall_packet.hpp	/^namespace tair$/;"	n
values	src\packets\hgetall_packet.hpp	/^    vector<data_entry *> values;$/;"	m	class:tair::response_hgetall
version	src\packets\hgetall_packet.hpp	/^    uint16_t version;$/;"	m	class:tair::response_hgetall
~response_hgetall	src\packets\hgetall_packet.hpp	/^    ~response_hgetall()$/;"	f	class:tair::response_hgetall
TAIR_PACKET_HINCRBY_PACKET_H	src\packets\hincrby_packet.hpp	18;"	d
area	src\packets\hincrby_packet.hpp	/^    uint16_t area;$/;"	m	class:tair::request_hincrby
code	src\packets\hincrby_packet.hpp	/^    int32_t code;$/;"	m	class:tair::response_hincrby
config_version	src\packets\hincrby_packet.hpp	/^    uint32_t config_version;$/;"	m	class:tair::response_hincrby
decode	src\packets\hincrby_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::request_hincrby
decode	src\packets\hincrby_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::response_hincrby
encode	src\packets\hincrby_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::request_hincrby
encode	src\packets\hincrby_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::response_hincrby
expire	src\packets\hincrby_packet.hpp	/^    int32_t expire;$/;"	m	class:tair::request_hincrby
field	src\packets\hincrby_packet.hpp	/^    data_entry field;$/;"	m	class:tair::request_hincrby
get_code	src\packets\hincrby_packet.hpp	/^    int get_code ()$/;"	f	class:tair::response_hincrby
key	src\packets\hincrby_packet.hpp	/^    data_entry key;$/;"	m	class:tair::request_hincrby
request_hincrby	src\packets\hincrby_packet.hpp	/^    request_hincrby ()$/;"	f	class:tair::request_hincrby
request_hincrby	src\packets\hincrby_packet.hpp	/^    request_hincrby (request_hincrby & packet)$/;"	f	class:tair::request_hincrby
request_hincrby	src\packets\hincrby_packet.hpp	/^  class request_hincrby:public base_packet$/;"	c	namespace:tair
response_hincrby	src\packets\hincrby_packet.hpp	/^    response_hincrby ()$/;"	f	class:tair::response_hincrby
response_hincrby	src\packets\hincrby_packet.hpp	/^  class response_hincrby:public base_packet$/;"	c	namespace:tair
retnum	src\packets\hincrby_packet.hpp	/^    long long retnum;$/;"	m	class:tair::response_hincrby
set_code	src\packets\hincrby_packet.hpp	/^    void set_code (int cde)$/;"	f	class:tair::response_hincrby
set_meta	src\packets\hincrby_packet.hpp	/^    void set_meta (uint32_t config_version, uint32_t code)$/;"	f	class:tair::response_hincrby
set_version	src\packets\hincrby_packet.hpp	/^	void set_version(uint16_t) {}$/;"	f	class:tair::response_hincrby
tair	src\packets\hincrby_packet.hpp	/^namespace tair$/;"	n
value	src\packets\hincrby_packet.hpp	/^    long long value;$/;"	m	class:tair::request_hincrby
version	src\packets\hincrby_packet.hpp	/^    uint16_t version;$/;"	m	class:tair::request_hincrby
RESPONSE_VALUES_MAXSIZE	src\packets\hkeys_packet.hpp	92;"	d
TAIR_PACKET_HKEYS_PACKET_H	src\packets\hkeys_packet.hpp	18;"	d
add_data	src\packets\hkeys_packet.hpp	/^    void add_data (data_entry * data)$/;"	f	class:tair::response_hkeys
area	src\packets\hkeys_packet.hpp	/^    uint16_t area;$/;"	m	class:tair::request_hkeys
code	src\packets\hkeys_packet.hpp	/^    int32_t code;$/;"	m	class:tair::response_hkeys
config_version	src\packets\hkeys_packet.hpp	/^    uint32_t config_version;$/;"	m	class:tair::response_hkeys
decode	src\packets\hkeys_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::request_hkeys
decode	src\packets\hkeys_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::response_hkeys
encode	src\packets\hkeys_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::request_hkeys
encode	src\packets\hkeys_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::response_hkeys
key	src\packets\hkeys_packet.hpp	/^    data_entry key;$/;"	m	class:tair::request_hkeys
keys	src\packets\hkeys_packet.hpp	/^    vector <data_entry *> keys;$/;"	m	class:tair::response_hkeys
request_hkeys	src\packets\hkeys_packet.hpp	/^    request_hkeys ()$/;"	f	class:tair::request_hkeys
request_hkeys	src\packets\hkeys_packet.hpp	/^    request_hkeys (int pcode)$/;"	f	class:tair::request_hkeys
request_hkeys	src\packets\hkeys_packet.hpp	/^    request_hkeys (request_hkeys & packet)$/;"	f	class:tair::request_hkeys
request_hkeys	src\packets\hkeys_packet.hpp	/^  class request_hkeys:public base_packet$/;"	c	namespace:tair
response_hkeys	src\packets\hkeys_packet.hpp	/^    response_hkeys ()$/;"	f	class:tair::response_hkeys
response_hkeys	src\packets\hkeys_packet.hpp	/^    response_hkeys (int pcode)$/;"	f	class:tair::response_hkeys
response_hkeys	src\packets\hkeys_packet.hpp	/^  class response_hkeys:public base_packet$/;"	c	namespace:tair
set_meta	src\packets\hkeys_packet.hpp	/^    void set_meta (uint32_t config_version, uint32_t code)$/;"	f	class:tair::response_hkeys
set_version	src\packets\hkeys_packet.hpp	/^    void set_version(uint16_t version)$/;"	f	class:tair::response_hkeys
tair	src\packets\hkeys_packet.hpp	/^namespace tair$/;"	n
version	src\packets\hkeys_packet.hpp	/^    uint16_t version;$/;"	m	class:tair::response_hkeys
~response_hkeys	src\packets\hkeys_packet.hpp	/^    ~response_hkeys () {$/;"	f	class:tair::response_hkeys
TAIR_PACKET_HLEN_PACKET_H	src\packets\hlen_packet.hpp	18;"	d
area	src\packets\hlen_packet.hpp	/^    uint16_t area;$/;"	m	class:tair::request_hlen
code	src\packets\hlen_packet.hpp	/^    int32_t code;$/;"	m	class:tair::response_hlen
config_version	src\packets\hlen_packet.hpp	/^    uint32_t config_version;$/;"	m	class:tair::response_hlen
decode	src\packets\hlen_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::request_hlen
decode	src\packets\hlen_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::response_hlen
encode	src\packets\hlen_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::request_hlen
encode	src\packets\hlen_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::response_hlen
get_code	src\packets\hlen_packet.hpp	/^    int get_code ()$/;"	f	class:tair::response_hlen
key	src\packets\hlen_packet.hpp	/^    data_entry key;$/;"	m	class:tair::request_hlen
request_hlen	src\packets\hlen_packet.hpp	/^    request_hlen ()$/;"	f	class:tair::request_hlen
request_hlen	src\packets\hlen_packet.hpp	/^    request_hlen (request_hlen & packet)$/;"	f	class:tair::request_hlen
request_hlen	src\packets\hlen_packet.hpp	/^  class request_hlen:public base_packet$/;"	c	namespace:tair
response_hlen	src\packets\hlen_packet.hpp	/^    response_hlen ()$/;"	f	class:tair::response_hlen
response_hlen	src\packets\hlen_packet.hpp	/^  class response_hlen:public base_packet$/;"	c	namespace:tair
retnum	src\packets\hlen_packet.hpp	/^    long long retnum;$/;"	m	class:tair::response_hlen
set_code	src\packets\hlen_packet.hpp	/^    void set_code (int cde)$/;"	f	class:tair::response_hlen
set_meta	src\packets\hlen_packet.hpp	/^    void set_meta (uint32_t config_version, uint32_t code)$/;"	f	class:tair::response_hlen
set_version	src\packets\hlen_packet.hpp	/^	void set_version(uint16_t version) {}$/;"	f	class:tair::response_hlen
tair	src\packets\hlen_packet.hpp	/^namespace tair$/;"	n
TAIR_PACKET_HMGET_PACKET_H	src\packets\hmget_packet.hpp	18;"	d
alloc_free	src\packets\hmget_packet.hpp	/^    void alloc_free(int ifree)$/;"	f	class:tair::response_hmget
area	src\packets\hmget_packet.hpp	/^    uint16_t area;$/;"	m	class:tair::request_hmget
code	src\packets\hmget_packet.hpp	/^    int32_t code;$/;"	m	class:tair::response_hmget
config_version	src\packets\hmget_packet.hpp	/^    uint32_t config_version;$/;"	m	class:tair::response_hmget
decode	src\packets\hmget_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::request_hmget
decode	src\packets\hmget_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::response_hmget
encode	src\packets\hmget_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::request_hmget
encode	src\packets\hmget_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::response_hmget
fields	src\packets\hmget_packet.hpp	/^    vector<data_entry *> fields;$/;"	m	class:tair::request_hmget
get_code	src\packets\hmget_packet.hpp	/^    int get_code ()$/;"	f	class:tair::response_hmget
key	src\packets\hmget_packet.hpp	/^    data_entry key;$/;"	m	class:tair::request_hmget
request_hmget	src\packets\hmget_packet.hpp	/^    request_hmget()$/;"	f	class:tair::request_hmget
request_hmget	src\packets\hmget_packet.hpp	/^    request_hmget(const uint16_t iarea, const data_entry &ikey,$/;"	f	class:tair::request_hmget
request_hmget	src\packets\hmget_packet.hpp	/^    request_hmget(request_hmget & packet)$/;"	f	class:tair::request_hmget
request_hmget	src\packets\hmget_packet.hpp	/^  class request_hmget:public base_packet$/;"	c	namespace:tair
response_hmget	src\packets\hmget_packet.hpp	/^    response_hmget()$/;"	f	class:tair::response_hmget
response_hmget	src\packets\hmget_packet.hpp	/^  class response_hmget:public base_packet$/;"	c	namespace:tair
set_code	src\packets\hmget_packet.hpp	/^    void set_code (int cde)$/;"	f	class:tair::response_hmget
set_meta	src\packets\hmget_packet.hpp	/^    void set_meta (uint32_t config_version, uint32_t code)$/;"	f	class:tair::response_hmget
set_version	src\packets\hmget_packet.hpp	/^    void set_version(uint16_t version)$/;"	f	class:tair::response_hmget
sfree	src\packets\hmget_packet.hpp	/^    int sfree;$/;"	m	class:tair::request_hmget
sfree	src\packets\hmget_packet.hpp	/^    int sfree;$/;"	m	class:tair::response_hmget
tair	src\packets\hmget_packet.hpp	/^namespace tair$/;"	n
values	src\packets\hmget_packet.hpp	/^    vector<data_entry *> values;$/;"	m	class:tair::response_hmget
version	src\packets\hmget_packet.hpp	/^    uint16_t version;$/;"	m	class:tair::response_hmget
~request_hmget	src\packets\hmget_packet.hpp	/^    ~request_hmget()$/;"	f	class:tair::request_hmget
~response_hmget	src\packets\hmget_packet.hpp	/^    ~response_hmget ()$/;"	f	class:tair::response_hmget
TAIR_PACKET_HMSET_PACKET_H	src\packets\hmset_packet.hpp	18;"	d
area	src\packets\hmset_packet.hpp	/^    uint16_t area;$/;"	m	class:tair::request_hmset
code	src\packets\hmset_packet.hpp	/^    int32_t code;$/;"	m	class:tair::response_hmset
config_version	src\packets\hmset_packet.hpp	/^    uint32_t config_version;$/;"	m	class:tair::response_hmset
decode	src\packets\hmset_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::response_hmset
decode	src\packets\hmset_packet.hpp	/^    bool decode(tbnet::DataBuffer *input, tbnet::PacketHeader *header)$/;"	f	class:tair::request_hmset
encode	src\packets\hmset_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::request_hmset
encode	src\packets\hmset_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::response_hmset
expire	src\packets\hmset_packet.hpp	/^    int expire;$/;"	m	class:tair::request_hmset
field_values	src\packets\hmset_packet.hpp	/^    vector <data_entry *> field_values;$/;"	m	class:tair::request_hmset
get_code	src\packets\hmset_packet.hpp	/^    int get_code ()$/;"	f	class:tair::response_hmset
key	src\packets\hmset_packet.hpp	/^    data_entry key;$/;"	m	class:tair::request_hmset
request_hmset	src\packets\hmset_packet.hpp	/^    request_hmset()$/;"	f	class:tair::request_hmset
request_hmset	src\packets\hmset_packet.hpp	/^    request_hmset(const uint16_t iarea, const uint16_t iversion, const int iexpire,$/;"	f	class:tair::request_hmset
request_hmset	src\packets\hmset_packet.hpp	/^    request_hmset(request_hmset & packet)$/;"	f	class:tair::request_hmset
request_hmset	src\packets\hmset_packet.hpp	/^  class request_hmset:public base_packet$/;"	c	namespace:tair
response_hmset	src\packets\hmset_packet.hpp	/^    response_hmset ()$/;"	f	class:tair::response_hmset
response_hmset	src\packets\hmset_packet.hpp	/^  class response_hmset:public base_packet$/;"	c	namespace:tair
retvalue	src\packets\hmset_packet.hpp	/^    int retvalue;$/;"	m	class:tair::response_hmset
set_code	src\packets\hmset_packet.hpp	/^    void set_code (int cde)$/;"	f	class:tair::response_hmset
set_meta	src\packets\hmset_packet.hpp	/^    void set_meta (uint32_t config_version, uint32_t code)$/;"	f	class:tair::response_hmset
set_version	src\packets\hmset_packet.hpp	/^	void set_version(uint16_t version) {}$/;"	f	class:tair::response_hmset
sfree	src\packets\hmset_packet.hpp	/^    int sfree;$/;"	m	class:tair::request_hmset
tair	src\packets\hmset_packet.hpp	/^namespace tair$/;"	n
version	src\packets\hmset_packet.hpp	/^    uint16_t version;$/;"	m	class:tair::request_hmset
~request_hmset	src\packets\hmset_packet.hpp	/^    ~request_hmset()$/;"	f	class:tair::request_hmset
TAIR_PACKET_HSET_PACKET_H	src\packets\hset_packet.hpp	18;"	d
area	src\packets\hset_packet.hpp	/^    uint16_t area;$/;"	m	class:tair::request_hset
code	src\packets\hset_packet.hpp	/^    int32_t code;$/;"	m	class:tair::response_hset
config_version	src\packets\hset_packet.hpp	/^    uint32_t config_version;$/;"	m	class:tair::response_hset
decode	src\packets\hset_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::request_hset
decode	src\packets\hset_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::response_hset
encode	src\packets\hset_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::response_hset
encode	src\packets\hset_packet.hpp	/^    bool encode(tbnet::DataBuffer * output)$/;"	f	class:tair::request_hset
expire	src\packets\hset_packet.hpp	/^    int expire;$/;"	m	class:tair::request_hset
field	src\packets\hset_packet.hpp	/^    data_entry field;$/;"	m	class:tair::request_hset
get_code	src\packets\hset_packet.hpp	/^    int get_code ()$/;"	f	class:tair::response_hset
key	src\packets\hset_packet.hpp	/^    data_entry key;$/;"	m	class:tair::request_hset
request_hset	src\packets\hset_packet.hpp	/^    request_hset()$/;"	f	class:tair::request_hset
request_hset	src\packets\hset_packet.hpp	/^    request_hset(const uint16_t iarea, const uint16_t iversion, const int iexpire,$/;"	f	class:tair::request_hset
request_hset	src\packets\hset_packet.hpp	/^    request_hset(request_hset & packet)$/;"	f	class:tair::request_hset
request_hset	src\packets\hset_packet.hpp	/^  class request_hset:public base_packet$/;"	c	namespace:tair
response_hset	src\packets\hset_packet.hpp	/^    response_hset ()$/;"	f	class:tair::response_hset
response_hset	src\packets\hset_packet.hpp	/^  class response_hset:public base_packet$/;"	c	namespace:tair
set_code	src\packets\hset_packet.hpp	/^    void set_code (int cde)$/;"	f	class:tair::response_hset
set_meta	src\packets\hset_packet.hpp	/^    void set_meta (uint32_t config_version, uint32_t code)$/;"	f	class:tair::response_hset
set_version	src\packets\hset_packet.hpp	/^	void set_version(uint16_t version) {}$/;"	f	class:tair::response_hset
tair	src\packets\hset_packet.hpp	/^namespace tair$/;"	n
value	src\packets\hset_packet.hpp	/^    data_entry value;$/;"	m	class:tair::request_hset
version	src\packets\hset_packet.hpp	/^    uint16_t version;$/;"	m	class:tair::request_hset
TAIR_PACKET_HSETNX_PACKET_H	src\packets\hsetnx_packet.hpp	18;"	d
area	src\packets\hsetnx_packet.hpp	/^    uint16_t area;$/;"	m	class:tair::request_hsetnx
code	src\packets\hsetnx_packet.hpp	/^    int32_t code;$/;"	m	class:tair::response_hsetnx
config_version	src\packets\hsetnx_packet.hpp	/^    uint32_t config_version;$/;"	m	class:tair::response_hsetnx
decode	src\packets\hsetnx_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::request_hsetnx
decode	src\packets\hsetnx_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::response_hsetnx
encode	src\packets\hsetnx_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::request_hsetnx
encode	src\packets\hsetnx_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::response_hsetnx
expire	src\packets\hsetnx_packet.hpp	/^    int expire;$/;"	m	class:tair::request_hsetnx
field	src\packets\hsetnx_packet.hpp	/^    data_entry field;$/;"	m	class:tair::request_hsetnx
get_code	src\packets\hsetnx_packet.hpp	/^    int get_code ()$/;"	f	class:tair::response_hsetnx
key	src\packets\hsetnx_packet.hpp	/^    data_entry key;$/;"	m	class:tair::request_hsetnx
request_hsetnx	src\packets\hsetnx_packet.hpp	/^    request_hsetnx ()$/;"	f	class:tair::request_hsetnx
request_hsetnx	src\packets\hsetnx_packet.hpp	/^    request_hsetnx (request_hsetnx & packet)$/;"	f	class:tair::request_hsetnx
request_hsetnx	src\packets\hsetnx_packet.hpp	/^  class request_hsetnx:public base_packet$/;"	c	namespace:tair
response_hsetnx	src\packets\hsetnx_packet.hpp	/^    response_hsetnx ()$/;"	f	class:tair::response_hsetnx
response_hsetnx	src\packets\hsetnx_packet.hpp	/^  class response_hsetnx:public base_packet$/;"	c	namespace:tair
set_code	src\packets\hsetnx_packet.hpp	/^    void set_code (int cde)$/;"	f	class:tair::response_hsetnx
set_meta	src\packets\hsetnx_packet.hpp	/^    void set_meta (uint32_t config_version, uint32_t code)$/;"	f	class:tair::response_hsetnx
set_version	src\packets\hsetnx_packet.hpp	/^	void set_version(uint16_t version) {}$/;"	f	class:tair::response_hsetnx
tair	src\packets\hsetnx_packet.hpp	/^namespace tair$/;"	n
value	src\packets\hsetnx_packet.hpp	/^    data_entry value;$/;"	m	class:tair::request_hsetnx
version	src\packets\hsetnx_packet.hpp	/^    uint16_t version;$/;"	m	class:tair::request_hsetnx
RESPONSE_VALUES_MAXSIZE	src\packets\hvals_packet.hpp	94;"	d
TAIR_PACKET_HVALS_PACKET_H	src\packets\hvals_packet.hpp	18;"	d
add_data	src\packets\hvals_packet.hpp	/^    void add_data (data_entry * data)$/;"	f	class:tair::response_hvals
area	src\packets\hvals_packet.hpp	/^    uint16_t area;$/;"	m	class:tair::request_hvals
code	src\packets\hvals_packet.hpp	/^    int32_t code;$/;"	m	class:tair::response_hvals
config_version	src\packets\hvals_packet.hpp	/^    uint32_t config_version;$/;"	m	class:tair::response_hvals
decode	src\packets\hvals_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::request_hvals
decode	src\packets\hvals_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::response_hvals
encode	src\packets\hvals_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::request_hvals
encode	src\packets\hvals_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::response_hvals
key	src\packets\hvals_packet.hpp	/^    data_entry key;$/;"	m	class:tair::request_hvals
request_hvals	src\packets\hvals_packet.hpp	/^    request_hvals ()$/;"	f	class:tair::request_hvals
request_hvals	src\packets\hvals_packet.hpp	/^    request_hvals (int pcode)$/;"	f	class:tair::request_hvals
request_hvals	src\packets\hvals_packet.hpp	/^    request_hvals (request_hvals & packet)$/;"	f	class:tair::request_hvals
request_hvals	src\packets\hvals_packet.hpp	/^  class request_hvals:public base_packet$/;"	c	namespace:tair
response_hvals	src\packets\hvals_packet.hpp	/^    response_hvals ()$/;"	f	class:tair::response_hvals
response_hvals	src\packets\hvals_packet.hpp	/^    response_hvals (int pcode)$/;"	f	class:tair::response_hvals
response_hvals	src\packets\hvals_packet.hpp	/^  class response_hvals:public base_packet$/;"	c	namespace:tair
set_meta	src\packets\hvals_packet.hpp	/^    void set_meta (uint32_t config_version, uint32_t code)$/;"	f	class:tair::response_hvals
set_version	src\packets\hvals_packet.hpp	/^    void set_version(uint16_t version)$/;"	f	class:tair::response_hvals
tair	src\packets\hvals_packet.hpp	/^namespace tair$/;"	n
values	src\packets\hvals_packet.hpp	/^    vector < data_entry * >values;$/;"	m	class:tair::response_hvals
version	src\packets\hvals_packet.hpp	/^    uint16_t version;$/;"	m	class:tair::response_hvals
~response_hvals	src\packets\hvals_packet.hpp	/^    ~response_hvals () {$/;"	f	class:tair::response_hvals
TAIR_PACKET_INC_DEC_PACKET_H	src\packets\inc_dec_packet.hpp	18;"	d
add_count	src\packets\inc_dec_packet.hpp	/^      int32_t         add_count;$/;"	m	class:tair::request_inc_dec
area	src\packets\inc_dec_packet.hpp	/^      uint16_t        area;$/;"	m	class:tair::request_inc_dec
code	src\packets\inc_dec_packet.hpp	/^      int code;$/;"	m	class:tair::response_inc_dec
decode	src\packets\inc_dec_packet.hpp	/^      bool decode(tbnet::DataBuffer *input, tbnet::PacketHeader *header)$/;"	f	class:tair::request_inc_dec
encode	src\packets\inc_dec_packet.hpp	/^      bool encode(tbnet::DataBuffer *output)$/;"	f	class:tair::request_inc_dec
expired	src\packets\inc_dec_packet.hpp	/^      int32_t         expired;$/;"	m	class:tair::request_inc_dec
get_code	src\packets\inc_dec_packet.hpp	/^      int get_code() {$/;"	f	class:tair::response_inc_dec
init_value	src\packets\inc_dec_packet.hpp	/^      int32_t         init_value;$/;"	m	class:tair::request_inc_dec
key	src\packets\inc_dec_packet.hpp	/^      data_entry      key;$/;"	m	class:tair::request_inc_dec
request_inc_dec	src\packets\inc_dec_packet.hpp	/^      request_inc_dec()$/;"	f	class:tair::request_inc_dec
request_inc_dec	src\packets\inc_dec_packet.hpp	/^      request_inc_dec(request_inc_dec &packet)$/;"	f	class:tair::request_inc_dec
request_inc_dec	src\packets\inc_dec_packet.hpp	/^   class request_inc_dec : public base_packet {$/;"	c	namespace:tair
response_inc_dec	src\packets\inc_dec_packet.hpp	/^      response_inc_dec() : request_ping()$/;"	f	class:tair::response_inc_dec
response_inc_dec	src\packets\inc_dec_packet.hpp	/^      response_inc_dec(response_inc_dec &packet) : request_ping(packet)$/;"	f	class:tair::response_inc_dec
response_inc_dec	src\packets\inc_dec_packet.hpp	/^   class response_inc_dec : public request_ping {$/;"	c	namespace:tair
set_code	src\packets\inc_dec_packet.hpp	/^      void set_code(int code) {$/;"	f	class:tair::response_inc_dec
tair	src\packets\inc_dec_packet.hpp	/^namespace tair {$/;"	n
~request_inc_dec	src\packets\inc_dec_packet.hpp	/^      ~request_inc_dec()$/;"	f	class:tair::request_inc_dec
TAIR_PACKET_INFO_PACKET_H	src\packets\info_packet.hpp	2;"	d
code	src\packets\info_packet.hpp	/^    int32_t code;$/;"	m	class:tair::response_info
config_version	src\packets\info_packet.hpp	/^    uint32_t config_version;$/;"	m	class:tair::response_info
decode	src\packets\info_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::response_info
decode	src\packets\info_packet.hpp	/^    bool decode(tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::request_info
encode	src\packets\info_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::response_info
encode	src\packets\info_packet.hpp	/^    bool encode(tbnet::DataBuffer * output)$/;"	f	class:tair::request_info
get_code	src\packets\info_packet.hpp	/^    int get_code ()$/;"	f	class:tair::response_info
info	src\packets\info_packet.hpp	/^    data_entry info;$/;"	m	class:tair::response_info
request_info	src\packets\info_packet.hpp	/^    request_info()$/;"	f	class:tair::request_info
request_info	src\packets\info_packet.hpp	/^    request_info(request_info & packet)$/;"	f	class:tair::request_info
request_info	src\packets\info_packet.hpp	/^  class request_info:public base_packet$/;"	c	namespace:tair
response_info	src\packets\info_packet.hpp	/^    response_info ()$/;"	f	class:tair::response_info
response_info	src\packets\info_packet.hpp	/^  class response_info:public base_packet$/;"	c	namespace:tair
set_meta	src\packets\info_packet.hpp	/^    void set_meta (uint32_t config_version, uint32_t code)$/;"	f	class:tair::response_info
tair	src\packets\info_packet.hpp	/^namespace tair$/;"	n
TAIR_PACKET_ITEMS_H	src\packets\items_packet.hpp	18;"	d
count	src\packets\items_packet.hpp	/^      int count;$/;"	m	class:tair::request_get_items
decode	src\packets\items_packet.hpp	/^      bool decode(tbnet::DataBuffer *input,tbnet::PacketHeader *header)$/;"	f	class:tair::request_add_items
decode	src\packets\items_packet.hpp	/^      bool decode(tbnet::DataBuffer *input,tbnet::PacketHeader *header)$/;"	f	class:tair::request_get_items
encode	src\packets\items_packet.hpp	/^      bool encode(tbnet::DataBuffer *output)$/;"	f	class:tair::request_add_items
encode	src\packets\items_packet.hpp	/^      bool encode(tbnet::DataBuffer *output)$/;"	f	class:tair::request_get_items
max_count	src\packets\items_packet.hpp	/^      int max_count;$/;"	m	class:tair::request_add_items
offset	src\packets\items_packet.hpp	/^      int offset;$/;"	m	class:tair::request_get_items
request_add_items	src\packets\items_packet.hpp	/^      request_add_items() : request_put()$/;"	f	class:tair::request_add_items
request_add_items	src\packets\items_packet.hpp	/^      request_add_items(request_add_items& packet) : request_put(packet)$/;"	f	class:tair::request_add_items
request_add_items	src\packets\items_packet.hpp	/^   class request_add_items : public request_put {$/;"	c	namespace:tair
request_get_and_remove_items	src\packets\items_packet.hpp	/^      request_get_and_remove_items() : request_get_items()$/;"	f	class:tair::request_get_and_remove_items
request_get_and_remove_items	src\packets\items_packet.hpp	/^      request_get_and_remove_items(request_get_and_remove_items& packet) : request_get_items(packet)$/;"	f	class:tair::request_get_and_remove_items
request_get_and_remove_items	src\packets\items_packet.hpp	/^   class request_get_and_remove_items : public request_get_items {$/;"	c	namespace:tair
request_get_items	src\packets\items_packet.hpp	/^      request_get_items() : request_get(),count(0),offset(0)$/;"	f	class:tair::request_get_items
request_get_items	src\packets\items_packet.hpp	/^      request_get_items(request_get_items& packet) : request_get(packet)$/;"	f	class:tair::request_get_items
request_get_items	src\packets\items_packet.hpp	/^   class request_get_items : public request_get {$/;"	c	namespace:tair
request_get_items_count	src\packets\items_packet.hpp	/^      request_get_items_count() : request_get()$/;"	f	class:tair::request_get_items_count
request_get_items_count	src\packets\items_packet.hpp	/^      request_get_items_count(request_get_items_count& packet) : request_get(packet)$/;"	f	class:tair::request_get_items_count
request_get_items_count	src\packets\items_packet.hpp	/^   class request_get_items_count : public request_get{$/;"	c	namespace:tair
request_remove_items	src\packets\items_packet.hpp	/^      request_remove_items() : request_get_items()$/;"	f	class:tair::request_remove_items
request_remove_items	src\packets\items_packet.hpp	/^      request_remove_items(request_remove_items& packet) : request_get_items(packet)$/;"	f	class:tair::request_remove_items
request_remove_items	src\packets\items_packet.hpp	/^   class request_remove_items : public request_get_items {$/;"	c	namespace:tair
response_get_items	src\packets\items_packet.hpp	/^      response_get_items() : response_get()$/;"	f	class:tair::response_get_items
response_get_items	src\packets\items_packet.hpp	/^   class response_get_items : public response_get {$/;"	c	namespace:tair
tair	src\packets\items_packet.hpp	/^namespace tair {$/;"	n
type	src\packets\items_packet.hpp	/^      int type;$/;"	m	class:tair::request_get_items
TAIR_PACKET_LAZY_REMOVE_AREA_PACKET_H	src\packets\lazy_remove_area_packet.hpp	18;"	d
area	src\packets\lazy_remove_area_packet.hpp	/^      int area;$/;"	m	class:tair::request_lazy_remove_area
decode	src\packets\lazy_remove_area_packet.hpp	/^      bool decode(tbnet::DataBuffer *input, tbnet::PacketHeader *header)$/;"	f	class:tair::request_lazy_remove_area
encode	src\packets\lazy_remove_area_packet.hpp	/^      bool encode(tbnet::DataBuffer *output)$/;"	f	class:tair::request_lazy_remove_area
password	src\packets\lazy_remove_area_packet.hpp	/^      char* password;$/;"	m	class:tair::request_lazy_remove_area
pwd_len	src\packets\lazy_remove_area_packet.hpp	/^      int pwd_len;$/;"	m	class:tair::request_lazy_remove_area
request_lazy_remove_area	src\packets\lazy_remove_area_packet.hpp	/^      request_lazy_remove_area()$/;"	f	class:tair::request_lazy_remove_area
request_lazy_remove_area	src\packets\lazy_remove_area_packet.hpp	/^      request_lazy_remove_area(request_lazy_remove_area &packet)$/;"	f	class:tair::request_lazy_remove_area
request_lazy_remove_area	src\packets\lazy_remove_area_packet.hpp	/^   class request_lazy_remove_area : public base_packet {$/;"	c	namespace:tair
tair	src\packets\lazy_remove_area_packet.hpp	/^namespace tair {$/;"	n
~request_lazy_remove_area	src\packets\lazy_remove_area_packet.hpp	/^      ~request_lazy_remove_area()$/;"	f	class:tair::request_lazy_remove_area
TAIR_PACKET_LINDEX_PACKET_H	src\packets\lindex_packet.hpp	18;"	d
area	src\packets\lindex_packet.hpp	/^    uint16_t area;$/;"	m	class:tair::request_lindex
code	src\packets\lindex_packet.hpp	/^    int32_t code;$/;"	m	class:tair::response_lindex
config_version	src\packets\lindex_packet.hpp	/^    uint32_t config_version;$/;"	m	class:tair::response_lindex
decode	src\packets\lindex_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::request_lindex
decode	src\packets\lindex_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::response_lindex
encode	src\packets\lindex_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::request_lindex
encode	src\packets\lindex_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::response_lindex
get_code	src\packets\lindex_packet.hpp	/^    int get_code()$/;"	f	class:tair::response_lindex
index	src\packets\lindex_packet.hpp	/^    int32_t index;$/;"	m	class:tair::request_lindex
key	src\packets\lindex_packet.hpp	/^    data_entry key;$/;"	m	class:tair::request_lindex
request_lindex	src\packets\lindex_packet.hpp	/^    request_lindex ()$/;"	f	class:tair::request_lindex
request_lindex	src\packets\lindex_packet.hpp	/^    request_lindex (request_lindex & packet)$/;"	f	class:tair::request_lindex
request_lindex	src\packets\lindex_packet.hpp	/^  class request_lindex:public base_packet$/;"	c	namespace:tair
response_lindex	src\packets\lindex_packet.hpp	/^    response_lindex ()$/;"	f	class:tair::response_lindex
response_lindex	src\packets\lindex_packet.hpp	/^  class response_lindex:public base_packet$/;"	c	namespace:tair
set_meta	src\packets\lindex_packet.hpp	/^    void set_meta (uint32_t config_version, uint32_t code)$/;"	f	class:tair::response_lindex
set_version	src\packets\lindex_packet.hpp	/^    void set_version(uint16_t version)$/;"	f	class:tair::response_lindex
tair	src\packets\lindex_packet.hpp	/^namespace tair$/;"	n
value	src\packets\lindex_packet.hpp	/^    data_entry value;$/;"	m	class:tair::response_lindex
version	src\packets\lindex_packet.hpp	/^    uint16_t version;$/;"	m	class:tair::response_lindex
~response_lindex	src\packets\lindex_packet.hpp	/^    ~response_lindex(){}$/;"	f	class:tair::response_lindex
TAIR_PACKET_LLEN_PACKET_H	src\packets\llen_packet.hpp	18;"	d
area	src\packets\llen_packet.hpp	/^    uint16_t area;$/;"	m	class:tair::request_llen
code	src\packets\llen_packet.hpp	/^    int32_t code;$/;"	m	class:tair::response_llen
config_version	src\packets\llen_packet.hpp	/^    uint32_t config_version;$/;"	m	class:tair::response_llen
decode	src\packets\llen_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::request_llen
decode	src\packets\llen_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::response_llen
encode	src\packets\llen_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::request_llen
encode	src\packets\llen_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::response_llen
get_code	src\packets\llen_packet.hpp	/^    int get_code ()$/;"	f	class:tair::response_llen
key	src\packets\llen_packet.hpp	/^    data_entry key;$/;"	m	class:tair::request_llen
request_llen	src\packets\llen_packet.hpp	/^    request_llen ()$/;"	f	class:tair::request_llen
request_llen	src\packets\llen_packet.hpp	/^    request_llen (request_llen & packet)$/;"	f	class:tair::request_llen
request_llen	src\packets\llen_packet.hpp	/^  class request_llen:public base_packet$/;"	c	namespace:tair
response_llen	src\packets\llen_packet.hpp	/^    response_llen ()$/;"	f	class:tair::response_llen
response_llen	src\packets\llen_packet.hpp	/^  class response_llen:public base_packet$/;"	c	namespace:tair
retnum	src\packets\llen_packet.hpp	/^    long long retnum;$/;"	m	class:tair::response_llen
set_code	src\packets\llen_packet.hpp	/^    void set_code (int cde)$/;"	f	class:tair::response_llen
set_meta	src\packets\llen_packet.hpp	/^    void set_meta (uint32_t config_version, uint32_t code)$/;"	f	class:tair::response_llen
set_version	src\packets\llen_packet.hpp	/^	void set_version(uint16_t version) {}$/;"	f	class:tair::response_llen
tair	src\packets\llen_packet.hpp	/^namespace tair$/;"	n
TAIR_PACKET_LOAD_AREA_PACKET_H	src\packets\load_area_packet.hpp	18;"	d
area	src\packets\load_area_packet.hpp	/^      int area;$/;"	m	class:tair::request_load_area
decode	src\packets\load_area_packet.hpp	/^      bool decode(tbnet::DataBuffer *input, tbnet::PacketHeader *header)$/;"	f	class:tair::request_load_area
encode	src\packets\load_area_packet.hpp	/^      bool encode(tbnet::DataBuffer *output)$/;"	f	class:tair::request_load_area
request_load_area	src\packets\load_area_packet.hpp	/^      request_load_area()$/;"	f	class:tair::request_load_area
request_load_area	src\packets\load_area_packet.hpp	/^      request_load_area(request_load_area &packet)$/;"	f	class:tair::request_load_area
request_load_area	src\packets\load_area_packet.hpp	/^   class request_load_area : public base_packet {$/;"	c	namespace:tair
tair	src\packets\load_area_packet.hpp	/^namespace tair {$/;"	n
~request_load_area	src\packets\load_area_packet.hpp	/^      ~request_load_area()$/;"	f	class:tair::request_load_area
RESPONSE_VALUES_MAXSIZE	src\packets\lrange_packet.hpp	91;"	d
TAIR_PACKET_LRANGE_PACKET_H	src\packets\lrange_packet.hpp	18;"	d
add_data	src\packets\lrange_packet.hpp	/^    void add_data (data_entry * data)$/;"	f	class:tair::response_lrange
alloc_free	src\packets\lrange_packet.hpp	/^    void alloc_free(int ifree)$/;"	f	class:tair::response_lrange
area	src\packets\lrange_packet.hpp	/^    uint16_t area;$/;"	m	class:tair::request_lrange
code	src\packets\lrange_packet.hpp	/^    int32_t code;$/;"	m	class:tair::response_lrange
config_version	src\packets\lrange_packet.hpp	/^    uint32_t config_version;$/;"	m	class:tair::response_lrange
decode	src\packets\lrange_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::request_lrange
decode	src\packets\lrange_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::response_lrange
encode	src\packets\lrange_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::request_lrange
encode	src\packets\lrange_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::response_lrange
end	src\packets\lrange_packet.hpp	/^    int32_t end;$/;"	m	class:tair::request_lrange
get_code	src\packets\lrange_packet.hpp	/^    int get_code()$/;"	f	class:tair::response_lrange
key	src\packets\lrange_packet.hpp	/^    data_entry key;$/;"	m	class:tair::request_lrange
request_lrange	src\packets\lrange_packet.hpp	/^    request_lrange ()$/;"	f	class:tair::request_lrange
request_lrange	src\packets\lrange_packet.hpp	/^    request_lrange (int pcode)$/;"	f	class:tair::request_lrange
request_lrange	src\packets\lrange_packet.hpp	/^    request_lrange (request_lrange & packet)$/;"	f	class:tair::request_lrange
request_lrange	src\packets\lrange_packet.hpp	/^  class request_lrange : public base_packet$/;"	c	namespace:tair
response_lrange	src\packets\lrange_packet.hpp	/^    response_lrange ()$/;"	f	class:tair::response_lrange
response_lrange	src\packets\lrange_packet.hpp	/^    response_lrange (int pcode)$/;"	f	class:tair::response_lrange
response_lrange	src\packets\lrange_packet.hpp	/^  class response_lrange : public base_packet$/;"	c	namespace:tair
set_meta	src\packets\lrange_packet.hpp	/^    void set_meta (uint32_t config_version, uint32_t code)$/;"	f	class:tair::response_lrange
set_version	src\packets\lrange_packet.hpp	/^    void set_version(uint16_t version)$/;"	f	class:tair::response_lrange
sfree	src\packets\lrange_packet.hpp	/^    bool sfree;$/;"	m	class:tair::response_lrange
start	src\packets\lrange_packet.hpp	/^    int32_t start;$/;"	m	class:tair::request_lrange
tair	src\packets\lrange_packet.hpp	/^namespace tair$/;"	n
values	src\packets\lrange_packet.hpp	/^    vector<data_entry*> values;$/;"	m	class:tair::response_lrange
version	src\packets\lrange_packet.hpp	/^    uint16_t version;$/;"	m	class:tair::response_lrange
~response_lrange	src\packets\lrange_packet.hpp	/^    ~response_lrange () {$/;"	f	class:tair::response_lrange
RESPONSE_VALUES_MAXSIZE	src\packets\lrem_packet.hpp	96;"	d
TAIR_PACKET_LREM_PACKET_H	src\packets\lrem_packet.hpp	18;"	d
area	src\packets\lrem_packet.hpp	/^    uint16_t area;$/;"	m	class:tair::request_lrem
code	src\packets\lrem_packet.hpp	/^    int32_t code;$/;"	m	class:tair::response_lrem
config_version	src\packets\lrem_packet.hpp	/^    uint32_t config_version;$/;"	m	class:tair::response_lrem
count	src\packets\lrem_packet.hpp	/^    int count;$/;"	m	class:tair::request_lrem
decode	src\packets\lrem_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::request_lrem
decode	src\packets\lrem_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::response_lrem
encode	src\packets\lrem_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::request_lrem
encode	src\packets\lrem_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::response_lrem
expire	src\packets\lrem_packet.hpp	/^    int expire;$/;"	m	class:tair::request_lrem
key	src\packets\lrem_packet.hpp	/^    data_entry key;$/;"	m	class:tair::request_lrem
request_lrem	src\packets\lrem_packet.hpp	/^    request_lrem ()$/;"	f	class:tair::request_lrem
request_lrem	src\packets\lrem_packet.hpp	/^    request_lrem (request_lrem & packet)$/;"	f	class:tair::request_lrem
request_lrem	src\packets\lrem_packet.hpp	/^  class request_lrem:public base_packet$/;"	c	namespace:tair
response_lrem	src\packets\lrem_packet.hpp	/^    response_lrem ()$/;"	f	class:tair::response_lrem
response_lrem	src\packets\lrem_packet.hpp	/^    response_lrem (int pcode)$/;"	f	class:tair::response_lrem
response_lrem	src\packets\lrem_packet.hpp	/^  class response_lrem:public base_packet$/;"	c	namespace:tair
retnum	src\packets\lrem_packet.hpp	/^    long long retnum;$/;"	m	class:tair::response_lrem
set_meta	src\packets\lrem_packet.hpp	/^    void set_meta (uint32_t config_version, uint32_t code)$/;"	f	class:tair::response_lrem
set_version	src\packets\lrem_packet.hpp	/^	void set_version(uint16_t version) {}$/;"	f	class:tair::response_lrem
tair	src\packets\lrem_packet.hpp	/^namespace tair$/;"	n
value	src\packets\lrem_packet.hpp	/^    data_entry value;$/;"	m	class:tair::request_lrem
version	src\packets\lrem_packet.hpp	/^    uint16_t version;$/;"	m	class:tair::request_lrem
RESPONSE_VALUES_MAXSIZE	src\packets\lrpop_packet.hpp	108;"	d
TAIR_PACKET_LPOP_PACKET_H	src\packets\lrpop_packet.hpp	18;"	d
add_data	src\packets\lrpop_packet.hpp	/^    void add_data(data_entry * data)$/;"	f	class:tair::response_lrpop
area	src\packets\lrpop_packet.hpp	/^    uint16_t area;$/;"	m	class:tair::request_lrpop
code	src\packets\lrpop_packet.hpp	/^    int32_t code;$/;"	m	class:tair::response_lrpop
config_version	src\packets\lrpop_packet.hpp	/^    uint32_t config_version;$/;"	m	class:tair::response_lrpop
count	src\packets\lrpop_packet.hpp	/^    int count;$/;"	m	class:tair::request_lrpop
decode	src\packets\lrpop_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::request_lrpop
decode	src\packets\lrpop_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::response_lrpop
encode	src\packets\lrpop_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::request_lrpop
encode	src\packets\lrpop_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::response_lrpop
expire	src\packets\lrpop_packet.hpp	/^    int32_t expire;$/;"	m	class:tair::request_lrpop
get_code	src\packets\lrpop_packet.hpp	/^    int get_code()$/;"	f	class:tair::response_lrpop
key	src\packets\lrpop_packet.hpp	/^    data_entry key;$/;"	m	class:tair::request_lrpop
request_lrpop	src\packets\lrpop_packet.hpp	/^    request_lrpop (LeftOrRight lr)$/;"	f	class:tair::request_lrpop
request_lrpop	src\packets\lrpop_packet.hpp	/^    request_lrpop (int pcode)$/;"	f	class:tair::request_lrpop
request_lrpop	src\packets\lrpop_packet.hpp	/^    request_lrpop (request_lrpop & packet)$/;"	f	class:tair::request_lrpop
request_lrpop	src\packets\lrpop_packet.hpp	/^  class request_lrpop:public base_packet$/;"	c	namespace:tair
response_lrpop	src\packets\lrpop_packet.hpp	/^    response_lrpop (LeftOrRight lr)$/;"	f	class:tair::response_lrpop
response_lrpop	src\packets\lrpop_packet.hpp	/^    response_lrpop (int pcode)$/;"	f	class:tair::response_lrpop
response_lrpop	src\packets\lrpop_packet.hpp	/^  class response_lrpop:public base_packet$/;"	c	namespace:tair
setCount	src\packets\lrpop_packet.hpp	/^    void setCount(int cnt)$/;"	f	class:tair::request_lrpop
set_meta	src\packets\lrpop_packet.hpp	/^    void set_meta (uint32_t config_version, uint32_t code)$/;"	f	class:tair::response_lrpop
set_version	src\packets\lrpop_packet.hpp	/^    void set_version(uint16_t version)$/;"	f	class:tair::response_lrpop
tair	src\packets\lrpop_packet.hpp	/^namespace tair$/;"	n
values	src\packets\lrpop_packet.hpp	/^    vector<data_entry *> values;$/;"	m	class:tair::response_lrpop
version	src\packets\lrpop_packet.hpp	/^    uint16_t version;$/;"	m	class:tair::request_lrpop
version	src\packets\lrpop_packet.hpp	/^    uint16_t version;$/;"	m	class:tair::response_lrpop
~response_lrpop	src\packets\lrpop_packet.hpp	/^    ~response_lrpop () {$/;"	f	class:tair::response_lrpop
TAIR_PACKET_LPUSH_PACKET_H	src\packets\lrpush_packet.hpp	18;"	d
addValue	src\packets\lrpush_packet.hpp	/^    void addValue(data_entry *value) {$/;"	f	class:tair::request_lrpush
addValue	src\packets\lrpush_packet.hpp	/^    void addValue(data_entry *value) {$/;"	f	class:tair::request_lrpush_limit
area	src\packets\lrpush_packet.hpp	/^    uint16_t area;$/;"	m	class:tair::request_lrpush
area	src\packets\lrpush_packet.hpp	/^    uint16_t area;$/;"	m	class:tair::request_lrpush_limit
clear_values	src\packets\lrpush_packet.hpp	/^    void clear_values ()$/;"	f	class:tair::request_lrpush
clear_values	src\packets\lrpush_packet.hpp	/^    void clear_values ()$/;"	f	class:tair::request_lrpush_limit
code	src\packets\lrpush_packet.hpp	/^    int32_t code;$/;"	m	class:tair::response_lrpush
config_version	src\packets\lrpush_packet.hpp	/^    uint32_t config_version;$/;"	m	class:tair::response_lrpush
decode	src\packets\lrpush_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::request_lrpush
decode	src\packets\lrpush_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::request_lrpush_limit
decode	src\packets\lrpush_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::response_lrpush
encode	src\packets\lrpush_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::request_lrpush
encode	src\packets\lrpush_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::request_lrpush_limit
encode	src\packets\lrpush_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::response_lrpush
expire	src\packets\lrpush_packet.hpp	/^    int expire;$/;"	m	class:tair::request_lrpush
expire	src\packets\lrpush_packet.hpp	/^    int expire;$/;"	m	class:tair::request_lrpush_limit
get_code	src\packets\lrpush_packet.hpp	/^    int get_code()$/;"	f	class:tair::response_lrpush
key	src\packets\lrpush_packet.hpp	/^    data_entry key;$/;"	m	class:tair::request_lrpush
key	src\packets\lrpush_packet.hpp	/^    data_entry key;$/;"	m	class:tair::request_lrpush_limit
list_len	src\packets\lrpush_packet.hpp	/^    uint32_t list_len;$/;"	m	class:tair::response_lrpush
max_count	src\packets\lrpush_packet.hpp	/^    int max_count;$/;"	m	class:tair::request_lrpush_limit
pushed_num	src\packets\lrpush_packet.hpp	/^    uint32_t pushed_num;$/;"	m	class:tair::response_lrpush
request_lrpush	src\packets\lrpush_packet.hpp	/^    request_lrpush (ExistOrNot en, LeftOrRight lr)$/;"	f	class:tair::request_lrpush
request_lrpush	src\packets\lrpush_packet.hpp	/^    request_lrpush (int pcode)$/;"	f	class:tair::request_lrpush
request_lrpush	src\packets\lrpush_packet.hpp	/^    request_lrpush (request_lrpush & packet)$/;"	f	class:tair::request_lrpush
request_lrpush	src\packets\lrpush_packet.hpp	/^  class request_lrpush:public base_packet$/;"	c	namespace:tair
request_lrpush_limit	src\packets\lrpush_packet.hpp	/^    request_lrpush_limit (ExistOrNot en, LeftOrRight lr)$/;"	f	class:tair::request_lrpush_limit
request_lrpush_limit	src\packets\lrpush_packet.hpp	/^    request_lrpush_limit (request_lrpush_limit & packet)$/;"	f	class:tair::request_lrpush_limit
request_lrpush_limit	src\packets\lrpush_packet.hpp	/^  class request_lrpush_limit:public request_lrpush$/;"	c	namespace:tair
response_lrpush	src\packets\lrpush_packet.hpp	/^    response_lrpush (ExistOrNot en, LeftOrRight lr)$/;"	f	class:tair::response_lrpush
response_lrpush	src\packets\lrpush_packet.hpp	/^    response_lrpush (int pcode)$/;"	f	class:tair::response_lrpush
response_lrpush	src\packets\lrpush_packet.hpp	/^  class response_lrpush:public base_packet$/;"	c	namespace:tair
set_meta	src\packets\lrpush_packet.hpp	/^    void set_meta (uint32_t config_version, uint32_t code)$/;"	f	class:tair::response_lrpush
set_version	src\packets\lrpush_packet.hpp	/^	void set_version(uint16_t version) {}$/;"	f	class:tair::response_lrpush
tair	src\packets\lrpush_packet.hpp	/^namespace tair$/;"	n
values	src\packets\lrpush_packet.hpp	/^    vector<data_entry *> values;$/;"	m	class:tair::request_lrpush
values	src\packets\lrpush_packet.hpp	/^    vector<data_entry *> values;$/;"	m	class:tair::request_lrpush_limit
version	src\packets\lrpush_packet.hpp	/^    uint16_t version;$/;"	m	class:tair::request_lrpush
version	src\packets\lrpush_packet.hpp	/^    uint16_t version;$/;"	m	class:tair::request_lrpush_limit
~request_lrpush	src\packets\lrpush_packet.hpp	/^    ~request_lrpush ()$/;"	f	class:tair::request_lrpush
~request_lrpush_limit	src\packets\lrpush_packet.hpp	/^    ~request_lrpush_limit ()$/;"	f	class:tair::request_lrpush_limit
TAIR_PACKET_LTRIM_PACKET_H	src\packets\ltrim_packet.hpp	18;"	d
area	src\packets\ltrim_packet.hpp	/^    uint16_t area;$/;"	m	class:tair::request_ltrim
code	src\packets\ltrim_packet.hpp	/^    int32_t code;$/;"	m	class:tair::response_ltrim
config_version	src\packets\ltrim_packet.hpp	/^    uint32_t config_version;$/;"	m	class:tair::response_ltrim
decode	src\packets\ltrim_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::request_ltrim
decode	src\packets\ltrim_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::response_ltrim
encode	src\packets\ltrim_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::request_ltrim
encode	src\packets\ltrim_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::response_ltrim
end	src\packets\ltrim_packet.hpp	/^    int32_t end;$/;"	m	class:tair::request_ltrim
expire	src\packets\ltrim_packet.hpp	/^    int32_t expire;$/;"	m	class:tair::request_ltrim
get_code	src\packets\ltrim_packet.hpp	/^    int get_code ()$/;"	f	class:tair::response_ltrim
key	src\packets\ltrim_packet.hpp	/^    data_entry key;$/;"	m	class:tair::request_ltrim
request_ltrim	src\packets\ltrim_packet.hpp	/^    request_ltrim ()$/;"	f	class:tair::request_ltrim
request_ltrim	src\packets\ltrim_packet.hpp	/^    request_ltrim (request_ltrim & packet)$/;"	f	class:tair::request_ltrim
request_ltrim	src\packets\ltrim_packet.hpp	/^  class request_ltrim:public base_packet$/;"	c	namespace:tair
response_ltrim	src\packets\ltrim_packet.hpp	/^    response_ltrim ()$/;"	f	class:tair::response_ltrim
response_ltrim	src\packets\ltrim_packet.hpp	/^  class response_ltrim:public base_packet$/;"	c	namespace:tair
set_code	src\packets\ltrim_packet.hpp	/^    void set_code (int cde)$/;"	f	class:tair::response_ltrim
set_meta	src\packets\ltrim_packet.hpp	/^    void set_meta (uint32_t config_version, uint32_t code)$/;"	f	class:tair::response_ltrim
set_version	src\packets\ltrim_packet.hpp	/^	void set_version(uint16_t version) {}$/;"	f	class:tair::response_ltrim
start	src\packets\ltrim_packet.hpp	/^    int32_t start;$/;"	m	class:tair::request_ltrim
tair	src\packets\ltrim_packet.hpp	/^namespace tair$/;"	n
version	src\packets\ltrim_packet.hpp	/^    uint16_t version;$/;"	m	class:tair::request_ltrim
~response_ltrim	src\packets\ltrim_packet.hpp	/^    ~response_ltrim () {}$/;"	f	class:tair::response_ltrim
TAIR_PACKET_MIG_FINISH_PACKET_H	src\packets\migrate_finish_packet.hpp	18;"	d
bucket_no	src\packets\migrate_finish_packet.hpp	/^      int bucket_no;$/;"	m	class:tair::request_migrate_finish
decode	src\packets\migrate_finish_packet.hpp	/^      bool decode(tbnet::DataBuffer *input, tbnet::PacketHeader *header)$/;"	f	class:tair::request_migrate_finish
encode	src\packets\migrate_finish_packet.hpp	/^      bool encode(tbnet::DataBuffer *output)$/;"	f	class:tair::request_migrate_finish
request_migrate_finish	src\packets\migrate_finish_packet.hpp	/^      request_migrate_finish() $/;"	f	class:tair::request_migrate_finish
request_migrate_finish	src\packets\migrate_finish_packet.hpp	/^      request_migrate_finish(request_migrate_finish &packet)$/;"	f	class:tair::request_migrate_finish
request_migrate_finish	src\packets\migrate_finish_packet.hpp	/^   class request_migrate_finish : public base_packet {$/;"	c	namespace:tair
server_id	src\packets\migrate_finish_packet.hpp	/^      uint64_t server_id;$/;"	m	class:tair::request_migrate_finish
tair	src\packets\migrate_finish_packet.hpp	/^namespace tair {$/;"	n
version	src\packets\migrate_finish_packet.hpp	/^      uint32_t version;$/;"	m	class:tair::request_migrate_finish
~request_migrate_finish	src\packets\migrate_finish_packet.hpp	/^      ~request_migrate_finish()$/;"	f	class:tair::request_migrate_finish
TAIR_PACKETS_MUPDATE_H	src\packets\mupdate_packet.hpp	19;"	d
add_del_key	src\packets\mupdate_packet.hpp	/^      bool add_del_key(const data_entry& key)$/;"	f	class:tair::request_mupdate
add_put_key_data	src\packets\mupdate_packet.hpp	/^      bool add_put_key_data(const data_entry &key, const data_entry &data) $/;"	f	class:tair::request_mupdate
count	src\packets\mupdate_packet.hpp	/^      uint32_t count;$/;"	m	class:tair::request_mupdate
decode	src\packets\mupdate_packet.hpp	/^      bool decode(tbnet::DataBuffer *input, tbnet::PacketHeader *header)$/;"	f	class:tair::request_mupdate
encode	src\packets\mupdate_packet.hpp	/^      bool encode(tbnet::DataBuffer *output)$/;"	f	class:tair::request_mupdate
key	src\packets\mupdate_packet.hpp	/^      data_entry *key;$/;"	m	class:tair::operation_record
key_and_values	src\packets\mupdate_packet.hpp	/^      tair_operc_vector  *key_and_values;$/;"	m	class:tair::request_mupdate
len	src\packets\mupdate_packet.hpp	/^      uint32_t len;$/;"	m	class:tair::request_mupdate
operation_record	src\packets\mupdate_packet.hpp	/^      operation_record (operation_record &rec)$/;"	f	class:tair::operation_record
operation_record	src\packets\mupdate_packet.hpp	/^      operation_record()$/;"	f	class:tair::operation_record
operation_record	src\packets\mupdate_packet.hpp	/^   class operation_record{$/;"	c	namespace:tair
operation_type	src\packets\mupdate_packet.hpp	/^      uint8_t operation_type;$/;"	m	class:tair::operation_record
request_mupdate	src\packets\mupdate_packet.hpp	/^      request_mupdate()$/;"	f	class:tair::request_mupdate
request_mupdate	src\packets\mupdate_packet.hpp	/^      request_mupdate(request_mupdate &packet)$/;"	f	class:tair::request_mupdate
request_mupdate	src\packets\mupdate_packet.hpp	/^   class request_mupdate : public base_packet {$/;"	c	namespace:tair
tair	src\packets\mupdate_packet.hpp	/^namespace tair {$/;"	n
tair_operc_vector	src\packets\mupdate_packet.hpp	/^   typedef vector<operation_record *> tair_operc_vector;$/;"	t	namespace:tair
value	src\packets\mupdate_packet.hpp	/^      data_entry *value;$/;"	m	class:tair::operation_record
~operation_record	src\packets\mupdate_packet.hpp	/^      ~operation_record()$/;"	f	class:tair::operation_record
~request_mupdate	src\packets\mupdate_packet.hpp	/^      ~request_mupdate()$/;"	f	class:tair::request_mupdate
_createPacket	src\packets\packet_factory.cpp	/^   tbnet::Packet *tair_packet_factory::_createPacket(int pcode)$/;"	f	class:tair::tair_packet_factory
createPacket	src\packets\packet_factory.cpp	/^   tbnet::Packet *tair_packet_factory::createPacket(int pcode) {$/;"	f	class:tair::tair_packet_factory
set_return_packet	src\packets\packet_factory.cpp	/^   int tair_packet_factory::set_return_packet(base_packet *packet, int code,const char *msg, uint32_t version)$/;"	f	class:tair::tair_packet_factory
tair	src\packets\packet_factory.cpp	/^namespace tair {$/;"	n	file:
~tair_packet_factory	src\packets\packet_factory.cpp	/^   tair_packet_factory::~tair_packet_factory()$/;"	f	class:tair::tair_packet_factory
TAIR_PACKET_FACTORY_H	src\packets\packet_factory.hpp	18;"	d
tair	src\packets\packet_factory.hpp	/^namespace tair {$/;"	n
tair_packet_factory	src\packets\packet_factory.hpp	/^      tair_packet_factory() {$/;"	f	class:tair::tair_packet_factory
tair_packet_factory	src\packets\packet_factory.hpp	/^   class tair_packet_factory : public tbnet::IPacketFactory {$/;"	c	namespace:tair
TAIR_PACKET_PERSIST_PACKET_H	src\packets\persist_packet.hpp	18;"	d
area	src\packets\persist_packet.hpp	/^    uint16_t area;$/;"	m	class:tair::request_persist
code	src\packets\persist_packet.hpp	/^    int32_t code;$/;"	m	class:tair::response_persist
config_version	src\packets\persist_packet.hpp	/^    uint32_t config_version;$/;"	m	class:tair::response_persist
decode	src\packets\persist_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::request_persist
decode	src\packets\persist_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::response_persist
encode	src\packets\persist_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::request_persist
encode	src\packets\persist_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::response_persist
get_code	src\packets\persist_packet.hpp	/^    int get_code ()$/;"	f	class:tair::response_persist
key	src\packets\persist_packet.hpp	/^    data_entry key;$/;"	m	class:tair::request_persist
request_persist	src\packets\persist_packet.hpp	/^    request_persist ()$/;"	f	class:tair::request_persist
request_persist	src\packets\persist_packet.hpp	/^    request_persist (request_persist & packet)$/;"	f	class:tair::request_persist
request_persist	src\packets\persist_packet.hpp	/^  class request_persist:public base_packet$/;"	c	namespace:tair
response_persist	src\packets\persist_packet.hpp	/^    response_persist ()$/;"	f	class:tair::response_persist
response_persist	src\packets\persist_packet.hpp	/^  class response_persist:public base_packet$/;"	c	namespace:tair
set_code	src\packets\persist_packet.hpp	/^    void set_code (int cde)$/;"	f	class:tair::response_persist
set_meta	src\packets\persist_packet.hpp	/^    void set_meta (uint32_t config_version, uint32_t code)$/;"	f	class:tair::response_persist
set_version	src\packets\persist_packet.hpp	/^	void set_version(uint16_t version) {}$/;"	f	class:tair::response_persist
tair	src\packets\persist_packet.hpp	/^namespace tair$/;"	n
TAIR_PACKET_PING_PACKET_H	src\packets\ping_packet.hpp	18;"	d
config_version	src\packets\ping_packet.hpp	/^      uint32_t            config_version;$/;"	m	class:tair::request_ping
decode	src\packets\ping_packet.hpp	/^      bool decode(tbnet::DataBuffer *input, tbnet::PacketHeader *header)$/;"	f	class:tair::request_ping
encode	src\packets\ping_packet.hpp	/^      bool encode(tbnet::DataBuffer *output)$/;"	f	class:tair::request_ping
request_ping	src\packets\ping_packet.hpp	/^      request_ping()$/;"	f	class:tair::request_ping
request_ping	src\packets\ping_packet.hpp	/^      request_ping(request_ping &packet)$/;"	f	class:tair::request_ping
request_ping	src\packets\ping_packet.hpp	/^   class request_ping : public base_packet {$/;"	c	namespace:tair
tair	src\packets\ping_packet.hpp	/^namespace tair {$/;"	n
value	src\packets\ping_packet.hpp	/^      int                 value;$/;"	m	class:tair::request_ping
~request_ping	src\packets\ping_packet.hpp	/^      ~request_ping()$/;"	f	class:tair::request_ping
TAIR_PACKET_PUT_PACKET_H	src\packets\put_packet.hpp	18;"	d
area	src\packets\put_packet.hpp	/^      uint16_t        area;$/;"	m	class:tair::request_put
data	src\packets\put_packet.hpp	/^      data_entry    data;$/;"	m	class:tair::request_put
decode	src\packets\put_packet.hpp	/^      bool decode(tbnet::DataBuffer *input, tbnet::PacketHeader *header)$/;"	f	class:tair::request_put
encode	src\packets\put_packet.hpp	/^      bool encode(tbnet::DataBuffer *output)$/;"	f	class:tair::request_put
expired	src\packets\put_packet.hpp	/^      int32_t         expired;$/;"	m	class:tair::request_put
key	src\packets\put_packet.hpp	/^      data_entry    key;$/;"	m	class:tair::request_put
request_put	src\packets\put_packet.hpp	/^      request_put()$/;"	f	class:tair::request_put
request_put	src\packets\put_packet.hpp	/^      request_put(request_put &packet)$/;"	f	class:tair::request_put
request_put	src\packets\put_packet.hpp	/^   class request_put : public base_packet {$/;"	c	namespace:tair
request_putnx	src\packets\put_packet.hpp	/^      request_putnx()$/;"	f	class:tair::request_putnx
request_putnx	src\packets\put_packet.hpp	/^      request_putnx(request_putnx &packet)$/;"	f	class:tair::request_putnx
request_putnx	src\packets\put_packet.hpp	/^   class request_putnx : public request_put {$/;"	c	namespace:tair
tair	src\packets\put_packet.hpp	/^namespace tair {$/;"	n
version	src\packets\put_packet.hpp	/^      uint16_t        version;$/;"	m	class:tair::request_put
~request_put	src\packets\put_packet.hpp	/^      ~request_put()$/;"	f	class:tair::request_put
Q_AREA_CAPACITY	src\packets\query_info_packet.hpp	/^         Q_AREA_CAPACITY = 1,$/;"	e	enum:tair::request_query_info::__anon21
Q_DATA_SEVER_INFO	src\packets\query_info_packet.hpp	/^         Q_DATA_SEVER_INFO,$/;"	e	enum:tair::request_query_info::__anon21
Q_GROUP_INFO	src\packets\query_info_packet.hpp	/^         Q_GROUP_INFO,$/;"	e	enum:tair::request_query_info::__anon21
Q_MIG_INFO	src\packets\query_info_packet.hpp	/^         Q_MIG_INFO,$/;"	e	enum:tair::request_query_info::__anon21
Q_STAT_INFO	src\packets\query_info_packet.hpp	/^         Q_STAT_INFO,$/;"	e	enum:tair::request_query_info::__anon21
TAIR_PACKET_QUERY_INFO_PACKET_H	src\packets\query_info_packet.hpp	18;"	d
decode	src\packets\query_info_packet.hpp	/^      bool decode(tbnet::DataBuffer *input, tbnet::PacketHeader *header)$/;"	f	class:tair::request_query_info
decode	src\packets\query_info_packet.hpp	/^      bool decode(tbnet::DataBuffer *input, tbnet::PacketHeader *header)$/;"	f	class:tair::response_query_info
encode	src\packets\query_info_packet.hpp	/^      bool encode(tbnet::DataBuffer *output)$/;"	f	class:tair::request_query_info
encode	src\packets\query_info_packet.hpp	/^      bool encode(tbnet::DataBuffer *output)$/;"	f	class:tair::response_query_info
group_name	src\packets\query_info_packet.hpp	/^      string     group_name;$/;"	m	class:tair::request_query_info
map_k_v	src\packets\query_info_packet.hpp	/^      map<string, string> map_k_v;$/;"	m	class:tair::response_query_info
query_type	src\packets\query_info_packet.hpp	/^      uint32_t   query_type;$/;"	m	class:tair::request_query_info
request_query_info	src\packets\query_info_packet.hpp	/^      request_query_info()$/;"	f	class:tair::request_query_info
request_query_info	src\packets\query_info_packet.hpp	/^   class request_query_info : public base_packet {$/;"	c	namespace:tair
response_query_info	src\packets\query_info_packet.hpp	/^      response_query_info()$/;"	f	class:tair::response_query_info
response_query_info	src\packets\query_info_packet.hpp	/^   class response_query_info : public base_packet {$/;"	c	namespace:tair
server_id	src\packets\query_info_packet.hpp	/^      uint64_t   server_id;$/;"	m	class:tair::request_query_info
tair	src\packets\query_info_packet.hpp	/^namespace tair {$/;"	n
~request_query_info	src\packets\query_info_packet.hpp	/^      ~request_query_info()$/;"	f	class:tair::request_query_info
TAIR_PACKET_REMOVE_AREA_PACKET_H	src\packets\remove_area_packet.hpp	18;"	d
area	src\packets\remove_area_packet.hpp	/^      int                 area;$/;"	m	class:tair::request_remove_area
decode	src\packets\remove_area_packet.hpp	/^      bool decode(tbnet::DataBuffer *input, tbnet::PacketHeader *header)$/;"	f	class:tair::request_remove_area
encode	src\packets\remove_area_packet.hpp	/^      bool encode(tbnet::DataBuffer *output)$/;"	f	class:tair::request_remove_area
request_remove_area	src\packets\remove_area_packet.hpp	/^      request_remove_area()$/;"	f	class:tair::request_remove_area
request_remove_area	src\packets\remove_area_packet.hpp	/^      request_remove_area(request_remove_area &packet)$/;"	f	class:tair::request_remove_area
request_remove_area	src\packets\remove_area_packet.hpp	/^   class request_remove_area : public base_packet {$/;"	c	namespace:tair
tair	src\packets\remove_area_packet.hpp	/^namespace tair {$/;"	n
~request_remove_area	src\packets\remove_area_packet.hpp	/^      ~request_remove_area()$/;"	f	class:tair::request_remove_area
TAIR_PACKET_REMOVE_PACKET_H	src\packets\remove_packet.hpp	18;"	d
encode	src\packets\remove_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::request_remove
request_remove	src\packets\remove_packet.hpp	/^    request_remove ():request_get ()$/;"	f	class:tair::request_remove
request_remove	src\packets\remove_packet.hpp	/^    request_remove (request_remove & packet):request_get (packet)$/;"	f	class:tair::request_remove
request_remove	src\packets\remove_packet.hpp	/^    request_remove (uint16_t area, data_entry* key) :$/;"	f	class:tair::request_remove
request_remove	src\packets\remove_packet.hpp	/^  class request_remove:public request_get$/;"	c	namespace:tair
tair	src\packets\remove_packet.hpp	/^namespace tair$/;"	n
TAIR_PACKET_REMOVE_FILTER_PACKET_H	src\packets\removefilter_packet.hpp	18;"	d
request_removefilter	src\packets\removefilter_packet.hpp	/^      request_removefilter() : request_addfilter()$/;"	f	class:tair::request_removefilter
request_removefilter	src\packets\removefilter_packet.hpp	/^      request_removefilter(request_removefilter &packet)$/;"	f	class:tair::request_removefilter
request_removefilter	src\packets\removefilter_packet.hpp	/^   class request_removefilter : public request_addfilter {$/;"	c	namespace:tair
tair	src\packets\removefilter_packet.hpp	/^namespace tair {$/;"	n
~request_removefilter	src\packets\removefilter_packet.hpp	/^      ~request_removefilter()$/;"	f	class:tair::request_removefilter
TAIR_PACKET_RESPONSE_RETURN_PACKET_H	src\packets\response_return_packet.hpp	18;"	d
code	src\packets\response_return_packet.hpp	/^      int code;$/;"	m	class:tair::response_return
config_version	src\packets\response_return_packet.hpp	/^      uint32_t config_version;$/;"	m	class:tair::response_return
decode	src\packets\response_return_packet.hpp	/^      bool decode(tbnet::DataBuffer *input, tbnet::PacketHeader *header)$/;"	f	class:tair::response_return
encode	src\packets\response_return_packet.hpp	/^      bool encode(tbnet::DataBuffer *output)$/;"	f	class:tair::response_return
get_code	src\packets\response_return_packet.hpp	/^      int get_code()$/;"	f	class:tair::response_return
get_message	src\packets\response_return_packet.hpp	/^      char *get_message()$/;"	f	class:tair::response_return
msg	src\packets\response_return_packet.hpp	/^      char msg[128];$/;"	m	class:tair::response_return
response_return	src\packets\response_return_packet.hpp	/^      response_return()$/;"	f	class:tair::response_return
response_return	src\packets\response_return_packet.hpp	/^      response_return(int chid, int code, const char *msg)$/;"	f	class:tair::response_return
response_return	src\packets\response_return_packet.hpp	/^   class response_return : public base_packet {$/;"	c	namespace:tair
set_code	src\packets\response_return_packet.hpp	/^      void set_code(int code)$/;"	f	class:tair::response_return
set_message	src\packets\response_return_packet.hpp	/^      void set_message(const char *msg)$/;"	f	class:tair::response_return
tair	src\packets\response_return_packet.hpp	/^namespace tair {$/;"	n
~response_return	src\packets\response_return_packet.hpp	/^      ~response_return()$/;"	f	class:tair::response_return
TAIR_PACKET_SADD_PACKET_H	src\packets\sadd_packet.hpp	18;"	d
area	src\packets\sadd_packet.hpp	/^    uint16_t area;$/;"	m	class:tair::request_sadd
area	src\packets\sadd_packet.hpp	/^    uint16_t area;$/;"	m	class:tair::request_sadd_multi
code	src\packets\sadd_packet.hpp	/^    int32_t code;$/;"	m	class:tair::response_sadd
config_version	src\packets\sadd_packet.hpp	/^    uint32_t config_version;$/;"	m	class:tair::response_sadd
decode	src\packets\sadd_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::response_sadd
decode	src\packets\sadd_packet.hpp	/^    bool decode(tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::request_sadd
decode	src\packets\sadd_packet.hpp	/^    bool decode(tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::request_sadd_multi
encode	src\packets\sadd_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::response_sadd
encode	src\packets\sadd_packet.hpp	/^    bool encode(tbnet::DataBuffer * output)$/;"	f	class:tair::request_sadd
encode	src\packets\sadd_packet.hpp	/^    bool encode(tbnet::DataBuffer * output)$/;"	f	class:tair::request_sadd_multi
expire	src\packets\sadd_packet.hpp	/^    int32_t expire;$/;"	m	class:tair::request_sadd
expire	src\packets\sadd_packet.hpp	/^    int32_t expire;$/;"	m	class:tair::request_sadd_multi
get_code	src\packets\sadd_packet.hpp	/^    int get_code ()$/;"	f	class:tair::response_sadd
get_random_key	src\packets\sadd_packet.hpp	/^    const data_entry* get_random_key()$/;"	f	class:tair::request_sadd_multi
key	src\packets\sadd_packet.hpp	/^    data_entry key;$/;"	m	class:tair::request_sadd
keys_values_map	src\packets\sadd_packet.hpp	/^    map<data_entry*, vector<data_entry*>* > keys_values_map;$/;"	m	class:tair::request_sadd_multi
request_sadd	src\packets\sadd_packet.hpp	/^    request_sadd()$/;"	f	class:tair::request_sadd
request_sadd	src\packets\sadd_packet.hpp	/^    request_sadd(const uint16_t iarea, const uint16_t iversion,$/;"	f	class:tair::request_sadd
request_sadd	src\packets\sadd_packet.hpp	/^    request_sadd(request_sadd & packet)$/;"	f	class:tair::request_sadd
request_sadd	src\packets\sadd_packet.hpp	/^  class request_sadd:public base_packet$/;"	c	namespace:tair
request_sadd_multi	src\packets\sadd_packet.hpp	/^    request_sadd_multi() {$/;"	f	class:tair::request_sadd_multi
request_sadd_multi	src\packets\sadd_packet.hpp	/^    request_sadd_multi(const uint16_t iarea, const int32_t iexpire,$/;"	f	class:tair::request_sadd_multi
request_sadd_multi	src\packets\sadd_packet.hpp	/^    request_sadd_multi(request_sadd_multi & packet)$/;"	f	class:tair::request_sadd_multi
request_sadd_multi	src\packets\sadd_packet.hpp	/^  class request_sadd_multi:public base_packet$/;"	c	namespace:tair
response_sadd	src\packets\sadd_packet.hpp	/^    response_sadd ()$/;"	f	class:tair::response_sadd
response_sadd	src\packets\sadd_packet.hpp	/^  class response_sadd:public base_packet$/;"	c	namespace:tair
set_code	src\packets\sadd_packet.hpp	/^    void set_code (int cde)$/;"	f	class:tair::response_sadd
set_meta	src\packets\sadd_packet.hpp	/^    void set_meta (uint32_t config_version, uint32_t code)$/;"	f	class:tair::response_sadd
set_version	src\packets\sadd_packet.hpp	/^	void set_version(uint16_t version) {}$/;"	f	class:tair::response_sadd
sfree	src\packets\sadd_packet.hpp	/^    int sfree;$/;"	m	class:tair::request_sadd_multi
tair	src\packets\sadd_packet.hpp	/^namespace tair$/;"	n
value	src\packets\sadd_packet.hpp	/^    data_entry value;$/;"	m	class:tair::request_sadd
version	src\packets\sadd_packet.hpp	/^    uint16_t version;$/;"	m	class:tair::request_sadd
~request_sadd_multi	src\packets\sadd_packet.hpp	/^    ~request_sadd_multi()$/;"	f	class:tair::request_sadd_multi
TAIR_PACKET_SCARD_PACKET_H	src\packets\scard_packet.hpp	18;"	d
area	src\packets\scard_packet.hpp	/^    uint16_t area;$/;"	m	class:tair::request_scard
code	src\packets\scard_packet.hpp	/^    int32_t code;$/;"	m	class:tair::response_scard
config_version	src\packets\scard_packet.hpp	/^    uint32_t config_version;$/;"	m	class:tair::response_scard
decode	src\packets\scard_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::request_scard
decode	src\packets\scard_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::response_scard
encode	src\packets\scard_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::request_scard
encode	src\packets\scard_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::response_scard
get_code	src\packets\scard_packet.hpp	/^    int get_code ()$/;"	f	class:tair::response_scard
key	src\packets\scard_packet.hpp	/^    data_entry key;$/;"	m	class:tair::request_scard
request_scard	src\packets\scard_packet.hpp	/^    request_scard ()$/;"	f	class:tair::request_scard
request_scard	src\packets\scard_packet.hpp	/^    request_scard (request_scard & packet)$/;"	f	class:tair::request_scard
request_scard	src\packets\scard_packet.hpp	/^  class request_scard:public base_packet$/;"	c	namespace:tair
response_scard	src\packets\scard_packet.hpp	/^    response_scard ()$/;"	f	class:tair::response_scard
response_scard	src\packets\scard_packet.hpp	/^  class response_scard:public base_packet$/;"	c	namespace:tair
retnum	src\packets\scard_packet.hpp	/^    long long retnum;$/;"	m	class:tair::response_scard
set_code	src\packets\scard_packet.hpp	/^    void set_code (int cde)$/;"	f	class:tair::response_scard
set_meta	src\packets\scard_packet.hpp	/^    void set_meta (uint32_t config_version, uint32_t code)$/;"	f	class:tair::response_scard
set_version	src\packets\scard_packet.hpp	/^	void set_version(uint16_t version) {}$/;"	f	class:tair::response_scard
tair	src\packets\scard_packet.hpp	/^namespace tair$/;"	n
TAIR_SERVER_HASH_TABLE_H	src\packets\server_hash_table_packet.hpp	18;"	d
get_hash_table_size	src\packets\server_hash_table_packet.hpp	/^      int get_hash_table_size() const $/;"	f	class:tair::server_hash_table_packet
get_server_list	src\packets\server_hash_table_packet.hpp	/^      uint64_t *get_server_list(int bucket_count, int copy_count)$/;"	f	class:tair::server_hash_table_packet
hash_table_data	src\packets\server_hash_table_packet.hpp	/^      char *hash_table_data;$/;"	m	class:tair::server_hash_table_packet
hash_table_size	src\packets\server_hash_table_packet.hpp	/^      int hash_table_size;$/;"	m	class:tair::server_hash_table_packet
server_hash_table_packet	src\packets\server_hash_table_packet.hpp	/^      server_hash_table_packet()$/;"	f	class:tair::server_hash_table_packet
server_hash_table_packet	src\packets\server_hash_table_packet.hpp	/^   class server_hash_table_packet {$/;"	c	namespace:tair
server_list	src\packets\server_hash_table_packet.hpp	/^      uint64_t *server_list;$/;"	m	class:tair::server_hash_table_packet
server_list_count	src\packets\server_hash_table_packet.hpp	/^      int server_list_count;$/;"	m	class:tair::server_hash_table_packet
set_hash_table	src\packets\server_hash_table_packet.hpp	/^      void set_hash_table(const char *data_h, int size_h)$/;"	f	class:tair::server_hash_table_packet
tair	src\packets\server_hash_table_packet.hpp	/^namespace tair{$/;"	n
~server_hash_table_packet	src\packets\server_hash_table_packet.hpp	/^      ~server_hash_table_packet()$/;"	f	class:tair::server_hash_table_packet
TAIR_PACKET_SET_MASTER_PACKET_H	src\packets\set_master_packet.hpp	18;"	d
request_set_master	src\packets\set_master_packet.hpp	/^      request_set_master() : request_ping()$/;"	f	class:tair::request_set_master
request_set_master	src\packets\set_master_packet.hpp	/^   class request_set_master : public request_ping {$/;"	c	namespace:tair
tair	src\packets\set_master_packet.hpp	/^namespace tair {$/;"	n
TAIR_PACKET_SET_NS_ATTR_PACKET_H	src\packets\set_ns_attr_packet.hpp	2;"	d
area	src\packets\set_ns_attr_packet.hpp	/^    uint16_t area;$/;"	m	class:tair::request_set_ns_attr
attr	src\packets\set_ns_attr_packet.hpp	/^    char* attr;$/;"	m	class:tair::request_set_ns_attr
attr_len	src\packets\set_ns_attr_packet.hpp	/^    int attr_len;$/;"	m	class:tair::request_set_ns_attr
decode	src\packets\set_ns_attr_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::request_set_ns_attr
encode	src\packets\set_ns_attr_packet.hpp	/^    bool encode(tbnet::DataBuffer * output)$/;"	f	class:tair::request_set_ns_attr
key	src\packets\set_ns_attr_packet.hpp	/^    data_entry key;$/;"	m	class:tair::request_set_ns_attr
request_set_ns_attr	src\packets\set_ns_attr_packet.hpp	/^    request_set_ns_attr()$/;"	f	class:tair::request_set_ns_attr
request_set_ns_attr	src\packets\set_ns_attr_packet.hpp	/^    request_set_ns_attr(request_set_ns_attr & packet)$/;"	f	class:tair::request_set_ns_attr
request_set_ns_attr	src\packets\set_ns_attr_packet.hpp	/^  class request_set_ns_attr:public base_packet$/;"	c	namespace:tair
tair	src\packets\set_ns_attr_packet.hpp	/^namespace tair$/;"	n
value	src\packets\set_ns_attr_packet.hpp	/^    char* value;$/;"	m	class:tair::request_set_ns_attr
value_len	src\packets\set_ns_attr_packet.hpp	/^    int value_len;$/;"	m	class:tair::request_set_ns_attr
~request_set_ns_attr	src\packets\set_ns_attr_packet.hpp	/^    ~request_set_ns_attr()$/;"	f	class:tair::request_set_ns_attr
TAIR_PACKET_RESPONSE_SIMPLE_PACKET_H	src\packets\simple_return_packet.hpp	18;"	d
buff	src\packets\simple_return_packet.hpp	/^    char* buff;$/;"	m	class:tair::response_simple_packet
buff_len	src\packets\simple_return_packet.hpp	/^    int buff_len;$/;"	m	class:tair::response_simple_packet
code	src\packets\simple_return_packet.hpp	/^    int32_t code;$/;"	m	class:tair::response_simple_packet
config_version	src\packets\simple_return_packet.hpp	/^    uint32_t config_version;$/;"	m	class:tair::response_simple_packet
decode	src\packets\simple_return_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::response_simple_packet
encode	src\packets\simple_return_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::response_simple_packet
get_code	src\packets\simple_return_packet.hpp	/^    int get_code ()$/;"	f	class:tair::response_simple_packet
response_simple_packet	src\packets\simple_return_packet.hpp	/^    response_simple_packet ()$/;"	f	class:tair::response_simple_packet
response_simple_packet	src\packets\simple_return_packet.hpp	/^  class response_simple_packet:public base_packet$/;"	c	namespace:tair
set_code	src\packets\simple_return_packet.hpp	/^    void set_code (int cde)$/;"	f	class:tair::response_simple_packet
set_data	src\packets\simple_return_packet.hpp	/^    void set_data(char* data, const int data_len)$/;"	f	class:tair::response_simple_packet
set_meta	src\packets\simple_return_packet.hpp	/^    void set_meta (uint32_t config_version, uint32_t code)$/;"	f	class:tair::response_simple_packet
set_version	src\packets\simple_return_packet.hpp	/^    void set_version (uint16_t ver)$/;"	f	class:tair::response_simple_packet
tair	src\packets\simple_return_packet.hpp	/^namespace tair {$/;"	n
version	src\packets\simple_return_packet.hpp	/^    uint16_t version;$/;"	m	class:tair::response_simple_packet
~response_simple_packet	src\packets\simple_return_packet.hpp	/^    ~response_simple_packet ()$/;"	f	class:tair::response_simple_packet
RESPONSE_VALUES_MAXSIZE	src\packets\smembers_packet.hpp	136;"	d
TAIR_PACKET_SMEMBERS_PACKET_H	src\packets\smembers_packet.hpp	18;"	d
add_data	src\packets\smembers_packet.hpp	/^    void add_data(data_entry *data)$/;"	f	class:tair::response_smembers
add_version_values_pair	src\packets\smembers_packet.hpp	/^    bool add_version_values_pair(uint16_t version, vector<data_entry*>* values)$/;"	f	class:tair::response_smembers_multi
alloc_free	src\packets\smembers_packet.hpp	/^    void alloc_free(bool ifree)$/;"	f	class:tair::response_smembers_multi
alloc_free	src\packets\smembers_packet.hpp	/^    void alloc_free(int ifree)$/;"	f	class:tair::response_smembers
area	src\packets\smembers_packet.hpp	/^    uint16_t area;$/;"	m	class:tair::request_smembers
area	src\packets\smembers_packet.hpp	/^    uint16_t area;$/;"	m	class:tair::request_smembers_multi
code	src\packets\smembers_packet.hpp	/^    int32_t code;$/;"	m	class:tair::response_smembers_multi
code	src\packets\smembers_packet.hpp	/^    uint32_t code;$/;"	m	class:tair::response_smembers
config_version	src\packets\smembers_packet.hpp	/^    uint32_t config_version;$/;"	m	class:tair::response_smembers
config_version	src\packets\smembers_packet.hpp	/^    uint32_t config_version;$/;"	m	class:tair::response_smembers_multi
decode	src\packets\smembers_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::response_smembers
decode	src\packets\smembers_packet.hpp	/^    bool decode(tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::response_smembers_multi
decode	src\packets\smembers_packet.hpp	/^    bool decode(tbnet::DataBuffer *input, tbnet::PacketHeader *header)$/;"	f	class:tair::request_smembers
decode	src\packets\smembers_packet.hpp	/^    bool decode(tbnet::DataBuffer *input, tbnet::PacketHeader *header)$/;"	f	class:tair::request_smembers_multi
encode	src\packets\smembers_packet.hpp	/^    bool encode(tbnet::DataBuffer * output)$/;"	f	class:tair::request_smembers
encode	src\packets\smembers_packet.hpp	/^    bool encode(tbnet::DataBuffer * output)$/;"	f	class:tair::response_smembers
encode	src\packets\smembers_packet.hpp	/^    bool encode(tbnet::DataBuffer * output)$/;"	f	class:tair::response_smembers_multi
encode	src\packets\smembers_packet.hpp	/^    bool encode(tbnet::DataBuffer *output)$/;"	f	class:tair::request_smembers_multi
get_code	src\packets\smembers_packet.hpp	/^    int get_code()$/;"	f	class:tair::response_smembers
get_code	src\packets\smembers_packet.hpp	/^    int get_code()$/;"	f	class:tair::response_smembers_multi
get_version	src\packets\smembers_packet.hpp	/^    uint16_t get_version() {return 0;}$/;"	f	class:tair::response_smembers_multi
key	src\packets\smembers_packet.hpp	/^    data_entry key;$/;"	m	class:tair::request_smembers
keys	src\packets\smembers_packet.hpp	/^    vector<data_entry*> keys;$/;"	m	class:tair::request_smembers_multi
request_smembers	src\packets\smembers_packet.hpp	/^    request_smembers()$/;"	f	class:tair::request_smembers
request_smembers	src\packets\smembers_packet.hpp	/^    request_smembers(const uint16_t iarea, const data_entry &ikey)$/;"	f	class:tair::request_smembers
request_smembers	src\packets\smembers_packet.hpp	/^    request_smembers(request_smembers & packet)$/;"	f	class:tair::request_smembers
request_smembers	src\packets\smembers_packet.hpp	/^  class request_smembers:public base_packet$/;"	c	namespace:tair
request_smembers_multi	src\packets\smembers_packet.hpp	/^    request_smembers_multi()$/;"	f	class:tair::request_smembers_multi
request_smembers_multi	src\packets\smembers_packet.hpp	/^    request_smembers_multi(const uint16_t iarea,$/;"	f	class:tair::request_smembers_multi
request_smembers_multi	src\packets\smembers_packet.hpp	/^    request_smembers_multi(request_smembers_multi &packet)$/;"	f	class:tair::request_smembers_multi
request_smembers_multi	src\packets\smembers_packet.hpp	/^  class request_smembers_multi:public base_packet$/;"	c	namespace:tair
response_smembers	src\packets\smembers_packet.hpp	/^    response_smembers ()$/;"	f	class:tair::response_smembers
response_smembers	src\packets\smembers_packet.hpp	/^  class response_smembers:public base_packet$/;"	c	namespace:tair
response_smembers_multi	src\packets\smembers_packet.hpp	/^    response_smembers_multi()$/;"	f	class:tair::response_smembers_multi
response_smembers_multi	src\packets\smembers_packet.hpp	/^  class response_smembers_multi:public base_packet$/;"	c	namespace:tair
set_meta	src\packets\smembers_packet.hpp	/^    void set_meta(uint32_t config_version, uint32_t code)$/;"	f	class:tair::response_smembers
set_meta	src\packets\smembers_packet.hpp	/^    void set_meta(uint32_t config_version, uint32_t code)$/;"	f	class:tair::response_smembers_multi
set_version	src\packets\smembers_packet.hpp	/^    void set_version(uint16_t version) {}$/;"	f	class:tair::response_smembers_multi
set_version	src\packets\smembers_packet.hpp	/^    void set_version(uint16_t version)$/;"	f	class:tair::response_smembers
sfree	src\packets\smembers_packet.hpp	/^    int sfree;$/;"	m	class:tair::request_smembers_multi
sfree	src\packets\smembers_packet.hpp	/^    int sfree;$/;"	m	class:tair::response_smembers
sfree	src\packets\smembers_packet.hpp	/^    int sfree;$/;"	m	class:tair::response_smembers_multi
tair	src\packets\smembers_packet.hpp	/^namespace tair$/;"	n
value_num	src\packets\smembers_packet.hpp	/^    int value_num;$/;"	m	class:tair::response_smembers_multi
values	src\packets\smembers_packet.hpp	/^    vector<data_entry *> values;$/;"	m	class:tair::response_smembers
values_version_vec	src\packets\smembers_packet.hpp	/^    vector<pair<uint16_t, vector<data_entry*>*>* > values_version_vec;$/;"	m	class:tair::response_smembers_multi
version	src\packets\smembers_packet.hpp	/^    uint16_t version;$/;"	m	class:tair::response_smembers
~request_smembers_multi	src\packets\smembers_packet.hpp	/^    ~request_smembers_multi()$/;"	f	class:tair::request_smembers_multi
~response_smembers	src\packets\smembers_packet.hpp	/^    ~response_smembers () {$/;"	f	class:tair::response_smembers
~response_smembers_multi	src\packets\smembers_packet.hpp	/^    ~response_smembers_multi()$/;"	f	class:tair::response_smembers_multi
TAIR_PACKET_SPOP_PACKET_H	src\packets\spop_packet.hpp	18;"	d
area	src\packets\spop_packet.hpp	/^    uint16_t area;$/;"	m	class:tair::request_spop
code	src\packets\spop_packet.hpp	/^    int32_t code;$/;"	m	class:tair::response_spop
config_version	src\packets\spop_packet.hpp	/^    uint32_t config_version;$/;"	m	class:tair::response_spop
decode	src\packets\spop_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::request_spop
decode	src\packets\spop_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::response_spop
encode	src\packets\spop_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::request_spop
encode	src\packets\spop_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::response_spop
expire	src\packets\spop_packet.hpp	/^    int32_t expire;$/;"	m	class:tair::request_spop
get_code	src\packets\spop_packet.hpp	/^    int get_code ()$/;"	f	class:tair::response_spop
key	src\packets\spop_packet.hpp	/^    data_entry key;$/;"	m	class:tair::request_spop
request_spop	src\packets\spop_packet.hpp	/^    request_spop ()$/;"	f	class:tair::request_spop
request_spop	src\packets\spop_packet.hpp	/^    request_spop (request_spop & packet)$/;"	f	class:tair::request_spop
request_spop	src\packets\spop_packet.hpp	/^  class request_spop:public base_packet$/;"	c	namespace:tair
response_spop	src\packets\spop_packet.hpp	/^    response_spop ()$/;"	f	class:tair::response_spop
response_spop	src\packets\spop_packet.hpp	/^  class response_spop:public base_packet$/;"	c	namespace:tair
set_code	src\packets\spop_packet.hpp	/^    void set_code (int cde)$/;"	f	class:tair::response_spop
set_meta	src\packets\spop_packet.hpp	/^    void set_meta (uint32_t config_version, uint32_t code)$/;"	f	class:tair::response_spop
set_version	src\packets\spop_packet.hpp	/^    void set_version(uint16_t version)$/;"	f	class:tair::response_spop
tair	src\packets\spop_packet.hpp	/^namespace tair$/;"	n
value	src\packets\spop_packet.hpp	/^    data_entry value;$/;"	m	class:tair::response_spop
version	src\packets\spop_packet.hpp	/^    uint16_t version;$/;"	m	class:tair::request_spop
version	src\packets\spop_packet.hpp	/^    uint16_t version;$/;"	m	class:tair::response_spop
RESPONSE_VALUES_MAXSIZE	src\packets\srem_packet.hpp	135;"	d
TAIR_PACKET_SREM_PACKET_H	src\packets\srem_packet.hpp	18;"	d
area	src\packets\srem_packet.hpp	/^    uint16_t area;$/;"	m	class:tair::request_srem
code	src\packets\srem_packet.hpp	/^    int32_t code;$/;"	m	class:tair::response_srem
config_version	src\packets\srem_packet.hpp	/^    uint32_t config_version;$/;"	m	class:tair::response_srem
decode	src\packets\srem_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::response_srem
decode	src\packets\srem_packet.hpp	/^    bool decode(tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::request_srem
encode	src\packets\srem_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::response_srem
encode	src\packets\srem_packet.hpp	/^    bool encode(tbnet::DataBuffer * output)$/;"	f	class:tair::request_srem
expire	src\packets\srem_packet.hpp	/^    int expire;$/;"	m	class:tair::request_srem
get_code	src\packets\srem_packet.hpp	/^    int get_code()$/;"	f	class:tair::response_srem
key	src\packets\srem_packet.hpp	/^    data_entry key;$/;"	m	class:tair::request_srem
request_srem	src\packets\srem_packet.hpp	/^    request_srem()$/;"	f	class:tair::request_srem
request_srem	src\packets\srem_packet.hpp	/^    request_srem(const uint16_t iarea, const uint16_t iversion,$/;"	f	class:tair::request_srem
request_srem	src\packets\srem_packet.hpp	/^    request_srem(request_srem & packet)$/;"	f	class:tair::request_srem
request_srem	src\packets\srem_packet.hpp	/^  class request_srem:public base_packet$/;"	c	namespace:tair
request_srem_multi	src\packets\srem_packet.hpp	/^    request_srem_multi():request_sadd_multi()$/;"	f	class:tair::request_srem_multi
request_srem_multi	src\packets\srem_packet.hpp	/^    request_srem_multi(const uint16_t iarea, const int32_t iexpire,$/;"	f	class:tair::request_srem_multi
request_srem_multi	src\packets\srem_packet.hpp	/^    request_srem_multi(request_srem_multi &packet)$/;"	f	class:tair::request_srem_multi
request_srem_multi	src\packets\srem_packet.hpp	/^  class request_srem_multi:public request_sadd_multi$/;"	c	namespace:tair
response_srem	src\packets\srem_packet.hpp	/^    response_srem ()$/;"	f	class:tair::response_srem
response_srem	src\packets\srem_packet.hpp	/^  class response_srem:public base_packet$/;"	c	namespace:tair
set_meta	src\packets\srem_packet.hpp	/^    void set_meta (uint32_t config_version, uint32_t code)$/;"	f	class:tair::response_srem
set_version	src\packets\srem_packet.hpp	/^	void set_version(uint16_t version) {}$/;"	f	class:tair::response_srem
tair	src\packets\srem_packet.hpp	/^namespace tair$/;"	n
value	src\packets\srem_packet.hpp	/^    data_entry value;$/;"	m	class:tair::request_srem
version	src\packets\srem_packet.hpp	/^    uint16_t version;$/;"	m	class:tair::request_srem
TAIR_PACKET_TTL_PACKET_H	src\packets\ttl_packet.hpp	18;"	d
area	src\packets\ttl_packet.hpp	/^    uint16_t area;$/;"	m	class:tair::request_ttl
code	src\packets\ttl_packet.hpp	/^    int32_t code;$/;"	m	class:tair::response_ttl
config_version	src\packets\ttl_packet.hpp	/^    uint32_t config_version;$/;"	m	class:tair::response_ttl
decode	src\packets\ttl_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::request_ttl
decode	src\packets\ttl_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::response_ttl
encode	src\packets\ttl_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::request_ttl
encode	src\packets\ttl_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::response_ttl
get_code	src\packets\ttl_packet.hpp	/^    int get_code ()$/;"	f	class:tair::response_ttl
key	src\packets\ttl_packet.hpp	/^    data_entry key;$/;"	m	class:tair::request_ttl
request_ttl	src\packets\ttl_packet.hpp	/^    request_ttl ()$/;"	f	class:tair::request_ttl
request_ttl	src\packets\ttl_packet.hpp	/^    request_ttl (request_ttl & packet)$/;"	f	class:tair::request_ttl
request_ttl	src\packets\ttl_packet.hpp	/^  class request_ttl:public base_packet$/;"	c	namespace:tair
response_ttl	src\packets\ttl_packet.hpp	/^    response_ttl ()$/;"	f	class:tair::response_ttl
response_ttl	src\packets\ttl_packet.hpp	/^  class response_ttl:public base_packet$/;"	c	namespace:tair
retnum	src\packets\ttl_packet.hpp	/^    long long retnum;$/;"	m	class:tair::response_ttl
set_code	src\packets\ttl_packet.hpp	/^    void set_code (int cde)$/;"	f	class:tair::response_ttl
set_meta	src\packets\ttl_packet.hpp	/^    void set_meta (uint32_t config_version, uint32_t code)$/;"	f	class:tair::response_ttl
set_version	src\packets\ttl_packet.hpp	/^	void set_version(uint16_t version) {}$/;"	f	class:tair::response_ttl
tair	src\packets\ttl_packet.hpp	/^namespace tair$/;"	n
TAIR_PACKET_TYPE_PACKET_H	src\packets\type_packet.hpp	18;"	d
area	src\packets\type_packet.hpp	/^    uint16_t area;$/;"	m	class:tair::request_type
code	src\packets\type_packet.hpp	/^    int32_t code;$/;"	m	class:tair::response_type
config_version	src\packets\type_packet.hpp	/^    uint32_t config_version;$/;"	m	class:tair::response_type
decode	src\packets\type_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::request_type
decode	src\packets\type_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::response_type
encode	src\packets\type_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::request_type
encode	src\packets\type_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::response_type
get_code	src\packets\type_packet.hpp	/^    int get_code ()$/;"	f	class:tair::response_type
key	src\packets\type_packet.hpp	/^    data_entry key;$/;"	m	class:tair::request_type
request_type	src\packets\type_packet.hpp	/^    request_type ()$/;"	f	class:tair::request_type
request_type	src\packets\type_packet.hpp	/^    request_type (request_type & packet)$/;"	f	class:tair::request_type
request_type	src\packets\type_packet.hpp	/^  class request_type:public base_packet$/;"	c	namespace:tair
response_type	src\packets\type_packet.hpp	/^    response_type ()$/;"	f	class:tair::response_type
response_type	src\packets\type_packet.hpp	/^  class response_type:public base_packet$/;"	c	namespace:tair
retnum	src\packets\type_packet.hpp	/^    long long retnum;$/;"	m	class:tair::response_type
set_code	src\packets\type_packet.hpp	/^    void set_code (int cde)$/;"	f	class:tair::response_type
set_meta	src\packets\type_packet.hpp	/^    void set_meta (uint32_t config_version, uint32_t code)$/;"	f	class:tair::response_type
set_version	src\packets\type_packet.hpp	/^	void set_version(uint16_t version) {}$/;"	f	class:tair::response_type
tair	src\packets\type_packet.hpp	/^namespace tair$/;"	n
TAIR_PACKET_ZADD_PACKET_H	src\packets\zadd_packet.hpp	18;"	d
area	src\packets\zadd_packet.hpp	/^    uint16_t area;$/;"	m	class:tair::request_zadd
code	src\packets\zadd_packet.hpp	/^    int32_t code;$/;"	m	class:tair::response_zadd
config_version	src\packets\zadd_packet.hpp	/^    uint32_t config_version;$/;"	m	class:tair::response_zadd
decode	src\packets\zadd_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::request_zadd
decode	src\packets\zadd_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::response_zadd
encode	src\packets\zadd_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::request_zadd
encode	src\packets\zadd_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::response_zadd
expire	src\packets\zadd_packet.hpp	/^    int32_t expire;$/;"	m	class:tair::request_zadd
get_code	src\packets\zadd_packet.hpp	/^    int get_code ()$/;"	f	class:tair::response_zadd
key	src\packets\zadd_packet.hpp	/^    data_entry key;$/;"	m	class:tair::request_zadd
request_zadd	src\packets\zadd_packet.hpp	/^    request_zadd ()$/;"	f	class:tair::request_zadd
request_zadd	src\packets\zadd_packet.hpp	/^    request_zadd (request_zadd & packet)$/;"	f	class:tair::request_zadd
request_zadd	src\packets\zadd_packet.hpp	/^  class request_zadd:public base_packet$/;"	c	namespace:tair
response_zadd	src\packets\zadd_packet.hpp	/^    response_zadd ()$/;"	f	class:tair::response_zadd
response_zadd	src\packets\zadd_packet.hpp	/^  class response_zadd:public base_packet$/;"	c	namespace:tair
score	src\packets\zadd_packet.hpp	/^    double score;$/;"	m	class:tair::request_zadd
set_code	src\packets\zadd_packet.hpp	/^    void set_code (int cde)$/;"	f	class:tair::response_zadd
set_meta	src\packets\zadd_packet.hpp	/^    void set_meta (uint32_t config_version, uint32_t code)$/;"	f	class:tair::response_zadd
set_version	src\packets\zadd_packet.hpp	/^	void set_version(uint16_t version) {}$/;"	f	class:tair::response_zadd
tair	src\packets\zadd_packet.hpp	/^namespace tair$/;"	n
value	src\packets\zadd_packet.hpp	/^    data_entry value;$/;"	m	class:tair::request_zadd
version	src\packets\zadd_packet.hpp	/^    uint16_t version;$/;"	m	class:tair::request_zadd
TAIR_PACKET_ZCARD_PACKET_H	src\packets\zcard_packet.hpp	18;"	d
area	src\packets\zcard_packet.hpp	/^    uint16_t area;$/;"	m	class:tair::request_zcard
code	src\packets\zcard_packet.hpp	/^    int32_t code;$/;"	m	class:tair::response_zcard
config_version	src\packets\zcard_packet.hpp	/^    uint32_t config_version;$/;"	m	class:tair::response_zcard
decode	src\packets\zcard_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::request_zcard
decode	src\packets\zcard_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::response_zcard
encode	src\packets\zcard_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::request_zcard
encode	src\packets\zcard_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::response_zcard
get_code	src\packets\zcard_packet.hpp	/^    int get_code ()$/;"	f	class:tair::response_zcard
key	src\packets\zcard_packet.hpp	/^    data_entry key;$/;"	m	class:tair::request_zcard
request_zcard	src\packets\zcard_packet.hpp	/^    request_zcard ()$/;"	f	class:tair::request_zcard
request_zcard	src\packets\zcard_packet.hpp	/^    request_zcard (request_zcard & packet)$/;"	f	class:tair::request_zcard
request_zcard	src\packets\zcard_packet.hpp	/^  class request_zcard:public base_packet$/;"	c	namespace:tair
response_zcard	src\packets\zcard_packet.hpp	/^    response_zcard ()$/;"	f	class:tair::response_zcard
response_zcard	src\packets\zcard_packet.hpp	/^  class response_zcard:public base_packet$/;"	c	namespace:tair
retnum	src\packets\zcard_packet.hpp	/^    long long retnum;$/;"	m	class:tair::response_zcard
set_code	src\packets\zcard_packet.hpp	/^    void set_code (int cde)$/;"	f	class:tair::response_zcard
set_meta	src\packets\zcard_packet.hpp	/^    void set_meta (uint32_t config_version, uint32_t code)$/;"	f	class:tair::response_zcard
set_version	src\packets\zcard_packet.hpp	/^	void set_version(uint16_t version) {}$/;"	f	class:tair::response_zcard
tair	src\packets\zcard_packet.hpp	/^namespace tair$/;"	n
RESPONSE_VALUES_MAXSIZE	src\packets\zcount_packet.hpp	78;"	d
TAIR_PACKET_ZCOUNT_PACKET_H	src\packets\zcount_packet.hpp	18;"	d
area	src\packets\zcount_packet.hpp	/^    uint16_t area;$/;"	m	class:tair::request_zcount
code	src\packets\zcount_packet.hpp	/^    int32_t code;$/;"	m	class:tair::response_zcount
config_version	src\packets\zcount_packet.hpp	/^    uint32_t config_version;$/;"	m	class:tair::response_zcount
decode	src\packets\zcount_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::request_zcount
decode	src\packets\zcount_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::response_zcount
encode	src\packets\zcount_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::request_zcount
encode	src\packets\zcount_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::response_zcount
end	src\packets\zcount_packet.hpp	/^    double end;$/;"	m	class:tair::request_zcount
key	src\packets\zcount_packet.hpp	/^    data_entry key;$/;"	m	class:tair::request_zcount
request_zcount	src\packets\zcount_packet.hpp	/^    request_zcount ()$/;"	f	class:tair::request_zcount
request_zcount	src\packets\zcount_packet.hpp	/^    request_zcount (request_zcount & packet)$/;"	f	class:tair::request_zcount
request_zcount	src\packets\zcount_packet.hpp	/^  class request_zcount:public base_packet$/;"	c	namespace:tair
response_zcount	src\packets\zcount_packet.hpp	/^    response_zcount ()$/;"	f	class:tair::response_zcount
response_zcount	src\packets\zcount_packet.hpp	/^  class response_zcount:public base_packet$/;"	c	namespace:tair
retnum	src\packets\zcount_packet.hpp	/^	long long retnum;$/;"	m	class:tair::response_zcount
set_meta	src\packets\zcount_packet.hpp	/^    void set_meta (uint32_t config_version, uint32_t code)$/;"	f	class:tair::response_zcount
set_version	src\packets\zcount_packet.hpp	/^    void set_version(uint16_t version) {}$/;"	f	class:tair::response_zcount
start	src\packets\zcount_packet.hpp	/^    double start;$/;"	m	class:tair::request_zcount
tair	src\packets\zcount_packet.hpp	/^namespace tair$/;"	n
TAIR_PACKET_ZINCRBY_PACKET_H	src\packets\zincrby_packet.hpp	18;"	d
addscore	src\packets\zincrby_packet.hpp	/^    double addscore;$/;"	m	class:tair::request_zincrby
area	src\packets\zincrby_packet.hpp	/^    uint16_t area;$/;"	m	class:tair::request_zincrby
code	src\packets\zincrby_packet.hpp	/^    int32_t code;$/;"	m	class:tair::response_zincrby
config_version	src\packets\zincrby_packet.hpp	/^    uint32_t config_version;$/;"	m	class:tair::response_zincrby
decode	src\packets\zincrby_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::request_zincrby
decode	src\packets\zincrby_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::response_zincrby
encode	src\packets\zincrby_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::request_zincrby
encode	src\packets\zincrby_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::response_zincrby
expire	src\packets\zincrby_packet.hpp	/^    int32_t expire;$/;"	m	class:tair::request_zincrby
get_code	src\packets\zincrby_packet.hpp	/^    int get_code ()$/;"	f	class:tair::response_zincrby
key	src\packets\zincrby_packet.hpp	/^    data_entry key;$/;"	m	class:tair::request_zincrby
request_zincrby	src\packets\zincrby_packet.hpp	/^    request_zincrby ()$/;"	f	class:tair::request_zincrby
request_zincrby	src\packets\zincrby_packet.hpp	/^    request_zincrby (request_zincrby & packet)$/;"	f	class:tair::request_zincrby
request_zincrby	src\packets\zincrby_packet.hpp	/^  class request_zincrby:public base_packet$/;"	c	namespace:tair
response_zincrby	src\packets\zincrby_packet.hpp	/^    response_zincrby ()$/;"	f	class:tair::response_zincrby
response_zincrby	src\packets\zincrby_packet.hpp	/^  class response_zincrby:public base_packet$/;"	c	namespace:tair
retnum	src\packets\zincrby_packet.hpp	/^    double retnum;$/;"	m	class:tair::response_zincrby
set_code	src\packets\zincrby_packet.hpp	/^    void set_code (int cde)$/;"	f	class:tair::response_zincrby
set_meta	src\packets\zincrby_packet.hpp	/^    void set_meta (uint32_t config_version, uint32_t code)$/;"	f	class:tair::response_zincrby
set_version	src\packets\zincrby_packet.hpp	/^	void set_version(uint16_t) {}$/;"	f	class:tair::response_zincrby
tair	src\packets\zincrby_packet.hpp	/^namespace tair$/;"	n
value	src\packets\zincrby_packet.hpp	/^    data_entry value;$/;"	m	class:tair::request_zincrby
version	src\packets\zincrby_packet.hpp	/^    uint16_t version;$/;"	m	class:tair::request_zincrby
RESPONSE_VALUES_MAXSIZE	src\packets\zrange_packet.hpp	172;"	d
RESPONSE_VALUES_MAXSIZE	src\packets\zrange_packet.hpp	97;"	d
TAIR_PACKET_ZRANGE_PACKET_H	src\packets\zrange_packet.hpp	18;"	d
add_data	src\packets\zrange_packet.hpp	/^    void add_data (data_entry * data)$/;"	f	class:tair::response_zrange
add_data	src\packets\zrange_packet.hpp	/^    void add_data (data_entry * data, double score)$/;"	f	class:tair::response_zrangewithscore
area	src\packets\zrange_packet.hpp	/^    uint16_t area;$/;"	m	class:tair::request_zrange
code	src\packets\zrange_packet.hpp	/^    int32_t code;$/;"	m	class:tair::response_zrangewithscore
code	src\packets\zrange_packet.hpp	/^    uint32_t code;$/;"	m	class:tair::response_zrange
config_version	src\packets\zrange_packet.hpp	/^    uint32_t config_version;$/;"	m	class:tair::response_zrange
config_version	src\packets\zrange_packet.hpp	/^    uint32_t config_version;$/;"	m	class:tair::response_zrangewithscore
decode	src\packets\zrange_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::request_zrange
decode	src\packets\zrange_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::response_zrange
decode	src\packets\zrange_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::response_zrangewithscore
encode	src\packets\zrange_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::request_zrange
encode	src\packets\zrange_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::response_zrange
encode	src\packets\zrange_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::response_zrangewithscore
end	src\packets\zrange_packet.hpp	/^    int32_t end;$/;"	m	class:tair::request_zrange
key	src\packets\zrange_packet.hpp	/^    data_entry key;$/;"	m	class:tair::request_zrange
request_zrange	src\packets\zrange_packet.hpp	/^    request_zrange ()$/;"	f	class:tair::request_zrange
request_zrange	src\packets\zrange_packet.hpp	/^    request_zrange (int pcode)$/;"	f	class:tair::request_zrange
request_zrange	src\packets\zrange_packet.hpp	/^    request_zrange (request_zrange & packet)$/;"	f	class:tair::request_zrange
request_zrange	src\packets\zrange_packet.hpp	/^  class request_zrange:public base_packet$/;"	c	namespace:tair
response_zrange	src\packets\zrange_packet.hpp	/^    response_zrange ()$/;"	f	class:tair::response_zrange
response_zrange	src\packets\zrange_packet.hpp	/^  class response_zrange:public base_packet$/;"	c	namespace:tair
response_zrangewithscore	src\packets\zrange_packet.hpp	/^    response_zrangewithscore ()$/;"	f	class:tair::response_zrangewithscore
response_zrangewithscore	src\packets\zrange_packet.hpp	/^  class response_zrangewithscore : public base_packet$/;"	c	namespace:tair
scores	src\packets\zrange_packet.hpp	/^    vector<double> scores;$/;"	m	class:tair::response_zrange
scores	src\packets\zrange_packet.hpp	/^    vector<double> scores;$/;"	m	class:tair::response_zrangewithscore
set_meta	src\packets\zrange_packet.hpp	/^    void set_meta (uint32_t config_version, uint32_t code)$/;"	f	class:tair::response_zrange
set_meta	src\packets\zrange_packet.hpp	/^    void set_meta (uint32_t config_version, uint32_t code)$/;"	f	class:tair::response_zrangewithscore
set_version	src\packets\zrange_packet.hpp	/^    void set_version(uint16_t version)$/;"	f	class:tair::response_zrange
set_version	src\packets\zrange_packet.hpp	/^    void set_version(uint16_t version)$/;"	f	class:tair::response_zrangewithscore
start	src\packets\zrange_packet.hpp	/^    int32_t start;$/;"	m	class:tair::request_zrange
tair	src\packets\zrange_packet.hpp	/^namespace tair$/;"	n
values	src\packets\zrange_packet.hpp	/^    vector<data_entry *> values;$/;"	m	class:tair::response_zrange
values	src\packets\zrange_packet.hpp	/^    vector<data_entry *> values;$/;"	m	class:tair::response_zrangewithscore
version	src\packets\zrange_packet.hpp	/^    uint16_t version;$/;"	m	class:tair::response_zrange
version	src\packets\zrange_packet.hpp	/^    uint16_t version;$/;"	m	class:tair::response_zrangewithscore
withscore	src\packets\zrange_packet.hpp	/^    int32_t withscore;$/;"	m	class:tair::request_zrange
~response_zrange	src\packets\zrange_packet.hpp	/^    ~response_zrange () {$/;"	f	class:tair::response_zrange
~response_zrangewithscore	src\packets\zrange_packet.hpp	/^    ~response_zrangewithscore () {$/;"	f	class:tair::response_zrangewithscore
RESPONSE_VALUES_MAXSIZE	src\packets\zrangebyscore_packet.hpp	82;"	d
TAIR_PACKET_ZRANGEBYSCORE_PACKET_H	src\packets\zrangebyscore_packet.hpp	18;"	d
add_data	src\packets\zrangebyscore_packet.hpp	/^    void add_data (data_entry * data)$/;"	f	class:tair::response_zrangebyscore
area	src\packets\zrangebyscore_packet.hpp	/^    uint16_t area;$/;"	m	class:tair::request_zrangebyscore
code	src\packets\zrangebyscore_packet.hpp	/^    int32_t code;$/;"	m	class:tair::response_zrangebyscore
config_version	src\packets\zrangebyscore_packet.hpp	/^    uint32_t config_version;$/;"	m	class:tair::response_zrangebyscore
decode	src\packets\zrangebyscore_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::request_zrangebyscore
decode	src\packets\zrangebyscore_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::response_zrangebyscore
encode	src\packets\zrangebyscore_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::request_zrangebyscore
encode	src\packets\zrangebyscore_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::response_zrangebyscore
end	src\packets\zrangebyscore_packet.hpp	/^    double end;$/;"	m	class:tair::request_zrangebyscore
key	src\packets\zrangebyscore_packet.hpp	/^    data_entry key;$/;"	m	class:tair::request_zrangebyscore
request_zrangebyscore	src\packets\zrangebyscore_packet.hpp	/^    request_zrangebyscore ()$/;"	f	class:tair::request_zrangebyscore
request_zrangebyscore	src\packets\zrangebyscore_packet.hpp	/^    request_zrangebyscore (request_zrangebyscore & packet)$/;"	f	class:tair::request_zrangebyscore
request_zrangebyscore	src\packets\zrangebyscore_packet.hpp	/^  class request_zrangebyscore:public base_packet$/;"	c	namespace:tair
response_zrangebyscore	src\packets\zrangebyscore_packet.hpp	/^    response_zrangebyscore ()$/;"	f	class:tair::response_zrangebyscore
response_zrangebyscore	src\packets\zrangebyscore_packet.hpp	/^  class response_zrangebyscore:public base_packet$/;"	c	namespace:tair
set_meta	src\packets\zrangebyscore_packet.hpp	/^    void set_meta (uint32_t config_version, uint32_t code)$/;"	f	class:tair::response_zrangebyscore
set_version	src\packets\zrangebyscore_packet.hpp	/^    void set_version(uint16_t version)$/;"	f	class:tair::response_zrangebyscore
start	src\packets\zrangebyscore_packet.hpp	/^    double start;$/;"	m	class:tair::request_zrangebyscore
tair	src\packets\zrangebyscore_packet.hpp	/^namespace tair$/;"	n
values	src\packets\zrangebyscore_packet.hpp	/^    vector<data_entry *> values;$/;"	m	class:tair::response_zrangebyscore
version	src\packets\zrangebyscore_packet.hpp	/^    uint16_t version;$/;"	m	class:tair::response_zrangebyscore
~response_zrangebyscore	src\packets\zrangebyscore_packet.hpp	/^    ~response_zrangebyscore ()$/;"	f	class:tair::response_zrangebyscore
TAIR_PACKET_ZRANK_PACKET_H	src\packets\zrank_packet.hpp	18;"	d
area	src\packets\zrank_packet.hpp	/^    uint16_t area;$/;"	m	class:tair::request_zrank
code	src\packets\zrank_packet.hpp	/^    int32_t code;$/;"	m	class:tair::response_zrank
config_version	src\packets\zrank_packet.hpp	/^    uint32_t config_version;$/;"	m	class:tair::response_zrank
decode	src\packets\zrank_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::request_zrank
decode	src\packets\zrank_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::response_zrank
encode	src\packets\zrank_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::request_zrank
encode	src\packets\zrank_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::response_zrank
get_code	src\packets\zrank_packet.hpp	/^    int get_code ()$/;"	f	class:tair::response_zrank
key	src\packets\zrank_packet.hpp	/^    data_entry key;$/;"	m	class:tair::request_zrank
request_zrank	src\packets\zrank_packet.hpp	/^    request_zrank ()$/;"	f	class:tair::request_zrank
request_zrank	src\packets\zrank_packet.hpp	/^    request_zrank (request_zrank & packet)$/;"	f	class:tair::request_zrank
request_zrank	src\packets\zrank_packet.hpp	/^  class request_zrank:public base_packet$/;"	c	namespace:tair
response_zrank	src\packets\zrank_packet.hpp	/^    response_zrank ()$/;"	f	class:tair::response_zrank
response_zrank	src\packets\zrank_packet.hpp	/^  class response_zrank:public base_packet$/;"	c	namespace:tair
retnum	src\packets\zrank_packet.hpp	/^    long long retnum;$/;"	m	class:tair::response_zrank
set_code	src\packets\zrank_packet.hpp	/^    void set_code (int cde)$/;"	f	class:tair::response_zrank
set_meta	src\packets\zrank_packet.hpp	/^    void set_meta (uint32_t config_version, uint32_t code)$/;"	f	class:tair::response_zrank
set_version	src\packets\zrank_packet.hpp	/^	void set_version(uint16_t version) {}$/;"	f	class:tair::response_zrank
tair	src\packets\zrank_packet.hpp	/^namespace tair$/;"	n
value	src\packets\zrank_packet.hpp	/^    data_entry value;$/;"	m	class:tair::request_zrank
RESPONSE_VALUES_MAXSIZE	src\packets\zrem_packet.hpp	90;"	d
TAIR_PACKET_ZREM_PACKET_H	src\packets\zrem_packet.hpp	18;"	d
area	src\packets\zrem_packet.hpp	/^    uint16_t area;$/;"	m	class:tair::request_zrem
code	src\packets\zrem_packet.hpp	/^    int32_t code;$/;"	m	class:tair::response_zrem
config_version	src\packets\zrem_packet.hpp	/^    uint32_t config_version;$/;"	m	class:tair::response_zrem
decode	src\packets\zrem_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::request_zrem
decode	src\packets\zrem_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::response_zrem
encode	src\packets\zrem_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::request_zrem
encode	src\packets\zrem_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::response_zrem
expire	src\packets\zrem_packet.hpp	/^    int expire;$/;"	m	class:tair::request_zrem
get_code	src\packets\zrem_packet.hpp	/^    int get_code ()$/;"	f	class:tair::response_zrem
key	src\packets\zrem_packet.hpp	/^    data_entry key;$/;"	m	class:tair::request_zrem
request_zrem	src\packets\zrem_packet.hpp	/^    request_zrem ()$/;"	f	class:tair::request_zrem
request_zrem	src\packets\zrem_packet.hpp	/^    request_zrem (request_zrem & packet)$/;"	f	class:tair::request_zrem
request_zrem	src\packets\zrem_packet.hpp	/^  class request_zrem:public base_packet$/;"	c	namespace:tair
response_zrem	src\packets\zrem_packet.hpp	/^    response_zrem ()$/;"	f	class:tair::response_zrem
response_zrem	src\packets\zrem_packet.hpp	/^    response_zrem (int pcode)$/;"	f	class:tair::response_zrem
response_zrem	src\packets\zrem_packet.hpp	/^  class response_zrem:public base_packet$/;"	c	namespace:tair
set_code	src\packets\zrem_packet.hpp	/^    void set_code (int cde)$/;"	f	class:tair::response_zrem
set_meta	src\packets\zrem_packet.hpp	/^    void set_meta (uint32_t config_version, uint32_t code)$/;"	f	class:tair::response_zrem
set_version	src\packets\zrem_packet.hpp	/^	void set_version(uint16_t version) {}$/;"	f	class:tair::response_zrem
tair	src\packets\zrem_packet.hpp	/^namespace tair$/;"	n
value	src\packets\zrem_packet.hpp	/^    data_entry value;$/;"	m	class:tair::request_zrem
version	src\packets\zrem_packet.hpp	/^    uint16_t version;$/;"	m	class:tair::request_zrem
RESPONSE_VALUES_MAXSIZE	src\packets\zremrangebyrank_packet.hpp	96;"	d
TAIR_PACKET_ZREMRANGEBYRANK_PACKET_H	src\packets\zremrangebyrank_packet.hpp	18;"	d
area	src\packets\zremrangebyrank_packet.hpp	/^    uint16_t area;$/;"	m	class:tair::request_zremrangebyrank
code	src\packets\zremrangebyrank_packet.hpp	/^    int32_t code;$/;"	m	class:tair::response_zremrangebyrank
config_version	src\packets\zremrangebyrank_packet.hpp	/^    uint32_t config_version;$/;"	m	class:tair::response_zremrangebyrank
decode	src\packets\zremrangebyrank_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::request_zremrangebyrank
decode	src\packets\zremrangebyrank_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::response_zremrangebyrank
encode	src\packets\zremrangebyrank_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::request_zremrangebyrank
encode	src\packets\zremrangebyrank_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::response_zremrangebyrank
end	src\packets\zremrangebyrank_packet.hpp	/^	int end;$/;"	m	class:tair::request_zremrangebyrank
expire	src\packets\zremrangebyrank_packet.hpp	/^    int expire;$/;"	m	class:tair::request_zremrangebyrank
get_code	src\packets\zremrangebyrank_packet.hpp	/^    int get_code ()$/;"	f	class:tair::response_zremrangebyrank
key	src\packets\zremrangebyrank_packet.hpp	/^    data_entry key;$/;"	m	class:tair::request_zremrangebyrank
request_zremrangebyrank	src\packets\zremrangebyrank_packet.hpp	/^    request_zremrangebyrank ()$/;"	f	class:tair::request_zremrangebyrank
request_zremrangebyrank	src\packets\zremrangebyrank_packet.hpp	/^    request_zremrangebyrank (request_zremrangebyrank & packet)$/;"	f	class:tair::request_zremrangebyrank
request_zremrangebyrank	src\packets\zremrangebyrank_packet.hpp	/^  class request_zremrangebyrank:public base_packet$/;"	c	namespace:tair
response_zremrangebyrank	src\packets\zremrangebyrank_packet.hpp	/^    response_zremrangebyrank ()$/;"	f	class:tair::response_zremrangebyrank
response_zremrangebyrank	src\packets\zremrangebyrank_packet.hpp	/^  class response_zremrangebyrank:public base_packet$/;"	c	namespace:tair
retnum	src\packets\zremrangebyrank_packet.hpp	/^    long long retnum;$/;"	m	class:tair::response_zremrangebyrank
set_code	src\packets\zremrangebyrank_packet.hpp	/^    void set_code (int cde)$/;"	f	class:tair::response_zremrangebyrank
set_meta	src\packets\zremrangebyrank_packet.hpp	/^    void set_meta (uint32_t config_version, uint32_t code)$/;"	f	class:tair::response_zremrangebyrank
set_version	src\packets\zremrangebyrank_packet.hpp	/^	void set_version(uint16_t version) {}$/;"	f	class:tair::response_zremrangebyrank
start	src\packets\zremrangebyrank_packet.hpp	/^    int start;$/;"	m	class:tair::request_zremrangebyrank
tair	src\packets\zremrangebyrank_packet.hpp	/^namespace tair$/;"	n
version	src\packets\zremrangebyrank_packet.hpp	/^    uint16_t version;$/;"	m	class:tair::request_zremrangebyrank
RESPONSE_VALUES_MAXSIZE	src\packets\zremrangebyscore_packet.hpp	96;"	d
TAIR_PACKET_ZREMRANGEBYSCORE_PACKET_H	src\packets\zremrangebyscore_packet.hpp	18;"	d
area	src\packets\zremrangebyscore_packet.hpp	/^    uint16_t area;$/;"	m	class:tair::request_zremrangebyscore
code	src\packets\zremrangebyscore_packet.hpp	/^    int32_t code;$/;"	m	class:tair::response_zremrangebyscore
config_version	src\packets\zremrangebyscore_packet.hpp	/^    uint32_t config_version;$/;"	m	class:tair::response_zremrangebyscore
decode	src\packets\zremrangebyscore_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::request_zremrangebyscore
decode	src\packets\zremrangebyscore_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::response_zremrangebyscore
encode	src\packets\zremrangebyscore_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::request_zremrangebyscore
encode	src\packets\zremrangebyscore_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::response_zremrangebyscore
end	src\packets\zremrangebyscore_packet.hpp	/^	double end;$/;"	m	class:tair::request_zremrangebyscore
expire	src\packets\zremrangebyscore_packet.hpp	/^    int expire;$/;"	m	class:tair::request_zremrangebyscore
get_code	src\packets\zremrangebyscore_packet.hpp	/^    int get_code ()$/;"	f	class:tair::response_zremrangebyscore
key	src\packets\zremrangebyscore_packet.hpp	/^    data_entry key;$/;"	m	class:tair::request_zremrangebyscore
request_zremrangebyscore	src\packets\zremrangebyscore_packet.hpp	/^    request_zremrangebyscore ()$/;"	f	class:tair::request_zremrangebyscore
request_zremrangebyscore	src\packets\zremrangebyscore_packet.hpp	/^    request_zremrangebyscore (request_zremrangebyscore & packet)$/;"	f	class:tair::request_zremrangebyscore
request_zremrangebyscore	src\packets\zremrangebyscore_packet.hpp	/^  class request_zremrangebyscore:public base_packet$/;"	c	namespace:tair
response_zremrangebyscore	src\packets\zremrangebyscore_packet.hpp	/^    response_zremrangebyscore ()$/;"	f	class:tair::response_zremrangebyscore
response_zremrangebyscore	src\packets\zremrangebyscore_packet.hpp	/^    response_zremrangebyscore (int pcode)$/;"	f	class:tair::response_zremrangebyscore
response_zremrangebyscore	src\packets\zremrangebyscore_packet.hpp	/^  class response_zremrangebyscore:public base_packet$/;"	c	namespace:tair
retnum	src\packets\zremrangebyscore_packet.hpp	/^    long long retnum;$/;"	m	class:tair::response_zremrangebyscore
set_code	src\packets\zremrangebyscore_packet.hpp	/^    void set_code (int cde)$/;"	f	class:tair::response_zremrangebyscore
set_meta	src\packets\zremrangebyscore_packet.hpp	/^    void set_meta (uint32_t config_version, uint32_t code)$/;"	f	class:tair::response_zremrangebyscore
set_version	src\packets\zremrangebyscore_packet.hpp	/^	void set_version(uint16_t version) {}$/;"	f	class:tair::response_zremrangebyscore
start	src\packets\zremrangebyscore_packet.hpp	/^    double start;$/;"	m	class:tair::request_zremrangebyscore
tair	src\packets\zremrangebyscore_packet.hpp	/^namespace tair$/;"	n
version	src\packets\zremrangebyscore_packet.hpp	/^    uint16_t version;$/;"	m	class:tair::request_zremrangebyscore
RESPONSE_VALUES_MAXSIZE	src\packets\zrevrange_packet.hpp	172;"	d
RESPONSE_VALUES_MAXSIZE	src\packets\zrevrange_packet.hpp	91;"	d
TAIR_PACKET_ZREVRANGE_PACKET_H	src\packets\zrevrange_packet.hpp	18;"	d
add_data	src\packets\zrevrange_packet.hpp	/^    void add_data (data_entry * data)$/;"	f	class:tair::response_zrevrange
add_data	src\packets\zrevrange_packet.hpp	/^    void add_data (data_entry * data, double score)$/;"	f	class:tair::response_zrevrangewithscore
area	src\packets\zrevrange_packet.hpp	/^    uint16_t area;$/;"	m	class:tair::request_zrevrange
code	src\packets\zrevrange_packet.hpp	/^    int32_t code;$/;"	m	class:tair::response_zrevrangewithscore
code	src\packets\zrevrange_packet.hpp	/^    uint32_t code;$/;"	m	class:tair::response_zrevrange
config_version	src\packets\zrevrange_packet.hpp	/^    uint32_t config_version;$/;"	m	class:tair::response_zrevrange
config_version	src\packets\zrevrange_packet.hpp	/^    uint32_t config_version;$/;"	m	class:tair::response_zrevrangewithscore
decode	src\packets\zrevrange_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::request_zrevrange
decode	src\packets\zrevrange_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::response_zrevrange
decode	src\packets\zrevrange_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::response_zrevrangewithscore
encode	src\packets\zrevrange_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::request_zrevrange
encode	src\packets\zrevrange_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::response_zrevrange
encode	src\packets\zrevrange_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::response_zrevrangewithscore
end	src\packets\zrevrange_packet.hpp	/^    int32_t end;$/;"	m	class:tair::request_zrevrange
key	src\packets\zrevrange_packet.hpp	/^    data_entry key;$/;"	m	class:tair::request_zrevrange
request_zrevrange	src\packets\zrevrange_packet.hpp	/^    request_zrevrange ()$/;"	f	class:tair::request_zrevrange
request_zrevrange	src\packets\zrevrange_packet.hpp	/^    request_zrevrange (int pcode)$/;"	f	class:tair::request_zrevrange
request_zrevrange	src\packets\zrevrange_packet.hpp	/^    request_zrevrange (request_zrevrange & packet)$/;"	f	class:tair::request_zrevrange
request_zrevrange	src\packets\zrevrange_packet.hpp	/^  class request_zrevrange:public base_packet$/;"	c	namespace:tair
response_zrevrange	src\packets\zrevrange_packet.hpp	/^    response_zrevrange ()$/;"	f	class:tair::response_zrevrange
response_zrevrange	src\packets\zrevrange_packet.hpp	/^    response_zrevrange (int pcode)$/;"	f	class:tair::response_zrevrange
response_zrevrange	src\packets\zrevrange_packet.hpp	/^  class response_zrevrange:public base_packet$/;"	c	namespace:tair
response_zrevrangewithscore	src\packets\zrevrange_packet.hpp	/^    response_zrevrangewithscore ()$/;"	f	class:tair::response_zrevrangewithscore
response_zrevrangewithscore	src\packets\zrevrange_packet.hpp	/^    response_zrevrangewithscore (int pcode)$/;"	f	class:tair::response_zrevrangewithscore
response_zrevrangewithscore	src\packets\zrevrange_packet.hpp	/^  class response_zrevrangewithscore:public base_packet$/;"	c	namespace:tair
scores	src\packets\zrevrange_packet.hpp	/^    vector<double> scores;$/;"	m	class:tair::response_zrevrange
scores	src\packets\zrevrange_packet.hpp	/^    vector<double> scores;$/;"	m	class:tair::response_zrevrangewithscore
set_meta	src\packets\zrevrange_packet.hpp	/^    void set_meta (uint32_t config_version, uint32_t code)$/;"	f	class:tair::response_zrevrange
set_meta	src\packets\zrevrange_packet.hpp	/^    void set_meta (uint32_t config_version, uint32_t code)$/;"	f	class:tair::response_zrevrangewithscore
set_version	src\packets\zrevrange_packet.hpp	/^    void set_version(uint16_t version)$/;"	f	class:tair::response_zrevrange
set_version	src\packets\zrevrange_packet.hpp	/^    void set_version(uint16_t version)$/;"	f	class:tair::response_zrevrangewithscore
start	src\packets\zrevrange_packet.hpp	/^    int32_t start;$/;"	m	class:tair::request_zrevrange
tair	src\packets\zrevrange_packet.hpp	/^namespace tair$/;"	n
values	src\packets\zrevrange_packet.hpp	/^    vector <data_entry *> values;$/;"	m	class:tair::response_zrevrange
values	src\packets\zrevrange_packet.hpp	/^    vector< data_entry * > values;$/;"	m	class:tair::response_zrevrangewithscore
version	src\packets\zrevrange_packet.hpp	/^    uint16_t version;$/;"	m	class:tair::response_zrevrange
version	src\packets\zrevrange_packet.hpp	/^    uint16_t version;$/;"	m	class:tair::response_zrevrangewithscore
withscore	src\packets\zrevrange_packet.hpp	/^    int32_t withscore;$/;"	m	class:tair::request_zrevrange
~response_zrevrange	src\packets\zrevrange_packet.hpp	/^    ~response_zrevrange () {$/;"	f	class:tair::response_zrevrange
~response_zrevrangewithscore	src\packets\zrevrange_packet.hpp	/^    ~response_zrevrangewithscore () {$/;"	f	class:tair::response_zrevrangewithscore
TAIR_PACKET_ZREVRANK_PACKET_H	src\packets\zrevrank_packet.hpp	18;"	d
area	src\packets\zrevrank_packet.hpp	/^    uint16_t area;$/;"	m	class:tair::request_zrevrank
code	src\packets\zrevrank_packet.hpp	/^    int32_t code;$/;"	m	class:tair::response_zrevrank
config_version	src\packets\zrevrank_packet.hpp	/^    uint32_t config_version;$/;"	m	class:tair::response_zrevrank
decode	src\packets\zrevrank_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::request_zrevrank
decode	src\packets\zrevrank_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::response_zrevrank
encode	src\packets\zrevrank_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::request_zrevrank
encode	src\packets\zrevrank_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::response_zrevrank
get_code	src\packets\zrevrank_packet.hpp	/^    int get_code ()$/;"	f	class:tair::response_zrevrank
key	src\packets\zrevrank_packet.hpp	/^    data_entry key;$/;"	m	class:tair::request_zrevrank
request_zrevrank	src\packets\zrevrank_packet.hpp	/^    request_zrevrank ()$/;"	f	class:tair::request_zrevrank
request_zrevrank	src\packets\zrevrank_packet.hpp	/^    request_zrevrank (request_zrevrank & packet)$/;"	f	class:tair::request_zrevrank
request_zrevrank	src\packets\zrevrank_packet.hpp	/^  class request_zrevrank:public base_packet$/;"	c	namespace:tair
response_zrevrank	src\packets\zrevrank_packet.hpp	/^    response_zrevrank ()$/;"	f	class:tair::response_zrevrank
response_zrevrank	src\packets\zrevrank_packet.hpp	/^  class response_zrevrank:public base_packet$/;"	c	namespace:tair
retnum	src\packets\zrevrank_packet.hpp	/^    long long retnum;$/;"	m	class:tair::response_zrevrank
set_code	src\packets\zrevrank_packet.hpp	/^    void set_code (int cde)$/;"	f	class:tair::response_zrevrank
set_meta	src\packets\zrevrank_packet.hpp	/^    void set_meta (uint32_t config_version, uint32_t code)$/;"	f	class:tair::response_zrevrank
set_version	src\packets\zrevrank_packet.hpp	/^	void set_version(uint16_t version) {}$/;"	f	class:tair::response_zrevrank
tair	src\packets\zrevrank_packet.hpp	/^namespace tair$/;"	n
value	src\packets\zrevrank_packet.hpp	/^    data_entry value;$/;"	m	class:tair::request_zrevrank
TAIR_PACKET_ZSCORE_PACKET_H	src\packets\zscore_packet.hpp	18;"	d
area	src\packets\zscore_packet.hpp	/^    uint16_t area;$/;"	m	class:tair::request_zscore
code	src\packets\zscore_packet.hpp	/^    int32_t code;$/;"	m	class:tair::response_zscore
config_version	src\packets\zscore_packet.hpp	/^    uint32_t config_version;$/;"	m	class:tair::response_zscore
decode	src\packets\zscore_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::request_zscore
decode	src\packets\zscore_packet.hpp	/^    bool decode (tbnet::DataBuffer * input, tbnet::PacketHeader * header)$/;"	f	class:tair::response_zscore
encode	src\packets\zscore_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::request_zscore
encode	src\packets\zscore_packet.hpp	/^    bool encode (tbnet::DataBuffer * output)$/;"	f	class:tair::response_zscore
get_code	src\packets\zscore_packet.hpp	/^    int get_code ()$/;"	f	class:tair::response_zscore
key	src\packets\zscore_packet.hpp	/^    data_entry key;$/;"	m	class:tair::request_zscore
request_zscore	src\packets\zscore_packet.hpp	/^    request_zscore ()$/;"	f	class:tair::request_zscore
request_zscore	src\packets\zscore_packet.hpp	/^    request_zscore (request_zscore & packet)$/;"	f	class:tair::request_zscore
request_zscore	src\packets\zscore_packet.hpp	/^  class request_zscore:public base_packet$/;"	c	namespace:tair
response_zscore	src\packets\zscore_packet.hpp	/^    response_zscore ()$/;"	f	class:tair::response_zscore
response_zscore	src\packets\zscore_packet.hpp	/^  class response_zscore:public base_packet$/;"	c	namespace:tair
score	src\packets\zscore_packet.hpp	/^    double score;$/;"	m	class:tair::response_zscore
set_code	src\packets\zscore_packet.hpp	/^    void set_code (int cde)$/;"	f	class:tair::response_zscore
set_meta	src\packets\zscore_packet.hpp	/^    void set_meta (uint32_t config_version, uint32_t code)$/;"	f	class:tair::response_zscore
set_version	src\packets\zscore_packet.hpp	/^	void set_version(uint16_t version) {}$/;"	f	class:tair::response_zscore
tair	src\packets\zscore_packet.hpp	/^namespace tair$/;"	n
value	src\packets\zscore_packet.hpp	/^    data_entry value;$/;"	m	class:tair::request_zscore
BASE_PLUGIN_H	src\plugin\base_plugin.hpp	16;"	d
HOOK_POINT_ALL	src\plugin\base_plugin.hpp	/^      const int HOOK_POINT_ALL      = HOOK_POINT_REQUEST | HOOK_POINT_RESPONSE;$/;"	m	namespace:tair::plugin
HOOK_POINT_REQUEST	src\plugin\base_plugin.hpp	/^      const int HOOK_POINT_REQUEST  = 1;$/;"	m	namespace:tair::plugin
HOOK_POINT_RESPONSE	src\plugin\base_plugin.hpp	/^      const int HOOK_POINT_RESPONSE = 2;$/;"	m	namespace:tair::plugin
PLUGIN_TYPE_REMOTE_SYNC	src\plugin\base_plugin.hpp	/^      const int PLUGIN_TYPE_REMOTE_SYNC = 2;$/;"	m	namespace:tair::plugin
PLUGIN_TYPE_SYSTEM	src\plugin\base_plugin.hpp	/^      const int PLUGIN_TYPE_SYSTEM  = 1;$/;"	m	namespace:tair::plugin
base_plugin	src\plugin\base_plugin.hpp	/^      class base_plugin {$/;"	c	namespace:tair::plugin
clean	src\plugin\base_plugin.hpp	/^         virtual void clean()$/;"	f	class:tair::plugin::base_plugin
create_t	src\plugin\base_plugin.hpp	/^      typedef base_plugin* (create_t)();$/;"	t	namespace:tair::plugin
destroy_t	src\plugin\base_plugin.hpp	/^      typedef void (destroy_t)(base_plugin*);$/;"	t	namespace:tair::plugin
init	src\plugin\base_plugin.hpp	/^         virtual bool init()$/;"	f	class:tair::plugin::base_plugin
init	src\plugin\base_plugin.hpp	/^         virtual bool init(const std::string& para)$/;"	f	class:tair::plugin::base_plugin
plugin	src\plugin\base_plugin.hpp	/^   namespace plugin {$/;"	n	namespace:tair
tair	src\plugin\base_plugin.hpp	/^namespace tair {$/;"	n
~base_plugin	src\plugin\base_plugin.hpp	/^         virtual ~base_plugin()$/;"	f	class:tair::plugin::base_plugin
HashPacketPair	src\plugin\hash_packet_pair.hpp	/^    HashPacketPair() {_ret = 0; _hashcode = 0; _packet = NULL;}$/;"	f	class:HashPacketPair
HashPacketPair	src\plugin\hash_packet_pair.hpp	/^    HashPacketPair(int ret, uint32_t hashcode, base_packet* packet, int nodeId = 0)$/;"	f	class:HashPacketPair
HashPacketPair	src\plugin\hash_packet_pair.hpp	/^class HashPacketPair : public BaseQueueNode {$/;"	c
__HASH_PACKET_PAIR__	src\plugin\hash_packet_pair.hpp	2;"	d
_hashcode	src\plugin\hash_packet_pair.hpp	/^    uint32_t _hashcode;$/;"	m	class:HashPacketPair
_packet	src\plugin\hash_packet_pair.hpp	/^    base_packet* _packet;$/;"	m	class:HashPacketPair
_ret	src\plugin\hash_packet_pair.hpp	/^    int _ret;$/;"	m	class:HashPacketPair
get_hashcode	src\plugin\hash_packet_pair.hpp	/^    uint32_t get_hashcode() {return _hashcode;}$/;"	f	class:HashPacketPair
get_packet	src\plugin\hash_packet_pair.hpp	/^    base_packet* get_packet() {return _packet;}$/;"	f	class:HashPacketPair
get_ret	src\plugin\hash_packet_pair.hpp	/^    int get_ret() {return _ret;}$/;"	f	class:HashPacketPair
hp_deserialize_func_	src\plugin\hash_packet_pair.hpp	/^bool HashPacketPair::hp_deserialize_func_(BaseQueueNode** data, tbnet::DataBuffer* dataBuffer) {$/;"	f	class:HashPacketPair
hp_serialize_func_	src\plugin\hash_packet_pair.hpp	/^bool HashPacketPair::hp_serialize_func_(BaseQueueNode* data, tbnet::DataBuffer** dataBuffer) {$/;"	f	class:HashPacketPair
set_hashcode	src\plugin\hash_packet_pair.hpp	/^    void set_hashcode(uint32_t hashcode) {$/;"	f	class:HashPacketPair
set_packet	src\plugin\hash_packet_pair.hpp	/^    void set_packet(base_packet* packet) {$/;"	f	class:HashPacketPair
set_ret	src\plugin\hash_packet_pair.hpp	/^    void set_ret(int ret) {$/;"	f	class:HashPacketPair
~HashPacketPair	src\plugin\hash_packet_pair.hpp	/^    ~HashPacketPair() {};$/;"	f	class:HashPacketPair
CREATE_FUNC_NAME	src\plugin\plugin_manager.cpp	/^      const string CREATE_FUNC_NAME = "create";$/;"	m	namespace:tair::plugin	file:
DESTROY_FUNC_NAME	src\plugin\plugin_manager.cpp	/^      const string DESTROY_FUNC_NAME = "destroy";$/;"	m	namespace:tair::plugin	file:
WAIT_SECONDS	src\plugin\plugin_manager.cpp	/^      const int WAIT_SECONDS = 30000000;$/;"	m	namespace:tair::plugin	file:
add_plugin	src\plugin\plugin_manager.cpp	/^      bool plugins_manager::add_plugin(const std::string& _dll_value, plugins_root* root)$/;"	f	class:tair::plugin::plugins_manager
add_plugins	src\plugin\plugin_manager.cpp	/^      bool plugins_manager::add_plugins(const set<string>& dll_names)$/;"	f	class:tair::plugin::plugins_manager
chang_plugins_to	src\plugin\plugin_manager.cpp	/^      bool plugins_manager::chang_plugins_to(const set<string>& dll_names)$/;"	f	class:tair::plugin::plugins_manager
clean_plugins	src\plugin\plugin_manager.cpp	/^      void plugins_manager::clean_plugins(plugins_root* &root)$/;"	f	class:tair::plugin::plugins_manager
do_request_plugins	src\plugin\plugin_manager.cpp	/^      int plugins_manager::do_request_plugins(int plugin_type, uint32_t hashcode,$/;"	f	class:tair::plugin::plugins_manager
do_response_plugins	src\plugin\plugin_manager.cpp	/^      void plugins_manager::do_response_plugins(int plugin_type, int ret, uint32_t hashcode,$/;"	f	class:tair::plugin::plugins_manager
get_dll_names	src\plugin\plugin_manager.cpp	/^      set<string>* plugins_manager::get_dll_names()$/;"	f	class:tair::plugin::plugins_manager
get_instance	src\plugin\plugin_manager.cpp	/^      base_plugin* plugin_handler::get_instance() const$/;"	f	class:tair::plugin::plugin_handler
load_dll	src\plugin\plugin_manager.cpp	/^      bool plugin_handler::load_dll()$/;"	f	class:tair::plugin::plugin_handler
plugin	src\plugin\plugin_manager.cpp	/^   namespace plugin {$/;"	n	namespace:tair	file:
plugin_handler	src\plugin\plugin_manager.cpp	/^      plugin_handler::plugin_handler(const std::string& dll_name_value)$/;"	f	class:tair::plugin::plugin_handler
remove_plugins	src\plugin\plugin_manager.cpp	/^      void plugins_manager::remove_plugins(const set<string>& dll_names)$/;"	f	class:tair::plugin::plugins_manager
tair	src\plugin\plugin_manager.cpp	/^namespace tair {$/;"	n	file:
unload_dll	src\plugin\plugin_manager.cpp	/^      bool plugin_handler::unload_dll()$/;"	f	class:tair::plugin::plugin_handler
~plugin_handler	src\plugin\plugin_manager.cpp	/^      plugin_handler::~plugin_handler()$/;"	f	class:tair::plugin::plugin_handler
~plugins_manager	src\plugin\plugin_manager.cpp	/^      plugins_manager::~plugins_manager()$/;"	f	class:tair::plugin::plugins_manager
MAX_PLUGINS	src\plugin\plugin_manager.hpp	54;"	d
MAX_PROPERTYS	src\plugin\plugin_manager.hpp	55;"	d
PLUGIN_MANAGER_H	src\plugin\plugin_manager.hpp	16;"	d
add_request_plugin_handler	src\plugin\plugin_manager.hpp	/^          plugin_handler* add_request_plugin_handler(int type, int property, plugin_handler* handler) {$/;"	f	class:tair::plugin::plugins_root
add_response_plugin_handler	src\plugin\plugin_manager.hpp	/^          plugin_handler* add_response_plugin_handler(int type, int property, plugin_handler* handler) {$/;"	f	class:tair::plugin::plugins_root
clean_request_type_plugins	src\plugin\plugin_manager.hpp	/^          void clean_request_type_plugins(int type) {$/;"	f	class:tair::plugin::plugins_root
clean_response_type_plugins	src\plugin\plugin_manager.hpp	/^          void clean_response_type_plugins(int type) {$/;"	f	class:tair::plugin::plugins_root
create	src\plugin\plugin_manager.hpp	/^         create_t* create;$/;"	m	class:tair::plugin::plugin_handler
destroy	src\plugin\plugin_manager.hpp	/^         destroy_t* destroy;$/;"	m	class:tair::plugin::plugin_handler
dll_handler	src\plugin\plugin_manager.hpp	/^         void* dll_handler;$/;"	m	class:tair::plugin::plugin_handler
dll_name	src\plugin\plugin_manager.hpp	/^         std::string dll_name;$/;"	m	class:tair::plugin::plugin_handler
exist_type_request_plugins	src\plugin\plugin_manager.hpp	/^          bool exist_type_request_plugins(int type) {$/;"	f	class:tair::plugin::plugins_root
exist_type_request_plugins	src\plugin\plugin_manager.hpp	/^         bool exist_type_request_plugins(int type) {$/;"	f	class:tair::plugin::plugins_manager
exist_type_response_plugins	src\plugin\plugin_manager.hpp	/^          bool exist_type_response_plugins(int type) {$/;"	f	class:tair::plugin::plugins_root
exist_type_response_plugins	src\plugin\plugin_manager.hpp	/^         bool exist_type_response_plugins(int type) {$/;"	f	class:tair::plugin::plugins_manager
get_dll_name	src\plugin\plugin_manager.hpp	/^         std::string get_dll_name() const {$/;"	f	class:tair::plugin::plugin_handler
get_request_plugins_end	src\plugin\plugin_manager.hpp	/^          uint8_t get_request_plugins_end(int type) {$/;"	f	class:tair::plugin::plugins_root
get_request_plugins_start	src\plugin\plugin_manager.hpp	/^          uint8_t get_request_plugins_start(int type) {$/;"	f	class:tair::plugin::plugins_root
get_response_plugins_end	src\plugin\plugin_manager.hpp	/^          uint8_t get_response_plugins_end(int type) {$/;"	f	class:tair::plugin::plugins_root
get_response_plugins_start	src\plugin\plugin_manager.hpp	/^          uint8_t get_response_plugins_start(int type) {$/;"	f	class:tair::plugin::plugins_root
instance	src\plugin\plugin_manager.hpp	/^         base_plugin* instance;$/;"	m	class:tair::plugin::plugin_handler
mutex	src\plugin\plugin_manager.hpp	/^         tbsys::CThreadMutex mutex;$/;"	m	class:tair::plugin::plugins_manager
plugin	src\plugin\plugin_manager.hpp	/^   namespace plugin {$/;"	n	namespace:tair
plugin_handler	src\plugin\plugin_manager.hpp	/^      class plugin_handler {$/;"	c	namespace:tair::plugin
plugins_manager	src\plugin\plugin_manager.hpp	/^         plugins_manager(): root(NULL) {}$/;"	f	class:tair::plugin::plugins_manager
plugins_manager	src\plugin\plugin_manager.hpp	/^      class plugins_manager {$/;"	c	namespace:tair::plugin
plugins_root	src\plugin\plugin_manager.hpp	/^          plugins_root() {$/;"	f	class:tair::plugin::plugins_root
plugins_root	src\plugin\plugin_manager.hpp	/^      class plugins_root { \/\/ this class for copy on write$/;"	c	namespace:tair::plugin
request_plugins	src\plugin\plugin_manager.hpp	/^          plugin_handler* request_plugins[MAX_PLUGINS][MAX_PROPERTYS];$/;"	m	class:tair::plugin::plugins_root
request_plugins_end	src\plugin\plugin_manager.hpp	/^          uint8_t request_plugins_end[MAX_PLUGINS];$/;"	m	class:tair::plugin::plugins_root
request_plugins_start	src\plugin\plugin_manager.hpp	/^          uint8_t request_plugins_start[MAX_PLUGINS];$/;"	m	class:tair::plugin::plugins_root
response_plugins	src\plugin\plugin_manager.hpp	/^          plugin_handler* response_plugins[MAX_PLUGINS][MAX_PROPERTYS];$/;"	m	class:tair::plugin::plugins_root
response_plugins_end	src\plugin\plugin_manager.hpp	/^          uint8_t response_plugins_end[MAX_PLUGINS];$/;"	m	class:tair::plugin::plugins_root
response_plugins_start	src\plugin\plugin_manager.hpp	/^          uint8_t response_plugins_start[MAX_PLUGINS];$/;"	m	class:tair::plugin::plugins_root
root	src\plugin\plugin_manager.hpp	/^         plugins_root* root;$/;"	m	class:tair::plugin::plugins_manager
tair	src\plugin\plugin_manager.hpp	/^namespace tair{$/;"	n
clean	src\plugin\remote_sync_manager.cpp	/^   void remote_sync_manager::clean()$/;"	f	class:tair::remote_sync_manager
create	src\plugin\remote_sync_manager.cpp	/^   extern "C" remote_sync_manager* create()$/;"	f	namespace:tair
destroy	src\plugin\remote_sync_manager.cpp	/^   extern "C" void destroy (remote_sync_manager* p)$/;"	f	namespace:tair
do_response	src\plugin\remote_sync_manager.cpp	/^   void remote_sync_manager::do_response(int ret, uint32_t hashcode, base_packet *packet, void* exv) {$/;"	f	class:tair::remote_sync_manager
do_send_packet	src\plugin\remote_sync_manager.cpp	/^   int remote_sync_manager::do_send_packet(const uint32_t hashcode, base_packet* packet)$/;"	f	class:tair::remote_sync_manager
get_hook_point	src\plugin\remote_sync_manager.cpp	/^   int remote_sync_manager::get_hook_point() {$/;"	f	class:tair::remote_sync_manager
get_plugin_type	src\plugin\remote_sync_manager.cpp	/^   int remote_sync_manager::get_plugin_type() {$/;"	f	class:tair::remote_sync_manager
get_property	src\plugin\remote_sync_manager.cpp	/^   int remote_sync_manager::get_property() {$/;"	f	class:tair::remote_sync_manager
handle_send_queue	src\plugin\remote_sync_manager.cpp	/^   void remote_sync_manager::handle_send_queue()$/;"	f	class:tair::remote_sync_manager
init	src\plugin\remote_sync_manager.cpp	/^   bool remote_sync_manager::init()$/;"	f	class:tair::remote_sync_manager
init	src\plugin\remote_sync_manager.cpp	/^   bool remote_sync_manager::init(const std::string& para)$/;"	f	class:tair::remote_sync_manager
init_tair_client	src\plugin\remote_sync_manager.cpp	/^   bool remote_sync_manager::init_tair_client(tair_client_impl& _client,$/;"	f	class:tair::remote_sync_manager
remote_sync_manager	src\plugin\remote_sync_manager.cpp	/^   remote_sync_manager::remote_sync_manager(LocalQueue::serialize_func_ serializer,$/;"	f	class:tair::remote_sync_manager
run	src\plugin\remote_sync_manager.cpp	/^   void remote_sync_manager::run(tbsys::CThread *thread, void *arg)$/;"	f	class:tair::remote_sync_manager
tair	src\plugin\remote_sync_manager.cpp	/^namespace tair{$/;"	n	file:
try_get_key	src\plugin\remote_sync_manager.cpp	/^   const data_entry* remote_sync_manager::try_get_key(base_packet *bpacket)$/;"	f	class:tair::remote_sync_manager
~remote_sync_manager	src\plugin\remote_sync_manager.cpp	/^   remote_sync_manager::~remote_sync_manager()$/;"	f	class:tair::remote_sync_manager
MAX_DUP_THREAD	src\plugin\remote_sync_manager.hpp	33;"	d
MAX_GROUP_NAME	src\plugin\remote_sync_manager.hpp	32;"	d
MAX_IP_PORT_LEN	src\plugin\remote_sync_manager.hpp	31;"	d
REMOTE_SYNC_MANAGER_H	src\plugin\remote_sync_manager.hpp	15;"	d
_remote_conf	src\plugin\remote_sync_manager.hpp	/^            struct sync_conf _remote_conf;$/;"	m	class:tair::remote_sync_manager	typeref:struct:tair::remote_sync_manager::sync_conf
_remote_tairclient	src\plugin\remote_sync_manager.hpp	/^            tair_client_impl _remote_tairclient;$/;"	m	class:tair::remote_sync_manager
async_call_node	src\plugin\remote_sync_manager.hpp	/^            async_call_node(uint64_t _pkg_id, data_entry* _key,$/;"	f	class:tair::async_call_node
async_call_node	src\plugin\remote_sync_manager.hpp	/^    class async_call_node$/;"	c	namespace:tair
do_request	src\plugin\remote_sync_manager.hpp	/^            int do_request(uint32_t hashcode, base_packet* packet, void* exv = NULL) {return 0;}$/;"	f	class:tair::remote_sync_manager
failed	src\plugin\remote_sync_manager.hpp	/^            uint8_t failed;$/;"	m	class:tair::async_call_node
group_name	src\plugin\remote_sync_manager.hpp	/^        char group_name[MAX_GROUP_NAME];$/;"	m	struct:tair::sync_conf
init	src\plugin\remote_sync_manager.hpp	/^        bool init(const char* _conf_str)$/;"	f	struct:tair::sync_conf
local_queue	src\plugin\remote_sync_manager.hpp	/^            LocalQueue local_queue;$/;"	m	class:tair::remote_sync_manager
log_push_failed	src\plugin\remote_sync_manager.hpp	/^            BinLogWriter *log_push_failed;$/;"	m	class:tair::remote_sync_manager
log_send_failed	src\plugin\remote_sync_manager.hpp	/^            BinLogWriter *log_send_failed;$/;"	m	class:tair::remote_sync_manager
m_base_home	src\plugin\remote_sync_manager.hpp	/^            char m_base_home[NAME_MAX];$/;"	m	class:tair::remote_sync_manager
m_data_dir	src\plugin\remote_sync_manager.hpp	/^            char m_data_dir[NAME_MAX];$/;"	m	class:tair::remote_sync_manager
m_inited	src\plugin\remote_sync_manager.hpp	/^            bool m_inited;$/;"	m	class:tair::remote_sync_manager
master_ip	src\plugin\remote_sync_manager.hpp	/^        char master_ip[MAX_IP_PORT_LEN];$/;"	m	struct:tair::sync_conf
pkey	src\plugin\remote_sync_manager.hpp	/^            data_entry* pkey;$/;"	m	class:tair::async_call_node
pkg_id	src\plugin\remote_sync_manager.hpp	/^            uint64_t pkg_id;$/;"	m	class:tair::async_call_node
pmanager	src\plugin\remote_sync_manager.hpp	/^            remote_sync_manager* pmanager;$/;"	m	class:tair::async_call_node
remote_data_dir	src\plugin\remote_sync_manager.hpp	/^        char remote_data_dir[NAME_MAX];$/;"	m	struct:tair::sync_conf
remote_sync_manager	src\plugin\remote_sync_manager.hpp	/^    class remote_sync_manager :public plugin::base_plugin,public tbsys::CDefaultRunnable$/;"	c	namespace:tair
slave_ip	src\plugin\remote_sync_manager.hpp	/^        char slave_ip[MAX_IP_PORT_LEN];$/;"	m	struct:tair::sync_conf
sync_conf	src\plugin\remote_sync_manager.hpp	/^    struct sync_conf$/;"	s	namespace:tair
tair	src\plugin\remote_sync_manager.hpp	/^namespace tair {$/;"	n
clean	src\plugin\sample_plugin.cpp	/^      void sample_plugin::clean()$/;"	f	class:tair::plugin::sample_plugin
create	src\plugin\sample_plugin.cpp	/^      extern "C" base_plugin* create()$/;"	f	namespace:tair::plugin
destroy	src\plugin\sample_plugin.cpp	/^      extern "C" void destroy (base_plugin* p)$/;"	f	namespace:tair::plugin
do_request	src\plugin\sample_plugin.cpp	/^      int sample_plugin::do_request(uint32_t hashcode, base_packet* packet, void* exv) {$/;"	f	class:tair::plugin::sample_plugin
do_response	src\plugin\sample_plugin.cpp	/^      void sample_plugin::do_response(int ret, uint32_t hashcode, base_packet* packet, void* exv) {$/;"	f	class:tair::plugin::sample_plugin
get_hook_point	src\plugin\sample_plugin.cpp	/^      int sample_plugin::get_hook_point() {$/;"	f	class:tair::plugin::sample_plugin
get_plugin_type	src\plugin\sample_plugin.cpp	/^      int sample_plugin::get_plugin_type() {$/;"	f	class:tair::plugin::sample_plugin
get_property	src\plugin\sample_plugin.cpp	/^      int sample_plugin::get_property() {$/;"	f	class:tair::plugin::sample_plugin
init	src\plugin\sample_plugin.cpp	/^      bool sample_plugin::init()$/;"	f	class:tair::plugin::sample_plugin
plugin	src\plugin\sample_plugin.cpp	/^   namespace plugin{$/;"	n	namespace:tair	file:
tair	src\plugin\sample_plugin.cpp	/^namespace tair{$/;"	n	file:
SAMPLE_PLUGIN_H	src\plugin\sample_plugin.hpp	16;"	d
plugin	src\plugin\sample_plugin.hpp	/^   namespace plugin {$/;"	n	namespace:tair
sample_plugin	src\plugin\sample_plugin.hpp	/^      class sample_plugin: public base_plugin {$/;"	c	namespace:tair::plugin
tair	src\plugin\sample_plugin.hpp	/^namespace tair {$/;"	n
do_dump	src\storage\dump_filter.cpp	/^    bool dump_filter::do_dump(const data_entry & key,$/;"	f	class:tair::storage::dump_filter
dump_filter	src\storage\dump_filter.cpp	/^    dump_filter::dump_filter()$/;"	f	class:tair::storage::dump_filter
dump_filter	src\storage\dump_filter.cpp	/^    dump_filter::dump_filter(const dump_filter & rv)$/;"	f	class:tair::storage::dump_filter
end_dump	src\storage\dump_filter.cpp	/^    void dump_filter::end_dump(bool cancle)$/;"	f	class:tair::storage::dump_filter
operator <	src\storage\dump_filter.cpp	/^    bool dump_filter::operator <(const dump_filter & rv) const$/;"	f	class:tair::storage::dump_filter
set_parameter	src\storage\dump_filter.cpp	/^    void dump_filter::set_parameter(uint32_t start_time, uint32_t end_time,$/;"	f	class:tair::storage::dump_filter
should_be_kept	src\storage\dump_filter.cpp	/^    bool dump_filter::should_be_kept(uint32_t area, uint32_t modify_time) const$/;"	f	class:tair::storage::dump_filter
storage	src\storage\dump_filter.cpp	/^  namespace storage {$/;"	n	namespace:tair	file:
tair	src\storage\dump_filter.cpp	/^namespace tair {$/;"	n	file:
turn_interval	src\storage\dump_filter.cpp	/^    void dump_filter::turn_interval(uint32_t now)$/;"	f	class:tair::storage::dump_filter
TAIR_DUMP_FILTER	src\storage\dump_filter.hpp	16;"	d
area	src\storage\dump_filter.hpp	/^      int32_t area;                \/\/-1 means all$/;"	m	class:tair::storage::dump_filter
dump_filter	src\storage\dump_filter.hpp	/^    class dump_filter {$/;"	c	namespace:tair::storage
end_time	src\storage\dump_filter.hpp	/^      uint32_t end_time;$/;"	m	class:tair::storage::dump_filter
file_name	src\storage\dump_filter.hpp	/^      std::string file_name;$/;"	m	class:tair::storage::dump_filter
file_op	src\storage\dump_filter.hpp	/^      fdb::file_operation file_op;$/;"	m	class:tair::storage::dump_filter
now	src\storage\dump_filter.hpp	/^      uint32_t now;$/;"	m	class:tair::storage::dump_filter
out_data_dir	src\storage\dump_filter.hpp	/^      std::string out_data_dir;$/;"	m	class:tair::storage::dump_filter
start_time	src\storage\dump_filter.hpp	/^      uint32_t start_time;$/;"	m	class:tair::storage::dump_filter
storage	src\storage\dump_filter.hpp	/^  namespace storage {$/;"	n	namespace:tair
tair	src\storage\dump_filter.hpp	/^namespace tair {$/;"	n
cancle	src\storage\dump_manager.cpp	/^    void dump_thread::cancle()$/;"	f	class:tair::storage::dump_thread
cancle_all	src\storage\dump_manager.cpp	/^    void dump_manager::cancle_all()$/;"	f	class:tair::storage::dump_manager
do_dump	src\storage\dump_manager.cpp	/^    void dump_manager::do_dump(const std::set <dump_filter> &dumpFilter,$/;"	f	class:tair::storage::dump_manager
dump_manager	src\storage\dump_manager.cpp	/^  dump_manager::dump_manager(storage_manager * p):storage_mgr(p) {$/;"	f	class:tair::storage::dump_manager
dump_thread	src\storage\dump_manager.cpp	/^    dump_thread::dump_thread(const set<dump_filter> &dumpFilter,$/;"	f	class:tair::storage::dump_thread
is_alive	src\storage\dump_manager.cpp	/^    bool dump_thread::is_alive() const$/;"	f	class:tair::storage::dump_thread
is_all_stoped	src\storage\dump_manager.cpp	/^    bool dump_manager::is_all_stoped()$/;"	f	class:tair::storage::dump_manager
release_reference	src\storage\dump_manager.cpp	/^    void dump_manager::release_reference()$/;"	f	class:tair::storage::dump_manager
run	src\storage\dump_manager.cpp	/^    void dump_thread::run(tbsys::CThread * thread, void *arg)$/;"	f	class:tair::storage::dump_thread
storage	src\storage\dump_manager.cpp	/^  namespace storage {$/;"	n	namespace:tair	file:
tair	src\storage\dump_manager.cpp	/^namespace tair {$/;"	n	file:
~dump_manager	src\storage\dump_manager.cpp	/^    dump_manager::~dump_manager() {$/;"	f	class:tair::storage::dump_manager
TAIR_DUM_MANAGER_H	src\storage\dump_manager.hpp	16;"	d
buckets	src\storage\dump_manager.hpp	/^        std::set<uint32_t> buckets;$/;"	m	class:tair::storage::dump_thread
cancled	src\storage\dump_manager.hpp	/^        bool cancled;$/;"	m	class:tair::storage::dump_thread
dump_filters	src\storage\dump_manager.hpp	/^        std::vector<dump_filter> dump_filters;$/;"	m	class:tair::storage::dump_thread
dump_manager	src\storage\dump_manager.hpp	/^    class dump_manager$/;"	c	namespace:tair::storage
dump_thread	src\storage\dump_manager.hpp	/^    class dump_thread:public tbsys::CDefaultRunnable {$/;"	c	namespace:tair::storage
mutex	src\storage\dump_manager.hpp	/^      tbsys::CThreadMutex mutex;$/;"	m	class:tair::storage::dump_manager
running	src\storage\dump_manager.hpp	/^      bool running;$/;"	m	class:tair::storage::dump_thread
set_thread	src\storage\dump_manager.hpp	/^      std::set<dump_thread *>set_thread;$/;"	m	class:tair::storage::dump_manager
storage	src\storage\dump_manager.hpp	/^  namespace storage {$/;"	n	namespace:tair
storage_mgr	src\storage\dump_manager.hpp	/^      storage_manager *storage_mgr;$/;"	m	class:tair::storage::dump_manager
storage_mgr	src\storage\dump_manager.hpp	/^      storage_manager *storage_mgr;$/;"	m	class:tair::storage::dump_thread
tair	src\storage\dump_manager.hpp	/^namespace tair {$/;"	n
close	src\storage\fdb\data_file_reader.cpp	/^      void data_reader::close()$/;"	f	class:tair::storage::fdb::data_reader
data_reader	src\storage\fdb\data_file_reader.cpp	/^      data_reader::data_reader()$/;"	f	class:tair::storage::fdb::data_reader
fdb	src\storage\fdb\data_file_reader.cpp	/^    namespace fdb {$/;"	n	namespace:tair::storage	file:
get_next_item	src\storage\fdb\data_file_reader.cpp	/^      item_data_info *data_reader::get_next_item()$/;"	f	class:tair::storage::fdb::data_reader
read_file_by_lock	src\storage\fdb\data_file_reader.cpp	/^      uint32_t data_reader::read_file_by_lock(uint32_t size)$/;"	f	class:tair::storage::fdb::data_reader
set_file	src\storage\fdb\data_file_reader.cpp	/^      void data_reader::set_file(file_operation * file)$/;"	f	class:tair::storage::fdb::data_reader
set_length	src\storage\fdb\data_file_reader.cpp	/^      void data_reader::set_length(uint64_t len)$/;"	f	class:tair::storage::fdb::data_reader
storage	src\storage\fdb\data_file_reader.cpp	/^  namespace storage {$/;"	n	namespace:tair	file:
tair	src\storage\fdb\data_file_reader.cpp	/^namespace tair {$/;"	n	file:
~data_reader	src\storage\fdb\data_file_reader.cpp	/^      data_reader::~data_reader()$/;"	f	class:tair::storage::fdb::data_reader
SYNC_READ_FILE_LEN	src\storage\fdb\data_file_reader.hpp	/^      static const uint32_t SYNC_READ_FILE_LEN = 64 * 1024;$/;"	m	namespace:tair::storage::fdb
TAIR_FDB_DATA_FILE_READ_HPP	src\storage\fdb\data_file_reader.hpp	18;"	d
buffer	src\storage\fdb\data_file_reader.hpp	/^        char *buffer;$/;"	m	class:tair::storage::fdb::data_reader
buffer_offset	src\storage\fdb\data_file_reader.hpp	/^        uint64_t buffer_offset;$/;"	m	class:tair::storage::fdb::data_reader
data_file	src\storage\fdb\data_file_reader.hpp	/^        file_operation *data_file;$/;"	m	class:tair::storage::fdb::data_reader
data_reader	src\storage\fdb\data_file_reader.hpp	/^      class data_reader{$/;"	c	namespace:tair::storage::fdb
fdb	src\storage\fdb\data_file_reader.hpp	/^    namespace fdb {$/;"	n	namespace:tair::storage
file_size	src\storage\fdb\data_file_reader.hpp	/^        uint64_t file_size;$/;"	m	class:tair::storage::fdb::data_reader
has_read	src\storage\fdb\data_file_reader.hpp	/^        bool has_read;$/;"	m	class:tair::storage::fdb::data_reader
last_length	src\storage\fdb\data_file_reader.hpp	/^        uint32_t last_length;$/;"	m	class:tair::storage::fdb::data_reader
offset	src\storage\fdb\data_file_reader.hpp	/^        uint64_t offset;$/;"	m	class:tair::storage::fdb::data_reader
read_length	src\storage\fdb\data_file_reader.hpp	/^        uint64_t read_length;$/;"	m	class:tair::storage::fdb::data_reader
storage	src\storage\fdb\data_file_reader.hpp	/^  namespace storage {$/;"	n	namespace:tair
tair	src\storage\fdb\data_file_reader.hpp	/^namespace tair {$/;"	n
want_length	src\storage\fdb\data_file_reader.hpp	/^        uint32_t want_length;$/;"	m	class:tair::storage::fdb::data_reader
backup	src\storage\fdb\fdb_bucket.cpp	/^      void fdb_bucket::backup()$/;"	f	class:tair::storage::fdb::fdb_bucket
fdb	src\storage\fdb\fdb_bucket.cpp	/^    namespace fdb {$/;"	n	namespace:tair::storage	file:
fdb_bucket	src\storage\fdb\fdb_bucket.cpp	/^      fdb_bucket::fdb_bucket()$/;"	f	class:tair::storage::fdb::fdb_bucket
get	src\storage\fdb\fdb_bucket.cpp	/^      int fdb_bucket::get(data_entry & key, data_entry & value,$/;"	f	class:tair::storage::fdb::fdb_bucket
get_stat	src\storage\fdb\fdb_bucket.cpp	/^      void fdb_bucket::get_stat(tair_stat * stat)$/;"	f	class:tair::storage::fdb::fdb_bucket
is_item_expired	src\storage\fdb\fdb_bucket.cpp	/^      bool fdb_bucket::is_item_expired(fdb_item & item)$/;"	f	class:tair::storage::fdb::fdb_bucket
pad_size	src\storage\fdb\fdb_bucket.cpp	/^      int fdb_bucket::pad_size(int data_size)$/;"	f	class:tair::storage::fdb::fdb_bucket
put	src\storage\fdb\fdb_bucket.cpp	/^      int fdb_bucket::put(data_entry & key, data_entry & value,$/;"	f	class:tair::storage::fdb::fdb_bucket
remove	src\storage\fdb\fdb_bucket.cpp	/^      int fdb_bucket::remove(data_entry & key, bool version_care,$/;"	f	class:tair::storage::fdb::fdb_bucket
start	src\storage\fdb\fdb_bucket.cpp	/^      bool fdb_bucket::start(int bucket_number)$/;"	f	class:tair::storage::fdb::fdb_bucket
stop	src\storage\fdb\fdb_bucket.cpp	/^      void fdb_bucket::stop()$/;"	f	class:tair::storage::fdb::fdb_bucket
storage	src\storage\fdb\fdb_bucket.cpp	/^  namespace storage {$/;"	n	namespace:tair	file:
tair	src\storage\fdb\fdb_bucket.cpp	/^namespace tair {$/;"	n	file:
~fdb_bucket	src\storage\fdb\fdb_bucket.cpp	/^      fdb_bucket::~fdb_bucket()$/;"	f	class:tair::storage::fdb::fdb_bucket
TAIR_FDB_BUCKET_H	src\storage\fdb\fdb_bucket.hpp	18;"	d
fdb	src\storage\fdb\fdb_bucket.hpp	/^    namespace fdb  {$/;"	n	namespace:tair::storage
fdb_bucket	src\storage\fdb\fdb_bucket.hpp	/^      class fdb_bucket {$/;"	c	namespace:tair::storage::fdb
item_manager	src\storage\fdb\fdb_bucket.hpp	/^          fdb_item_manager * item_manager;$/;"	m	class:tair::storage::fdb::fdb_bucket
lockers	src\storage\fdb\fdb_bucket.hpp	/^          locker *lockers;$/;"	m	class:tair::storage::fdb::fdb_bucket
storage	src\storage\fdb\fdb_bucket.hpp	/^  namespace storage {$/;"	n	namespace:tair
tair	src\storage\fdb\fdb_bucket.hpp	/^namespace tair {$/;"	n
FDB_ITEM_DATA_SIZE	src\storage\fdb\fdb_item.hpp	/^      const static int FDB_ITEM_DATA_SIZE = sizeof(item_meta_info);$/;"	m	namespace:tair::storage::fdb
FDB_ITEM_H	src\storage\fdb\fdb_item.hpp	18;"	d
FDB_ITEM_META_SIZE	src\storage\fdb\fdb_item.hpp	/^      const static int FDB_ITEM_META_SIZE = sizeof(item_index);$/;"	m	namespace:tair::storage::fdb
_item_index	src\storage\fdb\fdb_item.hpp	/^      typedef struct _item_index$/;"	s	namespace:tair::storage::fdb
bucket_index	src\storage\fdb\fdb_item.hpp	/^        uint32_t bucket_index;$/;"	m	class:tair::storage::fdb::fdb_item
data	src\storage\fdb\fdb_item.hpp	/^        item_meta_info data;$/;"	m	class:tair::storage::fdb::fdb_item
fdb	src\storage\fdb\fdb_item.hpp	/^    namespace fdb {$/;"	n	namespace:tair::storage
fdb_item	src\storage\fdb\fdb_item.hpp	/^        fdb_item()$/;"	f	class:tair::storage::fdb::fdb_item
fdb_item	src\storage\fdb\fdb_item.hpp	/^      class fdb_item {$/;"	c	namespace:tair::storage::fdb
free_value	src\storage\fdb\fdb_item.hpp	/^        void free_value()$/;"	f	class:tair::storage::fdb::fdb_item
hashcode	src\storage\fdb\fdb_item.hpp	/^        uint64_t hashcode;$/;"	m	struct:tair::storage::fdb::_item_index
is_new	src\storage\fdb\fdb_item.hpp	/^        bool is_new;$/;"	m	class:tair::storage::fdb::fdb_item
is_right	src\storage\fdb\fdb_item.hpp	/^        bool is_right;$/;"	m	class:tair::storage::fdb::fdb_item
item_index	src\storage\fdb\fdb_item.hpp	/^      } item_index;$/;"	t	namespace:tair::storage::fdb	typeref:struct:tair::storage::fdb::_item_index
key	src\storage\fdb\fdb_item.hpp	/^        char *key;$/;"	m	class:tair::storage::fdb::fdb_item
left	src\storage\fdb\fdb_item.hpp	/^        uint32_t left;$/;"	m	struct:tair::storage::fdb::_item_index
log_self	src\storage\fdb\fdb_item.hpp	/^        void log_self(const char *hit = "") {$/;"	f	class:tair::storage::fdb::fdb_item
meta	src\storage\fdb\fdb_item.hpp	/^        item_index meta;$/;"	m	class:tair::storage::fdb::fdb_item
meta_offset	src\storage\fdb\fdb_item.hpp	/^        uint32_t meta_offset;$/;"	m	class:tair::storage::fdb::fdb_item
offset	src\storage\fdb\fdb_item.hpp	/^        uint64_t offset:40;$/;"	m	struct:tair::storage::fdb::_item_index
parent_off	src\storage\fdb\fdb_item.hpp	/^        uint32_t parent_off;$/;"	m	class:tair::storage::fdb::fdb_item
right	src\storage\fdb\fdb_item.hpp	/^        uint32_t right;$/;"	m	struct:tair::storage::fdb::_item_index
size	src\storage\fdb\fdb_item.hpp	/^        uint64_t size:24;$/;"	m	struct:tair::storage::fdb::_item_index
storage	src\storage\fdb\fdb_item.hpp	/^  namespace storage {$/;"	n	namespace:tair
tair	src\storage\fdb\fdb_item.hpp	/^namespace tair {$/;"	n
value	src\storage\fdb\fdb_item.hpp	/^        char *value;$/;"	m	class:tair::storage::fdb::fdb_item
backup	src\storage\fdb\fdb_item_manager.cpp	/^      void fdb_item_manager::backup()$/;"	f	class:tair::storage::fdb::fdb_item_manager
dump_default_db_header	src\storage\fdb\fdb_item_manager.cpp	/^      void fdb_item_manager::dump_default_db_header(db_header & header)$/;"	f	class:tair::storage::fdb::fdb_item_manager
fdb	src\storage\fdb\fdb_item_manager.cpp	/^    namespace fdb {$/;"	n	namespace:tair::storage	file:
fdb_item_manager	src\storage\fdb\fdb_item_manager.cpp	/^      fdb_item_manager::fdb_item_manager()$/;"	f	class:tair::storage::fdb::fdb_item_manager
free_data	src\storage\fdb\fdb_item_manager.cpp	/^      void fdb_item_manager::free_data(fdb_item & old_item)$/;"	f	class:tair::storage::fdb::fdb_item_manager
free_item	src\storage\fdb\fdb_item_manager.cpp	/^      void fdb_item_manager::free_item(fdb_item & old_item)$/;"	f	class:tair::storage::fdb::fdb_item_manager
free_meta	src\storage\fdb\fdb_item_manager.cpp	/^      void fdb_item_manager::free_meta(fdb_item & old_item)$/;"	f	class:tair::storage::fdb::fdb_item_manager
get_item	src\storage\fdb\fdb_item_manager.cpp	/^      int fdb_item_manager::get_item(data_entry & key, fdb_item & ret_item)$/;"	f	class:tair::storage::fdb::fdb_item_manager
get_stat	src\storage\fdb\fdb_item_manager.cpp	/^      tair_pstat *fdb_item_manager::get_stat() const$/;"	f	class:tair::storage::fdb::fdb_item_manager
initialize	src\storage\fdb\fdb_item_manager.cpp	/^      int fdb_item_manager::initialize(int bucket_number)$/;"	f	class:tair::storage::fdb::fdb_item_manager
new_data	src\storage\fdb\fdb_item_manager.cpp	/^      void fdb_item_manager::new_data(fdb_item & ret_item, bool exclusive)$/;"	f	class:tair::storage::fdb::fdb_item_manager
new_item	src\storage\fdb\fdb_item_manager.cpp	/^      void fdb_item_manager::new_item(fdb_item & ret_item)$/;"	f	class:tair::storage::fdb::fdb_item_manager
read_data	src\storage\fdb\fdb_item_manager.cpp	/^      bool fdb_item_manager::read_data(fdb_item & ret_item, char *data,$/;"	f	class:tair::storage::fdb::fdb_item_manager
read_meta	src\storage\fdb\fdb_item_manager.cpp	/^      bool fdb_item_manager::read_meta(fdb_item & ret_item)$/;"	f	class:tair::storage::fdb::fdb_item_manager
stat_add	src\storage\fdb\fdb_item_manager.cpp	/^      void fdb_item_manager::stat_add(int area, int data_size, int use_size)$/;"	f	class:tair::storage::fdb::fdb_item_manager
stat_sub	src\storage\fdb\fdb_item_manager.cpp	/^      void fdb_item_manager::stat_sub(int area, int data_size, int use_size)$/;"	f	class:tair::storage::fdb::fdb_item_manager
storage	src\storage\fdb\fdb_item_manager.cpp	/^  namespace storage  {$/;"	n	namespace:tair	file:
tair	src\storage\fdb\fdb_item_manager.cpp	/^namespace tair {$/;"	n	file:
update_item	src\storage\fdb\fdb_item_manager.cpp	/^      int fdb_item_manager::update_item(fdb_item & up_item)$/;"	f	class:tair::storage::fdb::fdb_item_manager
write_data	src\storage\fdb\fdb_item_manager.cpp	/^      bool fdb_item_manager::write_data(fdb_item & old_item)$/;"	f	class:tair::storage::fdb::fdb_item_manager
write_meta	src\storage\fdb\fdb_item_manager.cpp	/^      bool fdb_item_manager::write_meta(fdb_item & old_item)$/;"	f	class:tair::storage::fdb::fdb_item_manager
~fdb_item_manager	src\storage\fdb\fdb_item_manager.cpp	/^      fdb_item_manager::~fdb_item_manager()$/;"	f	class:tair::storage::fdb::fdb_item_manager
DATA_MAGIC	src\storage\fdb\fdb_item_manager.hpp	/^      const static char DATA_MAGIC[16] = "TAIR_DAT_200";$/;"	m	namespace:tair::storage::fdb
DATA_PADDING_SIZE	src\storage\fdb\fdb_item_manager.hpp	/^      const static int DATA_PADDING_SIZE = 128;$/;"	m	namespace:tair::storage::fdb
DATA_SUFFIX	src\storage\fdb\fdb_item_manager.hpp	/^      const static char DATA_SUFFIX[4] = "dat";$/;"	m	namespace:tair::storage::fdb
DBHEADER_MAGIC_SIZE	src\storage\fdb\fdb_item_manager.hpp	/^    const static int DBHEADER_MAGIC_SIZE = 16;$/;"	m	namespace:tair::storage
DBHEADER_SIZE	src\storage\fdb\fdb_item_manager.hpp	/^      const static size_t DBHEADER_SIZE = sizeof(db_header);$/;"	m	namespace:tair::storage::fdb
FDB_BUCKET_NUMBER	src\storage\fdb\fdb_item_manager.hpp	/^      const static int FDB_BUCKET_NUMBER = 10223;$/;"	m	namespace:tair::storage::fdb
FDB_ITEM_MANAGER_H	src\storage\fdb\fdb_item_manager.hpp	17;"	d
FILENAME_MAX_LENGTH	src\storage\fdb\fdb_item_manager.hpp	/^      const static int FILENAME_MAX_LENGTH = 100;$/;"	m	namespace:tair::storage::fdb
INDEX_MAGIC	src\storage\fdb\fdb_item_manager.hpp	/^      const static char INDEX_MAGIC[16] = "TAIR_IDX_200";$/;"	m	namespace:tair::storage::fdb
INDEX_SUFFIX	src\storage\fdb\fdb_item_manager.hpp	/^      const static char INDEX_SUFFIX[4] = "idx";$/;"	m	namespace:tair::storage::fdb
INIT_FAILED	src\storage\fdb\fdb_item_manager.hpp	/^        INIT_FAILED,$/;"	e	enum:tair::storage::fdb::__anon22
INIT_NEW	src\storage\fdb\fdb_item_manager.hpp	/^        INIT_NEW,$/;"	e	enum:tair::storage::fdb::__anon22
INIT_SUCC	src\storage\fdb\fdb_item_manager.hpp	/^        INIT_SUCC,$/;"	e	enum:tair::storage::fdb::__anon22
IO_BUF_SIZE	src\storage\fdb\fdb_item_manager.hpp	/^      const static int IO_BUF_SIZE = 8192;        \/\/ IO buffer size, 8KB$/;"	m	namespace:tair::storage::fdb
MAX_FAIL_COUNT	src\storage\fdb\fdb_item_manager.hpp	/^      const static int MAX_FAIL_COUNT = 1000;$/;"	m	namespace:tair::storage::fdb
MAX_LOOP_COUNT	src\storage\fdb\fdb_item_manager.hpp	/^      const static int MAX_LOOP_COUNT = 10000;$/;"	m	namespace:tair::storage::fdb
READ_DATA_KEY	src\storage\fdb\fdb_item_manager.hpp	/^          READ_DATA_KEY,$/;"	e	enum:tair::storage::fdb::fdb_item_manager::__anon23
READ_DATA_META	src\storage\fdb\fdb_item_manager.hpp	/^          READ_DATA_META,$/;"	e	enum:tair::storage::fdb::fdb_item_manager::__anon23
READ_DATA_VALUE	src\storage\fdb\fdb_item_manager.hpp	/^          READ_DATA_VALUE,$/;"	e	enum:tair::storage::fdb::fdb_item_manager::__anon23
TAIR_DATA_MAGIC_NUMBER	src\storage\fdb\fdb_item_manager.hpp	/^      const static int TAIR_DATA_MAGIC_NUMBER = 0xAC9B;$/;"	m	namespace:tair::storage::fdb
buckets	src\storage\fdb\fdb_item_manager.hpp	/^        uint32_t *buckets;$/;"	m	class:tair::storage::fdb::fdb_item_manager
dat_file_size	src\storage\fdb\fdb_item_manager.hpp	/^        uint64_t dat_file_size;$/;"	m	struct:tair::storage::fdb::db_header
data_file	src\storage\fdb\fdb_item_manager.hpp	/^        file_operation *data_file;$/;"	m	class:tair::storage::fdb::fdb_item_manager
db_header	src\storage\fdb\fdb_item_manager.hpp	/^      struct db_header$/;"	s	namespace:tair::storage::fdb
fb_manager	src\storage\fdb\fdb_item_manager.hpp	/^        free_blocks_manager *fb_manager;$/;"	m	class:tair::storage::fdb::fdb_item_manager
fb_power	src\storage\fdb\fdb_item_manager.hpp	/^        uint8_t fb_power;        \/\/ free block power$/;"	m	struct:tair::storage::fdb::db_header
fdb	src\storage\fdb\fdb_item_manager.hpp	/^    namespace fdb$/;"	n	namespace:tair::storage
fdb_item_manager	src\storage\fdb\fdb_item_manager.hpp	/^      class fdb_item_manager {$/;"	c	namespace:tair::storage::fdb
flag	src\storage\fdb\fdb_item_manager.hpp	/^        uint8_t flag;$/;"	m	struct:tair::storage::fdb::db_header
free_idx_head	src\storage\fdb\fdb_item_manager.hpp	/^        uint32_t free_idx_head;        \/\/ the head of free index block$/;"	m	struct:tair::storage::fdb::db_header
header	src\storage\fdb\fdb_item_manager.hpp	/^        struct db_header *header;$/;"	m	class:tair::storage::fdb::fdb_item_manager	typeref:struct:tair::storage::fdb::fdb_item_manager::db_header
header_lock	src\storage\fdb\fdb_item_manager.hpp	/^          tbsys::CThreadMutex header_lock;$/;"	m	class:tair::storage::fdb::fdb_item_manager
idx_file_size	src\storage\fdb\fdb_item_manager.hpp	/^        uint32_t idx_file_size;$/;"	m	struct:tair::storage::fdb::db_header
index_file	src\storage\fdb\fdb_item_manager.hpp	/^          file_operation * index_file;$/;"	m	class:tair::storage::fdb::fdb_item_manager
item_count	src\storage\fdb\fdb_item_manager.hpp	/^        uint32_t item_count;        \/\/ item total count$/;"	m	struct:tair::storage::fdb::db_header
magic	src\storage\fdb\fdb_item_manager.hpp	/^        char magic[DBHEADER_MAGIC_SIZE];$/;"	m	struct:tair::storage::fdb::db_header
stat	src\storage\fdb\fdb_item_manager.hpp	/^        tair_pstat stat[TAIR_MAX_AREA_COUNT];$/;"	m	struct:tair::storage::fdb::db_header
storage	src\storage\fdb\fdb_item_manager.hpp	/^  namespace storage {$/;"	n	namespace:tair
tair	src\storage\fdb\fdb_item_manager.hpp	/^namespace tair {$/;"	n
begin_scan	src\storage\fdb\fdb_manager.cpp	/^      void fdb_manager::begin_scan(md_info & info)$/;"	f	class:tair::storage::fdb::fdb_manager
clear	src\storage\fdb\fdb_manager.cpp	/^      int fdb_manager::clear(int area)$/;"	f	class:tair::storage::fdb::fdb_manager
close_buckets	src\storage\fdb\fdb_manager.cpp	/^      void fdb_manager::close_buckets(const vector<int> &buckets)$/;"	f	class:tair::storage::fdb::fdb_manager
end_scan	src\storage\fdb\fdb_manager.cpp	/^      void fdb_manager::end_scan(md_info & info)$/;"	f	class:tair::storage::fdb::fdb_manager
fdb	src\storage\fdb\fdb_manager.cpp	/^    namespace fdb {$/;"	n	namespace:tair::storage	file:
fdb_manager	src\storage\fdb\fdb_manager.cpp	/^      fdb_manager::fdb_manager()$/;"	f	class:tair::storage::fdb::fdb_manager
get	src\storage\fdb\fdb_manager.cpp	/^      int fdb_manager::get(int bucket_number, data_entry & key,$/;"	f	class:tair::storage::fdb::fdb_manager
get_bucket	src\storage\fdb\fdb_manager.cpp	/^      fdb_bucket *fdb_manager::get_bucket(int bucket_numer)$/;"	f	class:tair::storage::fdb::fdb_manager
get_next_items	src\storage\fdb\fdb_manager.cpp	/^      bool fdb_manager::get_next_items(md_info & info,$/;"	f	class:tair::storage::fdb::fdb_manager
get_stats	src\storage\fdb\fdb_manager.cpp	/^      void fdb_manager::get_stats(tair_stat * stat)$/;"	f	class:tair::storage::fdb::fdb_manager
init_buckets	src\storage\fdb\fdb_manager.cpp	/^      bool fdb_manager::init_buckets(const vector < int >&buckets)$/;"	f	class:tair::storage::fdb::fdb_manager
put	src\storage\fdb\fdb_manager.cpp	/^      int fdb_manager::put(int bucket_number, data_entry & key,$/;"	f	class:tair::storage::fdb::fdb_manager
remove	src\storage\fdb\fdb_manager.cpp	/^      int fdb_manager::remove(int bucket_number, data_entry & key,$/;"	f	class:tair::storage::fdb::fdb_manager
storage	src\storage\fdb\fdb_manager.cpp	/^  namespace storage {$/;"	n	namespace:tair	file:
tair	src\storage\fdb\fdb_manager.cpp	/^namespace tair {$/;"	n	file:
~fdb_manager	src\storage\fdb\fdb_manager.cpp	/^      fdb_manager::~fdb_manager()$/;"	f	class:tair::storage::fdb::fdb_manager
FDB_MANAGER_H	src\storage\fdb\fdb_manager.hpp	18;"	d
buckets_map	src\storage\fdb\fdb_manager.hpp	/^          fdb_buckets_map * buckets_map;$/;"	m	class:tair::storage::fdb::fdb_manager
dreader	src\storage\fdb\fdb_manager.hpp	/^        data_reader *dreader;$/;"	m	class:tair::storage::fdb::fdb_manager
fdb	src\storage\fdb\fdb_manager.hpp	/^    namespace fdb {$/;"	n	namespace:tair::storage
fdb_buckets_map	src\storage\fdb\fdb_manager.hpp	/^      typedef hash_map <int, fdb_bucket *> fdb_buckets_map;$/;"	t	namespace:tair::storage::fdb
fdb_manager	src\storage\fdb\fdb_manager.hpp	/^      class fdb_manager:public tair::storage::storage_manager {$/;"	c	namespace:tair::storage::fdb
memory_cache	src\storage\fdb\fdb_manager.hpp	/^        storage_manager *memory_cache;$/;"	m	class:tair::storage::fdb::fdb_manager
mreader	src\storage\fdb\fdb_manager.hpp	/^        data_reader *mreader;$/;"	m	class:tair::storage::fdb::fdb_manager
set_area_quota	src\storage\fdb\fdb_manager.hpp	/^        void set_area_quota(int area, uint64_t quota)$/;"	f	class:tair::storage::fdb::fdb_manager
set_area_quota	src\storage\fdb\fdb_manager.hpp	/^        void set_area_quota(std::map<int, uint64_t> &quota_map)$/;"	f	class:tair::storage::fdb::fdb_manager
stat_lock	src\storage\fdb\fdb_manager.hpp	/^          tbsys::CThreadMutex stat_lock;$/;"	m	class:tair::storage::fdb::fdb_manager
storage	src\storage\fdb\fdb_manager.hpp	/^  namespace storage {$/;"	n	namespace:tair
tair	src\storage\fdb\fdb_manager.hpp	/^namespace tair {$/;"	n
append_name	src\storage\fdb\file_op.cpp	/^      bool file_operation::append_name(char *app_str)$/;"	f	class:tair::storage::fdb::file_operation
close	src\storage\fdb\file_op.cpp	/^      bool file_operation::close()$/;"	f	class:tair::storage::fdb::file_operation
fdb	src\storage\fdb\file_op.cpp	/^    namespace fdb {$/;"	n	namespace:tair::storage	file:
file_operation	src\storage\fdb\file_op.cpp	/^      file_operation::file_operation()$/;"	f	class:tair::storage::fdb::file_operation
get_map_data	src\storage\fdb\file_op.cpp	/^      void *file_operation::get_map_data()$/;"	f	class:tair::storage::fdb::file_operation
get_size	src\storage\fdb\file_op.cpp	/^      int file_operation::get_size()$/;"	f	class:tair::storage::fdb::file_operation
lock	src\storage\fdb\file_op.cpp	/^      bool file_operation::lock(off_t offset, size_t size, bool write)$/;"	f	class:tair::storage::fdb::file_operation
mmap	src\storage\fdb\file_op.cpp	/^      bool file_operation::mmap(int map_size)$/;"	f	class:tair::storage::fdb::file_operation
open	src\storage\fdb\file_op.cpp	/^      bool file_operation::open(char *file_nname, int flag, int mode)$/;"	f	class:tair::storage::fdb::file_operation
pread	src\storage\fdb\file_op.cpp	/^      bool file_operation::pread(void *buffer, size_t size, off_t offset)$/;"	f	class:tair::storage::fdb::file_operation
pwrite	src\storage\fdb\file_op.cpp	/^      bool file_operation::pwrite(void *buffer, size_t size, off_t offset)$/;"	f	class:tair::storage::fdb::file_operation
read	src\storage\fdb\file_op.cpp	/^      ssize_t file_operation::read(void *buffer, size_t size, off_t offset)$/;"	f	class:tair::storage::fdb::file_operation
remove	src\storage\fdb\file_op.cpp	/^      bool file_operation::remove()$/;"	f	class:tair::storage::fdb::file_operation
rename	src\storage\fdb\file_op.cpp	/^      bool file_operation::rename(char *new_name)$/;"	f	class:tair::storage::fdb::file_operation
storage	src\storage\fdb\file_op.cpp	/^  namespace storage {$/;"	n	namespace:tair	file:
sync	src\storage\fdb\file_op.cpp	/^      bool file_operation::sync(void)$/;"	f	class:tair::storage::fdb::file_operation
tair	src\storage\fdb\file_op.cpp	/^namespace tair {$/;"	n	file:
truncate	src\storage\fdb\file_op.cpp	/^      bool file_operation::truncate(off_t size)$/;"	f	class:tair::storage::fdb::file_operation
unlock	src\storage\fdb\file_op.cpp	/^      bool file_operation::unlock(off_t offset, size_t length)$/;"	f	class:tair::storage::fdb::file_operation
write	src\storage\fdb\file_op.cpp	/^      bool file_operation::write(void *buffer, size_t size)$/;"	f	class:tair::storage::fdb::file_operation
~file_operation	src\storage\fdb\file_op.cpp	/^      file_operation::~file_operation()$/;"	f	class:tair::storage::fdb::file_operation
TAIR_FILEOP_HPP	src\storage\fdb\file_op.hpp	18;"	d
fd	src\storage\fdb\file_op.hpp	/^        int fd;$/;"	m	class:tair::storage::fdb::file_operation
fdb	src\storage\fdb\file_op.hpp	/^    namespace fdb$/;"	n	namespace:tair::storage
file_name	src\storage\fdb\file_op.hpp	/^        char *file_name;$/;"	m	class:tair::storage::fdb::file_operation
file_operation	src\storage\fdb\file_op.hpp	/^      class file_operation {$/;"	c	namespace:tair::storage::fdb
get_file_name	src\storage\fdb\file_op.hpp	/^        char *get_file_name()$/;"	f	class:tair::storage::fdb::file_operation
get_maped_size	src\storage\fdb\file_op.hpp	/^        int get_maped_size()$/;"	f	class:tair::storage::fdb::file_operation
get_position	src\storage\fdb\file_op.hpp	/^        off_t get_position()$/;"	f	class:tair::storage::fdb::file_operation
is_empty	src\storage\fdb\file_op.hpp	/^        bool is_empty()$/;"	f	class:tair::storage::fdb::file_operation
is_mapped	src\storage\fdb\file_op.hpp	/^        bool is_mapped;$/;"	m	class:tair::storage::fdb::file_operation
is_opened	src\storage\fdb\file_op.hpp	/^        bool is_opened()$/;"	f	class:tair::storage::fdb::file_operation
map_file	src\storage\fdb\file_op.hpp	/^        mmap_file *map_file;$/;"	m	class:tair::storage::fdb::file_operation
set_position	src\storage\fdb\file_op.hpp	/^        bool set_position(off_t position)$/;"	f	class:tair::storage::fdb::file_operation
storage	src\storage\fdb\file_op.hpp	/^  namespace storage$/;"	n	namespace:tair
tair	src\storage\fdb\file_op.hpp	/^namespace tair$/;"	n
free_blocks_manager	src\storage\fdb\free_blocks_manager.cpp	/^free_blocks_manager::free_blocks_manager(char *pool, int max_block_size)$/;"	f	class:free_blocks_manager
get_max_size	src\storage\fdb\free_blocks_manager.cpp	/^free_blocks_manager::get_max_size()  const$/;"	f	class:free_blocks_manager
insert	src\storage\fdb\free_blocks_manager.cpp	/^free_blocks_manager::insert(const free_block & block)$/;"	f	class:free_blocks_manager
print_pool	src\storage\fdb\free_blocks_manager.cpp	/^free_blocks_manager::print_pool()  const$/;"	f	class:free_blocks_manager
remove_block	src\storage\fdb\free_blocks_manager.cpp	/^free_blocks_manager::remove_block(data_type::iterator it)$/;"	f	class:free_blocks_manager
search	src\storage\fdb\free_blocks_manager.cpp	/^free_blocks_manager::search(size_t size, free_block & result)$/;"	f	class:free_blocks_manager
set_max_size	src\storage\fdb\free_blocks_manager.cpp	/^free_blocks_manager::set_max_size(int max_size)$/;"	f	class:free_blocks_manager
FREEBLOCK_SIZE	src\storage\fdb\free_blocks_manager.hpp	/^const static size_t FREEBLOCK_SIZE = sizeof(free_block);$/;"	v
_fblock	src\storage\fdb\free_blocks_manager.hpp	/^typedef struct _fblock$/;"	s
available_pos	src\storage\fdb\free_blocks_manager.hpp	/^  vector <int>available_pos;$/;"	m	class:free_blocks_manager
data_type	src\storage\fdb\free_blocks_manager.hpp	/^  typedef multimap<free_block, int, free_block_comparer> data_type;$/;"	t	class:free_blocks_manager
free_block	src\storage\fdb\free_blocks_manager.hpp	/^} free_block;$/;"	t	typeref:struct:_fblock
free_block_comparer	src\storage\fdb\free_blocks_manager.hpp	/^class free_block_comparer {$/;"	c
free_blocks	src\storage\fdb\free_blocks_manager.hpp	/^  free_block *free_blocks;$/;"	m	class:free_blocks_manager
free_blocks_manager	src\storage\fdb\free_blocks_manager.hpp	/^class free_blocks_manager {$/;"	c
free_blocks_map	src\storage\fdb\free_blocks_manager.hpp	/^  data_type free_blocks_map;$/;"	m	class:free_blocks_manager
free_pool	src\storage\fdb\free_blocks_manager.hpp	/^  char *free_pool;$/;"	m	class:free_blocks_manager
mutex	src\storage\fdb\free_blocks_manager.hpp	/^  tbsys::CThreadMutex mutex;$/;"	m	class:free_blocks_manager
offset	src\storage\fdb\free_blocks_manager.hpp	/^  uint64_t offset:40;$/;"	m	struct:_fblock
operator ()	src\storage\fdb\free_blocks_manager.hpp	/^  bool operator() (const free_block & r1, const free_block & r2) const$/;"	f	class:free_block_comparer
size	src\storage\fdb\free_blocks_manager.hpp	/^  uint32_t size:24;$/;"	m	struct:_fblock
~free_blocks_manager	src\storage\fdb\free_blocks_manager.hpp	/^  ~free_blocks_manager()$/;"	f	class:free_blocks_manager
fdb	src\storage\fdb\locker.cpp	/^    namespace fdb {$/;"	n	namespace:tair::storage	file:
init	src\storage\fdb\locker.cpp	/^      void locker::init()$/;"	f	class:tair::storage::fdb::locker
lock	src\storage\fdb\locker.cpp	/^      bool locker::lock(int index, bool is_write)$/;"	f	class:tair::storage::fdb::locker
locker	src\storage\fdb\locker.cpp	/^      locker::locker(int bucket_number)$/;"	f	class:tair::storage::fdb::locker
storage	src\storage\fdb\locker.cpp	/^  namespace storage {$/;"	n	namespace:tair	file:
tair	src\storage\fdb\locker.cpp	/^namespace tair {$/;"	n	file:
unlock	src\storage\fdb\locker.cpp	/^      bool locker::unlock(int index)$/;"	f	class:tair::storage::fdb::locker
~locker	src\storage\fdb\locker.cpp	/^      locker::~locker()$/;"	f	class:tair::storage::fdb::locker
TAIR_LOCKER_HPP	src\storage\fdb\locker.hpp	18;"	d
b_locks	src\storage\fdb\locker.hpp	/^          pthread_rwlock_t * b_locks;$/;"	m	class:tair::storage::fdb::locker
bucket_number	src\storage\fdb\locker.hpp	/^        int bucket_number;$/;"	m	class:tair::storage::fdb::locker
fdb	src\storage\fdb\locker.hpp	/^    namespace fdb {$/;"	n	namespace:tair::storage
locker	src\storage\fdb\locker.hpp	/^      class locker {$/;"	c	namespace:tair::storage::fdb
storage	src\storage\fdb\locker.hpp	/^  namespace storage {$/;"	n	namespace:tair
tair	src\storage\fdb\locker.hpp	/^namespace tair {$/;"	n
MB_SIZE	src\storage\fdb\mmap_file.hpp	/^      const static int MB_SIZE = (1 << 20);$/;"	m	namespace:tair::storage::fdb
TAIR_MMAP_FILE_HPP	src\storage\fdb\mmap_file.hpp	18;"	d
data	src\storage\fdb\mmap_file.hpp	/^        void *data;$/;"	m	class:tair::storage::fdb::mmap_file
ensure_file_size	src\storage\fdb\mmap_file.hpp	/^        bool ensure_file_size(int size) {$/;"	f	class:tair::storage::fdb::mmap_file
fd	src\storage\fdb\mmap_file.hpp	/^        int fd;$/;"	m	class:tair::storage::fdb::mmap_file
fdb	src\storage\fdb\mmap_file.hpp	/^    namespace fdb {$/;"	n	namespace:tair::storage
get_data	src\storage\fdb\mmap_file.hpp	/^        void *get_data()$/;"	f	class:tair::storage::fdb::mmap_file
get_size	src\storage\fdb\mmap_file.hpp	/^        size_t get_size()$/;"	f	class:tair::storage::fdb::mmap_file
map_file	src\storage\fdb\mmap_file.hpp	/^        bool map_file(bool write = false) {$/;"	f	class:tair::storage::fdb::mmap_file
max_size	src\storage\fdb\mmap_file.hpp	/^        size_t max_size;$/;"	m	class:tair::storage::fdb::mmap_file
mmap_file	src\storage\fdb\mmap_file.hpp	/^        mmap_file()$/;"	f	class:tair::storage::fdb::mmap_file
mmap_file	src\storage\fdb\mmap_file.hpp	/^        mmap_file(int size, int fd)$/;"	f	class:tair::storage::fdb::mmap_file
mmap_file	src\storage\fdb\mmap_file.hpp	/^      class mmap_file {$/;"	c	namespace:tair::storage::fdb
remap	src\storage\fdb\mmap_file.hpp	/^        bool remap()$/;"	f	class:tair::storage::fdb::mmap_file
size	src\storage\fdb\mmap_file.hpp	/^        size_t size;$/;"	m	class:tair::storage::fdb::mmap_file
storage	src\storage\fdb\mmap_file.hpp	/^  namespace storage {$/;"	n	namespace:tair
sync_file	src\storage\fdb\mmap_file.hpp	/^        bool sync_file()$/;"	f	class:tair::storage::fdb::mmap_file
tair	src\storage\fdb\mmap_file.hpp	/^namespace tair {$/;"	n
~mmap_file	src\storage\fdb\mmap_file.hpp	/^         ~mmap_file()$/;"	f	class:tair::storage::fdb::mmap_file
begin_scan	src\storage\kdb\kdb_bucket.cpp	/^      bool kdb_bucket::begin_scan() {$/;"	f	class:tair::storage::kdb::kdb_bucket
destory	src\storage\kdb\kdb_bucket.cpp	/^      void kdb_bucket::destory()$/;"	f	class:tair::storage::kdb::kdb_bucket
end_scan	src\storage\kdb\kdb_bucket.cpp	/^      bool kdb_bucket::end_scan() {$/;"	f	class:tair::storage::kdb::kdb_bucket
get	src\storage\kdb\kdb_bucket.cpp	/^      int kdb_bucket::get(common::data_entry& key, common::data_entry& value)$/;"	f	class:tair::storage::kdb::kdb_bucket
get_next_item	src\storage\kdb\kdb_bucket.cpp	/^      int kdb_bucket::get_next_item(item_data_info* &data) {$/;"	f	class:tair::storage::kdb::kdb_bucket
get_stat	src\storage\kdb\kdb_bucket.cpp	/^      void kdb_bucket::get_stat(tair_stat* stat)$/;"	f	class:tair::storage::kdb::kdb_bucket
kdb	src\storage\kdb\kdb_bucket.cpp	/^    namespace kdb {$/;"	n	namespace:tair::storage	file:
kdb_bucket	src\storage\kdb\kdb_bucket.cpp	/^      kdb_bucket::kdb_bucket()$/;"	f	class:tair::storage::kdb::kdb_bucket
print_db_error	src\storage\kdb\kdb_bucket.cpp	/^      void kdb_bucket::print_db_error(const char* prefix) {$/;"	f	class:tair::storage::kdb::kdb_bucket
put	src\storage\kdb\kdb_bucket.cpp	/^      int kdb_bucket::put(common::data_entry& key, common::data_entry& value, bool version_care, uint32_t expire_time)$/;"	f	class:tair::storage::kdb::kdb_bucket
remove	src\storage\kdb\kdb_bucket.cpp	/^      int kdb_bucket::remove(common::data_entry& key, bool version_care)$/;"	f	class:tair::storage::kdb::kdb_bucket
start	src\storage\kdb\kdb_bucket.cpp	/^      bool kdb_bucket::start(int bucket_number)$/;"	f	class:tair::storage::kdb::kdb_bucket
stop	src\storage\kdb\kdb_bucket.cpp	/^      void kdb_bucket::stop()$/;"	f	class:tair::storage::kdb::kdb_bucket
storage	src\storage\kdb\kdb_bucket.cpp	/^  namespace storage {$/;"	n	namespace:tair	file:
tair	src\storage\kdb\kdb_bucket.cpp	/^namespace tair {$/;"	n	file:
~kdb_bucket	src\storage\kdb\kdb_bucket.cpp	/^      kdb_bucket::~kdb_bucket()$/;"	f	class:tair::storage::kdb::kdb_bucket
KDB_META_SIZE	src\storage\kdb\kdb_bucket.h	/^      const size_t KDB_META_SIZE = sizeof(kdb_item_meta);$/;"	m	namespace:tair::storage::kdb
PATH_MAX_LENGTH	src\storage\kdb\kdb_bucket.h	/^        const static int PATH_MAX_LENGTH = 1024;$/;"	m	class:tair::storage::kdb::kdb_bucket
TAIR_KDB_BUCKET_H	src\storage\kdb\kdb_bucket.h	18;"	d
cdate	src\storage\kdb\kdb_bucket.h	/^        uint32_t cdate;$/;"	m	struct:tair::storage::kdb::kdb_item_meta
cursor	src\storage\kdb\kdb_bucket.h	/^          kyotocabinet::DB::Cursor* cursor;$/;"	m	class:tair::storage::kdb::kdb_bucket
db	src\storage\kdb\kdb_bucket.h	/^          kyotocabinet::HashDB db;$/;"	m	class:tair::storage::kdb::kdb_bucket
decode	src\storage\kdb\kdb_bucket.h	/^          bool decode() {$/;"	f	class:tair::storage::kdb::kdb_item
edate	src\storage\kdb\kdb_bucket.h	/^        uint32_t edate;$/;"	m	struct:tair::storage::kdb::kdb_item_meta
encode	src\storage\kdb\kdb_bucket.h	/^          bool encode() {$/;"	f	class:tair::storage::kdb::kdb_item
filename	src\storage\kdb\kdb_bucket.h	/^          char filename[PATH_MAX_LENGTH];$/;"	m	class:tair::storage::kdb::kdb_bucket
flag	src\storage\kdb\kdb_bucket.h	/^        uint8_t  flag;$/;"	m	struct:tair::storage::kdb::kdb_item_meta
free_full_value	src\storage\kdb\kdb_bucket.h	/^          void free_full_value() {$/;"	f	class:tair::storage::kdb::kdb_item
full_value	src\storage\kdb\kdb_bucket.h	/^          char* full_value;$/;"	m	class:tair::storage::kdb::kdb_item
full_value_size	src\storage\kdb\kdb_bucket.h	/^          size_t full_value_size;$/;"	m	class:tair::storage::kdb::kdb_item
is_expired	src\storage\kdb\kdb_bucket.h	/^          bool is_expired() {$/;"	f	class:tair::storage::kdb::kdb_item
kdb	src\storage\kdb\kdb_bucket.h	/^    namespace kdb {$/;"	n	namespace:tair::storage
kdb_bucket	src\storage\kdb\kdb_bucket.h	/^      class kdb_bucket {$/;"	c	namespace:tair::storage::kdb
kdb_item	src\storage\kdb\kdb_bucket.h	/^          kdb_item() : meta(), value(NULL), value_size(0), full_value(NULL), full_value_size(0) {}$/;"	f	class:tair::storage::kdb::kdb_item
kdb_item	src\storage\kdb\kdb_bucket.h	/^      class kdb_item {$/;"	c	namespace:tair::storage::kdb
kdb_item_meta	src\storage\kdb\kdb_bucket.h	/^        kdb_item_meta() : flag(0), reserved(0), version(0), cdate(0), mdate(0), edate(0) {}$/;"	f	struct:tair::storage::kdb::kdb_item_meta
kdb_item_meta	src\storage\kdb\kdb_bucket.h	/^      struct kdb_item_meta {$/;"	s	namespace:tair::storage::kdb
locks	src\storage\kdb\kdb_bucket.h	/^          locker* locks;$/;"	m	class:tair::storage::kdb::kdb_bucket
mdate	src\storage\kdb\kdb_bucket.h	/^        uint32_t mdate;$/;"	m	struct:tair::storage::kdb::kdb_item_meta
meta	src\storage\kdb\kdb_bucket.h	/^          kdb_item_meta meta;$/;"	m	class:tair::storage::kdb::kdb_item
reserved	src\storage\kdb\kdb_bucket.h	/^        uint8_t  reserved;$/;"	m	struct:tair::storage::kdb::kdb_item_meta
stat_mgr	src\storage\kdb\kdb_bucket.h	/^          stat_manager stat_mgr;$/;"	m	class:tair::storage::kdb::kdb_bucket
storage	src\storage\kdb\kdb_bucket.h	/^  namespace storage {$/;"	n	namespace:tair
tair	src\storage\kdb\kdb_bucket.h	/^namespace tair {$/;"	n
value	src\storage\kdb\kdb_bucket.h	/^          char* value;$/;"	m	class:tair::storage::kdb::kdb_item
value_size	src\storage\kdb\kdb_bucket.h	/^          size_t value_size;$/;"	m	class:tair::storage::kdb::kdb_item
version	src\storage\kdb\kdb_bucket.h	/^        uint16_t version;$/;"	m	struct:tair::storage::kdb::kdb_item_meta
begin_scan	src\storage\kdb\kdb_manager.cpp	/^      void kdb_manager::begin_scan(md_info & info)$/;"	f	class:tair::storage::kdb::kdb_manager
clear	src\storage\kdb\kdb_manager.cpp	/^      int kdb_manager::clear(int area)$/;"	f	class:tair::storage::kdb::kdb_manager
close_buckets	src\storage\kdb\kdb_manager.cpp	/^      void kdb_manager::close_buckets(const vector <int>&buckets)$/;"	f	class:tair::storage::kdb::kdb_manager
end_scan	src\storage\kdb\kdb_manager.cpp	/^      void kdb_manager::end_scan(md_info & info)$/;"	f	class:tair::storage::kdb::kdb_manager
get	src\storage\kdb\kdb_manager.cpp	/^      int kdb_manager::get(int bucket_number, data_entry & key, data_entry & value)$/;"	f	class:tair::storage::kdb::kdb_manager
get_bucket	src\storage\kdb\kdb_manager.cpp	/^      kdb_bucket* kdb_manager::get_bucket(int bucket_number)$/;"	f	class:tair::storage::kdb::kdb_manager
get_next_items	src\storage\kdb\kdb_manager.cpp	/^      bool kdb_manager::get_next_items(md_info & info, vector <item_data_info *>&list)$/;"	f	class:tair::storage::kdb::kdb_manager
get_stats	src\storage\kdb\kdb_manager.cpp	/^      void kdb_manager::get_stats(tair_stat * stat)$/;"	f	class:tair::storage::kdb::kdb_manager
init_buckets	src\storage\kdb\kdb_manager.cpp	/^      bool kdb_manager::init_buckets(const vector <int>&buckets)$/;"	f	class:tair::storage::kdb::kdb_manager
kdb	src\storage\kdb\kdb_manager.cpp	/^    namespace kdb {$/;"	n	namespace:tair::storage	file:
kdb_manager	src\storage\kdb\kdb_manager.cpp	/^      kdb_manager::kdb_manager()$/;"	f	class:tair::storage::kdb::kdb_manager
put	src\storage\kdb\kdb_manager.cpp	/^      int kdb_manager::put(int bucket_number, data_entry & key, data_entry & value, bool version_care, int expire_time)$/;"	f	class:tair::storage::kdb::kdb_manager
remove	src\storage\kdb\kdb_manager.cpp	/^      int kdb_manager::remove(int bucket_number, data_entry & key, bool version_care)$/;"	f	class:tair::storage::kdb::kdb_manager
set_area_quota	src\storage\kdb\kdb_manager.cpp	/^      void kdb_manager::set_area_quota(int area, uint64_t quota)$/;"	f	class:tair::storage::kdb::kdb_manager
set_area_quota	src\storage\kdb\kdb_manager.cpp	/^      void kdb_manager::set_area_quota(std::map<int, uint64_t> &quota_map)$/;"	f	class:tair::storage::kdb::kdb_manager
storage	src\storage\kdb\kdb_manager.cpp	/^  namespace storage {$/;"	n	namespace:tair	file:
tair	src\storage\kdb\kdb_manager.cpp	/^namespace tair {$/;"	n	file:
~kdb_manager	src\storage\kdb\kdb_manager.cpp	/^      kdb_manager::~kdb_manager()$/;"	f	class:tair::storage::kdb::kdb_manager
TAIR_STORAGE_KDB_MANAGER_H	src\storage\kdb\kdb_manager.h	18;"	d
buckets_map	src\storage\kdb\kdb_manager.h	/^          kdb_buckets_map* buckets_map;$/;"	m	class:tair::storage::kdb::kdb_manager
kdb	src\storage\kdb\kdb_manager.h	/^    namespace kdb {$/;"	n	namespace:tair::storage
kdb_buckets_map	src\storage\kdb\kdb_manager.h	/^      typedef __gnu_cxx::hash_map <int, kdb_bucket* > kdb_buckets_map;$/;"	t	namespace:tair::storage::kdb
kdb_manager	src\storage\kdb\kdb_manager.h	/^      class kdb_manager : public tair::storage::storage_manager {$/;"	c	namespace:tair::storage::kdb
lock	src\storage\kdb\kdb_manager.h	/^          tbsys::CThreadMutex lock;$/;"	m	class:tair::storage::kdb::kdb_manager
scan_kdb	src\storage\kdb\kdb_manager.h	/^          kdb_bucket* scan_kdb;$/;"	m	class:tair::storage::kdb::kdb_manager
storage	src\storage\kdb\kdb_manager.h	/^  namespace storage {$/;"	n	namespace:tair
tair	src\storage\kdb\kdb_manager.h	/^namespace tair {$/;"	n
BIGEND	src\storage\kdb\kyotocabinet\kccommon.h	100;"	d
CLOCKTICK	src\storage\kdb\kyotocabinet\kccommon.h	101;"	d
LIBREV	src\storage\kdb\kyotocabinet\kccommon.h	98;"	d
LIBVER	src\storage\kdb\kyotocabinet\kccommon.h	97;"	d
PAGESIZE	src\storage\kdb\kyotocabinet\kccommon.h	102;"	d
SYSNAME	src\storage\kdb\kyotocabinet\kccommon.h	99;"	d
VERSION	src\storage\kdb\kyotocabinet\kccommon.h	96;"	d
_KCCODELINE_	src\storage\kdb\kyotocabinet\kccommon.h	140;"	d
_KCCOMMON_H	src\storage\kdb\kyotocabinet\kccommon.h	17;"	d
__KCFUNC__	src\storage\kdb\kyotocabinet\kccommon.h	134;"	d
__STDC_LIMIT_MACROS	src\storage\kdb\kyotocabinet\kccommon.h	19;"	d
__STDC_LIMIT_MACROS	src\storage\kdb\kyotocabinet\kccommon.h	20;"	d
_assert_	src\storage\kdb\kyotocabinet\kccommon.h	118;"	d
_testyield_	src\storage\kdb\kyotocabinet\kccommon.h	112;"	d
_yield_	src\storage\kdb\kyotocabinet\kccommon.h	107;"	d
kyotocabinet	src\storage\kdb\kyotocabinet\kccommon.h	/^namespace kyotocabinet {}$/;"	n
snprintf	src\storage\kdb\kyotocabinet\kccommon.h	70;"	d
std	src\storage\kdb\kyotocabinet\kccommon.h	/^namespace std {$/;"	n
DECIMALCOMP	src\storage\kdb\kyotocabinet\kccompare.cc	/^DecimalComparator DECIMALCOMP;$/;"	m	namespace:kyotocabinet	file:
LEXICALCOMP	src\storage\kdb\kyotocabinet\kccompare.cc	/^LexicalComparator LEXICALCOMP;$/;"	m	namespace:kyotocabinet	file:
kyotocabinet	src\storage\kdb\kyotocabinet\kccompare.cc	/^namespace kyotocabinet {                 \/\/ common namespace$/;"	n	file:
Comparator	src\storage\kdb\kyotocabinet\kccompare.h	/^class Comparator {$/;"	c	namespace:kyotocabinet
DecimalComparator	src\storage\kdb\kyotocabinet\kccompare.h	/^class DecimalComparator : public Comparator {$/;"	c	namespace:kyotocabinet
LexicalComparator	src\storage\kdb\kyotocabinet\kccompare.h	/^class LexicalComparator : public Comparator {$/;"	c	namespace:kyotocabinet
_KCCOMPARE_H	src\storage\kdb\kyotocabinet\kccompare.h	17;"	d
compare	src\storage\kdb\kyotocabinet\kccompare.h	/^  int32_t compare(const char* akbuf, size_t aksiz, const char* bkbuf, size_t bksiz) {$/;"	f	class:kyotocabinet::DecimalComparator
compare	src\storage\kdb\kyotocabinet\kccompare.h	/^  int32_t compare(const char* akbuf, size_t aksiz, const char* bkbuf, size_t bksiz) {$/;"	f	class:kyotocabinet::LexicalComparator
kyotocabinet	src\storage\kdb\kyotocabinet\kccompare.h	/^namespace kyotocabinet {                 \/\/ common namespace$/;"	n
~Comparator	src\storage\kdb\kyotocabinet\kccompare.h	/^  virtual ~Comparator() {}$/;"	f	class:kyotocabinet::Comparator
ZLIBRAWCOMP	src\storage\kdb\kyotocabinet\kccompress.cc	/^ZLIBCompressor<ZLIB::RAW> ZLIBRAWCOMP;$/;"	m	namespace:kyotocabinet	file:
calculate_crc	src\storage\kdb\kyotocabinet\kccompress.cc	/^uint32_t LZMA::calculate_crc(const void* buf, size_t size, uint32_t seed) {$/;"	f	class:kyotocabinet::LZMA
calculate_crc	src\storage\kdb\kyotocabinet\kccompress.cc	/^uint32_t LZO::calculate_crc(const void* buf, size_t size, uint32_t seed) {$/;"	f	class:kyotocabinet::LZO
calculate_crc	src\storage\kdb\kyotocabinet\kccompress.cc	/^uint32_t ZLIB::calculate_crc(const void* buf, size_t size, uint32_t seed) {$/;"	f	class:kyotocabinet::ZLIB
compress	src\storage\kdb\kyotocabinet\kccompress.cc	/^char* LZMA::compress(const void* buf, size_t size, size_t* sp, Mode mode) {$/;"	f	class:kyotocabinet::LZMA
compress	src\storage\kdb\kyotocabinet\kccompress.cc	/^char* LZO::compress(const void* buf, size_t size, size_t* sp, Mode mode) {$/;"	f	class:kyotocabinet::LZO
compress	src\storage\kdb\kyotocabinet\kccompress.cc	/^char* ZLIB::compress(const void* buf, size_t size, size_t* sp, Mode mode) {$/;"	f	class:kyotocabinet::ZLIB
decompress	src\storage\kdb\kyotocabinet\kccompress.cc	/^char* LZMA::decompress(const void* buf, size_t size, size_t* sp, Mode mode) {$/;"	f	class:kyotocabinet::LZMA
decompress	src\storage\kdb\kyotocabinet\kccompress.cc	/^char* LZO::decompress(const void* buf, size_t size, size_t* sp, Mode mode) {$/;"	f	class:kyotocabinet::LZO
decompress	src\storage\kdb\kyotocabinet\kccompress.cc	/^char* ZLIB::decompress(const void* buf, size_t size, size_t* sp, Mode mode) {$/;"	f	class:kyotocabinet::ZLIB
kyotocabinet	src\storage\kdb\kyotocabinet\kccompress.cc	/^namespace kyotocabinet {                 \/\/ common namespace$/;"	n	file:
lzo_init_func	src\storage\kdb\kyotocabinet\kccompress.cc	/^int32_t lzo_init_func() {$/;"	f	namespace:kyotocabinet
lzo_init_var	src\storage\kdb\kyotocabinet\kccompress.cc	/^int32_t lzo_init_var = lzo_init_func();$/;"	m	namespace:kyotocabinet	file:
ArcfourCompressor	src\storage\kdb\kyotocabinet\kccompress.h	/^  ArcfourCompressor() : kbuf_(NULL), ksiz_(0), comp_(NULL), salt_(0), cycle_(false) {$/;"	f	class:kyotocabinet::ArcfourCompressor
ArcfourCompressor	src\storage\kdb\kyotocabinet\kccompress.h	/^class ArcfourCompressor : public Compressor {$/;"	c	namespace:kyotocabinet
CRC	src\storage\kdb\kyotocabinet\kccompress.h	/^    CRC                                  \/\/\/< with CRC32 checksum$/;"	e	enum:kyotocabinet::LZO::Mode
CRC	src\storage\kdb\kyotocabinet\kccompress.h	/^    CRC,                                 \/\/\/< with CRC32 checksum$/;"	e	enum:kyotocabinet::LZMA::Mode
Compressor	src\storage\kdb\kyotocabinet\kccompress.h	/^class Compressor {$/;"	c	namespace:kyotocabinet
DEFLATE	src\storage\kdb\kyotocabinet\kccompress.h	/^    DEFLATE,                             \/\/\/< with Adler32 checksum$/;"	e	enum:kyotocabinet::ZLIB::Mode
GZIP	src\storage\kdb\kyotocabinet\kccompress.h	/^    GZIP                                 \/\/\/< with CRC32 checksum and various meta data$/;"	e	enum:kyotocabinet::ZLIB::Mode
LZMA	src\storage\kdb\kyotocabinet\kccompress.h	/^class LZMA {$/;"	c	namespace:kyotocabinet
LZMACompressor	src\storage\kdb\kyotocabinet\kccompress.h	/^class LZMACompressor : public Compressor {$/;"	c	namespace:kyotocabinet
LZO	src\storage\kdb\kyotocabinet\kccompress.h	/^class LZO {$/;"	c	namespace:kyotocabinet
LZOCompressor	src\storage\kdb\kyotocabinet\kccompress.h	/^class LZOCompressor : public Compressor {$/;"	c	namespace:kyotocabinet
Mode	src\storage\kdb\kyotocabinet\kccompress.h	/^  enum Mode {$/;"	g	class:kyotocabinet::LZMA
Mode	src\storage\kdb\kyotocabinet\kccompress.h	/^  enum Mode {$/;"	g	class:kyotocabinet::LZO
Mode	src\storage\kdb\kyotocabinet\kccompress.h	/^  enum Mode {$/;"	g	class:kyotocabinet::ZLIB
RAW	src\storage\kdb\kyotocabinet\kccompress.h	/^    RAW,                                 \/\/\/< without any checksum$/;"	e	enum:kyotocabinet::LZMA::Mode
RAW	src\storage\kdb\kyotocabinet\kccompress.h	/^    RAW,                                 \/\/\/< without any checksum$/;"	e	enum:kyotocabinet::LZO::Mode
RAW	src\storage\kdb\kyotocabinet\kccompress.h	/^    RAW,                                 \/\/\/< without any checksum$/;"	e	enum:kyotocabinet::ZLIB::Mode
SHA	src\storage\kdb\kyotocabinet\kccompress.h	/^    SHA                                  \/\/\/< with SHA256 checksum$/;"	e	enum:kyotocabinet::LZMA::Mode
ZLIB	src\storage\kdb\kyotocabinet\kccompress.h	/^class ZLIB {$/;"	c	namespace:kyotocabinet
ZLIBCompressor	src\storage\kdb\kyotocabinet\kccompress.h	/^class ZLIBCompressor : public Compressor {$/;"	c	namespace:kyotocabinet
_KCCOMPRESS_H	src\storage\kdb\kyotocabinet\kccompress.h	17;"	d
begin_cycle	src\storage\kdb\kyotocabinet\kccompress.h	/^  void begin_cycle(uint64_t salt = 0) {$/;"	f	class:kyotocabinet::ArcfourCompressor
comp_	src\storage\kdb\kyotocabinet\kccompress.h	/^  Compressor* comp_;$/;"	m	class:kyotocabinet::ArcfourCompressor
compress	src\storage\kdb\kyotocabinet\kccompress.h	/^  char* compress(const void* buf, size_t size, size_t* sp) {$/;"	f	class:kyotocabinet::ArcfourCompressor
compress	src\storage\kdb\kyotocabinet\kccompress.h	/^  char* compress(const void* buf, size_t size, size_t* sp) {$/;"	f	class:kyotocabinet::LZMACompressor
compress	src\storage\kdb\kyotocabinet\kccompress.h	/^  char* compress(const void* buf, size_t size, size_t* sp) {$/;"	f	class:kyotocabinet::LZOCompressor
compress	src\storage\kdb\kyotocabinet\kccompress.h	/^  char* compress(const void* buf, size_t size, size_t* sp) {$/;"	f	class:kyotocabinet::ZLIBCompressor
cycle_	src\storage\kdb\kyotocabinet\kccompress.h	/^  bool cycle_;$/;"	m	class:kyotocabinet::ArcfourCompressor
decompress	src\storage\kdb\kyotocabinet\kccompress.h	/^  char* decompress(const void* buf, size_t size, size_t* sp) {$/;"	f	class:kyotocabinet::ArcfourCompressor
decompress	src\storage\kdb\kyotocabinet\kccompress.h	/^  char* decompress(const void* buf, size_t size, size_t* sp) {$/;"	f	class:kyotocabinet::LZMACompressor
decompress	src\storage\kdb\kyotocabinet\kccompress.h	/^  char* decompress(const void* buf, size_t size, size_t* sp) {$/;"	f	class:kyotocabinet::LZOCompressor
decompress	src\storage\kdb\kyotocabinet\kccompress.h	/^  char* decompress(const void* buf, size_t size, size_t* sp) {$/;"	f	class:kyotocabinet::ZLIBCompressor
kbuf_	src\storage\kdb\kyotocabinet\kccompress.h	/^  char* kbuf_;$/;"	m	class:kyotocabinet::ArcfourCompressor
ksiz_	src\storage\kdb\kyotocabinet\kccompress.h	/^  size_t ksiz_;$/;"	m	class:kyotocabinet::ArcfourCompressor
kyotocabinet	src\storage\kdb\kyotocabinet\kccompress.h	/^namespace kyotocabinet {                 \/\/ common namespace$/;"	n
salt_	src\storage\kdb\kyotocabinet\kccompress.h	/^  AtomicInt64 salt_;$/;"	m	class:kyotocabinet::ArcfourCompressor
set_compressor	src\storage\kdb\kyotocabinet\kccompress.h	/^  void set_compressor(Compressor* comp) {$/;"	f	class:kyotocabinet::ArcfourCompressor
set_key	src\storage\kdb\kyotocabinet\kccompress.h	/^  void set_key(const void* kbuf, size_t ksiz) {$/;"	f	class:kyotocabinet::ArcfourCompressor
~ArcfourCompressor	src\storage\kdb\kyotocabinet\kccompress.h	/^  ~ArcfourCompressor() {$/;"	f	class:kyotocabinet::ArcfourCompressor
~Compressor	src\storage\kdb\kyotocabinet\kccompress.h	/^  virtual ~Compressor() {}$/;"	f	class:kyotocabinet::Compressor
NOP	src\storage\kdb\kyotocabinet\kcdb.cc	/^const char* const DB::Visitor::NOP = (const char*)0;$/;"	m	class:kyotocabinet::DB::Visitor	file:
REMOVE	src\storage\kdb\kyotocabinet\kcdb.cc	/^const char* const DB::Visitor::REMOVE = (const char*)1;$/;"	m	class:kyotocabinet::DB::Visitor	file:
kyotocabinet	src\storage\kdb\kyotocabinet\kcdb.cc	/^namespace kyotocabinet {                 \/\/ common namespace$/;"	n	file:
ABORTTRAN	src\storage\kdb\kyotocabinet\kcdb.h	/^      ABORTTRAN,                         \/\/\/< aborting transaction$/;"	e	enum:kyotocabinet::BasicDB::MetaTrigger::Kind
BEGINTRAN	src\storage\kdb\kyotocabinet\kcdb.h	/^      BEGINTRAN,                         \/\/\/< beginning transaction$/;"	e	enum:kyotocabinet::BasicDB::MetaTrigger::Kind
BROKEN	src\storage\kdb\kyotocabinet\kcdb.h	/^      BROKEN,                            \/\/\/< broken file$/;"	e	enum:kyotocabinet::BasicDB::Error::Code
BasicDB	src\storage\kdb\kyotocabinet\kcdb.h	/^class BasicDB : public DB {$/;"	c	namespace:kyotocabinet
CLEAR	src\storage\kdb\kyotocabinet\kcdb.h	/^      CLEAR,                             \/\/\/< clearing$/;"	e	enum:kyotocabinet::BasicDB::MetaTrigger::Kind
CLOSE	src\storage\kdb\kyotocabinet\kcdb.h	/^      CLOSE,                             \/\/\/< closing$/;"	e	enum:kyotocabinet::BasicDB::MetaTrigger::Kind
COMMITTRAN	src\storage\kdb\kyotocabinet\kcdb.h	/^      COMMITTRAN,                        \/\/\/< committing transaction$/;"	e	enum:kyotocabinet::BasicDB::MetaTrigger::Kind
Code	src\storage\kdb\kyotocabinet\kcdb.h	/^    enum Code {$/;"	g	class:kyotocabinet::BasicDB::Error
Cursor	src\storage\kdb\kyotocabinet\kcdb.h	/^  class Cursor : public DB::Cursor {$/;"	c	class:kyotocabinet::BasicDB
Cursor	src\storage\kdb\kyotocabinet\kcdb.h	/^  class Cursor {$/;"	c	class:kyotocabinet::DB
DB	src\storage\kdb\kyotocabinet\kcdb.h	/^class DB {$/;"	c	namespace:kyotocabinet
DBIOBUFSIZ	src\storage\kdb\kyotocabinet\kcdb.h	/^const size_t DBIOBUFSIZ = 8192;          \/\/\/< size of the IO buffer$/;"	m	namespace:kyotocabinet::__anon24
DBSSMAGICDATA	src\storage\kdb\kyotocabinet\kcdb.h	/^const char DBSSMAGICDATA[] = "KCSS\\n";   \/\/\/< magic data of the file$/;"	m	namespace:kyotocabinet::__anon24
DEBUG	src\storage\kdb\kyotocabinet\kcdb.h	/^      DEBUG = 1 << 0,                    \/\/\/< debugging$/;"	e	enum:kyotocabinet::BasicDB::Logger::Kind
DUPREC	src\storage\kdb\kyotocabinet\kcdb.h	/^      DUPREC,                            \/\/\/< record duplication$/;"	e	enum:kyotocabinet::BasicDB::Error::Code
ERROR	src\storage\kdb\kyotocabinet\kcdb.h	/^      ERROR = 1 << 3                     \/\/\/< error$/;"	e	enum:kyotocabinet::BasicDB::Logger::Kind
Error	src\storage\kdb\kyotocabinet\kcdb.h	/^    Error(const Error& src) : code_(src.code_), message_(src.message_) {$/;"	f	class:kyotocabinet::BasicDB::Error
Error	src\storage\kdb\kyotocabinet\kcdb.h	/^    explicit Error() : code_(SUCCESS), message_("no error") {$/;"	f	class:kyotocabinet::BasicDB::Error
Error	src\storage\kdb\kyotocabinet\kcdb.h	/^    explicit Error(Code code, const char* message) : code_(code), message_(message) {$/;"	f	class:kyotocabinet::BasicDB::Error
Error	src\storage\kdb\kyotocabinet\kcdb.h	/^  class Error {$/;"	c	class:kyotocabinet::BasicDB
FileProcessor	src\storage\kdb\kyotocabinet\kcdb.h	/^  class FileProcessor {$/;"	c	class:kyotocabinet::BasicDB
INFO	src\storage\kdb\kyotocabinet\kcdb.h	/^      INFO = 1 << 1,                     \/\/\/< normal information$/;"	e	enum:kyotocabinet::BasicDB::Logger::Kind
INVALID	src\storage\kdb\kyotocabinet\kcdb.h	/^      INVALID,                           \/\/\/< invalid operation$/;"	e	enum:kyotocabinet::BasicDB::Error::Code
ITERATE	src\storage\kdb\kyotocabinet\kcdb.h	/^      ITERATE,                           \/\/\/< iteration$/;"	e	enum:kyotocabinet::BasicDB::MetaTrigger::Kind
Kind	src\storage\kdb\kyotocabinet\kcdb.h	/^    enum Kind {$/;"	g	class:kyotocabinet::BasicDB::Logger
Kind	src\storage\kdb\kyotocabinet\kcdb.h	/^    enum Kind {$/;"	g	class:kyotocabinet::BasicDB::MetaTrigger
LOGIC	src\storage\kdb\kyotocabinet\kcdb.h	/^      LOGIC,                             \/\/\/< logical inconsistency$/;"	e	enum:kyotocabinet::BasicDB::Error::Code
Logger	src\storage\kdb\kyotocabinet\kcdb.h	/^  class Logger {$/;"	c	class:kyotocabinet::BasicDB
MISC	src\storage\kdb\kyotocabinet\kcdb.h	/^      MISC = 15                          \/\/\/< miscellaneous error$/;"	e	enum:kyotocabinet::BasicDB::Error::Code
MISC	src\storage\kdb\kyotocabinet\kcdb.h	/^      MISC = 15                          \/\/\/< miscellaneous operation$/;"	e	enum:kyotocabinet::BasicDB::MetaTrigger::Kind
MetaTrigger	src\storage\kdb\kyotocabinet\kcdb.h	/^  class MetaTrigger {$/;"	c	class:kyotocabinet::BasicDB
NOIMPL	src\storage\kdb\kyotocabinet\kcdb.h	/^      NOIMPL,                            \/\/\/< not implemented$/;"	e	enum:kyotocabinet::BasicDB::Error::Code
NOP	src\storage\kdb\kyotocabinet\kcdb.h	/^    static const char* const NOP;$/;"	m	class:kyotocabinet::DB::Visitor
NOPERM	src\storage\kdb\kyotocabinet\kcdb.h	/^      NOPERM,                            \/\/\/< no permission$/;"	e	enum:kyotocabinet::BasicDB::Error::Code
NOREC	src\storage\kdb\kyotocabinet\kcdb.h	/^      NOREC,                             \/\/\/< no record$/;"	e	enum:kyotocabinet::BasicDB::Error::Code
NOREPOS	src\storage\kdb\kyotocabinet\kcdb.h	/^      NOREPOS,                           \/\/\/< no repository$/;"	e	enum:kyotocabinet::BasicDB::Error::Code
OAUTOSYNC	src\storage\kdb\kyotocabinet\kcdb.h	/^    OAUTOSYNC = 1 << 5,                  \/\/\/< auto synchronization$/;"	e	enum:kyotocabinet::BasicDB::OpenMode
OAUTOTRAN	src\storage\kdb\kyotocabinet\kcdb.h	/^    OAUTOTRAN = 1 << 4,                  \/\/\/< auto transaction$/;"	e	enum:kyotocabinet::BasicDB::OpenMode
OCREATE	src\storage\kdb\kyotocabinet\kcdb.h	/^    OCREATE = 1 << 2,                    \/\/\/< writer creating$/;"	e	enum:kyotocabinet::BasicDB::OpenMode
ONOLOCK	src\storage\kdb\kyotocabinet\kcdb.h	/^    ONOLOCK = 1 << 6,                    \/\/\/< open without locking$/;"	e	enum:kyotocabinet::BasicDB::OpenMode
ONOREPAIR	src\storage\kdb\kyotocabinet\kcdb.h	/^    ONOREPAIR = 1 << 8                   \/\/\/< open without auto repair$/;"	e	enum:kyotocabinet::BasicDB::OpenMode
OPEN	src\storage\kdb\kyotocabinet\kcdb.h	/^      OPEN,                              \/\/\/< opening$/;"	e	enum:kyotocabinet::BasicDB::MetaTrigger::Kind
OREADER	src\storage\kdb\kyotocabinet\kcdb.h	/^    OREADER = 1 << 0,                    \/\/\/< open as a reader$/;"	e	enum:kyotocabinet::BasicDB::OpenMode
OTRUNCATE	src\storage\kdb\kyotocabinet\kcdb.h	/^    OTRUNCATE = 1 << 3,                  \/\/\/< writer truncating$/;"	e	enum:kyotocabinet::BasicDB::OpenMode
OTRYLOCK	src\storage\kdb\kyotocabinet\kcdb.h	/^    OTRYLOCK = 1 << 7,                   \/\/\/< lock without blocking$/;"	e	enum:kyotocabinet::BasicDB::OpenMode
OWRITER	src\storage\kdb\kyotocabinet\kcdb.h	/^    OWRITER = 1 << 1,                    \/\/\/< open as a writer$/;"	e	enum:kyotocabinet::BasicDB::OpenMode
OpenMode	src\storage\kdb\kyotocabinet\kcdb.h	/^  enum OpenMode {$/;"	g	class:kyotocabinet::BasicDB
ProgressChecker	src\storage\kdb\kyotocabinet\kcdb.h	/^  class ProgressChecker {$/;"	c	class:kyotocabinet::BasicDB
REMOVE	src\storage\kdb\kyotocabinet\kcdb.h	/^    static const char* const REMOVE;$/;"	m	class:kyotocabinet::DB::Visitor
SUCCESS	src\storage\kdb\kyotocabinet\kcdb.h	/^      SUCCESS,                           \/\/\/< success$/;"	e	enum:kyotocabinet::BasicDB::Error::Code
SYNCHRONIZE	src\storage\kdb\kyotocabinet\kcdb.h	/^      SYNCHRONIZE,                       \/\/\/< synchronization$/;"	e	enum:kyotocabinet::BasicDB::MetaTrigger::Kind
SYSTEM	src\storage\kdb\kyotocabinet\kcdb.h	/^      SYSTEM,                            \/\/\/< system error$/;"	e	enum:kyotocabinet::BasicDB::Error::Code
TYPECACHE	src\storage\kdb\kyotocabinet\kcdb.h	/^    TYPECACHE = 0x20,                    \/\/\/< cache hash database$/;"	e	enum:kyotocabinet::BasicDB::Type
TYPEDIR	src\storage\kdb\kyotocabinet\kcdb.h	/^    TYPEDIR = 0x40,                      \/\/\/< directory hash database$/;"	e	enum:kyotocabinet::BasicDB::Type
TYPEFOREST	src\storage\kdb\kyotocabinet\kcdb.h	/^    TYPEFOREST = 0x41,                   \/\/\/< directory tree database$/;"	e	enum:kyotocabinet::BasicDB::Type
TYPEGRASS	src\storage\kdb\kyotocabinet\kcdb.h	/^    TYPEGRASS = 0x21,                    \/\/\/< cache tree database$/;"	e	enum:kyotocabinet::BasicDB::Type
TYPEHASH	src\storage\kdb\kyotocabinet\kcdb.h	/^    TYPEHASH = 0x30,                     \/\/\/< file hash database$/;"	e	enum:kyotocabinet::BasicDB::Type
TYPEMISC	src\storage\kdb\kyotocabinet\kcdb.h	/^    TYPEMISC = 0x80                      \/\/\/< miscellaneous database$/;"	e	enum:kyotocabinet::BasicDB::Type
TYPEPHASH	src\storage\kdb\kyotocabinet\kcdb.h	/^    TYPEPHASH = 0x10,                    \/\/\/< prototype hash database$/;"	e	enum:kyotocabinet::BasicDB::Type
TYPEPTREE	src\storage\kdb\kyotocabinet\kcdb.h	/^    TYPEPTREE = 0x11,                    \/\/\/< prototype tree database$/;"	e	enum:kyotocabinet::BasicDB::Type
TYPESTASH	src\storage\kdb\kyotocabinet\kcdb.h	/^    TYPESTASH = 0x18,                    \/\/\/< stash database$/;"	e	enum:kyotocabinet::BasicDB::Type
TYPETREE	src\storage\kdb\kyotocabinet\kcdb.h	/^    TYPETREE = 0x31,                     \/\/\/< file tree database$/;"	e	enum:kyotocabinet::BasicDB::Type
TYPEVOID	src\storage\kdb\kyotocabinet\kcdb.h	/^    TYPEVOID = 0x00,                     \/\/\/< void database$/;"	e	enum:kyotocabinet::BasicDB::Type
Type	src\storage\kdb\kyotocabinet\kcdb.h	/^  enum Type {$/;"	g	class:kyotocabinet::BasicDB
Visitor	src\storage\kdb\kyotocabinet\kcdb.h	/^  class Visitor {$/;"	c	class:kyotocabinet::DB
WARN	src\storage\kdb\kyotocabinet\kcdb.h	/^      WARN = 1 << 2,                     \/\/\/< warning$/;"	e	enum:kyotocabinet::BasicDB::Logger::Kind
_KCDB_H	src\storage\kdb\kyotocabinet\kcdb.h	17;"	d
add	src\storage\kdb\kyotocabinet\kcdb.h	/^  bool add(const char* kbuf, size_t ksiz, const char* vbuf, size_t vsiz) {$/;"	f	class:kyotocabinet::BasicDB
add	src\storage\kdb\kyotocabinet\kcdb.h	/^  bool add(const std::string& key, const std::string& value) {$/;"	f	class:kyotocabinet::BasicDB
append	src\storage\kdb\kyotocabinet\kcdb.h	/^  bool append(const char* kbuf, size_t ksiz, const char* vbuf, size_t vsiz) {$/;"	f	class:kyotocabinet::BasicDB
append	src\storage\kdb\kyotocabinet\kcdb.h	/^  bool append(const std::string& key, const std::string& value) {$/;"	f	class:kyotocabinet::BasicDB
cas	src\storage\kdb\kyotocabinet\kcdb.h	/^  bool cas(const char* kbuf, size_t ksiz,$/;"	f	class:kyotocabinet::BasicDB
cas	src\storage\kdb\kyotocabinet\kcdb.h	/^  bool cas(const std::string& key,$/;"	f	class:kyotocabinet::BasicDB
code	src\storage\kdb\kyotocabinet\kcdb.h	/^    Code code() const {$/;"	f	class:kyotocabinet::BasicDB::Error
code_	src\storage\kdb\kyotocabinet\kcdb.h	/^    Code code_;$/;"	m	class:kyotocabinet::BasicDB::Error
codename	src\storage\kdb\kyotocabinet\kcdb.h	/^    static const char* codename(Code code) {$/;"	f	class:kyotocabinet::BasicDB::Error
copy	src\storage\kdb\kyotocabinet\kcdb.h	/^  bool copy(const std::string& dest, ProgressChecker* checker = NULL) {$/;"	f	class:kyotocabinet::BasicDB
dump_snapshot	src\storage\kdb\kyotocabinet\kcdb.h	/^  bool dump_snapshot(const std::string& dest, ProgressChecker* checker = NULL) {$/;"	f	class:kyotocabinet::BasicDB
dump_snapshot	src\storage\kdb\kyotocabinet\kcdb.h	/^  bool dump_snapshot(std::ostream* dest, ProgressChecker* checker = NULL) {$/;"	f	class:kyotocabinet::BasicDB
error	src\storage\kdb\kyotocabinet\kcdb.h	/^    Error error() {$/;"	f	class:kyotocabinet::BasicDB::Cursor
get	src\storage\kdb\kyotocabinet\kcdb.h	/^    char* get(size_t* ksp, const char** vbp, size_t* vsp, bool step = false) {$/;"	f	class:kyotocabinet::BasicDB::Cursor
get	src\storage\kdb\kyotocabinet\kcdb.h	/^  char* get(const char* kbuf, size_t ksiz, size_t* sp) {$/;"	f	class:kyotocabinet::BasicDB
get	src\storage\kdb\kyotocabinet\kcdb.h	/^  int32_t get(const char* kbuf, size_t ksiz, char* vbuf, size_t max) {$/;"	f	class:kyotocabinet::BasicDB
get	src\storage\kdb\kyotocabinet\kcdb.h	/^  std::string* get(const std::string& key) {$/;"	f	class:kyotocabinet::BasicDB
get_key	src\storage\kdb\kyotocabinet\kcdb.h	/^    char* get_key(size_t* sp, bool step = false) {$/;"	f	class:kyotocabinet::BasicDB::Cursor
get_key	src\storage\kdb\kyotocabinet\kcdb.h	/^    std::string* get_key(bool step = false) {$/;"	f	class:kyotocabinet::BasicDB::Cursor
get_pair	src\storage\kdb\kyotocabinet\kcdb.h	/^    std::pair<std::string, std::string>* get_pair(bool step = false) {$/;"	f	class:kyotocabinet::BasicDB::Cursor
get_value	src\storage\kdb\kyotocabinet\kcdb.h	/^    char* get_value(size_t* sp, bool step = false) {$/;"	f	class:kyotocabinet::BasicDB::Cursor
get_value	src\storage\kdb\kyotocabinet\kcdb.h	/^    std::string* get_value(bool step = false) {$/;"	f	class:kyotocabinet::BasicDB::Cursor
increment	src\storage\kdb\kyotocabinet\kcdb.h	/^  int64_t increment(const char* kbuf, size_t ksiz, int64_t num) {$/;"	f	class:kyotocabinet::BasicDB
increment	src\storage\kdb\kyotocabinet\kcdb.h	/^  int64_t increment(const std::string& key, int64_t num) {$/;"	f	class:kyotocabinet::BasicDB
increment_double	src\storage\kdb\kyotocabinet\kcdb.h	/^  double increment_double(const char* kbuf, size_t ksiz, double num) {$/;"	f	class:kyotocabinet::BasicDB
increment_double	src\storage\kdb\kyotocabinet\kcdb.h	/^  double increment_double(const std::string& key, double num) {$/;"	f	class:kyotocabinet::BasicDB
kyotocabinet	src\storage\kdb\kyotocabinet\kcdb.h	/^namespace kyotocabinet {                 \/\/ common namespace$/;"	n
load_snapshot	src\storage\kdb\kyotocabinet\kcdb.h	/^  bool load_snapshot(const std::string& src, ProgressChecker* checker = NULL) {$/;"	f	class:kyotocabinet::BasicDB
load_snapshot	src\storage\kdb\kyotocabinet\kcdb.h	/^  bool load_snapshot(std::istream* src, ProgressChecker* checker = NULL) {$/;"	f	class:kyotocabinet::BasicDB
message	src\storage\kdb\kyotocabinet\kcdb.h	/^    const char* message() const {$/;"	f	class:kyotocabinet::BasicDB::Error
message_	src\storage\kdb\kyotocabinet\kcdb.h	/^    const char* message_;$/;"	m	class:kyotocabinet::BasicDB::Error
name	src\storage\kdb\kyotocabinet\kcdb.h	/^    const char* name() const {$/;"	f	class:kyotocabinet::BasicDB::Error
operator =	src\storage\kdb\kyotocabinet\kcdb.h	/^    Error& operator =(const Error& right) {$/;"	f	class:kyotocabinet::BasicDB::Error
operator int32_t	src\storage\kdb\kyotocabinet\kcdb.h	/^    operator int32_t() const {$/;"	f	class:kyotocabinet::BasicDB::Error
remove	src\storage\kdb\kyotocabinet\kcdb.h	/^    bool remove() {$/;"	f	class:kyotocabinet::BasicDB::Cursor
remove	src\storage\kdb\kyotocabinet\kcdb.h	/^  bool remove(const char* kbuf, size_t ksiz) {$/;"	f	class:kyotocabinet::BasicDB
remove	src\storage\kdb\kyotocabinet\kcdb.h	/^  bool remove(const std::string& key) {$/;"	f	class:kyotocabinet::BasicDB
replace	src\storage\kdb\kyotocabinet\kcdb.h	/^  bool replace(const char* kbuf, size_t ksiz, const char* vbuf, size_t vsiz) {$/;"	f	class:kyotocabinet::BasicDB
replace	src\storage\kdb\kyotocabinet\kcdb.h	/^  bool replace(const std::string& key, const std::string& value) {$/;"	f	class:kyotocabinet::BasicDB
set	src\storage\kdb\kyotocabinet\kcdb.h	/^    void set(Code code, const char* message) {$/;"	f	class:kyotocabinet::BasicDB::Error
set	src\storage\kdb\kyotocabinet\kcdb.h	/^  bool set(const char* kbuf, size_t ksiz, const char* vbuf, size_t vsiz) {$/;"	f	class:kyotocabinet::BasicDB
set	src\storage\kdb\kyotocabinet\kcdb.h	/^  bool set(const std::string& key, const std::string& value) {$/;"	f	class:kyotocabinet::BasicDB
set_value	src\storage\kdb\kyotocabinet\kcdb.h	/^    bool set_value(const char* vbuf, size_t vsiz, bool step = false) {$/;"	f	class:kyotocabinet::BasicDB::Cursor
set_value_str	src\storage\kdb\kyotocabinet\kcdb.h	/^    bool set_value_str(const std::string& value, bool step = false) {$/;"	f	class:kyotocabinet::BasicDB::Cursor
typecname	src\storage\kdb\kyotocabinet\kcdb.h	/^  static const char* typecname(uint32_t type) {$/;"	f	class:kyotocabinet::BasicDB
typestring	src\storage\kdb\kyotocabinet\kcdb.h	/^  static const char* typestring(uint32_t type) {$/;"	f	class:kyotocabinet::BasicDB
visit_empty	src\storage\kdb\kyotocabinet\kcdb.h	/^    virtual const char* visit_empty(const char* kbuf, size_t ksiz, size_t* sp) {$/;"	f	class:kyotocabinet::DB::Visitor
visit_full	src\storage\kdb\kyotocabinet\kcdb.h	/^    virtual const char* visit_full(const char* kbuf, size_t ksiz,$/;"	f	class:kyotocabinet::DB::Visitor
~BasicDB	src\storage\kdb\kyotocabinet\kcdb.h	/^  virtual ~BasicDB() {$/;"	f	class:kyotocabinet::BasicDB
~Cursor	src\storage\kdb\kyotocabinet\kcdb.h	/^    virtual ~Cursor() {$/;"	f	class:kyotocabinet::BasicDB::Cursor
~Cursor	src\storage\kdb\kyotocabinet\kcdb.h	/^    virtual ~Cursor() {$/;"	f	class:kyotocabinet::DB::Cursor
~DB	src\storage\kdb\kyotocabinet\kcdb.h	/^  virtual ~DB() {$/;"	f	class:kyotocabinet::DB
~Error	src\storage\kdb\kyotocabinet\kcdb.h	/^    ~Error() {$/;"	f	class:kyotocabinet::BasicDB::Error
~FileProcessor	src\storage\kdb\kyotocabinet\kcdb.h	/^    virtual ~FileProcessor() {$/;"	f	class:kyotocabinet::BasicDB::FileProcessor
~Logger	src\storage\kdb\kyotocabinet\kcdb.h	/^    virtual ~Logger() {$/;"	f	class:kyotocabinet::BasicDB::Logger
~MetaTrigger	src\storage\kdb\kyotocabinet\kcdb.h	/^    virtual ~MetaTrigger() {$/;"	f	class:kyotocabinet::BasicDB::MetaTrigger
~ProgressChecker	src\storage\kdb\kyotocabinet\kcdb.h	/^    virtual ~ProgressChecker() {$/;"	f	class:kyotocabinet::BasicDB::ProgressChecker
~Visitor	src\storage\kdb\kyotocabinet\kcdb.h	/^    virtual ~Visitor() {$/;"	f	class:kyotocabinet::DB::Visitor
CDIRSTR	src\storage\kdb\kyotocabinet\kcfile.cc	/^const char* const File::CDIRSTR = MYCDIRSTR;$/;"	m	class:kyotocabinet::File	file:
DIRPERM	src\storage\kdb\kyotocabinet\kcfile.cc	/^const int32_t DIRPERM = 00755;           \/\/\/< default permission of a new directory$/;"	m	namespace:kyotocabinet::__anon25	file:
DirStream	src\storage\kdb\kyotocabinet\kcfile.cc	/^DirStream::DirStream() : opq_(NULL) {$/;"	f	class:kyotocabinet::DirStream
DirStreamCore	src\storage\kdb\kyotocabinet\kcfile.cc	/^struct DirStreamCore {$/;"	s	namespace:kyotocabinet	file:
EXTCHR	src\storage\kdb\kyotocabinet\kcfile.cc	/^const char File::EXTCHR = MYEXTCHR;$/;"	m	class:kyotocabinet::File	file:
EXTSTR	src\storage\kdb\kyotocabinet\kcfile.cc	/^const char* const File::EXTSTR = MYEXTSTR;$/;"	m	class:kyotocabinet::File	file:
FILEMAXSIZ	src\storage\kdb\kyotocabinet\kcfile.cc	/^const int64_t FILEMAXSIZ = INT64_MAX - INT32_MAX;  \/\/ maximum size of a file$/;"	m	namespace:kyotocabinet::__anon25	file:
FILEPERM	src\storage\kdb\kyotocabinet\kcfile.cc	/^const int32_t FILEPERM = 00644;          \/\/\/< default permission of a new file$/;"	m	namespace:kyotocabinet::__anon25	file:
File	src\storage\kdb\kyotocabinet\kcfile.cc	/^File::File() : opq_(NULL) {$/;"	f	class:kyotocabinet::File
FileCore	src\storage\kdb\kyotocabinet\kcfile.cc	/^struct FileCore {$/;"	s	namespace:kyotocabinet	file:
IOBUFSIZ	src\storage\kdb\kyotocabinet\kcfile.cc	/^const int32_t IOBUFSIZ = 16384;          \/\/\/< size of the IO buffer$/;"	m	namespace:kyotocabinet::__anon25	file:
PATHBUFSIZ	src\storage\kdb\kyotocabinet\kcfile.cc	/^const int32_t PATHBUFSIZ = 8192;         \/\/\/< size of the path buffer$/;"	m	namespace:kyotocabinet::__anon25	file:
PATHCHR	src\storage\kdb\kyotocabinet\kcfile.cc	/^const char File::PATHCHR = MYPATHCHR;$/;"	m	class:kyotocabinet::File	file:
PATHSTR	src\storage\kdb\kyotocabinet\kcfile.cc	/^const char* const File::PATHSTR = MYPATHSTR;$/;"	m	class:kyotocabinet::File	file:
PDIRSTR	src\storage\kdb\kyotocabinet\kcfile.cc	/^const char* const File::PDIRSTR = MYPDIRSTR;$/;"	m	class:kyotocabinet::File	file:
WALMAGICDATA	src\storage\kdb\kyotocabinet\kcfile.cc	/^const char WALMAGICDATA[] = "KW\\n";      \/\/\/< magic data of the WAL file$/;"	m	namespace:kyotocabinet::__anon25	file:
WALMSGMAGIC	src\storage\kdb\kyotocabinet\kcfile.cc	/^const uint8_t WALMSGMAGIC = 0xee;        \/\/\/< magic data for WAL record$/;"	m	namespace:kyotocabinet::__anon25	file:
WALMessage	src\storage\kdb\kyotocabinet\kcfile.cc	/^struct WALMessage {$/;"	s	namespace:kyotocabinet	file:
WALPATHEXT	src\storage\kdb\kyotocabinet\kcfile.cc	/^const char* WALPATHEXT = "wal";          \/\/\/< extension of the WAL file$/;"	m	namespace:kyotocabinet::__anon25	file:
absolute_path	src\storage\kdb\kyotocabinet\kcfile.cc	/^std::string File::absolute_path(const std::string& path) {$/;"	f	class:kyotocabinet::File
alock	src\storage\kdb\kyotocabinet\kcfile.cc	/^  Mutex alock;                           \/\/\/< attribute lock$/;"	m	struct:kyotocabinet::DirStreamCore	file:
alock	src\storage\kdb\kyotocabinet\kcfile.cc	/^  Mutex alock;                           \/\/\/< attribute lock$/;"	m	struct:kyotocabinet::FileCore	file:
append	src\storage\kdb\kyotocabinet\kcfile.cc	/^bool File::append(const void* buf, size_t size) {$/;"	f	class:kyotocabinet::File
begin_transaction	src\storage\kdb\kyotocabinet\kcfile.cc	/^bool File::begin_transaction(bool hard, int64_t off) {$/;"	f	class:kyotocabinet::File
body	src\storage\kdb\kyotocabinet\kcfile.cc	/^  std::string body;                      \/\/\/< body data$/;"	m	struct:kyotocabinet::WALMessage	file:
close	src\storage\kdb\kyotocabinet\kcfile.cc	/^bool DirStream::close() {$/;"	f	class:kyotocabinet::DirStream
close	src\storage\kdb\kyotocabinet\kcfile.cc	/^bool File::close() {$/;"	f	class:kyotocabinet::File
cur	src\storage\kdb\kyotocabinet\kcfile.cc	/^  std::string cur;                       \/\/\/< current file$/;"	m	struct:kyotocabinet::DirStreamCore	file:
dh	src\storage\kdb\kyotocabinet\kcfile.cc	/^  ::HANDLE dh;                           \/\/\/< directory handle$/;"	m	struct:kyotocabinet::DirStreamCore	file:
end_transaction	src\storage\kdb\kyotocabinet\kcfile.cc	/^bool File::end_transaction(bool commit) {$/;"	f	class:kyotocabinet::File
errmsg	src\storage\kdb\kyotocabinet\kcfile.cc	/^  TSDKey errmsg;                         \/\/\/< error message$/;"	m	struct:kyotocabinet::FileCore	file:
error	src\storage\kdb\kyotocabinet\kcfile.cc	/^const char* File::error() const {$/;"	f	class:kyotocabinet::File
fh	src\storage\kdb\kyotocabinet\kcfile.cc	/^  ::HANDLE fh;                           \/\/\/< file handle$/;"	m	struct:kyotocabinet::FileCore	file:
get_current_directory	src\storage\kdb\kyotocabinet\kcfile.cc	/^std::string File::get_current_directory() {$/;"	f	class:kyotocabinet::File
kyotocabinet	src\storage\kdb\kyotocabinet\kcfile.cc	/^namespace kyotocabinet {                 \/\/ common namespace$/;"	n	file:
lsiz	src\storage\kdb\kyotocabinet\kcfile.cc	/^  int64_t lsiz;                          \/\/\/< logical size$/;"	m	struct:kyotocabinet::FileCore	file:
make_directory	src\storage\kdb\kyotocabinet\kcfile.cc	/^bool File::make_directory(const std::string& path) {$/;"	f	class:kyotocabinet::File
map	src\storage\kdb\kyotocabinet\kcfile.cc	/^  char* map;                             \/\/\/< mapped memory$/;"	m	struct:kyotocabinet::FileCore	file:
mh	src\storage\kdb\kyotocabinet\kcfile.cc	/^  ::HANDLE mh;                           \/\/\/< map view handle$/;"	m	struct:kyotocabinet::FileCore	file:
msiz	src\storage\kdb\kyotocabinet\kcfile.cc	/^  int64_t msiz;                          \/\/\/< map size$/;"	m	struct:kyotocabinet::FileCore	file:
myread	src\storage\kdb\kyotocabinet\kcfile.cc	/^static size_t myread(::HANDLE fh, void* buf, size_t size) {$/;"	f	namespace:kyotocabinet
myread	src\storage\kdb\kyotocabinet\kcfile.cc	/^static size_t myread(int32_t fd, void* buf, size_t size) {$/;"	f	namespace:kyotocabinet
mywrite	src\storage\kdb\kyotocabinet\kcfile.cc	/^static bool mywrite(::HANDLE fh, int64_t off, const void* buf, size_t size) {$/;"	f	namespace:kyotocabinet
mywrite	src\storage\kdb\kyotocabinet\kcfile.cc	/^static bool mywrite(int32_t fd, int64_t off, const void* buf, size_t size) {$/;"	f	namespace:kyotocabinet
off	src\storage\kdb\kyotocabinet\kcfile.cc	/^  int64_t off;                           \/\/\/< offset of the region$/;"	m	struct:kyotocabinet::WALMessage	file:
omode	src\storage\kdb\kyotocabinet\kcfile.cc	/^  uint32_t omode;                        \/\/\/< open mode$/;"	m	struct:kyotocabinet::FileCore	file:
open	src\storage\kdb\kyotocabinet\kcfile.cc	/^bool DirStream::open(const std::string& path) {$/;"	f	class:kyotocabinet::DirStream
open	src\storage\kdb\kyotocabinet\kcfile.cc	/^bool File::open(const std::string& path, uint32_t mode, int64_t msiz) {$/;"	f	class:kyotocabinet::File
path	src\storage\kdb\kyotocabinet\kcfile.cc	/^  std::string path;                      \/\/\/< file path$/;"	m	struct:kyotocabinet::FileCore	file:
path	src\storage\kdb\kyotocabinet\kcfile.cc	/^std::string File::path() const {$/;"	f	class:kyotocabinet::File
psiz	src\storage\kdb\kyotocabinet\kcfile.cc	/^  int64_t psiz;                          \/\/\/< physical size$/;"	m	struct:kyotocabinet::FileCore	file:
read	src\storage\kdb\kyotocabinet\kcfile.cc	/^bool DirStream::read(std::string* path) {$/;"	f	class:kyotocabinet::DirStream
read	src\storage\kdb\kyotocabinet\kcfile.cc	/^bool File::read(int64_t off, void* buf, size_t size) {$/;"	f	class:kyotocabinet::File
read_directory	src\storage\kdb\kyotocabinet\kcfile.cc	/^bool File::read_directory(const std::string& path, std::vector<std::string>* strvec) {$/;"	f	class:kyotocabinet::File
read_fast	src\storage\kdb\kyotocabinet\kcfile.cc	/^bool File::read_fast(int64_t off, void* buf, size_t size) {$/;"	f	class:kyotocabinet::File
read_file	src\storage\kdb\kyotocabinet\kcfile.cc	/^char* File::read_file(const std::string& path, int64_t* sp, int64_t limit) {$/;"	f	class:kyotocabinet::File
recov	src\storage\kdb\kyotocabinet\kcfile.cc	/^  bool recov;                            \/\/\/< flag of recovery$/;"	m	struct:kyotocabinet::FileCore	file:
recovered	src\storage\kdb\kyotocabinet\kcfile.cc	/^bool File::recovered() const {$/;"	f	class:kyotocabinet::File
refresh	src\storage\kdb\kyotocabinet\kcfile.cc	/^bool File::refresh() {$/;"	f	class:kyotocabinet::File
remove	src\storage\kdb\kyotocabinet\kcfile.cc	/^bool File::remove(const std::string& path) {$/;"	f	class:kyotocabinet::File
remove_directory	src\storage\kdb\kyotocabinet\kcfile.cc	/^bool File::remove_directory(const std::string& path) {$/;"	f	class:kyotocabinet::File
remove_recursively	src\storage\kdb\kyotocabinet\kcfile.cc	/^bool File::remove_recursively(const std::string& path) {$/;"	f	class:kyotocabinet::File
rename	src\storage\kdb\kyotocabinet\kcfile.cc	/^bool File::rename(const std::string& opath, const std::string& npath) {$/;"	f	class:kyotocabinet::File
set_current_directory	src\storage\kdb\kyotocabinet\kcfile.cc	/^bool File::set_current_directory(const std::string& path) {$/;"	f	class:kyotocabinet::File
seterrmsg	src\storage\kdb\kyotocabinet\kcfile.cc	/^static void seterrmsg(FileCore* core, const char* msg) {$/;"	f	namespace:kyotocabinet
size	src\storage\kdb\kyotocabinet\kcfile.cc	/^int64_t File::size() const {$/;"	f	class:kyotocabinet::File
status	src\storage\kdb\kyotocabinet\kcfile.cc	/^bool File::status(const std::string& path, Status* buf) {$/;"	f	class:kyotocabinet::File
synchronize	src\storage\kdb\kyotocabinet\kcfile.cc	/^bool File::synchronize(bool hard) {$/;"	f	class:kyotocabinet::File
synchronize_whole	src\storage\kdb\kyotocabinet\kcfile.cc	/^bool File::synchronize_whole() {$/;"	f	class:kyotocabinet::File
tran	src\storage\kdb\kyotocabinet\kcfile.cc	/^  bool tran;                             \/\/\/< whether in transaction$/;"	m	struct:kyotocabinet::FileCore	file:
trbase	src\storage\kdb\kyotocabinet\kcfile.cc	/^  int64_t trbase;                        \/\/\/< base offset of guarded region$/;"	m	struct:kyotocabinet::FileCore	file:
trhard	src\storage\kdb\kyotocabinet\kcfile.cc	/^  bool trhard;                           \/\/\/< whether hard transaction$/;"	m	struct:kyotocabinet::FileCore	file:
trmsiz	src\storage\kdb\kyotocabinet\kcfile.cc	/^  int64_t trmsiz;                        \/\/\/< minimum size during transaction$/;"	m	struct:kyotocabinet::FileCore	file:
truncate	src\storage\kdb\kyotocabinet\kcfile.cc	/^bool File::truncate(int64_t size) {$/;"	f	class:kyotocabinet::File
walapply	src\storage\kdb\kyotocabinet\kcfile.cc	/^static bool walapply(FileCore* core) {$/;"	f	namespace:kyotocabinet
walfh	src\storage\kdb\kyotocabinet\kcfile.cc	/^  ::HANDLE walfh;                        \/\/\/< file handle for WAL$/;"	m	struct:kyotocabinet::FileCore	file:
walpath	src\storage\kdb\kyotocabinet\kcfile.cc	/^static std::string walpath(const std::string& path) {$/;"	f	namespace:kyotocabinet
walsiz	src\storage\kdb\kyotocabinet\kcfile.cc	/^  int64_t walsiz;                        \/\/\/< size of WAL$/;"	m	struct:kyotocabinet::FileCore	file:
walwrite	src\storage\kdb\kyotocabinet\kcfile.cc	/^static bool walwrite(FileCore *core, int64_t off, size_t size, int64_t base) {$/;"	f	namespace:kyotocabinet
win_ftruncate	src\storage\kdb\kyotocabinet\kcfile.cc	/^static int32_t win_ftruncate(::HANDLE fh, int64_t length) {$/;"	f	namespace:kyotocabinet
win_pread	src\storage\kdb\kyotocabinet\kcfile.cc	/^static int64_t win_pread(::HANDLE fh, void* buf, size_t count, int64_t offset) {$/;"	f	namespace:kyotocabinet
win_pwrite	src\storage\kdb\kyotocabinet\kcfile.cc	/^static int64_t win_pwrite(::HANDLE fh, const void* buf, size_t count, int64_t offset) {$/;"	f	namespace:kyotocabinet
win_read	src\storage\kdb\kyotocabinet\kcfile.cc	/^static int64_t win_read(::HANDLE fh, void* buf, size_t count) {$/;"	f	namespace:kyotocabinet
win_write	src\storage\kdb\kyotocabinet\kcfile.cc	/^static int64_t win_write(::HANDLE fh, const void* buf, size_t count) {$/;"	f	namespace:kyotocabinet
write	src\storage\kdb\kyotocabinet\kcfile.cc	/^bool File::write(int64_t off, const void* buf, size_t size) {$/;"	f	class:kyotocabinet::File
write_fast	src\storage\kdb\kyotocabinet\kcfile.cc	/^bool File::write_fast(int64_t off, const void* buf, size_t size) {$/;"	f	class:kyotocabinet::File
write_file	src\storage\kdb\kyotocabinet\kcfile.cc	/^bool File::write_file(const std::string& path, const char* buf, int64_t size) {$/;"	f	class:kyotocabinet::File
write_transaction	src\storage\kdb\kyotocabinet\kcfile.cc	/^bool File::write_transaction(int64_t off, size_t size) {$/;"	f	class:kyotocabinet::File
~DirStream	src\storage\kdb\kyotocabinet\kcfile.cc	/^DirStream::~DirStream() {$/;"	f	class:kyotocabinet::DirStream
~File	src\storage\kdb\kyotocabinet\kcfile.cc	/^File::~File() {$/;"	f	class:kyotocabinet::File
CDIRSTR	src\storage\kdb\kyotocabinet\kcfile.h	/^  static const char* const CDIRSTR;$/;"	m	class:kyotocabinet::File
DirStream	src\storage\kdb\kyotocabinet\kcfile.h	/^class DirStream {$/;"	c	namespace:kyotocabinet
EXTCHR	src\storage\kdb\kyotocabinet\kcfile.h	/^  static const char EXTCHR;$/;"	m	class:kyotocabinet::File
EXTSTR	src\storage\kdb\kyotocabinet\kcfile.h	/^  static const char* const EXTSTR;$/;"	m	class:kyotocabinet::File
File	src\storage\kdb\kyotocabinet\kcfile.h	/^class File {$/;"	c	namespace:kyotocabinet
OCREATE	src\storage\kdb\kyotocabinet\kcfile.h	/^    OCREATE = 1 << 2,                    \/\/\/< writer creating$/;"	e	enum:kyotocabinet::File::OpenMode
ONOLOCK	src\storage\kdb\kyotocabinet\kcfile.h	/^    ONOLOCK = 1 << 4,                    \/\/\/< open without locking$/;"	e	enum:kyotocabinet::File::OpenMode
OREADER	src\storage\kdb\kyotocabinet\kcfile.h	/^    OREADER = 1 << 0,                    \/\/\/< open as a reader$/;"	e	enum:kyotocabinet::File::OpenMode
OTRUNCATE	src\storage\kdb\kyotocabinet\kcfile.h	/^    OTRUNCATE = 1 << 3,                  \/\/\/< writer truncating$/;"	e	enum:kyotocabinet::File::OpenMode
OTRYLOCK	src\storage\kdb\kyotocabinet\kcfile.h	/^    OTRYLOCK = 1 << 5                    \/\/\/< lock without blocking$/;"	e	enum:kyotocabinet::File::OpenMode
OWRITER	src\storage\kdb\kyotocabinet\kcfile.h	/^    OWRITER = 1 << 1,                    \/\/\/< open as a writer$/;"	e	enum:kyotocabinet::File::OpenMode
OpenMode	src\storage\kdb\kyotocabinet\kcfile.h	/^  enum OpenMode {$/;"	g	class:kyotocabinet::File
PATHCHR	src\storage\kdb\kyotocabinet\kcfile.h	/^  static const char PATHCHR;$/;"	m	class:kyotocabinet::File
PATHSTR	src\storage\kdb\kyotocabinet\kcfile.h	/^  static const char* const PATHSTR;$/;"	m	class:kyotocabinet::File
PDIRSTR	src\storage\kdb\kyotocabinet\kcfile.h	/^  static const char* const PDIRSTR;$/;"	m	class:kyotocabinet::File
Status	src\storage\kdb\kyotocabinet\kcfile.h	/^  struct Status {$/;"	s	class:kyotocabinet::File
_KCFILE_H	src\storage\kdb\kyotocabinet\kcfile.h	17;"	d
append	src\storage\kdb\kyotocabinet\kcfile.h	/^  bool append(const std::string& str) {$/;"	f	class:kyotocabinet::File
isdir	src\storage\kdb\kyotocabinet\kcfile.h	/^    bool isdir;                          \/\/\/< whether directory or not$/;"	m	struct:kyotocabinet::File::Status
kyotocabinet	src\storage\kdb\kyotocabinet\kcfile.h	/^namespace kyotocabinet {                 \/\/ common namespace$/;"	n
mtime	src\storage\kdb\kyotocabinet\kcfile.h	/^    int64_t mtime;                       \/\/\/< last modified time$/;"	m	struct:kyotocabinet::File::Status
opq_	src\storage\kdb\kyotocabinet\kcfile.h	/^  void* opq_;$/;"	m	class:kyotocabinet::DirStream
opq_	src\storage\kdb\kyotocabinet\kcfile.h	/^  void* opq_;$/;"	m	class:kyotocabinet::File
read	src\storage\kdb\kyotocabinet\kcfile.h	/^  bool read(int64_t off, std::string* buf, size_t size) {$/;"	f	class:kyotocabinet::File
read_fast	src\storage\kdb\kyotocabinet\kcfile.h	/^  bool read_fast(int64_t off, std::string* buf, size_t size) {$/;"	f	class:kyotocabinet::File
size	src\storage\kdb\kyotocabinet\kcfile.h	/^    int64_t size;                        \/\/\/< file size$/;"	m	struct:kyotocabinet::File::Status
write	src\storage\kdb\kyotocabinet\kcfile.h	/^  bool write(int64_t off, const std::string& str) {$/;"	f	class:kyotocabinet::File
write_fast	src\storage\kdb\kyotocabinet\kcfile.h	/^  bool write_fast(int64_t off, const std::string& str) {$/;"	f	class:kyotocabinet::File
kyotocabinet	src\storage\kdb\kyotocabinet\kchashdb.cc	/^namespace kyotocabinet {                 \/\/ common namespace$/;"	n	file:
Cursor	src\storage\kdb\kyotocabinet\kchashdb.h	/^    explicit Cursor(HashDB* db) : db_(db), off_(0), end_(0) {$/;"	f	class:kyotocabinet::HashDB::Cursor
Cursor	src\storage\kdb\kyotocabinet\kchashdb.h	/^  class Cursor : public BasicDB::Cursor {$/;"	c	class:kyotocabinet::HashDB
CursorList	src\storage\kdb\kyotocabinet\kchashdb.h	/^  typedef std::list<Cursor*> CursorList;$/;"	t	class:kyotocabinet::HashDB
FBP	src\storage\kdb\kyotocabinet\kchashdb.h	/^  typedef std::set<FreeBlock> FBP;$/;"	t	class:kyotocabinet::HashDB
FFATAL	src\storage\kdb\kyotocabinet\kchashdb.h	/^    FFATAL = 1 << 1                      \/\/\/< whether with fatal error$/;"	e	enum:kyotocabinet::HashDB::Flag
FOPEN	src\storage\kdb\kyotocabinet\kchashdb.h	/^    FOPEN = 1 << 0,                      \/\/\/< whether opened$/;"	e	enum:kyotocabinet::HashDB::Flag
Flag	src\storage\kdb\kyotocabinet\kchashdb.h	/^  enum Flag {$/;"	g	class:kyotocabinet::HashDB
FreeBlock	src\storage\kdb\kyotocabinet\kchashdb.h	/^  struct FreeBlock {$/;"	s	class:kyotocabinet::HashDB
FreeBlockComparator	src\storage\kdb\kyotocabinet\kchashdb.h	/^  struct FreeBlockComparator {$/;"	s	class:kyotocabinet::HashDB
HDBCHKSUMSEED	src\storage\kdb\kyotocabinet\kchashdb.h	/^const char HDBCHKSUMSEED[] = "__kyotocabinet__";  \/\/\/< seed of the module checksum$/;"	m	namespace:kyotocabinet::__anon26
HDBDEFAPOW	src\storage\kdb\kyotocabinet\kchashdb.h	/^const uint8_t HDBDEFAPOW = 3;            \/\/\/< default alignment power$/;"	m	namespace:kyotocabinet::__anon26
HDBDEFBNUM	src\storage\kdb\kyotocabinet\kchashdb.h	/^const int64_t HDBDEFBNUM = 1048583LL;    \/\/\/< default bucket number$/;"	m	namespace:kyotocabinet::__anon26
HDBDEFFPOW	src\storage\kdb\kyotocabinet\kchashdb.h	/^const uint8_t HDBDEFFPOW = 10;           \/\/\/< default free block pool power$/;"	m	namespace:kyotocabinet::__anon26
HDBDEFMSIZ	src\storage\kdb\kyotocabinet\kchashdb.h	/^const int64_t HDBDEFMSIZ = 64LL << 20;   \/\/\/< default size of the memory-mapped region$/;"	m	namespace:kyotocabinet::__anon26
HDBDFRGCEF	src\storage\kdb\kyotocabinet\kchashdb.h	/^const int32_t HDBDFRGCEF = 2;            \/\/\/< coefficient of auto defragmentation$/;"	m	namespace:kyotocabinet::__anon26
HDBDFRGMAX	src\storage\kdb\kyotocabinet\kchashdb.h	/^const int32_t HDBDFRGMAX = 512;          \/\/\/< maximum unit of auto defragmentation$/;"	m	namespace:kyotocabinet::__anon26
HDBFBMAGIC	src\storage\kdb\kyotocabinet\kchashdb.h	/^const uint8_t HDBFBMAGIC = 0xdd;         \/\/\/< magic data for free block$/;"	m	namespace:kyotocabinet::__anon26
HDBFBPWIDTH	src\storage\kdb\kyotocabinet\kchashdb.h	/^const int32_t HDBFBPWIDTH = 6;           \/\/\/< width of the free block$/;"	m	namespace:kyotocabinet::__anon26
HDBHEADSIZ	src\storage\kdb\kyotocabinet\kchashdb.h	/^const int64_t HDBHEADSIZ = 64;           \/\/\/< size of the header$/;"	m	namespace:kyotocabinet::__anon26
HDBIOBUFSIZ	src\storage\kdb\kyotocabinet\kchashdb.h	/^const size_t HDBIOBUFSIZ = 1024;         \/\/\/< size of the IO buffer$/;"	m	namespace:kyotocabinet::__anon26
HDBMAGICDATA	src\storage\kdb\kyotocabinet\kchashdb.h	/^const char HDBMAGICDATA[] = "KC\\n";      \/\/\/< magic data of the file$/;"	m	namespace:kyotocabinet::__anon26
HDBMAXAPOW	src\storage\kdb\kyotocabinet\kchashdb.h	/^const uint8_t HDBMAXAPOW = 15;           \/\/\/< maximum alignment power$/;"	m	namespace:kyotocabinet::__anon26
HDBMAXFPOW	src\storage\kdb\kyotocabinet\kchashdb.h	/^const uint8_t HDBMAXFPOW = 20;           \/\/\/< maximum free block pool power$/;"	m	namespace:kyotocabinet::__anon26
HDBMOFFAPOW	src\storage\kdb\kyotocabinet\kchashdb.h	/^const int64_t HDBMOFFAPOW = 9;           \/\/\/< offset of the alignment power$/;"	m	namespace:kyotocabinet::__anon26
HDBMOFFBNUM	src\storage\kdb\kyotocabinet\kchashdb.h	/^const int64_t HDBMOFFBNUM = 16;          \/\/\/< offset of the bucket number$/;"	m	namespace:kyotocabinet::__anon26
HDBMOFFCHKSUM	src\storage\kdb\kyotocabinet\kchashdb.h	/^const int64_t HDBMOFFCHKSUM = 7;         \/\/\/< offset of the module checksum$/;"	m	namespace:kyotocabinet::__anon26
HDBMOFFCOUNT	src\storage\kdb\kyotocabinet\kchashdb.h	/^const int64_t HDBMOFFCOUNT = 32;         \/\/\/< offset of the record number$/;"	m	namespace:kyotocabinet::__anon26
HDBMOFFFLAGS	src\storage\kdb\kyotocabinet\kchashdb.h	/^const int64_t HDBMOFFFLAGS = 24;         \/\/\/< offset of the status flags$/;"	m	namespace:kyotocabinet::__anon26
HDBMOFFFMTVER	src\storage\kdb\kyotocabinet\kchashdb.h	/^const int64_t HDBMOFFFMTVER = 6;         \/\/\/< offset of the format revision$/;"	m	namespace:kyotocabinet::__anon26
HDBMOFFFPOW	src\storage\kdb\kyotocabinet\kchashdb.h	/^const int64_t HDBMOFFFPOW = 10;          \/\/\/< offset of the free block pool power$/;"	m	namespace:kyotocabinet::__anon26
HDBMOFFLIBREV	src\storage\kdb\kyotocabinet\kchashdb.h	/^const int64_t HDBMOFFLIBREV = 5;         \/\/\/< offset of the library revision$/;"	m	namespace:kyotocabinet::__anon26
HDBMOFFLIBVER	src\storage\kdb\kyotocabinet\kchashdb.h	/^const int64_t HDBMOFFLIBVER = 4;         \/\/\/< offset of the library version$/;"	m	namespace:kyotocabinet::__anon26
HDBMOFFOPAQUE	src\storage\kdb\kyotocabinet\kchashdb.h	/^const int64_t HDBMOFFOPAQUE = 48;        \/\/\/< offset of the opaque data$/;"	m	namespace:kyotocabinet::__anon26
HDBMOFFOPTS	src\storage\kdb\kyotocabinet\kchashdb.h	/^const int64_t HDBMOFFOPTS = 11;          \/\/\/< offset of the options$/;"	m	namespace:kyotocabinet::__anon26
HDBMOFFSIZE	src\storage\kdb\kyotocabinet\kchashdb.h	/^const int64_t HDBMOFFSIZE = 40;          \/\/\/< offset of the file size$/;"	m	namespace:kyotocabinet::__anon26
HDBMOFFTYPE	src\storage\kdb\kyotocabinet\kchashdb.h	/^const int64_t HDBMOFFTYPE = 8;           \/\/\/< offset of the database type$/;"	m	namespace:kyotocabinet::__anon26
HDBPADMAGIC	src\storage\kdb\kyotocabinet\kchashdb.h	/^const uint8_t HDBPADMAGIC = 0xee;        \/\/\/< magic data for padding$/;"	m	namespace:kyotocabinet::__anon26
HDBRECBUFSIZ	src\storage\kdb\kyotocabinet\kchashdb.h	/^const size_t HDBRECBUFSIZ = 48;          \/\/\/< size of the record buffer$/;"	m	namespace:kyotocabinet::__anon26
HDBRECMAGIC	src\storage\kdb\kyotocabinet\kchashdb.h	/^const uint8_t HDBRECMAGIC = 0xcc;        \/\/\/< magic data for record$/;"	m	namespace:kyotocabinet::__anon26
HDBRLOCKSLOT	src\storage\kdb\kyotocabinet\kchashdb.h	/^const int32_t HDBRLOCKSLOT = 64;         \/\/\/< number of slots of the record lock$/;"	m	namespace:kyotocabinet::__anon26
HDBSLVGWIDTH	src\storage\kdb\kyotocabinet\kchashdb.h	/^const int64_t HDBSLVGWIDTH = 1LL << 20;  \/\/\/< checking width for record salvage$/;"	m	namespace:kyotocabinet::__anon26
HDBTMPPATHEXT	src\storage\kdb\kyotocabinet\kchashdb.h	/^const char* HDBTMPPATHEXT = "tmpkch";    \/\/\/< extension of the temporary file$/;"	m	namespace:kyotocabinet::__anon26
HDBWIDTHLARGE	src\storage\kdb\kyotocabinet\kchashdb.h	/^const int32_t HDBWIDTHLARGE = 6;         \/\/\/< large width of the record address$/;"	m	namespace:kyotocabinet::__anon26
HDBWIDTHSMALL	src\storage\kdb\kyotocabinet\kchashdb.h	/^const int32_t HDBWIDTHSMALL = 4;         \/\/\/< small width of the record address$/;"	m	namespace:kyotocabinet::__anon26
HashDB	src\storage\kdb\kyotocabinet\kchashdb.h	/^  explicit HashDB() :$/;"	f	class:kyotocabinet::HashDB
HashDB	src\storage\kdb\kyotocabinet\kchashdb.h	/^class HashDB : public BasicDB {$/;"	c	namespace:kyotocabinet
Option	src\storage\kdb\kyotocabinet\kchashdb.h	/^  enum Option {$/;"	g	class:kyotocabinet::HashDB
Record	src\storage\kdb\kyotocabinet\kchashdb.h	/^  struct Record {$/;"	s	class:kyotocabinet::HashDB
Repeater	src\storage\kdb\kyotocabinet\kchashdb.h	/^    explicit Repeater(const char* vbuf, size_t vsiz) : vbuf_(vbuf), vsiz_(vsiz) {$/;"	f	class:kyotocabinet::HashDB::Repeater
Repeater	src\storage\kdb\kyotocabinet\kchashdb.h	/^  class Repeater : public Visitor {$/;"	c	class:kyotocabinet::HashDB
TCOMPRESS	src\storage\kdb\kyotocabinet\kchashdb.h	/^    TCOMPRESS = 1 << 2                   \/\/\/< compress each record$/;"	e	enum:kyotocabinet::HashDB::Option
TLINEAR	src\storage\kdb\kyotocabinet\kchashdb.h	/^    TLINEAR = 1 << 1,                    \/\/\/< use linear collision chaining$/;"	e	enum:kyotocabinet::HashDB::Option
TSMALL	src\storage\kdb\kyotocabinet\kchashdb.h	/^    TSMALL = 1 << 0,                     \/\/\/< use 32-bit addressing$/;"	e	enum:kyotocabinet::HashDB::Option
TreeDB	src\storage\kdb\kyotocabinet\kchashdb.h	/^typedef PlantDB<HashDB, BasicDB::TYPETREE> TreeDB;$/;"	t	namespace:kyotocabinet
_KCHASHDB_H	src\storage\kdb\kyotocabinet\kchashdb.h	17;"	d
abort_auto_transaction	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool abort_auto_transaction() {$/;"	f	class:kyotocabinet::HashDB
abort_transaction	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool abort_transaction() {$/;"	f	class:kyotocabinet::HashDB
accept	src\storage\kdb\kyotocabinet\kchashdb.h	/^    bool accept(Visitor* visitor, bool writable = true, bool step = false) {$/;"	f	class:kyotocabinet::HashDB::Cursor
accept	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool accept(const char* kbuf, size_t ksiz, Visitor* visitor, bool writable = true) {$/;"	f	class:kyotocabinet::HashDB
accept_impl	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool accept_impl(const char* kbuf, size_t ksiz, Visitor* visitor,$/;"	f	class:kyotocabinet::HashDB
adjust_record	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool adjust_record(Record* rec) {$/;"	f	class:kyotocabinet::HashDB
align_	src\storage\kdb\kyotocabinet\kchashdb.h	/^  size_t align_;$/;"	m	class:kyotocabinet::HashDB
apow	src\storage\kdb\kyotocabinet\kchashdb.h	/^  uint8_t apow() {$/;"	f	class:kyotocabinet::HashDB
apow_	src\storage\kdb\kyotocabinet\kchashdb.h	/^  uint8_t apow_;$/;"	m	class:kyotocabinet::HashDB
atlock_	src\storage\kdb\kyotocabinet\kchashdb.h	/^  Mutex atlock_;$/;"	m	class:kyotocabinet::HashDB
autosync_	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool autosync_;$/;"	m	class:kyotocabinet::HashDB
autotran_	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool autotran_;$/;"	m	class:kyotocabinet::HashDB
bbuf	src\storage\kdb\kyotocabinet\kchashdb.h	/^    char* bbuf;                          \/\/\/< buffer of the body$/;"	m	struct:kyotocabinet::HashDB::Record
begin_auto_transaction	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool begin_auto_transaction() {$/;"	f	class:kyotocabinet::HashDB
begin_transaction	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool begin_transaction(bool hard = false) {$/;"	f	class:kyotocabinet::HashDB
begin_transaction_impl	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool begin_transaction_impl() {$/;"	f	class:kyotocabinet::HashDB
begin_transaction_try	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool begin_transaction_try(bool hard = false) {$/;"	f	class:kyotocabinet::HashDB
bnum	src\storage\kdb\kyotocabinet\kchashdb.h	/^  int64_t bnum() {$/;"	f	class:kyotocabinet::HashDB
bnum_	src\storage\kdb\kyotocabinet\kchashdb.h	/^  int64_t bnum_;$/;"	m	class:kyotocabinet::HashDB
boff	src\storage\kdb\kyotocabinet\kchashdb.h	/^    int64_t boff;                        \/\/\/< offset of the body$/;"	m	struct:kyotocabinet::HashDB::Record
boff_	src\storage\kdb\kyotocabinet\kchashdb.h	/^  int64_t boff_;$/;"	m	class:kyotocabinet::HashDB
calc_checksum	src\storage\kdb\kyotocabinet\kchashdb.h	/^  uint8_t calc_checksum() {$/;"	f	class:kyotocabinet::HashDB
calc_meta	src\storage\kdb\kyotocabinet\kchashdb.h	/^  void calc_meta() {$/;"	f	class:kyotocabinet::HashDB
calc_record_padding	src\storage\kdb\kyotocabinet\kchashdb.h	/^  size_t calc_record_padding(size_t rsiz) {$/;"	f	class:kyotocabinet::HashDB
calc_record_size	src\storage\kdb\kyotocabinet\kchashdb.h	/^  size_t calc_record_size(size_t ksiz, size_t vsiz) {$/;"	f	class:kyotocabinet::HashDB
chksum	src\storage\kdb\kyotocabinet\kchashdb.h	/^  uint8_t chksum() {$/;"	f	class:kyotocabinet::HashDB
chksum_	src\storage\kdb\kyotocabinet\kchashdb.h	/^  uint8_t chksum_;$/;"	m	class:kyotocabinet::HashDB
clear	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool clear() {$/;"	f	class:kyotocabinet::HashDB
close	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool close() {$/;"	f	class:kyotocabinet::HashDB
commit_auto_transaction	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool commit_auto_transaction() {$/;"	f	class:kyotocabinet::HashDB
commit_transaction	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool commit_transaction() {$/;"	f	class:kyotocabinet::HashDB
comp	src\storage\kdb\kyotocabinet\kchashdb.h	/^  Compressor* comp() {$/;"	f	class:kyotocabinet::HashDB
comp_	src\storage\kdb\kyotocabinet\kchashdb.h	/^  Compressor* comp_;$/;"	m	class:kyotocabinet::HashDB
compare_keys	src\storage\kdb\kyotocabinet\kchashdb.h	/^  int32_t compare_keys(const char* abuf, size_t asiz, const char* bbuf, size_t bsiz) {$/;"	f	class:kyotocabinet::HashDB
copy_records	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool copy_records(HashDB* dest) {$/;"	f	class:kyotocabinet::HashDB
count	src\storage\kdb\kyotocabinet\kchashdb.h	/^  int64_t count() {$/;"	f	class:kyotocabinet::HashDB
count_	src\storage\kdb\kyotocabinet\kchashdb.h	/^  AtomicInt64 count_;$/;"	m	class:kyotocabinet::HashDB
curs_	src\storage\kdb\kyotocabinet\kchashdb.h	/^  CursorList curs_;$/;"	m	class:kyotocabinet::HashDB
cursor	src\storage\kdb\kyotocabinet\kchashdb.h	/^  Cursor* cursor() {$/;"	f	class:kyotocabinet::HashDB
cut_chain	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool cut_chain(Record* rec, char* rbuf, int64_t bidx, int64_t entoff) {$/;"	f	class:kyotocabinet::HashDB
db	src\storage\kdb\kyotocabinet\kchashdb.h	/^    HashDB* db() {$/;"	f	class:kyotocabinet::HashDB::Cursor
db_	src\storage\kdb\kyotocabinet\kchashdb.h	/^    HashDB* db_;$/;"	m	class:kyotocabinet::HashDB::Cursor
defrag	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool defrag(int64_t step = 0) {$/;"	f	class:kyotocabinet::HashDB
defrag_impl	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool defrag_impl(int64_t step) {$/;"	f	class:kyotocabinet::HashDB
dfcur_	src\storage\kdb\kyotocabinet\kchashdb.h	/^  int64_t dfcur_;$/;"	m	class:kyotocabinet::HashDB
dfunit	src\storage\kdb\kyotocabinet\kchashdb.h	/^  int64_t dfunit() {$/;"	f	class:kyotocabinet::HashDB
dfunit_	src\storage\kdb\kyotocabinet\kchashdb.h	/^  int64_t dfunit_;$/;"	m	class:kyotocabinet::HashDB
disable_cursors	src\storage\kdb\kyotocabinet\kchashdb.h	/^  void disable_cursors() {$/;"	f	class:kyotocabinet::HashDB
dump_auto_meta	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool dump_auto_meta() {$/;"	f	class:kyotocabinet::HashDB
dump_empty_free_blocks	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool dump_empty_free_blocks() {$/;"	f	class:kyotocabinet::HashDB
dump_free_blocks	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool dump_free_blocks() {$/;"	f	class:kyotocabinet::HashDB
dump_meta	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool dump_meta() {$/;"	f	class:kyotocabinet::HashDB
dump_opaque	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool dump_opaque() {$/;"	f	class:kyotocabinet::HashDB
embcomp_	src\storage\kdb\kyotocabinet\kchashdb.h	/^  Compressor* embcomp_;$/;"	m	class:kyotocabinet::HashDB
end_	src\storage\kdb\kyotocabinet\kchashdb.h	/^    int64_t end_;$/;"	m	class:kyotocabinet::HashDB::Cursor
end_transaction	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool end_transaction(bool commit = true) {$/;"	f	class:kyotocabinet::HashDB
error	src\storage\kdb\kyotocabinet\kchashdb.h	/^  Error error() const {$/;"	f	class:kyotocabinet::HashDB
error_	src\storage\kdb\kyotocabinet\kchashdb.h	/^  TSD<Error> error_;$/;"	m	class:kyotocabinet::HashDB
escape_cursors	src\storage\kdb\kyotocabinet\kchashdb.h	/^  void escape_cursors(int64_t off, int64_t dest) {$/;"	f	class:kyotocabinet::HashDB
fbp_	src\storage\kdb\kyotocabinet\kchashdb.h	/^  FBP fbp_;$/;"	m	class:kyotocabinet::HashDB
fbpnum_	src\storage\kdb\kyotocabinet\kchashdb.h	/^  int32_t fbpnum_;$/;"	m	class:kyotocabinet::HashDB
fetch_free_block	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool fetch_free_block(size_t rsiz, FreeBlock* res) {$/;"	f	class:kyotocabinet::HashDB
file_	src\storage\kdb\kyotocabinet\kchashdb.h	/^  File file_;$/;"	m	class:kyotocabinet::HashDB
flagopen_	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool flagopen_;$/;"	m	class:kyotocabinet::HashDB
flags	src\storage\kdb\kyotocabinet\kchashdb.h	/^  uint8_t flags() {$/;"	f	class:kyotocabinet::HashDB
flags_	src\storage\kdb\kyotocabinet\kchashdb.h	/^  uint8_t flags_;$/;"	m	class:kyotocabinet::HashDB
flock_	src\storage\kdb\kyotocabinet\kchashdb.h	/^  SpinLock flock_;$/;"	m	class:kyotocabinet::HashDB
fmtver	src\storage\kdb\kyotocabinet\kchashdb.h	/^  uint8_t fmtver() {$/;"	f	class:kyotocabinet::HashDB
fmtver_	src\storage\kdb\kyotocabinet\kchashdb.h	/^  uint8_t fmtver_;$/;"	m	class:kyotocabinet::HashDB
fold_hash	src\storage\kdb\kyotocabinet\kchashdb.h	/^  uint32_t fold_hash(uint64_t hash) {$/;"	f	class:kyotocabinet::HashDB
fpow	src\storage\kdb\kyotocabinet\kchashdb.h	/^  uint8_t fpow() {$/;"	f	class:kyotocabinet::HashDB
fpow_	src\storage\kdb\kyotocabinet\kchashdb.h	/^  uint8_t fpow_;$/;"	m	class:kyotocabinet::HashDB
frgcnt_	src\storage\kdb\kyotocabinet\kchashdb.h	/^  AtomicInt64 frgcnt_;$/;"	m	class:kyotocabinet::HashDB
get_bucket	src\storage\kdb\kyotocabinet\kchashdb.h	/^  int64_t get_bucket(int64_t bidx) {$/;"	f	class:kyotocabinet::HashDB
hash_record	src\storage\kdb\kyotocabinet\kchashdb.h	/^  uint64_t hash_record(const char* kbuf, size_t ksiz) {$/;"	f	class:kyotocabinet::HashDB
insert_free_block	src\storage\kdb\kyotocabinet\kchashdb.h	/^  void insert_free_block(int64_t off, size_t rsiz) {$/;"	f	class:kyotocabinet::HashDB
iterate	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool iterate(Visitor *visitor, bool writable = true, ProgressChecker* checker = NULL) {$/;"	f	class:kyotocabinet::HashDB
iterate_impl	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool iterate_impl(Visitor* visitor, ProgressChecker* checker) {$/;"	f	class:kyotocabinet::HashDB
jump	src\storage\kdb\kyotocabinet\kchashdb.h	/^    bool jump() {$/;"	f	class:kyotocabinet::HashDB::Cursor
jump	src\storage\kdb\kyotocabinet\kchashdb.h	/^    bool jump(const char* kbuf, size_t ksiz) {$/;"	f	class:kyotocabinet::HashDB::Cursor
jump	src\storage\kdb\kyotocabinet\kchashdb.h	/^    bool jump(const std::string& key) {$/;"	f	class:kyotocabinet::HashDB::Cursor
jump_back	src\storage\kdb\kyotocabinet\kchashdb.h	/^    bool jump_back() {$/;"	f	class:kyotocabinet::HashDB::Cursor
jump_back	src\storage\kdb\kyotocabinet\kchashdb.h	/^    bool jump_back(const char* kbuf, size_t ksiz) {$/;"	f	class:kyotocabinet::HashDB::Cursor
jump_back	src\storage\kdb\kyotocabinet\kchashdb.h	/^    bool jump_back(const std::string& key) {$/;"	f	class:kyotocabinet::HashDB::Cursor
kbuf	src\storage\kdb\kyotocabinet\kchashdb.h	/^    const char* kbuf;                    \/\/\/< pointer to the key$/;"	m	struct:kyotocabinet::HashDB::Record
ksiz	src\storage\kdb\kyotocabinet\kchashdb.h	/^    size_t ksiz;                         \/\/\/< size of the key$/;"	m	struct:kyotocabinet::HashDB::Record
kyotocabinet	src\storage\kdb\kyotocabinet\kchashdb.h	/^namespace kyotocabinet {                 \/\/ common namespace$/;"	n
left	src\storage\kdb\kyotocabinet\kchashdb.h	/^    int64_t left;                        \/\/\/< address of the left child record$/;"	m	struct:kyotocabinet::HashDB::Record
librev	src\storage\kdb\kyotocabinet\kchashdb.h	/^  uint8_t librev() {$/;"	f	class:kyotocabinet::HashDB
librev_	src\storage\kdb\kyotocabinet\kchashdb.h	/^  uint8_t librev_;$/;"	m	class:kyotocabinet::HashDB
libver	src\storage\kdb\kyotocabinet\kchashdb.h	/^  uint8_t libver() {$/;"	f	class:kyotocabinet::HashDB
libver_	src\storage\kdb\kyotocabinet\kchashdb.h	/^  uint8_t libver_;$/;"	m	class:kyotocabinet::HashDB
linear_	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool linear_;$/;"	m	class:kyotocabinet::HashDB
load_free_blocks	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool load_free_blocks() {$/;"	f	class:kyotocabinet::HashDB
load_meta	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool load_meta() {$/;"	f	class:kyotocabinet::HashDB
logger_	src\storage\kdb\kyotocabinet\kchashdb.h	/^  Logger* logger_;$/;"	m	class:kyotocabinet::HashDB
logkinds_	src\storage\kdb\kyotocabinet\kchashdb.h	/^  uint32_t logkinds_;$/;"	m	class:kyotocabinet::HashDB
lsiz_	src\storage\kdb\kyotocabinet\kchashdb.h	/^  AtomicInt64 lsiz_;$/;"	m	class:kyotocabinet::HashDB
mlock_	src\storage\kdb\kyotocabinet\kchashdb.h	/^  SpinRWLock mlock_;$/;"	m	class:kyotocabinet::HashDB
msiz	src\storage\kdb\kyotocabinet\kchashdb.h	/^  int64_t msiz() {$/;"	f	class:kyotocabinet::HashDB
msiz_	src\storage\kdb\kyotocabinet\kchashdb.h	/^  int64_t msiz_;$/;"	m	class:kyotocabinet::HashDB
mtrigger_	src\storage\kdb\kyotocabinet\kchashdb.h	/^  MetaTrigger* mtrigger_;$/;"	m	class:kyotocabinet::HashDB
off	src\storage\kdb\kyotocabinet\kchashdb.h	/^    int64_t off;                         \/\/\/< offset$/;"	m	struct:kyotocabinet::HashDB::FreeBlock
off	src\storage\kdb\kyotocabinet\kchashdb.h	/^    int64_t off;                         \/\/\/< offset$/;"	m	struct:kyotocabinet::HashDB::Record
off_	src\storage\kdb\kyotocabinet\kchashdb.h	/^    int64_t off_;$/;"	m	class:kyotocabinet::HashDB::Cursor
omode_	src\storage\kdb\kyotocabinet\kchashdb.h	/^  uint32_t omode_;$/;"	m	class:kyotocabinet::HashDB
opaque	src\storage\kdb\kyotocabinet\kchashdb.h	/^  char* opaque() {$/;"	f	class:kyotocabinet::HashDB
opaque_	src\storage\kdb\kyotocabinet\kchashdb.h	/^  char opaque_[HDBHEADSIZ-HDBMOFFOPAQUE];$/;"	m	class:kyotocabinet::HashDB
open	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool open(const std::string& path, uint32_t mode = OWRITER | OCREATE) {$/;"	f	class:kyotocabinet::HashDB
operator ()	src\storage\kdb\kyotocabinet\kchashdb.h	/^    bool operator ()(const FreeBlock& a, const FreeBlock& b) const {$/;"	f	struct:kyotocabinet::HashDB::FreeBlockComparator
operator <	src\storage\kdb\kyotocabinet\kchashdb.h	/^    bool operator <(const FreeBlock& obj) const {$/;"	f	struct:kyotocabinet::HashDB::FreeBlock
opts	src\storage\kdb\kyotocabinet\kchashdb.h	/^  uint8_t opts() {$/;"	f	class:kyotocabinet::HashDB
opts_	src\storage\kdb\kyotocabinet\kchashdb.h	/^  uint8_t opts_;$/;"	m	class:kyotocabinet::HashDB
path	src\storage\kdb\kyotocabinet\kchashdb.h	/^  std::string path() {$/;"	f	class:kyotocabinet::HashDB
path_	src\storage\kdb\kyotocabinet\kchashdb.h	/^  std::string path_;$/;"	m	class:kyotocabinet::HashDB
psiz	src\storage\kdb\kyotocabinet\kchashdb.h	/^    size_t psiz;                         \/\/\/< size of the padding$/;"	m	struct:kyotocabinet::HashDB::Record
psiz_	src\storage\kdb\kyotocabinet\kchashdb.h	/^  AtomicInt64 psiz_;$/;"	m	class:kyotocabinet::HashDB
read_record	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool read_record(Record* rec, char* rbuf) {$/;"	f	class:kyotocabinet::HashDB
read_record_body	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool read_record_body(Record* rec) {$/;"	f	class:kyotocabinet::HashDB
recovered	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool recovered() {$/;"	f	class:kyotocabinet::HashDB
reorg_	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool reorg_;$/;"	m	class:kyotocabinet::HashDB
reorganize_file	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool reorganize_file(const std::string& path) {$/;"	f	class:kyotocabinet::HashDB
reorganized	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool reorganized() {$/;"	f	class:kyotocabinet::HashDB
report	src\storage\kdb\kyotocabinet\kchashdb.h	/^  void report(const char* file, int32_t line, const char* func, Logger::Kind kind,$/;"	f	class:kyotocabinet::HashDB
report_binary	src\storage\kdb\kyotocabinet\kchashdb.h	/^  void report_binary(const char* file, int32_t line, const char* func, Logger::Kind kind,$/;"	f	class:kyotocabinet::HashDB
report_valist	src\storage\kdb\kyotocabinet\kchashdb.h	/^  void report_valist(const char* file, int32_t line, const char* func, Logger::Kind kind,$/;"	f	class:kyotocabinet::HashDB
rhsiz_	src\storage\kdb\kyotocabinet\kchashdb.h	/^  size_t rhsiz_;$/;"	m	class:kyotocabinet::HashDB
right	src\storage\kdb\kyotocabinet\kchashdb.h	/^    int64_t right;                       \/\/\/< address of the right child record$/;"	m	struct:kyotocabinet::HashDB::Record
rlock_	src\storage\kdb\kyotocabinet\kchashdb.h	/^  SlottedSpinRWLock<HDBRLOCKSLOT> rlock_;$/;"	m	class:kyotocabinet::HashDB
roff_	src\storage\kdb\kyotocabinet\kchashdb.h	/^  int64_t roff_;$/;"	m	class:kyotocabinet::HashDB
rsiz	src\storage\kdb\kyotocabinet\kchashdb.h	/^    size_t rsiz;                         \/\/\/< record size$/;"	m	struct:kyotocabinet::HashDB::FreeBlock
rsiz	src\storage\kdb\kyotocabinet\kchashdb.h	/^    size_t rsiz;                         \/\/\/< whole size$/;"	m	struct:kyotocabinet::HashDB::Record
set_bucket	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool set_bucket(int64_t bidx, int64_t off) {$/;"	f	class:kyotocabinet::HashDB
set_chain	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool set_chain(int64_t entoff, int64_t off) {$/;"	f	class:kyotocabinet::HashDB
set_error	src\storage\kdb\kyotocabinet\kchashdb.h	/^  void set_error(const char* file, int32_t line, const char* func,$/;"	f	class:kyotocabinet::HashDB
set_flag	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool set_flag(uint8_t flag, bool sign) {$/;"	f	class:kyotocabinet::HashDB
shift_record	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool shift_record(Record* orec, int64_t dest) {$/;"	f	class:kyotocabinet::HashDB
size	src\storage\kdb\kyotocabinet\kchashdb.h	/^  int64_t size() {$/;"	f	class:kyotocabinet::HashDB
status	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool status(std::map<std::string, std::string>* strmap) {$/;"	f	class:kyotocabinet::HashDB
step	src\storage\kdb\kyotocabinet\kchashdb.h	/^    bool step() {$/;"	f	class:kyotocabinet::HashDB::Cursor
step_back	src\storage\kdb\kyotocabinet\kchashdb.h	/^    bool step_back() {$/;"	f	class:kyotocabinet::HashDB::Cursor
step_impl	src\storage\kdb\kyotocabinet\kchashdb.h	/^    bool step_impl(Record* rec, char* rbuf, int64_t skip) {$/;"	f	class:kyotocabinet::HashDB::Cursor
synchronize	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool synchronize(bool hard = false, FileProcessor* proc = NULL,$/;"	f	class:kyotocabinet::HashDB
synchronize_impl	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool synchronize_impl(bool hard, FileProcessor* proc, ProgressChecker* checker) {$/;"	f	class:kyotocabinet::HashDB
synchronize_meta	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool synchronize_meta() {$/;"	f	class:kyotocabinet::HashDB
synchronize_opaque	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool synchronize_opaque() {$/;"	f	class:kyotocabinet::HashDB
tran_	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool tran_;$/;"	m	class:kyotocabinet::HashDB
trcount_	src\storage\kdb\kyotocabinet\kchashdb.h	/^  int64_t trcount_;$/;"	m	class:kyotocabinet::HashDB
trfbp_	src\storage\kdb\kyotocabinet\kchashdb.h	/^  FBP trfbp_;$/;"	m	class:kyotocabinet::HashDB
trhard_	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool trhard_;$/;"	m	class:kyotocabinet::HashDB
trigger_meta	src\storage\kdb\kyotocabinet\kchashdb.h	/^  void trigger_meta(MetaTrigger::Kind kind, const char* message) {$/;"	f	class:kyotocabinet::HashDB
trim_	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool trim_;$/;"	m	class:kyotocabinet::HashDB
trim_cursors	src\storage\kdb\kyotocabinet\kchashdb.h	/^  void trim_cursors() {$/;"	f	class:kyotocabinet::HashDB
trim_file	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool trim_file(const std::string& path) {$/;"	f	class:kyotocabinet::HashDB
trim_free_blocks	src\storage\kdb\kyotocabinet\kchashdb.h	/^  void trim_free_blocks(int64_t begin, int64_t end) {$/;"	f	class:kyotocabinet::HashDB
trsize_	src\storage\kdb\kyotocabinet\kchashdb.h	/^  int64_t trsize_;$/;"	m	class:kyotocabinet::HashDB
tune_alignment	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool tune_alignment(int8_t apow) {$/;"	f	class:kyotocabinet::HashDB
tune_buckets	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool tune_buckets(int64_t bnum) {$/;"	f	class:kyotocabinet::HashDB
tune_compressor	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool tune_compressor(Compressor* comp) {$/;"	f	class:kyotocabinet::HashDB
tune_defrag	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool tune_defrag(int64_t dfunit) {$/;"	f	class:kyotocabinet::HashDB
tune_fbp	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool tune_fbp(int8_t fpow) {$/;"	f	class:kyotocabinet::HashDB
tune_logger	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool tune_logger(Logger* logger, uint32_t kinds = Logger::WARN | Logger::ERROR) {$/;"	f	class:kyotocabinet::HashDB
tune_map	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool tune_map(int64_t msiz) {$/;"	f	class:kyotocabinet::HashDB
tune_meta_trigger	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool tune_meta_trigger(MetaTrigger* trigger) {$/;"	f	class:kyotocabinet::HashDB
tune_options	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool tune_options(int8_t opts) {$/;"	f	class:kyotocabinet::HashDB
tune_type	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool tune_type(int8_t type) {$/;"	f	class:kyotocabinet::HashDB
type	src\storage\kdb\kyotocabinet\kchashdb.h	/^  uint8_t type() {$/;"	f	class:kyotocabinet::HashDB
type_	src\storage\kdb\kyotocabinet\kchashdb.h	/^  uint8_t type_;$/;"	m	class:kyotocabinet::HashDB
vbuf	src\storage\kdb\kyotocabinet\kchashdb.h	/^    const char* vbuf;                    \/\/\/< pointer to the value$/;"	m	struct:kyotocabinet::HashDB::Record
vbuf_	src\storage\kdb\kyotocabinet\kchashdb.h	/^    const char* vbuf_;$/;"	m	class:kyotocabinet::HashDB::Repeater
visit_full	src\storage\kdb\kyotocabinet\kchashdb.h	/^    const char* visit_full(const char* kbuf, size_t ksiz,$/;"	f	class:kyotocabinet::HashDB::Repeater
vsiz	src\storage\kdb\kyotocabinet\kchashdb.h	/^    size_t vsiz;                         \/\/\/< size of the value$/;"	m	struct:kyotocabinet::HashDB::Record
vsiz_	src\storage\kdb\kyotocabinet\kchashdb.h	/^    size_t vsiz_;$/;"	m	class:kyotocabinet::HashDB::Repeater
width_	src\storage\kdb\kyotocabinet\kchashdb.h	/^  int32_t width_;$/;"	m	class:kyotocabinet::HashDB
write_free_block	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool write_free_block(int64_t off, size_t rsiz, char* rbuf) {$/;"	f	class:kyotocabinet::HashDB
write_record	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool write_record(Record* rec, bool over) {$/;"	f	class:kyotocabinet::HashDB
writer_	src\storage\kdb\kyotocabinet\kchashdb.h	/^  bool writer_;$/;"	m	class:kyotocabinet::HashDB
~Cursor	src\storage\kdb\kyotocabinet\kchashdb.h	/^    virtual ~Cursor() {$/;"	f	class:kyotocabinet::HashDB::Cursor
~HashDB	src\storage\kdb\kyotocabinet\kchashdb.h	/^  virtual ~HashDB() {$/;"	f	class:kyotocabinet::HashDB
kyotocabinet	src\storage\kdb\kyotocabinet\kcmap.cc	/^namespace kyotocabinet {                 \/\/ common namespace$/;"	n	file:
Iterator	src\storage\kdb\kyotocabinet\kcmap.h	/^    Iterator(const Iterator& src) : map_(src.map_), rec_(src.rec_) {$/;"	f	class:kyotocabinet::LinkedHashMap::Iterator
Iterator	src\storage\kdb\kyotocabinet\kcmap.h	/^    explicit Iterator(LinkedHashMap* map, Record* rec) : map_(map), rec_(rec) {$/;"	f	class:kyotocabinet::LinkedHashMap::Iterator
Iterator	src\storage\kdb\kyotocabinet\kcmap.h	/^    explicit Iterator(TinyHashMap* map) : map_(map), bidx_(-1), ridx_(0), recs_() {$/;"	f	class:kyotocabinet::TinyHashMap::Iterator
Iterator	src\storage\kdb\kyotocabinet\kcmap.h	/^  class Iterator {$/;"	c	class:kyotocabinet::LinkedHashMap
Iterator	src\storage\kdb\kyotocabinet\kcmap.h	/^  class Iterator {$/;"	c	class:kyotocabinet::TinyHashMap
LinkedHashMap	src\storage\kdb\kyotocabinet\kcmap.h	/^  explicit LinkedHashMap() :$/;"	f	class:kyotocabinet::LinkedHashMap
LinkedHashMap	src\storage\kdb\kyotocabinet\kcmap.h	/^  explicit LinkedHashMap(size_t bnum) :$/;"	f	class:kyotocabinet::LinkedHashMap
LinkedHashMap	src\storage\kdb\kyotocabinet\kcmap.h	/^class LinkedHashMap {$/;"	c	namespace:kyotocabinet
MAPDEFBNUM	src\storage\kdb\kyotocabinet\kcmap.h	/^const size_t MAPDEFBNUM = 31;            \/\/\/< default bucket number of hash table$/;"	m	namespace:kyotocabinet::__anon27
MAPZMAPBNUM	src\storage\kdb\kyotocabinet\kcmap.h	/^const size_t MAPZMAPBNUM = 32768;        \/\/\/< mininum number of buckets to use mmap$/;"	m	namespace:kyotocabinet::__anon27
MCURRENT	src\storage\kdb\kyotocabinet\kcmap.h	/^    MCURRENT,                            \/\/\/< keep the current position$/;"	e	enum:kyotocabinet::LinkedHashMap::MoveMode
MFIRST	src\storage\kdb\kyotocabinet\kcmap.h	/^    MFIRST,                              \/\/\/< move to the first$/;"	e	enum:kyotocabinet::LinkedHashMap::MoveMode
MLAST	src\storage\kdb\kyotocabinet\kcmap.h	/^    MLAST                                \/\/\/< move to the last$/;"	e	enum:kyotocabinet::LinkedHashMap::MoveMode
MoveMode	src\storage\kdb\kyotocabinet\kcmap.h	/^  enum MoveMode {$/;"	g	class:kyotocabinet::LinkedHashMap
Record	src\storage\kdb\kyotocabinet\kcmap.h	/^    Record(char* child, const char* kbuf, uint64_t ksiz,$/;"	f	struct:kyotocabinet::TinyHashMap::Record
Record	src\storage\kdb\kyotocabinet\kcmap.h	/^    Record(const char* rbuf) :$/;"	f	struct:kyotocabinet::TinyHashMap::Record
Record	src\storage\kdb\kyotocabinet\kcmap.h	/^    explicit Record(const KEY& k, const VALUE& v) :$/;"	f	struct:kyotocabinet::LinkedHashMap::Record
Record	src\storage\kdb\kyotocabinet\kcmap.h	/^  struct Record {$/;"	s	class:kyotocabinet::LinkedHashMap
Record	src\storage\kdb\kyotocabinet\kcmap.h	/^  struct Record {$/;"	s	class:kyotocabinet::TinyHashMap
RecordComparator	src\storage\kdb\kyotocabinet\kcmap.h	/^  struct RecordComparator {$/;"	s	class:kyotocabinet::TinyHashMap
Sorter	src\storage\kdb\kyotocabinet\kcmap.h	/^    explicit Sorter(TinyHashMap* map) : map_(map), ridx_(0), recs_() {$/;"	f	class:kyotocabinet::TinyHashMap::Sorter
Sorter	src\storage\kdb\kyotocabinet\kcmap.h	/^  class Sorter {$/;"	c	class:kyotocabinet::TinyHashMap
TinyHashMap	src\storage\kdb\kyotocabinet\kcmap.h	/^  explicit TinyHashMap() : buckets_(NULL), bnum_(MAPDEFBNUM), count_(0) {$/;"	f	class:kyotocabinet::TinyHashMap
TinyHashMap	src\storage\kdb\kyotocabinet\kcmap.h	/^  explicit TinyHashMap(size_t bnum) : buckets_(NULL), bnum_(bnum), count_(0) {$/;"	f	class:kyotocabinet::TinyHashMap
TinyHashMap	src\storage\kdb\kyotocabinet\kcmap.h	/^class TinyHashMap {$/;"	c	namespace:kyotocabinet
_KCMAP_H	src\storage\kdb\kyotocabinet\kcmap.h	17;"	d
add	src\storage\kdb\kyotocabinet\kcmap.h	/^  bool add(const char* kbuf, size_t ksiz, const char* vbuf, size_t vsiz) {$/;"	f	class:kyotocabinet::TinyHashMap
append	src\storage\kdb\kyotocabinet\kcmap.h	/^    void append(char* rbuf, int32_t oh, const char* vbuf, size_t vsiz, size_t psiz) {$/;"	f	struct:kyotocabinet::TinyHashMap::Record
append	src\storage\kdb\kyotocabinet\kcmap.h	/^  void append(const char* kbuf, size_t ksiz, const char* vbuf, size_t vsiz) {$/;"	f	class:kyotocabinet::TinyHashMap
begin	src\storage\kdb\kyotocabinet\kcmap.h	/^  Iterator begin() {$/;"	f	class:kyotocabinet::LinkedHashMap
bidx_	src\storage\kdb\kyotocabinet\kcmap.h	/^    int64_t bidx_;$/;"	m	class:kyotocabinet::TinyHashMap::Iterator
bnum_	src\storage\kdb\kyotocabinet\kcmap.h	/^  size_t bnum_;$/;"	m	class:kyotocabinet::LinkedHashMap
bnum_	src\storage\kdb\kyotocabinet\kcmap.h	/^  size_t bnum_;$/;"	m	class:kyotocabinet::TinyHashMap
buckets_	src\storage\kdb\kyotocabinet\kcmap.h	/^  Record** buckets_;$/;"	m	class:kyotocabinet::LinkedHashMap
buckets_	src\storage\kdb\kyotocabinet\kcmap.h	/^  char** buckets_;$/;"	m	class:kyotocabinet::TinyHashMap
child	src\storage\kdb\kyotocabinet\kcmap.h	/^    Record* child;                       \/\/\/< child record$/;"	m	struct:kyotocabinet::LinkedHashMap::Record
child_	src\storage\kdb\kyotocabinet\kcmap.h	/^    char* child_;                        \/\/\/< region of the child$/;"	m	struct:kyotocabinet::TinyHashMap::Record
clear	src\storage\kdb\kyotocabinet\kcmap.h	/^  void clear() {$/;"	f	class:kyotocabinet::LinkedHashMap
clear	src\storage\kdb\kyotocabinet\kcmap.h	/^  void clear() {$/;"	f	class:kyotocabinet::TinyHashMap
concatenate	src\storage\kdb\kyotocabinet\kcmap.h	/^    void concatenate(char* rbuf, const char* ovbuf, size_t ovsiz,$/;"	f	struct:kyotocabinet::TinyHashMap::Record
count	src\storage\kdb\kyotocabinet\kcmap.h	/^  size_t count() {$/;"	f	class:kyotocabinet::LinkedHashMap
count	src\storage\kdb\kyotocabinet\kcmap.h	/^  size_t count() {$/;"	f	class:kyotocabinet::TinyHashMap
count_	src\storage\kdb\kyotocabinet\kcmap.h	/^  size_t count_;$/;"	m	class:kyotocabinet::LinkedHashMap
count_	src\storage\kdb\kyotocabinet\kcmap.h	/^  size_t count_;$/;"	m	class:kyotocabinet::TinyHashMap
deserialize	src\storage\kdb\kyotocabinet\kcmap.h	/^    void deserialize(const char* rbuf) {$/;"	f	struct:kyotocabinet::TinyHashMap::Record
destroy	src\storage\kdb\kyotocabinet\kcmap.h	/^  void destroy() {$/;"	f	class:kyotocabinet::LinkedHashMap
destroy	src\storage\kdb\kyotocabinet\kcmap.h	/^  void destroy() {$/;"	f	class:kyotocabinet::TinyHashMap
end	src\storage\kdb\kyotocabinet\kcmap.h	/^  Iterator end() {$/;"	f	class:kyotocabinet::LinkedHashMap
equalto_	src\storage\kdb\kyotocabinet\kcmap.h	/^  EQUALTO equalto_;$/;"	m	class:kyotocabinet::LinkedHashMap
find	src\storage\kdb\kyotocabinet\kcmap.h	/^  Iterator find(const KEY& key) {$/;"	f	class:kyotocabinet::LinkedHashMap
first_	src\storage\kdb\kyotocabinet\kcmap.h	/^  Record* first_;$/;"	m	class:kyotocabinet::LinkedHashMap
first_key	src\storage\kdb\kyotocabinet\kcmap.h	/^  const KEY& first_key() {$/;"	f	class:kyotocabinet::LinkedHashMap
first_value	src\storage\kdb\kyotocabinet\kcmap.h	/^  VALUE& first_value() {$/;"	f	class:kyotocabinet::LinkedHashMap
free_records	src\storage\kdb\kyotocabinet\kcmap.h	/^    void free_records() {$/;"	f	class:kyotocabinet::TinyHashMap::Iterator
get	src\storage\kdb\kyotocabinet\kcmap.h	/^    const char* get(size_t* ksp, const char** vbp, size_t* vsp) {$/;"	f	class:kyotocabinet::TinyHashMap::Iterator
get	src\storage\kdb\kyotocabinet\kcmap.h	/^    const char* get(size_t* ksp, const char** vbp, size_t* vsp) {$/;"	f	class:kyotocabinet::TinyHashMap::Sorter
get	src\storage\kdb\kyotocabinet\kcmap.h	/^  VALUE* get(const KEY& key, MoveMode mode) {$/;"	f	class:kyotocabinet::LinkedHashMap
get	src\storage\kdb\kyotocabinet\kcmap.h	/^  const char* get(const char* kbuf, size_t ksiz, size_t* sp) {$/;"	f	class:kyotocabinet::TinyHashMap
get_key	src\storage\kdb\kyotocabinet\kcmap.h	/^    const char* get_key(size_t* sp) {$/;"	f	class:kyotocabinet::TinyHashMap::Iterator
get_key	src\storage\kdb\kyotocabinet\kcmap.h	/^    const char* get_key(size_t* sp) {$/;"	f	class:kyotocabinet::TinyHashMap::Sorter
get_value	src\storage\kdb\kyotocabinet\kcmap.h	/^    const char* get_value(size_t* sp) {$/;"	f	class:kyotocabinet::TinyHashMap::Iterator
get_value	src\storage\kdb\kyotocabinet\kcmap.h	/^    const char* get_value(size_t* sp) {$/;"	f	class:kyotocabinet::TinyHashMap::Sorter
hash_	src\storage\kdb\kyotocabinet\kcmap.h	/^  HASH hash_;$/;"	m	class:kyotocabinet::LinkedHashMap
hash_record	src\storage\kdb\kyotocabinet\kcmap.h	/^  size_t hash_record(const char* kbuf, size_t ksiz) {$/;"	f	class:kyotocabinet::TinyHashMap
initialize	src\storage\kdb\kyotocabinet\kcmap.h	/^  void initialize() {$/;"	f	class:kyotocabinet::LinkedHashMap
initialize	src\storage\kdb\kyotocabinet\kcmap.h	/^  void initialize() {$/;"	f	class:kyotocabinet::TinyHashMap
kbuf_	src\storage\kdb\kyotocabinet\kcmap.h	/^    const char* kbuf_;                   \/\/\/< region of the key$/;"	m	struct:kyotocabinet::TinyHashMap::Record
key	src\storage\kdb\kyotocabinet\kcmap.h	/^    KEY key;                             \/\/\/< key$/;"	m	struct:kyotocabinet::LinkedHashMap::Record
key	src\storage\kdb\kyotocabinet\kcmap.h	/^    const KEY& key() {$/;"	f	class:kyotocabinet::LinkedHashMap::Iterator
ksiz_	src\storage\kdb\kyotocabinet\kcmap.h	/^    uint64_t ksiz_;                      \/\/\/< size of the key$/;"	m	struct:kyotocabinet::TinyHashMap::Record
kyotocabinet	src\storage\kdb\kyotocabinet\kcmap.h	/^namespace kyotocabinet {                 \/\/ common namespace$/;"	n
last_	src\storage\kdb\kyotocabinet\kcmap.h	/^  Record* last_;$/;"	m	class:kyotocabinet::LinkedHashMap
last_key	src\storage\kdb\kyotocabinet\kcmap.h	/^  const KEY& last_key() {$/;"	f	class:kyotocabinet::LinkedHashMap
last_value	src\storage\kdb\kyotocabinet\kcmap.h	/^  VALUE& last_value() {$/;"	f	class:kyotocabinet::LinkedHashMap
map_	src\storage\kdb\kyotocabinet\kcmap.h	/^    LinkedHashMap* map_;$/;"	m	class:kyotocabinet::LinkedHashMap::Iterator
map_	src\storage\kdb\kyotocabinet\kcmap.h	/^    TinyHashMap* map_;$/;"	m	class:kyotocabinet::TinyHashMap::Iterator
map_	src\storage\kdb\kyotocabinet\kcmap.h	/^    TinyHashMap* map_;$/;"	m	class:kyotocabinet::TinyHashMap::Sorter
migrate	src\storage\kdb\kyotocabinet\kcmap.h	/^  VALUE* migrate(const KEY& key, LinkedHashMap* dist, MoveMode mode) {$/;"	f	class:kyotocabinet::LinkedHashMap
next	src\storage\kdb\kyotocabinet\kcmap.h	/^    Record* next;                        \/\/\/< next record$/;"	m	struct:kyotocabinet::LinkedHashMap::Record
operator !=	src\storage\kdb\kyotocabinet\kcmap.h	/^    bool operator !=(const Iterator& right) const {$/;"	f	class:kyotocabinet::LinkedHashMap::Iterator
operator ()	src\storage\kdb\kyotocabinet\kcmap.h	/^    bool operator ()(char* const& abuf, char* const& bbuf) {$/;"	f	struct:kyotocabinet::TinyHashMap::RecordComparator
operator ++	src\storage\kdb\kyotocabinet\kcmap.h	/^    Iterator operator ++(int) {$/;"	f	class:kyotocabinet::LinkedHashMap::Iterator
operator ++	src\storage\kdb\kyotocabinet\kcmap.h	/^    Iterator& operator ++() {$/;"	f	class:kyotocabinet::LinkedHashMap::Iterator
operator --	src\storage\kdb\kyotocabinet\kcmap.h	/^    Iterator operator --(int) {$/;"	f	class:kyotocabinet::LinkedHashMap::Iterator
operator --	src\storage\kdb\kyotocabinet\kcmap.h	/^    Iterator& operator --() {$/;"	f	class:kyotocabinet::LinkedHashMap::Iterator
operator =	src\storage\kdb\kyotocabinet\kcmap.h	/^    Iterator& operator =(const Iterator& right) {$/;"	f	class:kyotocabinet::LinkedHashMap::Iterator
operator ==	src\storage\kdb\kyotocabinet\kcmap.h	/^    bool operator ==(const Iterator& right) const {$/;"	f	class:kyotocabinet::LinkedHashMap::Iterator
overwrite	src\storage\kdb\kyotocabinet\kcmap.h	/^    void overwrite(char* rbuf, const char* vbuf, size_t vsiz, size_t psiz) {$/;"	f	struct:kyotocabinet::TinyHashMap::Record
prev	src\storage\kdb\kyotocabinet\kcmap.h	/^    Record* prev;                        \/\/\/< previous record$/;"	m	struct:kyotocabinet::LinkedHashMap::Record
psiz_	src\storage\kdb\kyotocabinet\kcmap.h	/^    uint64_t psiz_;                      \/\/\/< size of the padding$/;"	m	struct:kyotocabinet::TinyHashMap::Record
read_records	src\storage\kdb\kyotocabinet\kcmap.h	/^    void read_records() {$/;"	f	class:kyotocabinet::TinyHashMap::Iterator
rec_	src\storage\kdb\kyotocabinet\kcmap.h	/^    Record* rec_;$/;"	m	class:kyotocabinet::LinkedHashMap::Iterator
recs_	src\storage\kdb\kyotocabinet\kcmap.h	/^    std::vector<char*> recs_;$/;"	m	class:kyotocabinet::TinyHashMap::Iterator
recs_	src\storage\kdb\kyotocabinet\kcmap.h	/^    std::vector<char*> recs_;$/;"	m	class:kyotocabinet::TinyHashMap::Sorter
remove	src\storage\kdb\kyotocabinet\kcmap.h	/^  bool remove(const KEY& key) {$/;"	f	class:kyotocabinet::LinkedHashMap
remove	src\storage\kdb\kyotocabinet\kcmap.h	/^  bool remove(const char* kbuf, size_t ksiz) {$/;"	f	class:kyotocabinet::TinyHashMap
replace	src\storage\kdb\kyotocabinet\kcmap.h	/^  bool replace(const char* kbuf, size_t ksiz, const char* vbuf, size_t vsiz) {$/;"	f	class:kyotocabinet::TinyHashMap
ridx_	src\storage\kdb\kyotocabinet\kcmap.h	/^    size_t ridx_;$/;"	m	class:kyotocabinet::TinyHashMap::Iterator
ridx_	src\storage\kdb\kyotocabinet\kcmap.h	/^    size_t ridx_;$/;"	m	class:kyotocabinet::TinyHashMap::Sorter
serialize	src\storage\kdb\kyotocabinet\kcmap.h	/^    char* serialize() {$/;"	f	struct:kyotocabinet::TinyHashMap::Record
set	src\storage\kdb\kyotocabinet\kcmap.h	/^  VALUE *set(const KEY& key, const VALUE& value, MoveMode mode) {$/;"	f	class:kyotocabinet::LinkedHashMap
set	src\storage\kdb\kyotocabinet\kcmap.h	/^  void set(const char* kbuf, size_t ksiz, const char* vbuf, size_t vsiz) {$/;"	f	class:kyotocabinet::TinyHashMap
step	src\storage\kdb\kyotocabinet\kcmap.h	/^    void step() {$/;"	f	class:kyotocabinet::TinyHashMap::Iterator
step	src\storage\kdb\kyotocabinet\kcmap.h	/^    void step() {$/;"	f	class:kyotocabinet::TinyHashMap::Sorter
value	src\storage\kdb\kyotocabinet\kcmap.h	/^    VALUE value;                         \/\/\/< value$/;"	m	struct:kyotocabinet::LinkedHashMap::Record
value	src\storage\kdb\kyotocabinet\kcmap.h	/^    VALUE& value() {$/;"	f	class:kyotocabinet::LinkedHashMap::Iterator
vbuf_	src\storage\kdb\kyotocabinet\kcmap.h	/^    const char* vbuf_;                   \/\/\/< region of the value$/;"	m	struct:kyotocabinet::TinyHashMap::Record
vsiz_	src\storage\kdb\kyotocabinet\kcmap.h	/^    uint64_t vsiz_;                      \/\/\/< size of the key$/;"	m	struct:kyotocabinet::TinyHashMap::Record
~Iterator	src\storage\kdb\kyotocabinet\kcmap.h	/^    ~Iterator() {$/;"	f	class:kyotocabinet::TinyHashMap::Iterator
~LinkedHashMap	src\storage\kdb\kyotocabinet\kcmap.h	/^  ~LinkedHashMap() {$/;"	f	class:kyotocabinet::LinkedHashMap
~Sorter	src\storage\kdb\kyotocabinet\kcmap.h	/^    ~Sorter() {$/;"	f	class:kyotocabinet::TinyHashMap::Sorter
~TinyHashMap	src\storage\kdb\kyotocabinet\kcmap.h	/^  ~TinyHashMap() {$/;"	f	class:kyotocabinet::TinyHashMap
kyotocabinet	src\storage\kdb\kyotocabinet\kcplantdb.cc	/^namespace kyotocabinet {                 \/\/ common namespace$/;"	n	file:
Cursor	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    explicit Cursor(PlantDB* db) : db_(db), stack_(), kbuf_(NULL), ksiz_(0), lid_(0) {$/;"	f	class:kyotocabinet::PlantDB::Cursor
Cursor	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  class Cursor : public BasicDB::Cursor {$/;"	c	class:kyotocabinet::PlantDB
CursorList	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  typedef std::list<Cursor*> CursorList;$/;"	t	class:kyotocabinet::PlantDB
FFATAL	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    FFATAL = BASEDB::FFATAL              \/\/\/< whether with fatal error$/;"	e	enum:kyotocabinet::PlantDB::Flag
FOPEN	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    FOPEN = BASEDB::FOPEN,               \/\/\/< whether opened$/;"	e	enum:kyotocabinet::PlantDB::Flag
Flag	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  enum Flag {$/;"	g	class:kyotocabinet::PlantDB
InnerCache	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  typedef LinkedHashMap<int64_t, InnerNode*> InnerCache;$/;"	t	class:kyotocabinet::PlantDB
InnerNode	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  struct InnerNode {$/;"	s	class:kyotocabinet::PlantDB
InnerSlot	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  struct InnerSlot {$/;"	s	class:kyotocabinet::PlantDB
LeafCache	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  typedef LinkedHashMap<int64_t, LeafNode*> LeafCache;$/;"	t	class:kyotocabinet::PlantDB
LeafNode	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  struct LeafNode {$/;"	s	class:kyotocabinet::PlantDB
LeafSlot	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  struct LeafSlot {$/;"	s	class:kyotocabinet::PlantDB
Link	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  struct Link {$/;"	s	class:kyotocabinet::PlantDB
LinkArray	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  typedef std::vector<Link*> LinkArray;$/;"	t	class:kyotocabinet::PlantDB
LinkComparator	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    explicit LinkComparator() : comp(NULL) {$/;"	f	struct:kyotocabinet::PlantDB::LinkComparator
LinkComparator	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  struct LinkComparator {$/;"	s	class:kyotocabinet::PlantDB
Option	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  enum Option {$/;"	g	class:kyotocabinet::PlantDB
PDBATRANCNUM	src\storage\kdb\kyotocabinet\kcplantdb.h	/^const int32_t PDBATRANCNUM = 256;        \/\/\/< number of cached nodes for auto transaction$/;"	m	namespace:kyotocabinet::__anon28
PDBAVGWAY	src\storage\kdb\kyotocabinet\kcplantdb.h	/^const size_t PDBAVGWAY = 16;             \/\/\/< average number of ways of each node$/;"	m	namespace:kyotocabinet::__anon28
PDBDEFAPOW	src\storage\kdb\kyotocabinet\kcplantdb.h	/^const uint8_t PDBDEFAPOW = 8;            \/\/\/< default alignment power$/;"	m	namespace:kyotocabinet::__anon28
PDBDEFBNUM	src\storage\kdb\kyotocabinet\kcplantdb.h	/^const int64_t PDBDEFBNUM = 64LL << 10;   \/\/\/< default bucket number$/;"	m	namespace:kyotocabinet::__anon28
PDBDEFFPOW	src\storage\kdb\kyotocabinet\kcplantdb.h	/^const uint8_t PDBDEFFPOW = 10;           \/\/\/< default free block pool power$/;"	m	namespace:kyotocabinet::__anon28
PDBDEFIINUM	src\storage\kdb\kyotocabinet\kcplantdb.h	/^const size_t PDBDEFIINUM = 128;          \/\/\/< default number of items in each inner node$/;"	m	namespace:kyotocabinet::__anon28
PDBDEFLINUM	src\storage\kdb\kyotocabinet\kcplantdb.h	/^const size_t PDBDEFLINUM = 64;           \/\/\/< default number of items in each leaf node$/;"	m	namespace:kyotocabinet::__anon28
PDBDEFPCCAP	src\storage\kdb\kyotocabinet\kcplantdb.h	/^const int64_t PDBDEFPCCAP = 64LL << 20;  \/\/\/< default capacity size of the page cache$/;"	m	namespace:kyotocabinet::__anon28
PDBDEFPSIZ	src\storage\kdb\kyotocabinet\kcplantdb.h	/^const int32_t PDBDEFPSIZ = 8192;         \/\/\/< default page size$/;"	m	namespace:kyotocabinet::__anon28
PDBHEADSIZ	src\storage\kdb\kyotocabinet\kcplantdb.h	/^const int64_t PDBHEADSIZ = 80;           \/\/\/< size of the header$/;"	m	namespace:kyotocabinet::__anon28
PDBINFLRATIO	src\storage\kdb\kyotocabinet\kcplantdb.h	/^const size_t PDBINFLRATIO = 32;          \/\/\/< ratio of flushing inner nodes$/;"	m	namespace:kyotocabinet::__anon28
PDBINIDBASE	src\storage\kdb\kyotocabinet\kcplantdb.h	/^const int64_t PDBINIDBASE = 1LL << 48;   \/\/\/< base ID number for inner nodes$/;"	m	namespace:kyotocabinet::__anon28
PDBINLINKMIN	src\storage\kdb\kyotocabinet\kcplantdb.h	/^const size_t PDBINLINKMIN = 8;           \/\/\/< minimum number of links in each inner node$/;"	m	namespace:kyotocabinet::__anon28
PDBINPREFIX	src\storage\kdb\kyotocabinet\kcplantdb.h	/^const char PDBINPREFIX = 'I';            \/\/\/< prefix of inner nodes$/;"	m	namespace:kyotocabinet::__anon28
PDBLEVELMAX	src\storage\kdb\kyotocabinet\kcplantdb.h	/^const int32_t PDBLEVELMAX = 16;          \/\/\/< maximum level of B+ tree$/;"	m	namespace:kyotocabinet::__anon28
PDBLNPREFIX	src\storage\kdb\kyotocabinet\kcplantdb.h	/^const char PDBLNPREFIX = 'L';            \/\/\/< prefix of leaf nodes$/;"	m	namespace:kyotocabinet::__anon28
PDBMETAKEY	src\storage\kdb\kyotocabinet\kcplantdb.h	/^const char PDBMETAKEY[] = "@";           \/\/\/< key of the record for meta data$/;"	m	namespace:kyotocabinet::__anon28
PDBMOFFNUMS	src\storage\kdb\kyotocabinet\kcplantdb.h	/^const int64_t PDBMOFFNUMS = 8;           \/\/\/< offset of the numbers$/;"	m	namespace:kyotocabinet::__anon28
PDBRECBUFSIZ	src\storage\kdb\kyotocabinet\kcplantdb.h	/^const size_t PDBRECBUFSIZ = 64;          \/\/\/< size of the record buffer$/;"	m	namespace:kyotocabinet::__anon28
PDBSLOTNUM	src\storage\kdb\kyotocabinet\kcplantdb.h	/^const int32_t PDBSLOTNUM = 16;           \/\/\/< number of cache slots$/;"	m	namespace:kyotocabinet::__anon28
PDBTMPPATHEXT	src\storage\kdb\kyotocabinet\kcplantdb.h	/^const char* PDBTMPPATHEXT = "tmpkct";    \/\/\/< extension of the temporary file$/;"	m	namespace:kyotocabinet::__anon28
PDBWARMRATIO	src\storage\kdb\kyotocabinet\kcplantdb.h	/^const size_t PDBWARMRATIO = 4;           \/\/\/< ratio of the warm cache$/;"	m	namespace:kyotocabinet::__anon28
PlantDB	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  explicit PlantDB() :$/;"	f	class:kyotocabinet::PlantDB
PlantDB	src\storage\kdb\kyotocabinet\kcplantdb.h	/^class PlantDB : public BasicDB {$/;"	c	namespace:kyotocabinet
Record	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  struct Record {$/;"	s	class:kyotocabinet::PlantDB
RecordArray	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  typedef std::vector<Record*> RecordArray;$/;"	t	class:kyotocabinet::PlantDB
RecordComparator	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    explicit RecordComparator() : comp(NULL) {}$/;"	f	struct:kyotocabinet::PlantDB::RecordComparator
RecordComparator	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  struct RecordComparator {$/;"	s	class:kyotocabinet::PlantDB
TCOMPRESS	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    TCOMPRESS = BASEDB::TCOMPRESS        \/\/\/< compress each record$/;"	e	enum:kyotocabinet::PlantDB::Option
TLINEAR	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    TLINEAR = BASEDB::TLINEAR,           \/\/\/< use linear collision chaining$/;"	e	enum:kyotocabinet::PlantDB::Option
TSMALL	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    TSMALL = BASEDB::TSMALL,             \/\/\/< use 32-bit addressing$/;"	e	enum:kyotocabinet::PlantDB::Option
_KCPLANTDB_H	src\storage\kdb\kyotocabinet\kcplantdb.h	17;"	d
abort_transaction	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  bool abort_transaction() {$/;"	f	class:kyotocabinet::PlantDB
accept	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    bool accept(Visitor* visitor, bool writable = true, bool step = false) {$/;"	f	class:kyotocabinet::PlantDB::Cursor
accept	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  bool accept(const char* kbuf, size_t ksiz, Visitor* visitor, bool writable = true) {$/;"	f	class:kyotocabinet::PlantDB
accept_atom	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    bool accept_atom(Visitor* visitor, bool step, bool *retryp) {$/;"	f	class:kyotocabinet::PlantDB::Cursor
accept_impl	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  bool accept_impl(LeafNode* node, Record* rec, Visitor* visitor) {$/;"	f	class:kyotocabinet::PlantDB
accept_spec	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    bool accept_spec(Visitor* visitor, bool writable, bool step, bool* hitp) {$/;"	f	class:kyotocabinet::PlantDB::Cursor
add_link_inner_node	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  void add_link_inner_node(InnerNode* node, int64_t child, const char* kbuf, size_t ksiz) {$/;"	f	class:kyotocabinet::PlantDB
adjust_position	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    bool adjust_position() {$/;"	f	class:kyotocabinet::PlantDB::Cursor
apow_	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  uint8_t apow_;$/;"	m	class:kyotocabinet::PlantDB
autosync_	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  bool autosync_;$/;"	m	class:kyotocabinet::PlantDB
autotran_	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  bool autotran_;$/;"	m	class:kyotocabinet::PlantDB
back_position_atom	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    bool back_position_atom() {$/;"	f	class:kyotocabinet::PlantDB::Cursor
back_position_spec	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    bool back_position_spec(bool* hitp) {$/;"	f	class:kyotocabinet::PlantDB::Cursor
begin_transaction	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  bool begin_transaction(bool hard = false) {$/;"	f	class:kyotocabinet::PlantDB
begin_transaction_impl	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  bool begin_transaction_impl(bool hard) {$/;"	f	class:kyotocabinet::PlantDB
begin_transaction_try	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  bool begin_transaction_try(bool hard = false) {$/;"	f	class:kyotocabinet::PlantDB
bnum_	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  int64_t bnum_;$/;"	m	class:kyotocabinet::PlantDB
calc_inner_cache_count	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  int64_t calc_inner_cache_count() {$/;"	f	class:kyotocabinet::PlantDB
calc_inner_cache_size	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  int64_t calc_inner_cache_size() {$/;"	f	class:kyotocabinet::PlantDB
calc_leaf_cache_count	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  int64_t calc_leaf_cache_count() {$/;"	f	class:kyotocabinet::PlantDB
calc_leaf_cache_size	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  int64_t calc_leaf_cache_size() {$/;"	f	class:kyotocabinet::PlantDB
check_leaf_node_range	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  bool check_leaf_node_range(LeafNode* node, Record* rec) {$/;"	f	class:kyotocabinet::PlantDB
child	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    int64_t child;                       \/\/\/< child node$/;"	m	struct:kyotocabinet::PlantDB::Link
clean_inner_cache	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  bool clean_inner_cache() {$/;"	f	class:kyotocabinet::PlantDB
clean_leaf_cache	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  bool clean_leaf_cache() {$/;"	f	class:kyotocabinet::PlantDB
clean_leaf_cache_part	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  bool clean_leaf_cache_part(LeafSlot* slot) {$/;"	f	class:kyotocabinet::PlantDB
clear	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  bool clear() {$/;"	f	class:kyotocabinet::PlantDB
clear_position	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    void clear_position() {$/;"	f	class:kyotocabinet::PlantDB::Cursor
close	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  bool close() {$/;"	f	class:kyotocabinet::PlantDB
commit_transaction	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  bool commit_transaction() {$/;"	f	class:kyotocabinet::PlantDB
comp	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    Comparator* comp;                    \/\/\/< comparator$/;"	m	struct:kyotocabinet::PlantDB::LinkComparator
comp	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    Comparator* comp;                    \/\/\/< comparator$/;"	m	struct:kyotocabinet::PlantDB::RecordComparator
count	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  int64_t count() {$/;"	f	class:kyotocabinet::PlantDB
count_	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  AtomicInt64 count_;$/;"	m	class:kyotocabinet::PlantDB
create_inner_cache	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  void create_inner_cache() {$/;"	f	class:kyotocabinet::PlantDB
create_inner_node	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  InnerNode* create_inner_node(int64_t heir) {$/;"	f	class:kyotocabinet::PlantDB
create_leaf_cache	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  void create_leaf_cache() {$/;"	f	class:kyotocabinet::PlantDB
create_leaf_node	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  LeafNode* create_leaf_node(int64_t prev, int64_t next) {$/;"	f	class:kyotocabinet::PlantDB
curs_	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  CursorList curs_;$/;"	m	class:kyotocabinet::PlantDB
cursor	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  Cursor* cursor() {$/;"	f	class:kyotocabinet::PlantDB
cusage_	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  AtomicInt64 cusage_;$/;"	m	class:kyotocabinet::PlantDB
db	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    PlantDB* db() {$/;"	f	class:kyotocabinet::PlantDB::Cursor
db_	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    PlantDB* db_;$/;"	m	class:kyotocabinet::PlantDB::Cursor
db_	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  BASEDB db_;$/;"	m	class:kyotocabinet::PlantDB
dead	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    bool dead;                           \/\/\/< whether to be removed$/;"	m	struct:kyotocabinet::PlantDB::InnerNode
dead	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    bool dead;                           \/\/\/< whether to be removed$/;"	m	struct:kyotocabinet::PlantDB::LeafNode
defrag	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  bool defrag(int64_t step = 0) {$/;"	f	class:kyotocabinet::PlantDB
delete_inner_cache	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  void delete_inner_cache() {$/;"	f	class:kyotocabinet::PlantDB
delete_leaf_cache	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  void delete_leaf_cache() {$/;"	f	class:kyotocabinet::PlantDB
dirty	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    bool dirty;                          \/\/\/< whether to be written back$/;"	m	struct:kyotocabinet::PlantDB::InnerNode
dirty	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    bool dirty;                          \/\/\/< whether to be written back$/;"	m	struct:kyotocabinet::PlantDB::LeafNode
disable_cursors	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  void disable_cursors() {$/;"	f	class:kyotocabinet::PlantDB
divide_leaf_node	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  LeafNode* divide_leaf_node(LeafNode* node) {$/;"	f	class:kyotocabinet::PlantDB
dump_meta	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  bool dump_meta() {$/;"	f	class:kyotocabinet::PlantDB
end_transaction	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  bool end_transaction(bool commit = true) {$/;"	f	class:kyotocabinet::PlantDB
error	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  Error error() const {$/;"	f	class:kyotocabinet::PlantDB
escape_cursors	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  bool escape_cursors(int64_t src, int64_t dest) {$/;"	f	class:kyotocabinet::PlantDB
escape_cursors	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  void escape_cursors(int64_t src, int64_t dest, Record* rec) {$/;"	f	class:kyotocabinet::PlantDB
first_	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  int64_t first_;$/;"	m	class:kyotocabinet::PlantDB
fix_auto_synchronization	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  bool fix_auto_synchronization() {$/;"	f	class:kyotocabinet::PlantDB
fix_auto_transaction_leaf	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  bool fix_auto_transaction_leaf(LeafNode* node) {$/;"	f	class:kyotocabinet::PlantDB
fix_auto_transaction_tree	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  bool fix_auto_transaction_tree() {$/;"	f	class:kyotocabinet::PlantDB
flags	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  uint8_t flags() {$/;"	f	class:kyotocabinet::PlantDB
flush_inner_cache	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  bool flush_inner_cache(bool save) {$/;"	f	class:kyotocabinet::PlantDB
flush_inner_cache_part	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  bool flush_inner_cache_part(InnerSlot* slot) {$/;"	f	class:kyotocabinet::PlantDB
flush_inner_node	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  bool flush_inner_node(InnerNode* node, bool save) {$/;"	f	class:kyotocabinet::PlantDB
flush_leaf_cache	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  bool flush_leaf_cache(bool save) {$/;"	f	class:kyotocabinet::PlantDB
flush_leaf_cache_part	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  bool flush_leaf_cache_part(LeafSlot* slot) {$/;"	f	class:kyotocabinet::PlantDB
flush_leaf_node	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  bool flush_leaf_node(LeafNode* node, bool save) {$/;"	f	class:kyotocabinet::PlantDB
fpow_	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  uint8_t fpow_;$/;"	m	class:kyotocabinet::PlantDB
heir	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    int64_t heir;                        \/\/\/< child before the first link$/;"	m	struct:kyotocabinet::PlantDB::InnerNode
hot	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    LeafCache* hot;                      \/\/\/< hot cache$/;"	m	struct:kyotocabinet::PlantDB::LeafSlot
hot	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    bool hot;                            \/\/\/< whether in the hot cache$/;"	m	struct:kyotocabinet::PlantDB::LeafNode
icnt_	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  int64_t icnt_;$/;"	m	class:kyotocabinet::PlantDB
id	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    int64_t id;                          \/\/\/< page ID number$/;"	m	struct:kyotocabinet::PlantDB::LeafNode
id	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    int64_t id;                          \/\/\/< page ID numger$/;"	m	struct:kyotocabinet::PlantDB::InnerNode
islots_	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  InnerSlot islots_[PDBSLOTNUM];$/;"	m	class:kyotocabinet::PlantDB
iterate	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  bool iterate(Visitor *visitor, bool writable = true, ProgressChecker* checker = NULL) {$/;"	f	class:kyotocabinet::PlantDB
jump	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    bool jump() {$/;"	f	class:kyotocabinet::PlantDB::Cursor
jump	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    bool jump(const char* kbuf, size_t ksiz) {$/;"	f	class:kyotocabinet::PlantDB::Cursor
jump	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    bool jump(const std::string& key) {$/;"	f	class:kyotocabinet::PlantDB::Cursor
jump_back	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    bool jump_back() {$/;"	f	class:kyotocabinet::PlantDB::Cursor
jump_back	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    bool jump_back(const char* kbuf, size_t ksiz) {$/;"	f	class:kyotocabinet::PlantDB::Cursor
jump_back	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    bool jump_back(const std::string& key) {$/;"	f	class:kyotocabinet::PlantDB::Cursor
kbuf_	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    char* kbuf_;$/;"	m	class:kyotocabinet::PlantDB::Cursor
ksiz	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    int32_t ksiz;                        \/\/\/< size of the key$/;"	m	struct:kyotocabinet::PlantDB::Link
ksiz	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    uint32_t ksiz;                       \/\/\/< size of the key$/;"	m	struct:kyotocabinet::PlantDB::Record
ksiz_	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    size_t ksiz_;$/;"	m	class:kyotocabinet::PlantDB::Cursor
kyotocabinet	src\storage\kdb\kyotocabinet\kcplantdb.h	/^namespace kyotocabinet {                 \/\/ common namespace$/;"	n
last_	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  int64_t last_;$/;"	m	class:kyotocabinet::PlantDB
lcnt_	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  int64_t lcnt_;$/;"	m	class:kyotocabinet::PlantDB
lid_	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    int64_t lid_;$/;"	m	class:kyotocabinet::PlantDB::Cursor
linkcomp_	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  LinkComparator linkcomp_;$/;"	m	class:kyotocabinet::PlantDB
links	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    LinkArray links;                     \/\/\/< sorted array of links$/;"	m	struct:kyotocabinet::PlantDB::InnerNode
load_inner_node	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  InnerNode* load_inner_node(int64_t id) {$/;"	f	class:kyotocabinet::PlantDB
load_leaf_node	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  LeafNode* load_leaf_node(int64_t id, bool prom) {$/;"	f	class:kyotocabinet::PlantDB
load_meta	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  bool load_meta() {$/;"	f	class:kyotocabinet::PlantDB
lock	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    SpinLock lock;                       \/\/\/< lock$/;"	m	struct:kyotocabinet::PlantDB::InnerSlot
lock	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    SpinLock lock;                       \/\/\/< lock$/;"	m	struct:kyotocabinet::PlantDB::LeafSlot
lock	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    SpinRWLock lock;                     \/\/\/< lock$/;"	m	struct:kyotocabinet::PlantDB::InnerNode
lock	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    SpinRWLock lock;                     \/\/\/< lock$/;"	m	struct:kyotocabinet::PlantDB::LeafNode
lslots_	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  LeafSlot lslots_[PDBSLOTNUM];$/;"	m	class:kyotocabinet::PlantDB
mlock_	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  SpinRWLock mlock_;$/;"	m	class:kyotocabinet::PlantDB
mtrigger_	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  MetaTrigger* mtrigger_;$/;"	m	class:kyotocabinet::PlantDB
next	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    int64_t next;                        \/\/\/< next leaf node$/;"	m	struct:kyotocabinet::PlantDB::LeafNode
omode_	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  uint32_t omode_;$/;"	m	class:kyotocabinet::PlantDB
opaque	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  char* opaque() {$/;"	f	class:kyotocabinet::PlantDB
open	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  bool open(const std::string& path, uint32_t mode = OWRITER | OCREATE) {$/;"	f	class:kyotocabinet::PlantDB
operator ()	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    bool operator ()(const Link* const& a, const Link* const& b) const {$/;"	f	struct:kyotocabinet::PlantDB::LinkComparator
operator ()	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    bool operator ()(const Record* const& a, const Record* const& b) const {$/;"	f	struct:kyotocabinet::PlantDB::RecordComparator
opts_	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  uint8_t opts_;$/;"	m	class:kyotocabinet::PlantDB
path	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  std::string path() {$/;"	f	class:kyotocabinet::PlantDB
pccap_	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  int64_t pccap_;$/;"	m	class:kyotocabinet::PlantDB
prev	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    int64_t prev;                        \/\/\/< previous leaf node$/;"	m	struct:kyotocabinet::PlantDB::LeafNode
psiz_	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  int32_t psiz_;$/;"	m	class:kyotocabinet::PlantDB
rcomp	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  Comparator* rcomp() {$/;"	f	class:kyotocabinet::PlantDB
recalc_count	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  bool recalc_count() {$/;"	f	class:kyotocabinet::PlantDB
reccomp_	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  RecordComparator reccomp_;$/;"	m	class:kyotocabinet::PlantDB
recs	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    RecordArray recs;                    \/\/\/< sorted array of records$/;"	m	struct:kyotocabinet::PlantDB::LeafNode
reorganize_file	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  bool reorganize_file(uint32_t mode) {$/;"	f	class:kyotocabinet::PlantDB
reorganize_tree	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  bool reorganize_tree(LeafNode* node, int64_t* hist, int32_t hnum) {$/;"	f	class:kyotocabinet::PlantDB
report	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  void report(const char* file, int32_t line, const char* func, Logger::Kind kind,$/;"	f	class:kyotocabinet::PlantDB
report_binary	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  void report_binary(const char* file, int32_t line, const char* func, Logger::Kind kind,$/;"	f	class:kyotocabinet::PlantDB
report_valist	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  void report_valist(const char* file, int32_t line, const char* func, Logger::Kind kind,$/;"	f	class:kyotocabinet::PlantDB
root_	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  int64_t root_;$/;"	m	class:kyotocabinet::PlantDB
save_inner_node	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  bool save_inner_node(InnerNode* node) {$/;"	f	class:kyotocabinet::PlantDB
save_leaf_node	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  bool save_leaf_node(LeafNode* node) {$/;"	f	class:kyotocabinet::PlantDB
search_tree	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  LeafNode* search_tree(Link* link, bool prom, int64_t* hist, int32_t* hnp) {$/;"	f	class:kyotocabinet::PlantDB
set_error	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  void set_error(const char* file, int32_t line, const char* func,$/;"	f	class:kyotocabinet::PlantDB
set_position	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    bool set_position(int64_t id) {$/;"	f	class:kyotocabinet::PlantDB::Cursor
set_position	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    void set_position(Record* rec, int64_t id) {$/;"	f	class:kyotocabinet::PlantDB::Cursor
set_position	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    void set_position(const char* kbuf, size_t ksiz, int64_t id) {$/;"	f	class:kyotocabinet::PlantDB::Cursor
set_position_back	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    bool set_position_back(int64_t id) {$/;"	f	class:kyotocabinet::PlantDB::Cursor
size	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    int64_t size;                        \/\/\/< total size of links$/;"	m	struct:kyotocabinet::PlantDB::InnerNode
size	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    int64_t size;                        \/\/\/< total size of records$/;"	m	struct:kyotocabinet::PlantDB::LeafNode
size	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  int64_t size() {$/;"	f	class:kyotocabinet::PlantDB
stack_	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    char stack_[PDBRECBUFSIZ];$/;"	m	class:kyotocabinet::PlantDB::Cursor
status	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  bool status(std::map<std::string, std::string>* strmap) {$/;"	f	class:kyotocabinet::PlantDB
step	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    bool step() {$/;"	f	class:kyotocabinet::PlantDB::Cursor
step_back	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    bool step_back() {$/;"	f	class:kyotocabinet::PlantDB::Cursor
sub_link_tree	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  bool sub_link_tree(InnerNode* node, int64_t child, int64_t* hist, int32_t hnum) {$/;"	f	class:kyotocabinet::PlantDB
synchronize	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  bool synchronize(bool hard = false, FileProcessor* proc = NULL,$/;"	f	class:kyotocabinet::PlantDB
synchronize_opaque	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  bool synchronize_opaque() {$/;"	f	class:kyotocabinet::PlantDB
tran_	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  bool tran_;$/;"	m	class:kyotocabinet::PlantDB
trclock_	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  int64_t trclock_;$/;"	m	class:kyotocabinet::PlantDB
trcount_	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  int64_t trcount_;$/;"	m	class:kyotocabinet::PlantDB
trigger_meta	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  void trigger_meta(MetaTrigger::Kind kind, const char* message) {$/;"	f	class:kyotocabinet::PlantDB
trlcnt_	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  int64_t trlcnt_;$/;"	m	class:kyotocabinet::PlantDB
tune_alignment	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  bool tune_alignment(int8_t apow) {$/;"	f	class:kyotocabinet::PlantDB
tune_buckets	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  bool tune_buckets(int64_t bnum) {$/;"	f	class:kyotocabinet::PlantDB
tune_comparator	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  bool tune_comparator(Comparator* rcomp) {$/;"	f	class:kyotocabinet::PlantDB
tune_compressor	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  bool tune_compressor(Compressor* comp) {$/;"	f	class:kyotocabinet::PlantDB
tune_defrag	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  bool tune_defrag(int64_t dfunit) {$/;"	f	class:kyotocabinet::PlantDB
tune_fbp	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  bool tune_fbp(int8_t fpow) {$/;"	f	class:kyotocabinet::PlantDB
tune_logger	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  bool tune_logger(Logger* logger, uint32_t kinds = Logger::WARN | Logger::ERROR) {$/;"	f	class:kyotocabinet::PlantDB
tune_map	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  bool tune_map(int64_t msiz) {$/;"	f	class:kyotocabinet::PlantDB
tune_meta_trigger	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  bool tune_meta_trigger(MetaTrigger* trigger) {$/;"	f	class:kyotocabinet::PlantDB
tune_options	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  bool tune_options(int8_t opts) {$/;"	f	class:kyotocabinet::PlantDB
tune_page	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  bool tune_page(int32_t psiz) {$/;"	f	class:kyotocabinet::PlantDB
tune_page_cache	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  bool tune_page_cache(int64_t pccap) {$/;"	f	class:kyotocabinet::PlantDB
vsiz	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    uint32_t vsiz;                       \/\/\/< size of the value$/;"	m	struct:kyotocabinet::PlantDB::Record
warm	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    InnerCache* warm;                    \/\/\/< warm cache$/;"	m	struct:kyotocabinet::PlantDB::InnerSlot
warm	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    LeafCache* warm;                     \/\/\/< warm cache$/;"	m	struct:kyotocabinet::PlantDB::LeafSlot
writer_	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  bool writer_;$/;"	m	class:kyotocabinet::PlantDB
~Cursor	src\storage\kdb\kyotocabinet\kcplantdb.h	/^    virtual ~Cursor() {$/;"	f	class:kyotocabinet::PlantDB::Cursor
~PlantDB	src\storage\kdb\kyotocabinet\kcplantdb.h	/^  virtual ~PlantDB() {$/;"	f	class:kyotocabinet::PlantDB
Regex	src\storage\kdb\kyotocabinet\kcregex.cc	/^Regex::Regex() : opq_(NULL) {$/;"	f	class:kyotocabinet::Regex
RegexCore	src\storage\kdb\kyotocabinet\kcregex.cc	/^struct RegexCore {$/;"	s	namespace:kyotocabinet	file:
alive	src\storage\kdb\kyotocabinet\kcregex.cc	/^  bool alive;$/;"	m	struct:kyotocabinet::RegexCore	file:
compile	src\storage\kdb\kyotocabinet\kcregex.cc	/^bool Regex::compile(const std::string& regex, uint32_t opts) {$/;"	f	class:kyotocabinet::Regex
kyotocabinet	src\storage\kdb\kyotocabinet\kcregex.cc	/^namespace kyotocabinet {                 \/\/ common namespace$/;"	n	file:
match	src\storage\kdb\kyotocabinet\kcregex.cc	/^bool Regex::match(const std::string& str) {$/;"	f	class:kyotocabinet::Regex
nosub	src\storage\kdb\kyotocabinet\kcregex.cc	/^  bool nosub;$/;"	m	struct:kyotocabinet::RegexCore	file:
rbuf	src\storage\kdb\kyotocabinet\kcregex.cc	/^  ::regex_t rbuf;$/;"	m	struct:kyotocabinet::RegexCore	file:
replace	src\storage\kdb\kyotocabinet\kcregex.cc	/^std::string Regex::replace(const std::string& str, const std::string& alt) {$/;"	f	class:kyotocabinet::Regex
~Regex	src\storage\kdb\kyotocabinet\kcregex.cc	/^Regex::~Regex() {$/;"	f	class:kyotocabinet::Regex
IGNCASE	src\storage\kdb\kyotocabinet\kcregex.h	/^    IGNCASE = 1 << 0,                    \/\/\/< case-insensitive$/;"	e	enum:kyotocabinet::Regex::Option
MATCHONLY	src\storage\kdb\kyotocabinet\kcregex.h	/^    MATCHONLY = 1 << 1,                  \/\/\/< matching only$/;"	e	enum:kyotocabinet::Regex::Option
Option	src\storage\kdb\kyotocabinet\kcregex.h	/^  enum Option {$/;"	g	class:kyotocabinet::Regex
Regex	src\storage\kdb\kyotocabinet\kcregex.h	/^class Regex {$/;"	c	namespace:kyotocabinet
_KCREGEX_H	src\storage\kdb\kyotocabinet\kcregex.h	17;"	d
kyotocabinet	src\storage\kdb\kyotocabinet\kcregex.h	/^namespace kyotocabinet {                 \/\/ common namespace$/;"	n
match	src\storage\kdb\kyotocabinet\kcregex.h	/^  static bool match(const std::string& str, const std::string& pattern, uint32_t opts = 0) {$/;"	f	class:kyotocabinet::Regex
opq_	src\storage\kdb\kyotocabinet\kcregex.h	/^  void* opq_;$/;"	m	class:kyotocabinet::Regex
replace	src\storage\kdb\kyotocabinet\kcregex.h	/^  static std::string replace(const std::string& str, const std::string& pattern,$/;"	f	class:kyotocabinet::Regex
CondVar	src\storage\kdb\kyotocabinet\kcthread.cc	/^CondVar::CondVar() : opq_(NULL) {$/;"	f	class:kyotocabinet::CondVar
CondVarCore	src\storage\kdb\kyotocabinet\kcthread.cc	/^struct CondVarCore {$/;"	s	namespace:kyotocabinet	file:
Mutex	src\storage\kdb\kyotocabinet\kcthread.cc	/^Mutex::Mutex() : opq_(NULL) {$/;"	f	class:kyotocabinet::Mutex
Mutex	src\storage\kdb\kyotocabinet\kcthread.cc	/^Mutex::Mutex(Type type) {$/;"	f	class:kyotocabinet::Mutex
RWLock	src\storage\kdb\kyotocabinet\kcthread.cc	/^RWLock::RWLock() : opq_(NULL) {$/;"	f	class:kyotocabinet::RWLock
SpinLock	src\storage\kdb\kyotocabinet\kcthread.cc	/^SpinLock::SpinLock() : opq_(NULL) {$/;"	f	class:kyotocabinet::SpinLock
SpinRWLock	src\storage\kdb\kyotocabinet\kcthread.cc	/^SpinRWLock::SpinRWLock() : opq_(NULL) {$/;"	f	class:kyotocabinet::SpinRWLock
SpinRWLockCore	src\storage\kdb\kyotocabinet\kcthread.cc	/^struct SpinRWLockCore {$/;"	s	namespace:kyotocabinet	file:
TSDKey	src\storage\kdb\kyotocabinet\kcthread.cc	/^TSDKey::TSDKey() : opq_(NULL) {$/;"	f	class:kyotocabinet::TSDKey
TSDKey	src\storage\kdb\kyotocabinet\kcthread.cc	/^TSDKey::TSDKey(void (*dstr)(void*)) : opq_(NULL) {$/;"	f	class:kyotocabinet::TSDKey
Thread	src\storage\kdb\kyotocabinet\kcthread.cc	/^Thread::Thread() : opq_(NULL) {$/;"	f	class:kyotocabinet::Thread
ThreadCore	src\storage\kdb\kyotocabinet\kcthread.cc	/^struct ThreadCore {$/;"	s	namespace:kyotocabinet	file:
add	src\storage\kdb\kyotocabinet\kcthread.cc	/^int64_t AtomicInt64::add(int64_t val) {$/;"	f	class:kyotocabinet::AtomicInt64
broadcast	src\storage\kdb\kyotocabinet\kcthread.cc	/^void CondVar::broadcast() {$/;"	f	class:kyotocabinet::CondVar
cas	src\storage\kdb\kyotocabinet\kcthread.cc	/^bool AtomicInt64::cas(int64_t oval, int64_t nval) {$/;"	f	class:kyotocabinet::AtomicInt64
demote	src\storage\kdb\kyotocabinet\kcthread.cc	/^void SpinRWLock::demote() {$/;"	f	class:kyotocabinet::SpinRWLock
detach	src\storage\kdb\kyotocabinet\kcthread.cc	/^void Thread::detach() {$/;"	f	class:kyotocabinet::Thread
exit	src\storage\kdb\kyotocabinet\kcthread.cc	/^void Thread::exit() {$/;"	f	class:kyotocabinet::Thread
fev	src\storage\kdb\kyotocabinet\kcthread.cc	/^  ::HANDLE fev;                          \/\/\/< finish event handle$/;"	m	struct:kyotocabinet::CondVarCore	file:
get	src\storage\kdb\kyotocabinet\kcthread.cc	/^int64_t AtomicInt64::get() const {$/;"	f	class:kyotocabinet::AtomicInt64
get	src\storage\kdb\kyotocabinet\kcthread.cc	/^void* TSDKey::get() const {$/;"	f	class:kyotocabinet::TSDKey
hash	src\storage\kdb\kyotocabinet\kcthread.cc	/^int64_t Thread::hash() {$/;"	f	class:kyotocabinet::Thread
join	src\storage\kdb\kyotocabinet\kcthread.cc	/^void Thread::join() {$/;"	f	class:kyotocabinet::Thread
kyotocabinet	src\storage\kdb\kyotocabinet\kcthread.cc	/^namespace kyotocabinet {                 \/\/ common namespace$/;"	n	file:
lock	src\storage\kdb\kyotocabinet\kcthread.cc	/^void Mutex::lock() {$/;"	f	class:kyotocabinet::Mutex
lock	src\storage\kdb\kyotocabinet\kcthread.cc	/^void SpinLock::lock() {$/;"	f	class:kyotocabinet::SpinLock
lock_reader	src\storage\kdb\kyotocabinet\kcthread.cc	/^void RWLock::lock_reader() {$/;"	f	class:kyotocabinet::RWLock
lock_reader	src\storage\kdb\kyotocabinet\kcthread.cc	/^void SpinRWLock::lock_reader() {$/;"	f	class:kyotocabinet::SpinRWLock
lock_reader_try	src\storage\kdb\kyotocabinet\kcthread.cc	/^bool RWLock::lock_reader_try() {$/;"	f	class:kyotocabinet::RWLock
lock_reader_try	src\storage\kdb\kyotocabinet\kcthread.cc	/^bool SpinRWLock::lock_reader_try() {$/;"	f	class:kyotocabinet::SpinRWLock
lock_try	src\storage\kdb\kyotocabinet\kcthread.cc	/^bool Mutex::lock_try() {$/;"	f	class:kyotocabinet::Mutex
lock_try	src\storage\kdb\kyotocabinet\kcthread.cc	/^bool Mutex::lock_try(double sec) {$/;"	f	class:kyotocabinet::Mutex
lock_try	src\storage\kdb\kyotocabinet\kcthread.cc	/^bool SpinLock::lock_try() {$/;"	f	class:kyotocabinet::SpinLock
lock_writer	src\storage\kdb\kyotocabinet\kcthread.cc	/^void RWLock::lock_writer() {$/;"	f	class:kyotocabinet::RWLock
lock_writer	src\storage\kdb\kyotocabinet\kcthread.cc	/^void SpinRWLock::lock_writer() {$/;"	f	class:kyotocabinet::SpinRWLock
lock_writer_try	src\storage\kdb\kyotocabinet\kcthread.cc	/^bool RWLock::lock_writer_try() {$/;"	f	class:kyotocabinet::RWLock
lock_writer_try	src\storage\kdb\kyotocabinet\kcthread.cc	/^bool SpinRWLock::lock_writer_try() {$/;"	f	class:kyotocabinet::SpinRWLock
mutex	src\storage\kdb\kyotocabinet\kcthread.cc	/^  ::CRITICAL_SECTION mutex;              \/\/\/< mutex$/;"	m	struct:kyotocabinet::CondVarCore	file:
promote	src\storage\kdb\kyotocabinet\kcthread.cc	/^bool SpinRWLock::promote() {$/;"	f	class:kyotocabinet::SpinRWLock
rc	src\storage\kdb\kyotocabinet\kcthread.cc	/^  int32_t rc;                            \/\/\/< count of readers$/;"	m	struct:kyotocabinet::SpinRWLockCore	file:
sem	src\storage\kdb\kyotocabinet\kcthread.cc	/^  LONG sem;                              \/\/\/< semaphore$/;"	m	struct:kyotocabinet::SpinRWLockCore	file:
set	src\storage\kdb\kyotocabinet\kcthread.cc	/^int64_t AtomicInt64::set(int64_t val) {$/;"	f	class:kyotocabinet::AtomicInt64
set	src\storage\kdb\kyotocabinet\kcthread.cc	/^void TSDKey::set(void* ptr) {$/;"	f	class:kyotocabinet::TSDKey
sev	src\storage\kdb\kyotocabinet\kcthread.cc	/^  ::HANDLE sev;                          \/\/\/< signal event handle$/;"	m	struct:kyotocabinet::CondVarCore	file:
signal	src\storage\kdb\kyotocabinet\kcthread.cc	/^void CondVar::signal() {$/;"	f	class:kyotocabinet::CondVar
sleep	src\storage\kdb\kyotocabinet\kcthread.cc	/^bool Thread::sleep(double sec) {$/;"	f	class:kyotocabinet::Thread
spinrwlocklock	src\storage\kdb\kyotocabinet\kcthread.cc	/^static void spinrwlocklock(SpinRWLockCore* core) {$/;"	f	namespace:kyotocabinet
spinrwlockunlock	src\storage\kdb\kyotocabinet\kcthread.cc	/^static void spinrwlockunlock(SpinRWLockCore* core) {$/;"	f	namespace:kyotocabinet
start	src\storage\kdb\kyotocabinet\kcthread.cc	/^void Thread::start() {$/;"	f	class:kyotocabinet::Thread
th	src\storage\kdb\kyotocabinet\kcthread.cc	/^  ::HANDLE th;                           \/\/\/< handle$/;"	m	struct:kyotocabinet::ThreadCore	file:
threadrun	src\storage\kdb\kyotocabinet\kcthread.cc	/^static ::DWORD threadrun(::LPVOID arg) {$/;"	f	namespace:kyotocabinet
threadrun	src\storage\kdb\kyotocabinet\kcthread.cc	/^static void* threadrun(void* arg) {$/;"	f	namespace:kyotocabinet
unlock	src\storage\kdb\kyotocabinet\kcthread.cc	/^void Mutex::unlock() {$/;"	f	class:kyotocabinet::Mutex
unlock	src\storage\kdb\kyotocabinet\kcthread.cc	/^void RWLock::unlock() {$/;"	f	class:kyotocabinet::RWLock
unlock	src\storage\kdb\kyotocabinet\kcthread.cc	/^void SpinLock::unlock() {$/;"	f	class:kyotocabinet::SpinLock
unlock	src\storage\kdb\kyotocabinet\kcthread.cc	/^void SpinRWLock::unlock() {$/;"	f	class:kyotocabinet::SpinRWLock
wait	src\storage\kdb\kyotocabinet\kcthread.cc	/^  uint32_t wait;                         \/\/\/< wait count$/;"	m	struct:kyotocabinet::CondVarCore	file:
wait	src\storage\kdb\kyotocabinet\kcthread.cc	/^bool CondVar::wait(Mutex* mutex, double sec) {$/;"	f	class:kyotocabinet::CondVar
wait	src\storage\kdb\kyotocabinet\kcthread.cc	/^void CondVar::wait(Mutex* mutex) {$/;"	f	class:kyotocabinet::CondVar
wake	src\storage\kdb\kyotocabinet\kcthread.cc	/^  uint32_t wake;                         \/\/\/< wake count$/;"	m	struct:kyotocabinet::CondVarCore	file:
wc	src\storage\kdb\kyotocabinet\kcthread.cc	/^  int32_t wc;                            \/\/\/< count of writers$/;"	m	struct:kyotocabinet::SpinRWLockCore	file:
yield	src\storage\kdb\kyotocabinet\kcthread.cc	/^void Thread::yield() {$/;"	f	class:kyotocabinet::Thread
~CondVar	src\storage\kdb\kyotocabinet\kcthread.cc	/^CondVar::~CondVar() {$/;"	f	class:kyotocabinet::CondVar
~Mutex	src\storage\kdb\kyotocabinet\kcthread.cc	/^Mutex::~Mutex() {$/;"	f	class:kyotocabinet::Mutex
~RWLock	src\storage\kdb\kyotocabinet\kcthread.cc	/^RWLock::~RWLock() {$/;"	f	class:kyotocabinet::RWLock
~SpinLock	src\storage\kdb\kyotocabinet\kcthread.cc	/^SpinLock::~SpinLock() {$/;"	f	class:kyotocabinet::SpinLock
~SpinRWLock	src\storage\kdb\kyotocabinet\kcthread.cc	/^SpinRWLock::~SpinRWLock() {$/;"	f	class:kyotocabinet::SpinRWLock
~TSDKey	src\storage\kdb\kyotocabinet\kcthread.cc	/^TSDKey::~TSDKey() {$/;"	f	class:kyotocabinet::TSDKey
~Thread	src\storage\kdb\kyotocabinet\kcthread.cc	/^Thread::~Thread() {$/;"	f	class:kyotocabinet::Thread
AtomicInt64	src\storage\kdb\kyotocabinet\kcthread.h	/^  AtomicInt64(const AtomicInt64& src) : value_(src.get()), lock_() {$/;"	f	class:kyotocabinet::AtomicInt64
AtomicInt64	src\storage\kdb\kyotocabinet\kcthread.h	/^  AtomicInt64(int64_t num) : value_(num), lock_() {$/;"	f	class:kyotocabinet::AtomicInt64
AtomicInt64	src\storage\kdb\kyotocabinet\kcthread.h	/^  explicit AtomicInt64() : value_(0), lock_() {$/;"	f	class:kyotocabinet::AtomicInt64
AtomicInt64	src\storage\kdb\kyotocabinet\kcthread.h	/^class AtomicInt64 {$/;"	c	namespace:kyotocabinet
CondVar	src\storage\kdb\kyotocabinet\kcthread.h	/^class CondVar {$/;"	c	namespace:kyotocabinet
ERRORCHECK	src\storage\kdb\kyotocabinet\kcthread.h	/^    ERRORCHECK,          \/\/\/< check error$/;"	e	enum:kyotocabinet::Mutex::Type
FAST	src\storage\kdb\kyotocabinet\kcthread.h	/^    FAST,                \/\/\/< no operation$/;"	e	enum:kyotocabinet::Mutex::Type
Mutex	src\storage\kdb\kyotocabinet\kcthread.h	/^class Mutex {$/;"	c	namespace:kyotocabinet
RECURSIVE	src\storage\kdb\kyotocabinet\kcthread.h	/^    RECURSIVE            \/\/\/< allow recursive locking$/;"	e	enum:kyotocabinet::Mutex::Type
RWLock	src\storage\kdb\kyotocabinet\kcthread.h	/^class RWLock {$/;"	c	namespace:kyotocabinet
ScopedMutex	src\storage\kdb\kyotocabinet\kcthread.h	/^  explicit ScopedMutex(Mutex* mutex) : mutex_(mutex) {$/;"	f	class:kyotocabinet::ScopedMutex
ScopedMutex	src\storage\kdb\kyotocabinet\kcthread.h	/^class ScopedMutex {$/;"	c	namespace:kyotocabinet
ScopedRWLock	src\storage\kdb\kyotocabinet\kcthread.h	/^  explicit ScopedRWLock(RWLock* rwlock, bool writer) : rwlock_(rwlock) {$/;"	f	class:kyotocabinet::ScopedRWLock
ScopedRWLock	src\storage\kdb\kyotocabinet\kcthread.h	/^class ScopedRWLock {$/;"	c	namespace:kyotocabinet
ScopedSpinLock	src\storage\kdb\kyotocabinet\kcthread.h	/^  explicit ScopedSpinLock(SpinLock* spinlock) : spinlock_(spinlock) {$/;"	f	class:kyotocabinet::ScopedSpinLock
ScopedSpinLock	src\storage\kdb\kyotocabinet\kcthread.h	/^class ScopedSpinLock {$/;"	c	namespace:kyotocabinet
ScopedSpinRWLock	src\storage\kdb\kyotocabinet\kcthread.h	/^  explicit ScopedSpinRWLock(SpinRWLock* srwlock, bool writer) : srwlock_(srwlock) {$/;"	f	class:kyotocabinet::ScopedSpinRWLock
ScopedSpinRWLock	src\storage\kdb\kyotocabinet\kcthread.h	/^class ScopedSpinRWLock {$/;"	c	namespace:kyotocabinet
SlottedMutex	src\storage\kdb\kyotocabinet\kcthread.h	/^  explicit SlottedMutex() : locks_() {$/;"	f	class:kyotocabinet::SlottedMutex
SlottedMutex	src\storage\kdb\kyotocabinet\kcthread.h	/^class SlottedMutex {$/;"	c	namespace:kyotocabinet
SlottedRWLock	src\storage\kdb\kyotocabinet\kcthread.h	/^  explicit SlottedRWLock() : locks_() {$/;"	f	class:kyotocabinet::SlottedRWLock
SlottedRWLock	src\storage\kdb\kyotocabinet\kcthread.h	/^class SlottedRWLock {$/;"	c	namespace:kyotocabinet
SlottedSpinLock	src\storage\kdb\kyotocabinet\kcthread.h	/^  explicit SlottedSpinLock() : locks_() {$/;"	f	class:kyotocabinet::SlottedSpinLock
SlottedSpinLock	src\storage\kdb\kyotocabinet\kcthread.h	/^class SlottedSpinLock {$/;"	c	namespace:kyotocabinet
SlottedSpinRWLock	src\storage\kdb\kyotocabinet\kcthread.h	/^  explicit SlottedSpinRWLock() : locks_() {$/;"	f	class:kyotocabinet::SlottedSpinRWLock
SlottedSpinRWLock	src\storage\kdb\kyotocabinet\kcthread.h	/^class SlottedSpinRWLock {$/;"	c	namespace:kyotocabinet
SpinLock	src\storage\kdb\kyotocabinet\kcthread.h	/^class SpinLock {$/;"	c	namespace:kyotocabinet
SpinRWLock	src\storage\kdb\kyotocabinet\kcthread.h	/^class SpinRWLock {$/;"	c	namespace:kyotocabinet
TSD	src\storage\kdb\kyotocabinet\kcthread.h	/^  explicit TSD() : key_(delete_value) {$/;"	f	class:kyotocabinet::TSD
TSD	src\storage\kdb\kyotocabinet\kcthread.h	/^class TSD {$/;"	c	namespace:kyotocabinet
TSDKey	src\storage\kdb\kyotocabinet\kcthread.h	/^class TSDKey {$/;"	c	namespace:kyotocabinet
Task	src\storage\kdb\kyotocabinet\kcthread.h	/^    explicit Task() : id_(0), thid_(0), aborted_(false) {$/;"	f	class:kyotocabinet::TaskQueue::Task
Task	src\storage\kdb\kyotocabinet\kcthread.h	/^  class Task {$/;"	c	class:kyotocabinet::TaskQueue
TaskList	src\storage\kdb\kyotocabinet\kcthread.h	/^  typedef std::list<Task*> TaskList;$/;"	t	class:kyotocabinet::TaskQueue
TaskQueue	src\storage\kdb\kyotocabinet\kcthread.h	/^  TaskQueue() : thary_(NULL), thnum_(0), tasks_(), count_(0), mutex_(), cond_(), seed_(0) {$/;"	f	class:kyotocabinet::TaskQueue
TaskQueue	src\storage\kdb\kyotocabinet\kcthread.h	/^class TaskQueue {$/;"	c	namespace:kyotocabinet
Thread	src\storage\kdb\kyotocabinet\kcthread.h	/^class Thread {$/;"	c	namespace:kyotocabinet
Type	src\storage\kdb\kyotocabinet\kcthread.h	/^  enum Type {$/;"	g	class:kyotocabinet::Mutex
WorkerThread	src\storage\kdb\kyotocabinet\kcthread.h	/^    explicit WorkerThread() : id_(0), queue_(NULL), aborted_(false) {$/;"	f	class:kyotocabinet::TaskQueue::WorkerThread
WorkerThread	src\storage\kdb\kyotocabinet\kcthread.h	/^  class WorkerThread : public Thread {$/;"	c	class:kyotocabinet::TaskQueue
_KCTHREAD_H	src\storage\kdb\kyotocabinet\kcthread.h	17;"	d
aborted	src\storage\kdb\kyotocabinet\kcthread.h	/^    bool aborted() {$/;"	f	class:kyotocabinet::TaskQueue::Task
aborted_	src\storage\kdb\kyotocabinet\kcthread.h	/^    bool aborted_;$/;"	m	class:kyotocabinet::TaskQueue::Task
aborted_	src\storage\kdb\kyotocabinet\kcthread.h	/^    bool aborted_;$/;"	m	class:kyotocabinet::TaskQueue::WorkerThread
add_task	src\storage\kdb\kyotocabinet\kcthread.h	/^  int64_t add_task(Task* task) {$/;"	f	class:kyotocabinet::TaskQueue
cond_	src\storage\kdb\kyotocabinet\kcthread.h	/^  CondVar cond_;$/;"	m	class:kyotocabinet::TaskQueue
count	src\storage\kdb\kyotocabinet\kcthread.h	/^  int64_t count() {$/;"	f	class:kyotocabinet::TaskQueue
count_	src\storage\kdb\kyotocabinet\kcthread.h	/^  int64_t count_;$/;"	m	class:kyotocabinet::TaskQueue
delete_value	src\storage\kdb\kyotocabinet\kcthread.h	/^  static void delete_value(void* obj) {$/;"	f	class:kyotocabinet::TSD
finish	src\storage\kdb\kyotocabinet\kcthread.h	/^  void finish() {$/;"	f	class:kyotocabinet::TaskQueue
id	src\storage\kdb\kyotocabinet\kcthread.h	/^    uint64_t id() {$/;"	f	class:kyotocabinet::TaskQueue::Task
id_	src\storage\kdb\kyotocabinet\kcthread.h	/^    uint32_t id_;$/;"	m	class:kyotocabinet::TaskQueue::WorkerThread
id_	src\storage\kdb\kyotocabinet\kcthread.h	/^    uint64_t id_;$/;"	m	class:kyotocabinet::TaskQueue::Task
key_	src\storage\kdb\kyotocabinet\kcthread.h	/^  TSDKey key_;$/;"	m	class:kyotocabinet::TSD
kyotocabinet	src\storage\kdb\kyotocabinet\kcthread.h	/^namespace kyotocabinet {                 \/\/ common namespace$/;"	n
lock	src\storage\kdb\kyotocabinet\kcthread.h	/^  void lock(int32_t idx) {$/;"	f	class:kyotocabinet::SlottedMutex
lock	src\storage\kdb\kyotocabinet\kcthread.h	/^  void lock(int32_t idx) {$/;"	f	class:kyotocabinet::SlottedSpinLock
lock_	src\storage\kdb\kyotocabinet\kcthread.h	/^  mutable SpinLock lock_;$/;"	m	class:kyotocabinet::AtomicInt64
lock_all	src\storage\kdb\kyotocabinet\kcthread.h	/^  void lock_all() {$/;"	f	class:kyotocabinet::SlottedMutex
lock_all	src\storage\kdb\kyotocabinet\kcthread.h	/^  void lock_all() {$/;"	f	class:kyotocabinet::SlottedSpinLock
lock_reader	src\storage\kdb\kyotocabinet\kcthread.h	/^  void lock_reader(int32_t idx) {$/;"	f	class:kyotocabinet::SlottedRWLock
lock_reader	src\storage\kdb\kyotocabinet\kcthread.h	/^  void lock_reader(int32_t idx) {$/;"	f	class:kyotocabinet::SlottedSpinRWLock
lock_reader_all	src\storage\kdb\kyotocabinet\kcthread.h	/^  void lock_reader_all() {$/;"	f	class:kyotocabinet::SlottedRWLock
lock_reader_all	src\storage\kdb\kyotocabinet\kcthread.h	/^  void lock_reader_all() {$/;"	f	class:kyotocabinet::SlottedSpinRWLock
lock_writer	src\storage\kdb\kyotocabinet\kcthread.h	/^  void lock_writer(int32_t idx) {$/;"	f	class:kyotocabinet::SlottedRWLock
lock_writer	src\storage\kdb\kyotocabinet\kcthread.h	/^  void lock_writer(int32_t idx) {$/;"	f	class:kyotocabinet::SlottedSpinRWLock
lock_writer_all	src\storage\kdb\kyotocabinet\kcthread.h	/^  void lock_writer_all() {$/;"	f	class:kyotocabinet::SlottedRWLock
lock_writer_all	src\storage\kdb\kyotocabinet\kcthread.h	/^  void lock_writer_all() {$/;"	f	class:kyotocabinet::SlottedSpinRWLock
locks_	src\storage\kdb\kyotocabinet\kcthread.h	/^  Mutex locks_[SLOTNUM];$/;"	m	class:kyotocabinet::SlottedMutex
locks_	src\storage\kdb\kyotocabinet\kcthread.h	/^  RWLock locks_[SLOTNUM];$/;"	m	class:kyotocabinet::SlottedRWLock
locks_	src\storage\kdb\kyotocabinet\kcthread.h	/^  SpinLock locks_[SLOTNUM];$/;"	m	class:kyotocabinet::SlottedSpinLock
locks_	src\storage\kdb\kyotocabinet\kcthread.h	/^  SpinRWLock locks_[SLOTNUM];$/;"	m	class:kyotocabinet::SlottedSpinRWLock
mutex_	src\storage\kdb\kyotocabinet\kcthread.h	/^  Mutex mutex_;$/;"	m	class:kyotocabinet::TaskQueue
mutex_	src\storage\kdb\kyotocabinet\kcthread.h	/^  Mutex* mutex_;$/;"	m	class:kyotocabinet::ScopedMutex
operator *	src\storage\kdb\kyotocabinet\kcthread.h	/^  TYPE& operator *() {$/;"	f	class:kyotocabinet::TSD
operator +=	src\storage\kdb\kyotocabinet\kcthread.h	/^  AtomicInt64& operator +=(int64_t right) {$/;"	f	class:kyotocabinet::AtomicInt64
operator -=	src\storage\kdb\kyotocabinet\kcthread.h	/^  AtomicInt64& operator -=(int64_t right) {$/;"	f	class:kyotocabinet::AtomicInt64
operator ->	src\storage\kdb\kyotocabinet\kcthread.h	/^  TYPE* operator ->() {$/;"	f	class:kyotocabinet::TSD
operator =	src\storage\kdb\kyotocabinet\kcthread.h	/^  AtomicInt64& operator =(const AtomicInt64& right) {$/;"	f	class:kyotocabinet::AtomicInt64
operator =	src\storage\kdb\kyotocabinet\kcthread.h	/^  AtomicInt64& operator =(const int64_t& right) {$/;"	f	class:kyotocabinet::AtomicInt64
operator TYPE	src\storage\kdb\kyotocabinet\kcthread.h	/^  operator TYPE() const {$/;"	f	class:kyotocabinet::TSD
operator int64_t	src\storage\kdb\kyotocabinet\kcthread.h	/^  operator int64_t() const {$/;"	f	class:kyotocabinet::AtomicInt64
opq_	src\storage\kdb\kyotocabinet\kcthread.h	/^  void* opq_;$/;"	m	class:kyotocabinet::CondVar
opq_	src\storage\kdb\kyotocabinet\kcthread.h	/^  void* opq_;$/;"	m	class:kyotocabinet::Mutex
opq_	src\storage\kdb\kyotocabinet\kcthread.h	/^  void* opq_;$/;"	m	class:kyotocabinet::RWLock
opq_	src\storage\kdb\kyotocabinet\kcthread.h	/^  void* opq_;$/;"	m	class:kyotocabinet::SpinLock
opq_	src\storage\kdb\kyotocabinet\kcthread.h	/^  void* opq_;$/;"	m	class:kyotocabinet::SpinRWLock
opq_	src\storage\kdb\kyotocabinet\kcthread.h	/^  void* opq_;$/;"	m	class:kyotocabinet::TSDKey
opq_	src\storage\kdb\kyotocabinet\kcthread.h	/^  void* opq_;$/;"	m	class:kyotocabinet::Thread
queue_	src\storage\kdb\kyotocabinet\kcthread.h	/^    TaskQueue* queue_;$/;"	m	class:kyotocabinet::TaskQueue::WorkerThread
run	src\storage\kdb\kyotocabinet\kcthread.h	/^    void run() {$/;"	f	class:kyotocabinet::TaskQueue::WorkerThread
rwlock_	src\storage\kdb\kyotocabinet\kcthread.h	/^  RWLock* rwlock_;$/;"	m	class:kyotocabinet::ScopedRWLock
secure_least	src\storage\kdb\kyotocabinet\kcthread.h	/^  int64_t secure_least(int64_t val) {$/;"	f	class:kyotocabinet::AtomicInt64
seed_	src\storage\kdb\kyotocabinet\kcthread.h	/^  uint64_t seed_;$/;"	m	class:kyotocabinet::TaskQueue
spinlock_	src\storage\kdb\kyotocabinet\kcthread.h	/^  SpinLock* spinlock_;$/;"	m	class:kyotocabinet::ScopedSpinLock
srwlock_	src\storage\kdb\kyotocabinet\kcthread.h	/^  SpinRWLock* srwlock_;$/;"	m	class:kyotocabinet::ScopedSpinRWLock
start	src\storage\kdb\kyotocabinet\kcthread.h	/^  void start(size_t thnum) {$/;"	f	class:kyotocabinet::TaskQueue
task_	src\storage\kdb\kyotocabinet\kcthread.h	/^    Task* task_;$/;"	m	class:kyotocabinet::TaskQueue::WorkerThread
tasks_	src\storage\kdb\kyotocabinet\kcthread.h	/^  TaskList tasks_;$/;"	m	class:kyotocabinet::TaskQueue
thary_	src\storage\kdb\kyotocabinet\kcthread.h	/^  WorkerThread* thary_;$/;"	m	class:kyotocabinet::TaskQueue
thid_	src\storage\kdb\kyotocabinet\kcthread.h	/^    uint64_t thid_;$/;"	m	class:kyotocabinet::TaskQueue::Task
thnum_	src\storage\kdb\kyotocabinet\kcthread.h	/^  size_t thnum_;$/;"	m	class:kyotocabinet::TaskQueue
thread_id	src\storage\kdb\kyotocabinet\kcthread.h	/^    uint32_t thread_id() {$/;"	f	class:kyotocabinet::TaskQueue::Task
unlock	src\storage\kdb\kyotocabinet\kcthread.h	/^  void unlock(int32_t idx) {$/;"	f	class:kyotocabinet::SlottedMutex
unlock	src\storage\kdb\kyotocabinet\kcthread.h	/^  void unlock(int32_t idx) {$/;"	f	class:kyotocabinet::SlottedRWLock
unlock	src\storage\kdb\kyotocabinet\kcthread.h	/^  void unlock(int32_t idx) {$/;"	f	class:kyotocabinet::SlottedSpinLock
unlock	src\storage\kdb\kyotocabinet\kcthread.h	/^  void unlock(int32_t idx) {$/;"	f	class:kyotocabinet::SlottedSpinRWLock
unlock_all	src\storage\kdb\kyotocabinet\kcthread.h	/^  void unlock_all() {$/;"	f	class:kyotocabinet::SlottedMutex
unlock_all	src\storage\kdb\kyotocabinet\kcthread.h	/^  void unlock_all() {$/;"	f	class:kyotocabinet::SlottedRWLock
unlock_all	src\storage\kdb\kyotocabinet\kcthread.h	/^  void unlock_all() {$/;"	f	class:kyotocabinet::SlottedSpinLock
unlock_all	src\storage\kdb\kyotocabinet\kcthread.h	/^  void unlock_all() {$/;"	f	class:kyotocabinet::SlottedSpinRWLock
value_	src\storage\kdb\kyotocabinet\kcthread.h	/^  volatile int64_t value_;$/;"	m	class:kyotocabinet::AtomicInt64
~AtomicInt64	src\storage\kdb\kyotocabinet\kcthread.h	/^  ~AtomicInt64() {$/;"	f	class:kyotocabinet::AtomicInt64
~ScopedMutex	src\storage\kdb\kyotocabinet\kcthread.h	/^  ~ScopedMutex() {$/;"	f	class:kyotocabinet::ScopedMutex
~ScopedRWLock	src\storage\kdb\kyotocabinet\kcthread.h	/^  ~ScopedRWLock() {$/;"	f	class:kyotocabinet::ScopedRWLock
~ScopedSpinLock	src\storage\kdb\kyotocabinet\kcthread.h	/^  ~ScopedSpinLock() {$/;"	f	class:kyotocabinet::ScopedSpinLock
~ScopedSpinRWLock	src\storage\kdb\kyotocabinet\kcthread.h	/^  ~ScopedSpinRWLock() {$/;"	f	class:kyotocabinet::ScopedSpinRWLock
~SlottedMutex	src\storage\kdb\kyotocabinet\kcthread.h	/^  ~SlottedMutex() {$/;"	f	class:kyotocabinet::SlottedMutex
~SlottedRWLock	src\storage\kdb\kyotocabinet\kcthread.h	/^  ~SlottedRWLock() {$/;"	f	class:kyotocabinet::SlottedRWLock
~SlottedSpinLock	src\storage\kdb\kyotocabinet\kcthread.h	/^  ~SlottedSpinLock() {$/;"	f	class:kyotocabinet::SlottedSpinLock
~SlottedSpinRWLock	src\storage\kdb\kyotocabinet\kcthread.h	/^  ~SlottedSpinRWLock() {$/;"	f	class:kyotocabinet::SlottedSpinRWLock
~TSD	src\storage\kdb\kyotocabinet\kcthread.h	/^  ~TSD() {$/;"	f	class:kyotocabinet::TSD
~Task	src\storage\kdb\kyotocabinet\kcthread.h	/^    virtual ~Task() {$/;"	f	class:kyotocabinet::TaskQueue::Task
~TaskQueue	src\storage\kdb\kyotocabinet\kcthread.h	/^  virtual ~TaskQueue() {$/;"	f	class:kyotocabinet::TaskQueue
BIGEND	src\storage\kdb\kyotocabinet\kcutil.cc	/^const bool BIGEND = _KC_BIGEND ? true : false;$/;"	m	namespace:kyotocabinet	file:
CLOCKTICK	src\storage\kdb\kyotocabinet\kcutil.cc	/^const int32_t CLOCKTICK = 100;$/;"	m	namespace:kyotocabinet	file:
CLOCKTICK	src\storage\kdb\kyotocabinet\kcutil.cc	/^const int32_t CLOCKTICK = sysconf(_SC_CLK_TCK);$/;"	m	namespace:kyotocabinet	file:
FEATURES	src\storage\kdb\kyotocabinet\kcutil.cc	/^const char* const FEATURES = ""$/;"	m	namespace:kyotocabinet	file:
FMTVER	src\storage\kdb\kyotocabinet\kcutil.cc	/^const int32_t FMTVER = _KC_FMTVER;$/;"	m	namespace:kyotocabinet	file:
LIBREV	src\storage\kdb\kyotocabinet\kcutil.cc	/^const int32_t LIBREV = _KC_LIBREV;$/;"	m	namespace:kyotocabinet	file:
LIBVER	src\storage\kdb\kyotocabinet\kcutil.cc	/^const int32_t LIBVER = _KC_LIBVER;$/;"	m	namespace:kyotocabinet	file:
PAGESIZE	src\storage\kdb\kyotocabinet\kcutil.cc	/^const int32_t PAGESIZE = sysconf(_SC_PAGESIZE);$/;"	m	namespace:kyotocabinet	file:
PAGESIZE	src\storage\kdb\kyotocabinet\kcutil.cc	/^const int32_t PAGESIZE = win_getpagesize();$/;"	m	namespace:kyotocabinet	file:
SYSNAME	src\storage\kdb\kyotocabinet\kcutil.cc	/^const char* SYSNAME = _KC_SYSNAME;$/;"	m	namespace:kyotocabinet	file:
VERSION	src\storage\kdb\kyotocabinet\kcutil.cc	/^const char* const VERSION = _KC_VERSION;$/;"	m	namespace:kyotocabinet	file:
getenv	src\storage\kdb\kyotocabinet\kcutil.cc	/^const char* getenv(const char* name) {$/;"	f	namespace:kyotocabinet
getpid	src\storage\kdb\kyotocabinet\kcutil.cc	/^int64_t getpid() {$/;"	f	namespace:kyotocabinet
getsysinfo	src\storage\kdb\kyotocabinet\kcutil.cc	/^void getsysinfo(std::map<std::string, std::string>* strmap) {$/;"	f	namespace:kyotocabinet
kyotocabinet	src\storage\kdb\kyotocabinet\kcutil.cc	/^namespace kyotocabinet {                 \/\/ common namespace$/;"	n	file:
mapalloc	src\storage\kdb\kyotocabinet\kcutil.cc	/^void* mapalloc(size_t size) {$/;"	f	namespace:kyotocabinet
mapfree	src\storage\kdb\kyotocabinet\kcutil.cc	/^void mapfree(void* ptr) {$/;"	f	namespace:kyotocabinet
setstdiobin	src\storage\kdb\kyotocabinet\kcutil.cc	/^void setstdiobin() {$/;"	f	namespace:kyotocabinet
time	src\storage\kdb\kyotocabinet\kcutil.cc	/^double time() {$/;"	f	namespace:kyotocabinet
win_getpagesize	src\storage\kdb\kyotocabinet\kcutil.cc	/^static int32_t win_getpagesize() {$/;"	f	namespace:kyotocabinet
MEMMAXSIZ	src\storage\kdb\kyotocabinet\kcutil.h	/^const size_t MEMMAXSIZ = INT32_MAX \/ 2;$/;"	m	namespace:kyotocabinet
NUMBUFSIZ	src\storage\kdb\kyotocabinet\kcutil.h	/^const size_t NUMBUFSIZ = 32;$/;"	m	namespace:kyotocabinet
StringHashMap	src\storage\kdb\kyotocabinet\kcutil.h	/^typedef std::unordered_map<std::string, std::string> StringHashMap;$/;"	t	namespace:kyotocabinet
StringTreeMap	src\storage\kdb\kyotocabinet\kcutil.h	/^typedef std::map<std::string, std::string> StringTreeMap;$/;"	t	namespace:kyotocabinet
_KCUTIL_H	src\storage\kdb\kyotocabinet\kcutil.h	17;"	d
arccipher	src\storage\kdb\kyotocabinet\kcutil.h	/^inline void arccipher(const void* ptr, size_t size, const void* kbuf, size_t ksiz, void* obuf) {$/;"	f	namespace:kyotocabinet
atof	src\storage\kdb\kyotocabinet\kcutil.h	/^inline double atof(const char* str) {$/;"	f	namespace:kyotocabinet
atoi	src\storage\kdb\kyotocabinet\kcutil.h	/^inline int64_t atoi(const char* str) {$/;"	f	namespace:kyotocabinet
atoih	src\storage\kdb\kyotocabinet\kcutil.h	/^inline int64_t atoih(const char* str) {$/;"	f	namespace:kyotocabinet
atoix	src\storage\kdb\kyotocabinet\kcutil.h	/^inline int64_t atoix(const char* str) {$/;"	f	namespace:kyotocabinet
basedecode	src\storage\kdb\kyotocabinet\kcutil.h	/^inline char* basedecode(const char* str, size_t* sp) {$/;"	f	namespace:kyotocabinet
baseencode	src\storage\kdb\kyotocabinet\kcutil.h	/^inline char* baseencode(const void* buf, size_t size) {$/;"	f	namespace:kyotocabinet
chkinf	src\storage\kdb\kyotocabinet\kcutil.h	/^inline bool chkinf(double num) {$/;"	f	namespace:kyotocabinet
chknan	src\storage\kdb\kyotocabinet\kcutil.h	/^inline bool chknan(double num) {$/;"	f	namespace:kyotocabinet
hashfnv	src\storage\kdb\kyotocabinet\kcutil.h	/^inline uint64_t hashfnv(const void* buf, size_t size) {$/;"	f	namespace:kyotocabinet
hashmurmur	src\storage\kdb\kyotocabinet\kcutil.h	/^inline uint64_t hashmurmur(const void* buf, size_t size) {$/;"	f	namespace:kyotocabinet
hashpath	src\storage\kdb\kyotocabinet\kcutil.h	/^inline uint32_t hashpath(const void* buf, size_t size, char* obuf) {$/;"	f	namespace:kyotocabinet
hexdecode	src\storage\kdb\kyotocabinet\kcutil.h	/^inline char* hexdecode(const char* str, size_t* sp) {$/;"	f	namespace:kyotocabinet
hexencode	src\storage\kdb\kyotocabinet\kcutil.h	/^inline char* hexencode(const void* buf, size_t size) {$/;"	f	namespace:kyotocabinet
hton16	src\storage\kdb\kyotocabinet\kcutil.h	/^inline uint16_t hton16(uint16_t num) {$/;"	f	namespace:kyotocabinet
hton32	src\storage\kdb\kyotocabinet\kcutil.h	/^inline uint32_t hton32(uint32_t num) {$/;"	f	namespace:kyotocabinet
hton64	src\storage\kdb\kyotocabinet\kcutil.h	/^inline uint64_t hton64(uint64_t num) {$/;"	f	namespace:kyotocabinet
inf	src\storage\kdb\kyotocabinet\kcutil.h	/^inline double inf() {$/;"	f	namespace:kyotocabinet
kyotocabinet	src\storage\kdb\kyotocabinet\kcutil.h	/^namespace kyotocabinet {                 \/\/ common namespace$/;"	n
memdup	src\storage\kdb\kyotocabinet\kcutil.h	/^inline char* memdup(const char* ptr, size_t size) {$/;"	f	namespace:kyotocabinet
nan	src\storage\kdb\kyotocabinet\kcutil.h	/^inline double nan() {$/;"	f	namespace:kyotocabinet
nearbyprime	src\storage\kdb\kyotocabinet\kcutil.h	/^inline uint64_t nearbyprime(uint64_t num) {$/;"	f	namespace:kyotocabinet
ntoh16	src\storage\kdb\kyotocabinet\kcutil.h	/^inline uint16_t ntoh16(uint16_t num) {$/;"	f	namespace:kyotocabinet
ntoh32	src\storage\kdb\kyotocabinet\kcutil.h	/^inline uint32_t ntoh32(uint32_t num) {$/;"	f	namespace:kyotocabinet
ntoh64	src\storage\kdb\kyotocabinet\kcutil.h	/^inline uint64_t ntoh64(uint64_t num) {$/;"	f	namespace:kyotocabinet
quotedecode	src\storage\kdb\kyotocabinet\kcutil.h	/^inline char* quotedecode(const char* str, size_t* sp) {$/;"	f	namespace:kyotocabinet
quoteencode	src\storage\kdb\kyotocabinet\kcutil.h	/^inline char* quoteencode(const void* buf, size_t size) {$/;"	f	namespace:kyotocabinet
readfixnum	src\storage\kdb\kyotocabinet\kcutil.h	/^inline uint64_t readfixnum(const void* buf, size_t width) {$/;"	f	namespace:kyotocabinet
readvarnum	src\storage\kdb\kyotocabinet\kcutil.h	/^inline size_t readvarnum(const void* buf, size_t size, uint64_t* np) {$/;"	f	namespace:kyotocabinet
sizevarnum	src\storage\kdb\kyotocabinet\kcutil.h	/^inline size_t sizevarnum(uint64_t num) {$/;"	f	namespace:kyotocabinet
strbwm	src\storage\kdb\kyotocabinet\kcutil.h	/^inline bool strbwm(const char* str, const char* key) {$/;"	f	namespace:kyotocabinet
strdup	src\storage\kdb\kyotocabinet\kcutil.h	/^inline char* strdup(const char* str) {$/;"	f	namespace:kyotocabinet
strfwm	src\storage\kdb\kyotocabinet\kcutil.h	/^inline bool strfwm(const char* str, const char* key) {$/;"	f	namespace:kyotocabinet
stribwm	src\storage\kdb\kyotocabinet\kcutil.h	/^inline bool stribwm(const char* str, const char* key) {$/;"	f	namespace:kyotocabinet
stricmp	src\storage\kdb\kyotocabinet\kcutil.h	/^inline int32_t stricmp(const char* astr, const char* bstr) {$/;"	f	namespace:kyotocabinet
strifwm	src\storage\kdb\kyotocabinet\kcutil.h	/^inline bool strifwm(const char* str, const char* key) {$/;"	f	namespace:kyotocabinet
strnrmspc	src\storage\kdb\kyotocabinet\kcutil.h	/^inline char* strnrmspc(char* str) {$/;"	f	namespace:kyotocabinet
strprintf	src\storage\kdb\kyotocabinet\kcutil.h	/^inline std::string strprintf(const char* format, ...) {$/;"	f	namespace:kyotocabinet
strprintf	src\storage\kdb\kyotocabinet\kcutil.h	/^inline void strprintf(std::string* dest, const char* format, ...) {$/;"	f	namespace:kyotocabinet
strsplit	src\storage\kdb\kyotocabinet\kcutil.h	/^inline size_t strsplit(const std::string& str, char delim, std::vector<std::string>* elems) {$/;"	f	namespace:kyotocabinet
strsplit	src\storage\kdb\kyotocabinet\kcutil.h	/^inline size_t strsplit(const std::string& str, const std::string& delims,$/;"	f	namespace:kyotocabinet
strsqzspc	src\storage\kdb\kyotocabinet\kcutil.h	/^inline char* strsqzspc(char* str) {$/;"	f	namespace:kyotocabinet
strtolower	src\storage\kdb\kyotocabinet\kcutil.h	/^inline char* strtolower(char* str) {$/;"	f	namespace:kyotocabinet
strtoupper	src\storage\kdb\kyotocabinet\kcutil.h	/^inline char* strtoupper(char* str) {$/;"	f	namespace:kyotocabinet
strtrim	src\storage\kdb\kyotocabinet\kcutil.h	/^inline char* strtrim(char* str) {$/;"	f	namespace:kyotocabinet
urldecode	src\storage\kdb\kyotocabinet\kcutil.h	/^inline char* urldecode(const char* str, size_t* sp) {$/;"	f	namespace:kyotocabinet
urlencode	src\storage\kdb\kyotocabinet\kcutil.h	/^inline char* urlencode(const void* buf, size_t size) {$/;"	f	namespace:kyotocabinet
vstrprintf	src\storage\kdb\kyotocabinet\kcutil.h	/^inline void vstrprintf(std::string* dest, const char* format, va_list ap) {$/;"	f	namespace:kyotocabinet
writefixnum	src\storage\kdb\kyotocabinet\kcutil.h	/^inline void writefixnum(void* buf, uint64_t num, size_t width) {$/;"	f	namespace:kyotocabinet
writevarnum	src\storage\kdb\kyotocabinet\kcutil.h	/^inline size_t writevarnum(void* buf, uint64_t num) {$/;"	f	namespace:kyotocabinet
xcalloc	src\storage\kdb\kyotocabinet\kcutil.h	/^inline void* xcalloc(size_t nmemb, size_t size) {$/;"	f	namespace:kyotocabinet
xfree	src\storage\kdb\kyotocabinet\kcutil.h	/^inline void xfree(void* ptr) {$/;"	f	namespace:kyotocabinet
xmalloc	src\storage\kdb\kyotocabinet\kcutil.h	/^inline void* xmalloc(size_t size) {$/;"	f	namespace:kyotocabinet
xrealloc	src\storage\kdb\kyotocabinet\kcutil.h	/^inline void* xrealloc(void* ptr, size_t size) {$/;"	f	namespace:kyotocabinet
MYCDIRSTR	src\storage\kdb\kyotocabinet\myconf.h	147;"	d
MYCDIRSTR	src\storage\kdb\kyotocabinet\myconf.h	156;"	d
MYEXTCHR	src\storage\kdb\kyotocabinet\myconf.h	145;"	d
MYEXTCHR	src\storage\kdb\kyotocabinet\myconf.h	154;"	d
MYEXTSTR	src\storage\kdb\kyotocabinet\myconf.h	146;"	d
MYEXTSTR	src\storage\kdb\kyotocabinet\myconf.h	155;"	d
MYPATHCHR	src\storage\kdb\kyotocabinet\myconf.h	143;"	d
MYPATHCHR	src\storage\kdb\kyotocabinet\myconf.h	152;"	d
MYPATHSTR	src\storage\kdb\kyotocabinet\myconf.h	144;"	d
MYPATHSTR	src\storage\kdb\kyotocabinet\myconf.h	153;"	d
MYPDIRSTR	src\storage\kdb\kyotocabinet\myconf.h	148;"	d
MYPDIRSTR	src\storage\kdb\kyotocabinet\myconf.h	157;"	d
_KC_BIGEND	src\storage\kdb\kyotocabinet\myconf.h	101;"	d
_KC_BIGEND	src\storage\kdb\kyotocabinet\myconf.h	99;"	d
_KC_FMTVER	src\storage\kdb\kyotocabinet\myconf.h	96;"	d
_KC_GCCATOMIC	src\storage\kdb\kyotocabinet\myconf.h	105;"	d
_KC_GCCATOMIC	src\storage\kdb\kyotocabinet\myconf.h	107;"	d
_KC_LIBREV	src\storage\kdb\kyotocabinet\myconf.h	95;"	d
_KC_LIBVER	src\storage\kdb\kyotocabinet\myconf.h	94;"	d
_KC_LZMA	src\storage\kdb\kyotocabinet\myconf.h	123;"	d
_KC_LZMA	src\storage\kdb\kyotocabinet\myconf.h	125;"	d
_KC_LZO	src\storage\kdb\kyotocabinet\myconf.h	117;"	d
_KC_LZO	src\storage\kdb\kyotocabinet\myconf.h	119;"	d
_KC_PXREGEX	src\storage\kdb\kyotocabinet\myconf.h	129;"	d
_KC_PXREGEX	src\storage\kdb\kyotocabinet\myconf.h	131;"	d
_KC_SYSNAME	src\storage\kdb\kyotocabinet\myconf.h	29;"	d
_KC_SYSNAME	src\storage\kdb\kyotocabinet\myconf.h	34;"	d
_KC_SYSNAME	src\storage\kdb\kyotocabinet\myconf.h	39;"	d
_KC_SYSNAME	src\storage\kdb\kyotocabinet\myconf.h	44;"	d
_KC_SYSNAME	src\storage\kdb\kyotocabinet\myconf.h	49;"	d
_KC_SYSNAME	src\storage\kdb\kyotocabinet\myconf.h	54;"	d
_KC_SYSNAME	src\storage\kdb\kyotocabinet\myconf.h	59;"	d
_KC_SYSNAME	src\storage\kdb\kyotocabinet\myconf.h	64;"	d
_KC_SYSNAME	src\storage\kdb\kyotocabinet\myconf.h	69;"	d
_KC_SYSNAME	src\storage\kdb\kyotocabinet\myconf.h	74;"	d
_KC_SYSNAME	src\storage\kdb\kyotocabinet\myconf.h	79;"	d
_KC_SYSNAME	src\storage\kdb\kyotocabinet\myconf.h	84;"	d
_KC_SYSNAME	src\storage\kdb\kyotocabinet\myconf.h	89;"	d
_KC_VERSION	src\storage\kdb\kyotocabinet\myconf.h	93;"	d
_KC_ZLIB	src\storage\kdb\kyotocabinet\myconf.h	111;"	d
_KC_ZLIB	src\storage\kdb\kyotocabinet\myconf.h	113;"	d
_MYCONF_H	src\storage\kdb\kyotocabinet\myconf.h	17;"	d
_SYS_AIX_	src\storage\kdb\kyotocabinet\myconf.h	63;"	d
_SYS_CYGWIN_	src\storage\kdb\kyotocabinet\myconf.h	83;"	d
_SYS_FREEBSD_	src\storage\kdb\kyotocabinet\myconf.h	33;"	d
_SYS_GENERIC_	src\storage\kdb\kyotocabinet\myconf.h	88;"	d
_SYS_HPUX_	src\storage\kdb\kyotocabinet\myconf.h	53;"	d
_SYS_LINUX_	src\storage\kdb\kyotocabinet\myconf.h	28;"	d
_SYS_MACOSX_	src\storage\kdb\kyotocabinet\myconf.h	68;"	d
_SYS_MINGW_	src\storage\kdb\kyotocabinet\myconf.h	78;"	d
_SYS_MSVC_	src\storage\kdb\kyotocabinet\myconf.h	73;"	d
_SYS_NETBSD_	src\storage\kdb\kyotocabinet\myconf.h	38;"	d
_SYS_OPENBSD_	src\storage\kdb\kyotocabinet\myconf.h	43;"	d
_SYS_SUNOS_	src\storage\kdb\kyotocabinet\myconf.h	48;"	d
_SYS_TRU64_	src\storage\kdb\kyotocabinet\myconf.h	58;"	d
pthread_spin_destroy	src\storage\kdb\kyotocabinet\myconf.h	228;"	d
pthread_spin_init	src\storage\kdb\kyotocabinet\myconf.h	226;"	d
pthread_spin_lock	src\storage\kdb\kyotocabinet\myconf.h	230;"	d
pthread_spin_trylock	src\storage\kdb\kyotocabinet\myconf.h	232;"	d
pthread_spin_unlock	src\storage\kdb\kyotocabinet\myconf.h	234;"	d
pthread_spinlock_t	src\storage\kdb\kyotocabinet\myconf.h	225;"	d
init	src\storage\kdb\locker.cpp	/^      void locker::init()$/;"	f	class:tair::storage::kdb::locker
kdb	src\storage\kdb\locker.cpp	/^    namespace kdb {$/;"	n	namespace:tair::storage	file:
lock	src\storage\kdb\locker.cpp	/^      bool locker::lock(int index, bool is_write)$/;"	f	class:tair::storage::kdb::locker
locker	src\storage\kdb\locker.cpp	/^      locker::locker(int bucket_number)$/;"	f	class:tair::storage::kdb::locker
storage	src\storage\kdb\locker.cpp	/^  namespace storage {$/;"	n	namespace:tair	file:
tair	src\storage\kdb\locker.cpp	/^namespace tair {$/;"	n	file:
unlock	src\storage\kdb\locker.cpp	/^      bool locker::unlock(int index)$/;"	f	class:tair::storage::kdb::locker
~locker	src\storage\kdb\locker.cpp	/^      locker::~locker()$/;"	f	class:tair::storage::kdb::locker
TAIR_LOCKER_HPP	src\storage\kdb\locker.hpp	17;"	d
b_locks	src\storage\kdb\locker.hpp	/^          pthread_rwlock_t * b_locks;$/;"	m	class:tair::storage::kdb::locker
bucket_number	src\storage\kdb\locker.hpp	/^          int bucket_number;$/;"	m	class:tair::storage::kdb::locker
kdb	src\storage\kdb\locker.hpp	/^    namespace kdb {$/;"	n	namespace:tair::storage
locker	src\storage\kdb\locker.hpp	/^      class locker {$/;"	c	namespace:tair::storage::kdb
storage	src\storage\kdb\locker.hpp	/^  namespace storage {$/;"	n	namespace:tair
tair	src\storage\kdb\locker.hpp	/^namespace tair {$/;"	n
destory	src\storage\kdb\stat_manager.cpp	/^      void stat_manager::destory()$/;"	f	class:tair::storage::kdb::stat_manager
ensure_file_size	src\storage\kdb\stat_manager.cpp	/^      bool stat_manager::ensure_file_size(int size)$/;"	f	class:tair::storage::kdb::stat_manager
get_size	src\storage\kdb\stat_manager.cpp	/^      int stat_manager::get_size()$/;"	f	class:tair::storage::kdb::stat_manager
get_stat	src\storage\kdb\stat_manager.cpp	/^      tair_pstat* stat_manager::get_stat() const$/;"	f	class:tair::storage::kdb::stat_manager
initial_stat_file	src\storage\kdb\stat_manager.cpp	/^      bool stat_manager::initial_stat_file()$/;"	f	class:tair::storage::kdb::stat_manager
kdb	src\storage\kdb\stat_manager.cpp	/^    namespace kdb {$/;"	n	namespace:tair::storage	file:
start	src\storage\kdb\stat_manager.cpp	/^      bool stat_manager::start(int bucket_number, const char *file_dir)$/;"	f	class:tair::storage::kdb::stat_manager
stat_add	src\storage\kdb\stat_manager.cpp	/^      void stat_manager::stat_add(int area, int data_size, int use_size)$/;"	f	class:tair::storage::kdb::stat_manager
stat_manager	src\storage\kdb\stat_manager.cpp	/^      stat_manager::stat_manager()$/;"	f	class:tair::storage::kdb::stat_manager
stat_sub	src\storage\kdb\stat_manager.cpp	/^      void stat_manager::stat_sub(int area, int data_size, int use_size)$/;"	f	class:tair::storage::kdb::stat_manager
stop	src\storage\kdb\stat_manager.cpp	/^      void stat_manager::stop()$/;"	f	class:tair::storage::kdb::stat_manager
storage	src\storage\kdb\stat_manager.cpp	/^  namespace storage {$/;"	n	namespace:tair	file:
sync	src\storage\kdb\stat_manager.cpp	/^      bool stat_manager::sync(void)$/;"	f	class:tair::storage::kdb::stat_manager
tair	src\storage\kdb\stat_manager.cpp	/^namespace tair {$/;"	n	file:
~stat_manager	src\storage\kdb\stat_manager.cpp	/^      stat_manager::~stat_manager()$/;"	f	class:tair::storage::kdb::stat_manager
KDBSTATINFO_MAGIC_SIZE	src\storage\kdb\stat_manager.h	/^    const static int KDBSTATINFO_MAGIC_SIZE = 16;$/;"	m	namespace:tair::storage
KDBSTATINFO_SIZE	src\storage\kdb\stat_manager.h	/^      const static size_t KDBSTATINFO_SIZE = sizeof(kdb_stat_info);$/;"	m	namespace:tair::storage::kdb
PATH_MAX_LENGTH	src\storage\kdb\stat_manager.h	/^        const static int PATH_MAX_LENGTH = 1024;$/;"	m	class:tair::storage::kdb::stat_manager
STAT_MAGIC	src\storage\kdb\stat_manager.h	/^      const static char STAT_MAGIC[16] = "TAIR_STAT_200";$/;"	m	namespace:tair::storage::kdb
TAIR_KDB_STAT_MANAGER_H	src\storage\kdb\stat_manager.h	9;"	d
fd	src\storage\kdb\stat_manager.h	/^          int fd;$/;"	m	class:tair::storage::kdb::stat_manager
file_name	src\storage\kdb\stat_manager.h	/^          char file_name[PATH_MAX_LENGTH];$/;"	m	class:tair::storage::kdb::stat_manager
flag	src\storage\kdb\stat_manager.h	/^        uint8_t flag;$/;"	m	struct:tair::storage::kdb::kdb_stat_info
kdb	src\storage\kdb\stat_manager.h	/^    namespace kdb {$/;"	n	namespace:tair::storage
kdb_stat_info	src\storage\kdb\stat_manager.h	/^      struct kdb_stat_info {$/;"	s	namespace:tair::storage::kdb
magic	src\storage\kdb\stat_manager.h	/^        char magic[KDBSTATINFO_MAGIC_SIZE];$/;"	m	struct:tair::storage::kdb::kdb_stat_info
stat	src\storage\kdb\stat_manager.h	/^        tair_pstat stat[TAIR_MAX_AREA_COUNT];$/;"	m	struct:tair::storage::kdb::kdb_stat_info
stat_info	src\storage\kdb\stat_manager.h	/^          kdb_stat_info * stat_info;$/;"	m	class:tair::storage::kdb::stat_manager
stat_lock	src\storage\kdb\stat_manager.h	/^          tbsys::CThreadMutex stat_lock;$/;"	m	class:tair::storage::kdb::stat_manager
stat_manager	src\storage\kdb\stat_manager.h	/^      class stat_manager {$/;"	c	namespace:tair::storage::kdb
storage	src\storage\kdb\stat_manager.h	/^  namespace storage {$/;"	n	namespace:tair
tair	src\storage\kdb\stat_manager.h	/^namespace tair {$/;"	n
__find	src\storage\mdb\cache_hashmap.cpp	/^  mdb_item *cache_hash_map::__find(uint64_t head, const char *key,$/;"	f	class:tair::cache_hash_map
find	src\storage\mdb\cache_hashmap.cpp	/^  mdb_item *cache_hash_map::find(const char *key, unsigned int key_len)$/;"	f	class:tair::cache_hash_map
get_bucket_index	src\storage\mdb\cache_hashmap.cpp	/^  inline int cache_hash_map::get_bucket_index(const char *key,$/;"	f	class:tair::cache_hash_map
get_bucket_index	src\storage\mdb\cache_hashmap.cpp	/^  inline int cache_hash_map::get_bucket_index(mdb_item * item)$/;"	f	class:tair::cache_hash_map
hash	src\storage\mdb\cache_hashmap.cpp	/^  unsigned int cache_hash_map::hash(const char *key, int len)$/;"	f	class:tair::cache_hash_map
insert	src\storage\mdb\cache_hashmap.cpp	/^  void cache_hash_map::insert(mdb_item * item)$/;"	f	class:tair::cache_hash_map
remove	src\storage\mdb\cache_hashmap.cpp	/^  bool cache_hash_map::remove(mdb_item * item)$/;"	f	class:tair::cache_hash_map
tair	src\storage\mdb\cache_hashmap.cpp	/^namespace tair {$/;"	n	file:
__HASH_TABLE_H	src\storage\mdb\cache_hashmap.hpp	16;"	d
bucket_size	src\storage\mdb\cache_hashmap.hpp	/^      int bucket_size;$/;"	m	struct:tair::cache_hash_map::hash_manager
cache_hash_map	src\storage\mdb\cache_hashmap.hpp	/^    cache_hash_map(mem_pool * pool,$/;"	f	class:tair::cache_hash_map
cache_hash_map	src\storage\mdb\cache_hashmap.hpp	/^  class cache_hash_map {$/;"	c	namespace:tair
get_bucket_size	src\storage\mdb\cache_hashmap.hpp	/^    int get_bucket_size()$/;"	f	class:tair::cache_hash_map
get_hashmap	src\storage\mdb\cache_hashmap.hpp	/^    uint64_t *get_hashmap()$/;"	f	class:tair::cache_hash_map
get_item_count	src\storage\mdb\cache_hashmap.hpp	/^    int get_item_count()$/;"	f	class:tair::cache_hash_map
hash_manager	src\storage\mdb\cache_hashmap.hpp	/^    struct hash_manager$/;"	s	class:tair::cache_hash_map
hashmng	src\storage\mdb\cache_hashmap.hpp	/^    hash_manager *hashmng;$/;"	m	class:tair::cache_hash_map
hashtable	src\storage\mdb\cache_hashmap.hpp	/^    uint64_t *hashtable;$/;"	m	class:tair::cache_hash_map
is_inited	src\storage\mdb\cache_hashmap.hpp	/^      int is_inited;$/;"	m	struct:tair::cache_hash_map::hash_manager
item_count	src\storage\mdb\cache_hashmap.hpp	/^      int item_count;$/;"	m	struct:tair::cache_hash_map::hash_manager
start_page	src\storage\mdb\cache_hashmap.hpp	/^      int start_page;$/;"	m	struct:tair::cache_hash_map::hash_manager
tair	src\storage\mdb\cache_hashmap.hpp	/^namespace tair {$/;"	n
this_mem_pool	src\storage\mdb\cache_hashmap.hpp	/^    mem_pool *this_mem_pool;$/;"	m	class:tair::cache_hash_map
~cache_hash_map	src\storage\mdb\cache_hashmap.hpp	/^    ~cache_hash_map() {$/;"	f	class:tair::cache_hash_map
main	src\storage\mdb\mdb_area_test.cpp	/^main(int argc, char *argv[])$/;"	f
test	src\storage\mdb\mdb_area_test.cpp	/^test()$/;"	f
chkexprd_time_high	src\storage\mdb\mdb_define.cpp	/^int mdb_param::chkexprd_time_high = 4;$/;"	m	class:mdb_param	file:
chkexprd_time_low	src\storage\mdb\mdb_define.cpp	/^int mdb_param::chkexprd_time_low = 2;$/;"	m	class:mdb_param	file:
chkslab_time_high	src\storage\mdb\mdb_define.cpp	/^int mdb_param::chkslab_time_high = 7;$/;"	m	class:mdb_param	file:
chkslab_time_low	src\storage\mdb\mdb_define.cpp	/^int mdb_param::chkslab_time_low = 5;$/;"	m	class:mdb_param	file:
factor	src\storage\mdb\mdb_define.cpp	/^double mdb_param::factor = 1.1;$/;"	m	class:mdb_param	file:
hash_shift	src\storage\mdb\mdb_define.cpp	/^int mdb_param::hash_shift = 23;$/;"	m	class:mdb_param	file:
hour_range	src\storage\mdb\mdb_define.cpp	/^hour_range(int min, int max)$/;"	f
mdb_path	src\storage\mdb\mdb_define.cpp	/^const char * mdb_param::mdb_path = "mdb_shm_path01";$/;"	m	class:mdb_param	file:
page_size	src\storage\mdb\mdb_define.cpp	/^int mdb_param::page_size = (1 << 20);$/;"	m	class:mdb_param	file:
size	src\storage\mdb\mdb_define.cpp	/^int64_t mdb_param::size = (1 << 31);$/;"	m	class:mdb_param	file:
slab_base_size	src\storage\mdb\mdb_define.cpp	/^int mdb_param::slab_base_size = 64;$/;"	m	class:mdb_param	file:
MDB_DEFINE_H_	src\storage\mdb\mdb_define.hpp	16;"	d
TAIR_SLAB_ALIGN_BYTES	src\storage\mdb\mdb_define.hpp	20;"	d
TAIR_SLAB_BLOCK	src\storage\mdb\mdb_define.hpp	19;"	d
TAIR_SLAB_HASH_MAXDEPTH	src\storage\mdb\mdb_define.hpp	21;"	d
TAIR_SLAB_LARGEST	src\storage\mdb\mdb_define.hpp	18;"	d
chkexprd_time_high	src\storage\mdb\mdb_define.hpp	/^  static int chkexprd_time_high;$/;"	m	struct:mdb_param
chkexprd_time_low	src\storage\mdb\mdb_define.hpp	/^  static int chkexprd_time_low;$/;"	m	struct:mdb_param
chkslab_time_high	src\storage\mdb\mdb_define.hpp	/^  static int chkslab_time_high;$/;"	m	struct:mdb_param
chkslab_time_low	src\storage\mdb\mdb_define.hpp	/^  static int chkslab_time_low;$/;"	m	struct:mdb_param
factor	src\storage\mdb\mdb_define.hpp	/^  static double factor;$/;"	m	struct:mdb_param
hash_shift	src\storage\mdb\mdb_define.hpp	/^  static int hash_shift;$/;"	m	struct:mdb_param
mdb_param	src\storage\mdb\mdb_define.hpp	/^struct mdb_param$/;"	s
mdb_path	src\storage\mdb\mdb_define.hpp	/^  static const char *mdb_path;$/;"	m	struct:mdb_param
page_size	src\storage\mdb\mdb_define.hpp	/^  static int page_size;$/;"	m	struct:mdb_param
size	src\storage\mdb\mdb_define.hpp	/^  static int64_t size;$/;"	m	struct:mdb_param
slab_base_size	src\storage\mdb\mdb_define.hpp	/^  static int slab_base_size;$/;"	m	struct:mdb_param
create_embedded_mdb	src\storage\mdb\mdb_factory.cpp	/^  storage::storage_manager * mdb_factory::create_embedded_mdb(int64_t memsize,$/;"	f	class:tair::mdb_factory
create_mdb_manager	src\storage\mdb\mdb_factory.cpp	/^  storage::storage_manager * mdb_factory::create_mdb_manager(bool is_embedded,$/;"	f	class:tair::mdb_factory
tair	src\storage\mdb\mdb_factory.cpp	/^namespace tair {$/;"	n	file:
TAIR_STORAGE_MDB_FACTORY_H	src\storage\mdb\mdb_factory.hpp	16;"	d
mdb_factory	src\storage\mdb\mdb_factory.hpp	/^  class mdb_factory {$/;"	c	namespace:tair
tair	src\storage\mdb\mdb_factory.hpp	/^namespace tair {$/;"	n
__remove	src\storage\mdb\mdb_manager.cpp	/^  void mdb_manager::__remove(mdb_item * it)$/;"	f	class:tair::mdb_manager
balance_slab	src\storage\mdb\mdb_manager.cpp	/^  void mdb_manager::balance_slab()$/;"	f	class:tair::mdb_manager
begin_scan	src\storage\mdb\mdb_manager.cpp	/^  void mdb_manager::begin_scan(md_info & info)$/;"	f	class:tair::mdb_manager
check_quota	src\storage\mdb\mdb_manager.cpp	/^  void mdb_manager::check_quota()$/;"	f	class:tair::mdb_manager
clear	src\storage\mdb\mdb_manager.cpp	/^  int mdb_manager::clear(int area)$/;"	f	class:tair::mdb_manager
close_buckets	src\storage\mdb\mdb_manager.cpp	/^  void mdb_manager::close_buckets(const vector<int> &buckets)$/;"	f	class:tair::mdb_manager
do_get	src\storage\mdb\mdb_manager.cpp	/^  int mdb_manager::do_get(data_entry & key, data_entry & data)$/;"	f	class:tair::mdb_manager
do_put	src\storage\mdb\mdb_manager.cpp	/^  int mdb_manager::do_put(data_entry & key, data_entry & data,$/;"	f	class:tair::mdb_manager
do_remove	src\storage\mdb\mdb_manager.cpp	/^  int mdb_manager::do_remove(data_entry & key, bool version_care)$/;"	f	class:tair::mdb_manager
get	src\storage\mdb\mdb_manager.cpp	/^  int mdb_manager::get(int bucket_num, data_entry & key, data_entry & value)$/;"	f	class:tair::mdb_manager
get_area_quota	src\storage\mdb\mdb_manager.cpp	/^  int mdb_manager::get_area_quota(std::map<int, uint64_t> &quota_map)$/;"	f	class:tair::mdb_manager
get_area_quota	src\storage\mdb\mdb_manager.cpp	/^  uint64_t mdb_manager::get_area_quota(int area)$/;"	f	class:tair::mdb_manager
get_area_size	src\storage\mdb\mdb_manager.cpp	/^  vector<int> mdb_manager::get_area_size()$/;"	f	class:tair::mdb_manager
get_areas	src\storage\mdb\mdb_manager.cpp	/^  vector<int> mdb_manager::get_areas()$/;"	f	class:tair::mdb_manager
get_next_items	src\storage\mdb\mdb_manager.cpp	/^  bool mdb_manager::get_next_items(md_info & info,$/;"	f	class:tair::mdb_manager
get_slab_size	src\storage\mdb\mdb_manager.cpp	/^  map<int, int> mdb_manager::get_slab_size()$/;"	f	class:tair::mdb_manager
get_stats	src\storage\mdb\mdb_manager.cpp	/^  void mdb_manager::get_stats(tair_stat * stat)$/;"	f	class:tair::mdb_manager
init_buckets	src\storage\mdb\mdb_manager.cpp	/^  bool mdb_manager::init_buckets(const vector<int> &buckets)$/;"	f	class:tair::mdb_manager
initialize	src\storage\mdb\mdb_manager.cpp	/^  bool mdb_manager::initialize(bool use_share_mem \/*=true*\/ )$/;"	f	class:tair::mdb_manager
is_chkexprd_time	src\storage\mdb\mdb_manager.cpp	/^  bool mdb_manager::is_chkexprd_time()$/;"	f	class:tair::mdb_manager
is_chkslab_time	src\storage\mdb\mdb_manager.cpp	/^  bool mdb_manager::is_chkslab_time()$/;"	f	class:tair::mdb_manager
is_quota_exceed	src\storage\mdb\mdb_manager.cpp	/^  bool mdb_manager::is_quota_exceed(int area)$/;"	f	class:tair::mdb_manager
open_shared_mem	src\storage\mdb\mdb_manager.cpp	/^  char *mdb_manager::open_shared_mem(const char *path, int64_t size)$/;"	f	class:tair::mdb_manager
put	src\storage\mdb\mdb_manager.cpp	/^  int mdb_manager::put(int bucket_num, data_entry & key, data_entry & value,$/;"	f	class:tair::mdb_manager
remove	src\storage\mdb\mdb_manager.cpp	/^  int mdb_manager::remove(int bucket_num, data_entry & key, bool version_care)$/;"	f	class:tair::mdb_manager
remove_deleted_item	src\storage\mdb\mdb_manager.cpp	/^  void mdb_manager::remove_deleted_item()$/;"	f	class:tair::mdb_manager
remove_exprd_item	src\storage\mdb\mdb_manager.cpp	/^  void mdb_manager::remove_exprd_item()$/;"	f	class:tair::mdb_manager
remove_if_exists	src\storage\mdb\mdb_manager.cpp	/^  bool mdb_manager::remove_if_exists(data_entry & key)$/;"	f	class:tair::mdb_manager
remove_if_expired	src\storage\mdb\mdb_manager.cpp	/^  bool mdb_manager::remove_if_expired(data_entry & key, mdb_item * &item)$/;"	f	class:tair::mdb_manager
run	src\storage\mdb\mdb_manager.cpp	/^  void mdb_manager::run(tbsys::CThread * thread, void *arg)$/;"	f	class:tair::mdb_manager
run_chkexprd_deleted	src\storage\mdb\mdb_manager.cpp	/^  void mdb_manager::run_chkexprd_deleted()$/;"	f	class:tair::mdb_manager
run_chkslab	src\storage\mdb\mdb_manager.cpp	/^  void mdb_manager::run_chkslab()$/;"	f	class:tair::mdb_manager
set_area_quota	src\storage\mdb\mdb_manager.cpp	/^  void mdb_manager::set_area_quota(int area, uint64_t quota)$/;"	f	class:tair::mdb_manager
set_area_quota	src\storage\mdb\mdb_manager.cpp	/^  void mdb_manager::set_area_quota(map<int, uint64_t> &quota_map)$/;"	f	class:tair::mdb_manager
tair	src\storage\mdb\mdb_manager.cpp	/^namespace tair {$/;"	n	file:
~mdb_manager	src\storage\mdb\mdb_manager.cpp	/^  mdb_manager::~mdb_manager() {$/;"	f	class:tair::mdb_manager
__MDB_MANAGER_H	src\storage\mdb\mdb_manager.hpp	15;"	d
area_stat	src\storage\mdb\mdb_manager.hpp	/^    mdb_area_stat *area_stat[TAIR_MAX_AREA_COUNT];$/;"	m	class:tair::mdb_manager
cache	src\storage\mdb\mdb_manager.hpp	/^    mem_cache *cache;$/;"	m	class:tair::mdb_manager
chkexprd_thread	src\storage\mdb\mdb_manager.hpp	/^    tbsys::CThread chkexprd_thread;$/;"	m	class:tair::mdb_manager
chkslab_thread	src\storage\mdb\mdb_manager.hpp	/^    tbsys::CThread chkslab_thread;$/;"	m	class:tair::mdb_manager
end_scan	src\storage\mdb\mdb_manager.hpp	/^    void end_scan(md_info & info)$/;"	f	class:tair::mdb_manager
hashmap	src\storage\mdb\mdb_manager.hpp	/^    cache_hash_map *hashmap;$/;"	m	class:tair::mdb_manager
last_balance_time	src\storage\mdb\mdb_manager.hpp	/^    uint32_t last_balance_time;$/;"	m	class:tair::mdb_manager
last_traversal_time	src\storage\mdb\mdb_manager.hpp	/^    uint32_t last_traversal_time;        \/\/record the last time of traversal$/;"	m	class:tair::mdb_manager
mdb_manager	src\storage\mdb\mdb_manager.hpp	/^    mdb_manager():this_mem_pool(0), cache(0), hashmap(0),$/;"	f	class:tair::mdb_manager
mdb_manager	src\storage\mdb\mdb_manager.hpp	/^  class mdb_manager:public storage::storage_manager, public tbsys::Runnable$/;"	c	namespace:tair
mem_locker	src\storage\mdb\mdb_manager.hpp	/^    boost::mutex mem_locker;$/;"	m	class:tair::mdb_manager
stopped	src\storage\mdb\mdb_manager.hpp	/^    bool stopped;$/;"	m	class:tair::mdb_manager
tair	src\storage\mdb\mdb_manager.hpp	/^namespace tair {$/;"	n
this_mem_pool	src\storage\mdb\mdb_manager.hpp	/^    mem_pool *this_mem_pool;$/;"	m	class:tair::mdb_manager
main	src\storage\mdb\mdb_slab_test.cpp	/^main(int argc, char *argv[])$/;"	f
test	src\storage\mdb\mdb_slab_test.cpp	/^test()$/;"	f
MDB_STAT_H	src\storage\mdb\mdb_stat.hpp	16;"	d
TAIR_DIFF_VALUE	src\storage\mdb\mdb_stat.hpp	20;"	d
addStat	src\storage\mdb\mdb_stat.hpp	/^    void addStat(tair_mdb_stat & stat)$/;"	f	class:tair::tair_mdb_stat
bucket_size	src\storage\mdb\mdb_stat.hpp	/^    uint32_t bucket_size;$/;"	m	class:tair::tair_hash_stat
curr_load	src\storage\mdb\mdb_stat.hpp	/^    uint32_t curr_load;$/;"	m	class:tair::tair_mdb_stat
data_size	src\storage\mdb\mdb_stat.hpp	/^    uint64_t data_size;$/;"	m	class:tair::mdb_area_stat
data_size	src\storage\mdb\mdb_stat.hpp	/^    uint64_t data_size;$/;"	m	class:tair::tair_mdb_stat
evict_count	src\storage\mdb\mdb_stat.hpp	/^    uint64_t evict_count;$/;"	m	class:tair::mdb_area_stat
evict_count	src\storage\mdb\mdb_stat.hpp	/^    uint64_t evict_count;$/;"	m	class:tair::tair_mdb_stat
evict_count	src\storage\mdb\mdb_stat.hpp	/^    uint64_t evict_count;$/;"	m	class:tair::tair_slab_stat
evict_count	src\storage\mdb\mdb_stat.hpp	/^    uint64_t evict_count;$/;"	m	class:tair::tair_stat_ratio
evict_count_ratio	src\storage\mdb\mdb_stat.hpp	/^    int evict_count_ratio;$/;"	m	class:tair::tair_stat_ratio
expand_bucket	src\storage\mdb\mdb_stat.hpp	/^    uint32_t expand_bucket;$/;"	m	class:tair::tair_hash_stat
expanding	src\storage\mdb\mdb_stat.hpp	/^    int expanding;$/;"	m	class:tair::tair_hash_stat
get_count	src\storage\mdb\mdb_stat.hpp	/^      uint64_t get_count;$/;"	m	class:tair::tair_mdb_stat
get_count	src\storage\mdb\mdb_stat.hpp	/^    uint64_t get_count;$/;"	m	class:tair::mdb_area_stat
get_count	src\storage\mdb\mdb_stat.hpp	/^    uint64_t get_count;$/;"	m	class:tair::tair_stat_ratio
get_count_ratio	src\storage\mdb\mdb_stat.hpp	/^    int get_count_ratio;$/;"	m	class:tair::tair_stat_ratio
hit_count	src\storage\mdb\mdb_stat.hpp	/^    uint64_t hit_count;$/;"	m	class:tair::mdb_area_stat
hit_count	src\storage\mdb\mdb_stat.hpp	/^    uint64_t hit_count;$/;"	m	class:tair::tair_mdb_stat
hit_count	src\storage\mdb\mdb_stat.hpp	/^    uint64_t hit_count;$/;"	m	class:tair::tair_stat_ratio
hit_count_ratio	src\storage\mdb\mdb_stat.hpp	/^    int hit_count_ratio;$/;"	m	class:tair::tair_stat_ratio
item_count	src\storage\mdb\mdb_stat.hpp	/^    uint32_t item_count;        \/\/ mdb_item count in slab$/;"	m	class:tair::tair_slab_stat
item_count	src\storage\mdb\mdb_stat.hpp	/^    uint32_t item_count;$/;"	m	class:tair::tair_hash_stat
item_count	src\storage\mdb\mdb_stat.hpp	/^    uint32_t item_count;$/;"	m	class:tair::tair_mdb_stat
item_count	src\storage\mdb\mdb_stat.hpp	/^    uint64_t item_count;$/;"	m	class:tair::mdb_area_stat
last_update_time	src\storage\mdb\mdb_stat.hpp	/^    uint64_t last_update_time;$/;"	m	class:tair::tair_stat_ratio
link_depth	src\storage\mdb\mdb_stat.hpp	/^    int link_depth[TAIR_SLAB_HASH_MAXDEPTH];$/;"	m	class:tair::tair_hash_stat
mdb_area_stat	src\storage\mdb\mdb_stat.hpp	/^  class mdb_area_stat$/;"	c	namespace:tair
old_bucket_size	src\storage\mdb\mdb_stat.hpp	/^    uint32_t old_bucket_size;$/;"	m	class:tair::tair_hash_stat
page_size	src\storage\mdb\mdb_stat.hpp	/^    uint32_t page_size;                \/\/ page count per slab$/;"	m	class:tair::tair_slab_stat
perslab	src\storage\mdb\mdb_stat.hpp	/^    uint32_t perslab;                \/\/ mdb_item count per page$/;"	m	class:tair::tair_slab_stat
put_count	src\storage\mdb\mdb_stat.hpp	/^    uint64_t put_count;$/;"	m	class:tair::mdb_area_stat
put_count	src\storage\mdb\mdb_stat.hpp	/^    uint64_t put_count;$/;"	m	class:tair::tair_mdb_stat
put_count	src\storage\mdb\mdb_stat.hpp	/^    uint64_t put_count;$/;"	m	class:tair::tair_stat_ratio
put_count_ratio	src\storage\mdb\mdb_stat.hpp	/^    int put_count_ratio;$/;"	m	class:tair::tair_stat_ratio
quota	src\storage\mdb\mdb_stat.hpp	/^    uint64_t quota;$/;"	m	class:tair::mdb_area_stat
read_bytes	src\storage\mdb\mdb_stat.hpp	/^    uint64_t read_bytes;$/;"	m	class:tair::tair_mdb_stat
read_bytes	src\storage\mdb\mdb_stat.hpp	/^    uint64_t read_bytes;$/;"	m	class:tair::tair_stat_ratio
read_bytes_ratio	src\storage\mdb\mdb_stat.hpp	/^    int read_bytes_ratio;$/;"	m	class:tair::tair_stat_ratio
remove_count	src\storage\mdb\mdb_stat.hpp	/^    uint64_t remove_count;$/;"	m	class:tair::mdb_area_stat
remove_count	src\storage\mdb\mdb_stat.hpp	/^    uint64_t remove_count;$/;"	m	class:tair::tair_mdb_stat
remove_count	src\storage\mdb\mdb_stat.hpp	/^    uint64_t remove_count;$/;"	m	class:tair::tair_stat_ratio
remove_count_ratio	src\storage\mdb\mdb_stat.hpp	/^    int remove_count_ratio;$/;"	m	class:tair::tair_stat_ratio
request_count	src\storage\mdb\mdb_stat.hpp	/^    uint64_t request_count;$/;"	m	class:tair::tair_mdb_stat
request_count	src\storage\mdb\mdb_stat.hpp	/^    uint64_t request_count;$/;"	m	class:tair::tair_stat_ratio
request_count_ratio	src\storage\mdb\mdb_stat.hpp	/^    int request_count_ratio;$/;"	m	class:tair::tair_stat_ratio
size	src\storage\mdb\mdb_stat.hpp	/^    uint32_t size;                \/\/mdb_item size$/;"	m	class:tair::tair_slab_stat
slabId	src\storage\mdb\mdb_stat.hpp	/^    uint32_t slabId;                \/\/ slabId;$/;"	m	class:tair::tair_slab_stat
space_usage	src\storage\mdb\mdb_stat.hpp	/^    uint64_t space_usage;$/;"	m	class:tair::mdb_area_stat
startup_time	src\storage\mdb\mdb_stat.hpp	/^    uint32_t startup_time;$/;"	m	class:tair::tair_mdb_stat
tair	src\storage\mdb\mdb_stat.hpp	/^namespace tair {$/;"	n
tair_hash_stat	src\storage\mdb\mdb_stat.hpp	/^  class tair_hash_stat$/;"	c	namespace:tair
tair_mdb_stat	src\storage\mdb\mdb_stat.hpp	/^    tair_mdb_stat()$/;"	f	class:tair::tair_mdb_stat
tair_mdb_stat	src\storage\mdb\mdb_stat.hpp	/^  class tair_mdb_stat {$/;"	c	namespace:tair
tair_slab_stat	src\storage\mdb\mdb_stat.hpp	/^  class tair_slab_stat$/;"	c	namespace:tair
tair_stat_ratio	src\storage\mdb\mdb_stat.hpp	/^    tair_stat_ratio()$/;"	f	class:tair::tair_stat_ratio
tair_stat_ratio	src\storage\mdb\mdb_stat.hpp	/^  class tair_stat_ratio$/;"	c	namespace:tair
update	src\storage\mdb\mdb_stat.hpp	/^    void update(tair_mdb_stat * stat_info)$/;"	f	class:tair::tair_stat_ratio
use_size	src\storage\mdb\mdb_stat.hpp	/^    uint64_t use_size;$/;"	m	class:tair::tair_mdb_stat
write_bytes	src\storage\mdb\mdb_stat.hpp	/^    uint64_t write_bytes;$/;"	m	class:tair::tair_mdb_stat
write_bytes	src\storage\mdb\mdb_stat.hpp	/^    uint64_t write_bytes;$/;"	m	class:tair::tair_stat_ratio
write_bytes_ratio	src\storage\mdb\mdb_stat.hpp	/^    int write_bytes_ratio;$/;"	m	class:tair::tair_stat_ratio
area	src\storage\mdb\mdb_test.cpp	/^  int area;$/;"	m	struct:thread_arg	file:
cm	src\storage\mdb\mdb_test.cpp	/^    storage::storage_manager * cm;$/;"	m	struct:thread_arg	file:
failed	src\storage\mdb\mdb_test.cpp	/^  volatile int failed;$/;"	m	struct:thread_arg	file:
get_thread	src\storage\mdb\mdb_test.cpp	/^get_thread(void *arg)$/;"	f
id	src\storage\mdb\mdb_test.cpp	/^  pthread_t id;$/;"	m	struct:thread_arg	file:
index	src\storage\mdb\mdb_test.cpp	/^  int index;$/;"	m	struct:thread_arg	file:
items_between_each_report	src\storage\mdb\mdb_test.cpp	/^  int items_between_each_report;$/;"	m	struct:thread_arg	file:
key_base	src\storage\mdb\mdb_test.cpp	/^  int key_base;$/;"	m	struct:thread_arg	file:
main	src\storage\mdb\mdb_test.cpp	/^main(int argc, char *argv[])$/;"	f
max_data_size	src\storage\mdb\mdb_test.cpp	/^  int max_data_size;$/;"	m	struct:thread_arg	file:
max_loop	src\storage\mdb\mdb_test.cpp	/^  int max_loop;$/;"	m	struct:thread_arg	file:
min_data_size	src\storage\mdb\mdb_test.cpp	/^  int min_data_size;$/;"	m	struct:thread_arg	file:
put_thread	src\storage\mdb\mdb_test.cpp	/^put_thread(void *arg)$/;"	f
remove_thread	src\storage\mdb\mdb_test.cpp	/^remove_thread(void *arg)$/;"	f
success	src\storage\mdb\mdb_test.cpp	/^  volatile int success;$/;"	m	struct:thread_arg	file:
thread_arg	src\storage\mdb\mdb_test.cpp	/^struct thread_arg$/;"	s	file:
total_time	src\storage\mdb\mdb_test.cpp	/^  volatile time_t total_time;$/;"	m	struct:thread_arg	file:
usage	src\storage\mdb\mdb_test.cpp	/^usage(const char *prog)$/;"	f
alloc_item	src\storage\mdb\mem_cache.cpp	/^  mdb_item *mem_cache::alloc_item(int size, int &type)$/;"	f	class:tair::mem_cache
alloc_item	src\storage\mdb\mem_cache.cpp	/^  mdb_item *mem_cache::slab_manager::alloc_item(int &type)$/;"	f	class:tair::mem_cache::slab_manager
alloc_new_item	src\storage\mdb\mem_cache.cpp	/^  mdb_item *mem_cache::slab_manager::alloc_new_item(int area)$/;"	f	class:tair::mem_cache::slab_manager
balance_slab_done	src\storage\mdb\mem_cache.cpp	/^  void mem_cache::balance_slab_done()$/;"	f	class:tair::mem_cache
calc_slab_balance_info	src\storage\mdb\mem_cache.cpp	/^  void mem_cache::calc_slab_balance_info(std::map<int, int> &adjust_info)$/;"	f	class:tair::mem_cache
clear_page	src\storage\mdb\mem_cache.cpp	/^  void mem_cache::clear_page(slab_manager * slab_mng, char *page)$/;"	f	class:tair::mem_cache
display_statics	src\storage\mdb\mem_cache.cpp	/^  void mem_cache::display_statics()$/;"	f	class:tair::mem_cache
display_statics	src\storage\mdb\mem_cache.cpp	/^  void mem_cache::slab_manager::display_statics()$/;"	f	class:tair::mem_cache::slab_manager
dump_item	src\storage\mdb\mem_cache.cpp	/^  void mem_cache::slab_manager::dump_item(mdb_item * item)$/;"	f	class:tair::mem_cache::slab_manager
evict_any	src\storage\mdb\mem_cache.cpp	/^  mdb_item *mem_cache::slab_manager::evict_any(int &type)$/;"	f	class:tair::mem_cache::slab_manager
evict_self	src\storage\mdb\mem_cache.cpp	/^  mdb_item *mem_cache::slab_manager::evict_self(int &type)$/;"	f	class:tair::mem_cache::slab_manager
free_item	src\storage\mdb\mem_cache.cpp	/^  void mem_cache::free_item(mdb_item * item)$/;"	f	class:tair::mem_cache
free_item	src\storage\mdb\mem_cache.cpp	/^  void mem_cache::slab_manager::free_item(mdb_item * item)$/;"	f	class:tair::mem_cache::slab_manager
free_page	src\storage\mdb\mem_cache.cpp	/^  int mem_cache::free_page(int slab_id)$/;"	f	class:tair::mem_cache
get_area_size	src\storage\mdb\mem_cache.cpp	/^  vector<int>mem_cache::get_area_size()$/;"	f	class:tair::mem_cache
get_item_head	src\storage\mdb\mem_cache.cpp	/^  uint64_t mem_cache::get_item_head(int slab_id, int area)$/;"	f	class:tair::mem_cache
get_slab_info	src\storage\mdb\mem_cache.cpp	/^  bool mem_cache::get_slab_info()$/;"	f	class:tair::mem_cache
get_slab_size	src\storage\mdb\mem_cache.cpp	/^  map<int, int>mem_cache::get_slab_size()$/;"	f	class:tair::mem_cache
get_slabmng	src\storage\mdb\mem_cache.cpp	/^  mem_cache::slab_manager * mem_cache::get_slabmng(int size)$/;"	f	class:tair::mem_cache
get_slabs_count	src\storage\mdb\mem_cache.cpp	/^  int mem_cache::get_slabs_count()$/;"	f	class:tair::mem_cache
init_page	src\storage\mdb\mem_cache.cpp	/^  void mem_cache::slab_manager::init_page(char *page, int index)$/;"	f	class:tair::mem_cache::slab_manager
initialize	src\storage\mdb\mem_cache.cpp	/^  bool mem_cache::initialize(int max_slab_id, int base_size, float factor)$/;"	f	class:tair::mem_cache
is_quota_exceed	src\storage\mdb\mem_cache.cpp	/^  bool mem_cache::is_quota_exceed(int area)$/;"	f	class:tair::mem_cache
keep_area_quota	src\storage\mdb\mem_cache.cpp	/^  void mem_cache::keep_area_quota(int area, int exceed)$/;"	f	class:tair::mem_cache
link_item	src\storage\mdb\mem_cache.cpp	/^  void mem_cache::slab_manager::link_item(mdb_item * item, int area)$/;"	f	class:tair::mem_cache::slab_manager
link_page	src\storage\mdb\mem_cache.cpp	/^  void mem_cache::slab_manager::link_page(page_info * info,$/;"	f	class:tair::mem_cache::slab_manager
pre_alloc	src\storage\mdb\mem_cache.cpp	/^  int mem_cache::slab_manager::pre_alloc(int pages)$/;"	f	class:tair::mem_cache::slab_manager
slab_initialize	src\storage\mdb\mem_cache.cpp	/^  bool mem_cache::slab_initialize()$/;"	f	class:tair::mem_cache
tair	src\storage\mdb\mem_cache.cpp	/^namespace tair {$/;"	n	file:
unlink_item	src\storage\mdb\mem_cache.cpp	/^  void mem_cache::slab_manager::unlink_item(mdb_item * item)$/;"	f	class:tair::mem_cache::slab_manager
unlink_page	src\storage\mdb\mem_cache.cpp	/^  void mem_cache::slab_manager::unlink_page(page_info * info,$/;"	f	class:tair::mem_cache::slab_manager
update_item	src\storage\mdb\mem_cache.cpp	/^  void mem_cache::slab_manager::update_item(mdb_item * item, int area)$/;"	f	class:tair::mem_cache::slab_manager
update_item	src\storage\mdb\mem_cache.cpp	/^  void mem_cache::update_item(mdb_item * item)$/;"	f	class:tair::mem_cache
ALIGN	src\storage\mdb\mem_cache.hpp	85;"	d
ALIGN_SIZE	src\storage\mdb\mem_cache.hpp	/^    static const int ALIGN_SIZE = 8;$/;"	m	class:tair::mem_cache
ALLOC_EVICT_ANY	src\storage\mdb\mem_cache.hpp	/^    ALLOC_EVICT_ANY,                \/*  *\/$/;"	e	enum:tair::alloc_type
ALLOC_EVICT_SELF	src\storage\mdb\mem_cache.hpp	/^    ALLOC_EVICT_SELF,                \/*  *\/$/;"	e	enum:tair::alloc_type
ALLOC_EXPIRED	src\storage\mdb\mem_cache.hpp	/^    ALLOC_EXPIRED,                \/* find a expired mdb_item *\/$/;"	e	enum:tair::alloc_type
ALLOC_NEW	src\storage\mdb\mem_cache.hpp	/^    ALLOC_NEW = 0,                \/* new *\/$/;"	e	enum:tair::alloc_type
CLEAR_COUNTER	src\storage\mdb\mem_cache.hpp	72;"	d
CLEAR_FLAGS	src\storage\mdb\mem_cache.hpp	73;"	d
ITEM_ADDR	src\storage\mdb\mem_cache.hpp	97;"	d
ITEM_AREA	src\storage\mdb\mem_cache.hpp	62;"	d
ITEM_DATA	src\storage\mdb\mem_cache.hpp	61;"	d
ITEM_FLAGS	src\storage\mdb\mem_cache.hpp	74;"	d
ITEM_ID	src\storage\mdb\mem_cache.hpp	86;"	d
ITEM_KEY	src\storage\mdb\mem_cache.hpp	60;"	d
KEY_AREA	src\storage\mdb\mem_cache.hpp	63;"	d
MEMCACHE_META_LEN	src\storage\mdb\mem_cache.hpp	/^    static const int MEMCACHE_META_LEN =$/;"	m	class:tair::mem_cache
OFFSET_MASK	src\storage\mdb\mem_cache.hpp	56;"	d
PAGE_ID	src\storage\mdb\mem_cache.hpp	68;"	d
PAGE_ID_MASK	src\storage\mdb\mem_cache.hpp	57;"	d
PAGE_INFO	src\storage\mdb\mem_cache.hpp	/^      page_info *PAGE_INFO(char *page)$/;"	f	struct:tair::mem_cache::slab_manager
PAGE_OFFSET	src\storage\mdb\mem_cache.hpp	67;"	d
PARTIAL_PAGE_BUCKET	src\storage\mdb\mem_cache.hpp	/^      const static int PARTIAL_PAGE_BUCKET = 10;        \/* every 10 items *\/$/;"	m	struct:tair::mem_cache::slab_manager
SET_COUNTER	src\storage\mdb\mem_cache.hpp	71;"	d
SET_ITEM_FLAGS	src\storage\mdb\mem_cache.hpp	79;"	d
SLAB_ID	src\storage\mdb\mem_cache.hpp	69;"	d
SLAB_ID_MASK	src\storage\mdb\mem_cache.hpp	58;"	d
SLAB_SIZE	src\storage\mdb\mem_cache.hpp	66;"	d
SLAB_SIZE_MASK	src\storage\mdb\mem_cache.hpp	55;"	d
TEST_COUNTER	src\storage\mdb\mem_cache.hpp	70;"	d
__MEM_CACHE_H	src\storage\mdb\mem_cache.hpp	16;"	d
alloc_type	src\storage\mdb\mem_cache.hpp	/^  enum alloc_type$/;"	g	namespace:tair
base_size	src\storage\mdb\mem_cache.hpp	/^      int base_size;$/;"	m	struct:tair::mem_cache::mdb_cache_info
cache	src\storage\mdb\mem_cache.hpp	/^      mem_cache *cache;$/;"	m	struct:tair::mem_cache::slab_manager
cache_info	src\storage\mdb\mem_cache.hpp	/^    mdb_cache_info *cache_info;$/;"	m	class:tair::mem_cache
data	src\storage\mdb\mem_cache.hpp	/^    char data[0];                \/* key+data *\/$/;"	m	struct:tair::mdb_item
data_len	src\storage\mdb\mem_cache.hpp	/^    uint32_t data_len:20;        \/* size of data *\/$/;"	m	struct:tair::mdb_item
evict_count	src\storage\mdb\mem_cache.hpp	/^      uint64_t evict_count[TAIR_MAX_AREA_COUNT];$/;"	m	struct:tair::mem_cache::slab_manager
evict_index	src\storage\mdb\mem_cache.hpp	/^      int evict_index;$/;"	m	struct:tair::mem_cache::slab_manager
evict_total_count	src\storage\mdb\mem_cache.hpp	/^      uint64_t evict_total_count;$/;"	m	struct:tair::mem_cache::slab_manager
exptime	src\storage\mdb\mem_cache.hpp	/^    uint32_t exptime;                \/* expire time  *\/$/;"	m	struct:tair::mdb_item
factor	src\storage\mdb\mem_cache.hpp	/^      float factor;$/;"	m	struct:tair::mem_cache::mdb_cache_info
free_head	src\storage\mdb\mem_cache.hpp	/^      uint64_t free_head;$/;"	m	struct:tair::mem_cache::page_info
free_nr	src\storage\mdb\mem_cache.hpp	/^      int free_nr;$/;"	m	struct:tair::mem_cache::page_info
free_pages	src\storage\mdb\mem_cache.hpp	/^      uint32_t free_pages;$/;"	m	struct:tair::mem_cache::slab_manager
free_pages_no	src\storage\mdb\mem_cache.hpp	/^      int free_pages_no;$/;"	m	struct:tair::mem_cache::slab_manager
full_pages	src\storage\mdb\mem_cache.hpp	/^      uint32_t full_pages;$/;"	m	struct:tair::mem_cache::slab_manager
full_pages_no	src\storage\mdb\mem_cache.hpp	/^      int full_pages_no;$/;"	m	struct:tair::mem_cache::slab_manager
get_item_head	src\storage\mdb\mem_cache.hpp	/^      uint64_t get_item_head(int area)$/;"	f	struct:tair::mem_cache::slab_manager
get_partial_page_id	src\storage\mdb\mem_cache.hpp	/^      uint32_t get_partial_page_id()$/;"	f	struct:tair::mem_cache::slab_manager
get_the_most_free_items_of_partial_page_id	src\storage\mdb\mem_cache.hpp	/^      uint32_t get_the_most_free_items_of_partial_page_id()$/;"	f	struct:tair::mem_cache::slab_manager
h_next	src\storage\mdb\mem_cache.hpp	/^    uint64_t h_next;$/;"	m	struct:tair::mdb_item
id	src\storage\mdb\mem_cache.hpp	/^      uint32_t id;$/;"	m	struct:tair::mem_cache::page_info
id_to_item	src\storage\mdb\mem_cache.hpp	102;"	d
inited	src\storage\mdb\mem_cache.hpp	/^      int inited;$/;"	m	struct:tair::mem_cache::mdb_cache_info
item_count	src\storage\mdb\mem_cache.hpp	/^      uint64_t item_count[TAIR_MAX_AREA_COUNT];$/;"	m	struct:tair::mem_cache::slab_manager
item_dump	src\storage\mdb\mem_cache.hpp	/^    static data_dumpper item_dump;$/;"	m	class:tair::mem_cache
item_head	src\storage\mdb\mem_cache.hpp	/^        uint64_t item_head;$/;"	m	struct:tair::mem_cache::slab_manager::item_list
item_id	src\storage\mdb\mem_cache.hpp	/^    uint64_t item_id;                \/* 0~19 slab_size,20~35 offset in page,36~51 page_id *\/$/;"	m	struct:tair::mdb_item
item_list	src\storage\mdb\mem_cache.hpp	/^      struct item_list$/;"	s	struct:tair::mem_cache::slab_manager
item_tail	src\storage\mdb\mem_cache.hpp	/^        uint64_t item_tail;$/;"	m	struct:tair::mem_cache::slab_manager::item_list
item_total_count	src\storage\mdb\mem_cache.hpp	/^      uint64_t item_total_count;$/;"	m	struct:tair::mem_cache::slab_manager
itemid_equal	src\storage\mdb\mem_cache.hpp	106;"	d
key_len	src\storage\mdb\mem_cache.hpp	/^    uint32_t key_len:12;        \/* size of key    *\/$/;"	m	struct:tair::mdb_item
manager	src\storage\mdb\mem_cache.hpp	/^    mdb_manager *manager;$/;"	m	class:tair::mem_cache
max_slab_id	src\storage\mdb\mem_cache.hpp	/^      int max_slab_id;$/;"	m	struct:tair::mem_cache::mdb_cache_info
mdb_cache_info	src\storage\mdb\mem_cache.hpp	/^    struct mdb_cache_info$/;"	s	class:tair::mem_cache
mdb_item	src\storage\mdb\mem_cache.hpp	/^  struct mdb_item$/;"	s	namespace:tair
mem_cache	src\storage\mdb\mem_cache.hpp	/^    mem_cache(mem_pool * pool, mdb_manager * this_manager, int max_slab_id,$/;"	f	class:tair::mem_cache
mem_cache	src\storage\mdb\mem_cache.hpp	/^  class mem_cache {$/;"	c	namespace:tair
next	src\storage\mdb\mem_cache.hpp	/^      uint32_t next;$/;"	m	struct:tair::mem_cache::page_info
next	src\storage\mdb\mem_cache.hpp	/^    uint64_t next;$/;"	m	struct:tair::mdb_item
page_info	src\storage\mdb\mem_cache.hpp	/^    struct page_info$/;"	s	class:tair::mem_cache
page_size	src\storage\mdb\mem_cache.hpp	/^      int page_size;$/;"	m	struct:tair::mem_cache::slab_manager
partial_pages	src\storage\mdb\mem_cache.hpp	/^      uint32_t *partial_pages;$/;"	m	struct:tair::mem_cache::slab_manager
partial_pages_bucket_no	src\storage\mdb\mem_cache.hpp	/^      int partial_pages_bucket_no()$/;"	f	struct:tair::mem_cache::slab_manager
partial_pages_no	src\storage\mdb\mem_cache.hpp	/^      int partial_pages_no;$/;"	m	struct:tair::mem_cache::slab_manager
per_slab	src\storage\mdb\mem_cache.hpp	/^      int per_slab;$/;"	m	struct:tair::mem_cache::slab_manager
prev	src\storage\mdb\mem_cache.hpp	/^      uint32_t prev;$/;"	m	struct:tair::mem_cache::page_info
prev	src\storage\mdb\mem_cache.hpp	/^    uint64_t prev;$/;"	m	struct:tair::mdb_item
slab_id	src\storage\mdb\mem_cache.hpp	/^      uint32_t slab_id;$/;"	m	struct:tair::mem_cache::slab_manager
slab_manager	src\storage\mdb\mem_cache.hpp	/^      slab_manager(mem_pool * pool,$/;"	f	struct:tair::mem_cache::slab_manager
slab_manager	src\storage\mdb\mem_cache.hpp	/^    struct slab_manager$/;"	s	class:tair::mem_cache
slab_managers	src\storage\mdb\mem_cache.hpp	/^    std::vector<slab_manager *> slab_managers;$/;"	m	class:tair::mem_cache
slab_size	src\storage\mdb\mem_cache.hpp	/^      int slab_size;$/;"	m	struct:tair::mem_cache::slab_manager
tair	src\storage\mdb\mem_cache.hpp	/^namespace tair {$/;"	n
this_item_list	src\storage\mdb\mem_cache.hpp	/^      item_list this_item_list[TAIR_MAX_AREA_COUNT];$/;"	m	struct:tair::mem_cache::slab_manager
this_mem_pool	src\storage\mdb\mem_cache.hpp	/^      mem_pool *this_mem_pool;$/;"	m	struct:tair::mem_cache::slab_manager
this_mem_pool	src\storage\mdb\mem_cache.hpp	/^    mem_pool *this_mem_pool;$/;"	m	class:tair::mem_cache
update_time	src\storage\mdb\mem_cache.hpp	/^    uint32_t update_time;        \/* the last update time *\/$/;"	m	struct:tair::mdb_item
version	src\storage\mdb\mem_cache.hpp	/^    uint16_t version;                \/*  *\/$/;"	m	struct:tair::mdb_item
~mem_cache	src\storage\mdb\mem_cache.hpp	/^     ~mem_cache()$/;"	f	class:tair::mem_cache
CLEAR_BIT	src\storage\mdb\mem_pool.cpp	23;"	d	file:
SET_BIT	src\storage\mdb\mem_pool.cpp	22;"	d	file:
TEST_BIT	src\storage\mdb\mem_pool.cpp	21;"	d	file:
alloc_page	src\storage\mdb\mem_pool.cpp	/^  char *mem_pool::alloc_page()$/;"	f	class:tair::mem_pool
alloc_page	src\storage\mdb\mem_pool.cpp	/^  char *mem_pool::alloc_page(int &index)$/;"	f	class:tair::mem_pool
alloc_page	src\storage\mdb\mem_pool.cpp	/^  char *mem_pool::mem_pool_impl::alloc_page(int &index)$/;"	f	class:tair::mem_pool::mem_pool_impl
free_page	src\storage\mdb\mem_pool.cpp	/^  void mem_pool::free_page(const char *page)$/;"	f	class:tair::mem_pool
free_page	src\storage\mdb\mem_pool.cpp	/^  void mem_pool::free_page(int index)$/;"	f	class:tair::mem_pool
free_page	src\storage\mdb\mem_pool.cpp	/^  void mem_pool::mem_pool_impl::free_page(const char *page)$/;"	f	class:tair::mem_pool::mem_pool_impl
free_page	src\storage\mdb\mem_pool.cpp	/^  void mem_pool::mem_pool_impl::free_page(int index)$/;"	f	class:tair::mem_pool::mem_pool_impl
get_pool_addr	src\storage\mdb\mem_pool.cpp	/^  char *mem_pool::mem_pool_impl::get_pool_addr()$/;"	f	class:tair::mem_pool::mem_pool_impl
index_to_page	src\storage\mdb\mem_pool.cpp	/^  char *mem_pool::index_to_page(int index)$/;"	f	class:tair::mem_pool
index_to_page	src\storage\mdb\mem_pool.cpp	/^  char *mem_pool::mem_pool_impl::index_to_page(int index)$/;"	f	class:tair::mem_pool::mem_pool_impl
initialize	src\storage\mdb\mem_pool.cpp	/^  void mem_pool::initialize(char *pool, int page_size, int total_pages,$/;"	f	class:tair::mem_pool
initialize	src\storage\mdb\mem_pool.cpp	/^  void mem_pool::mem_pool_impl::initialize(char *tpool, int this_page_size,$/;"	f	class:tair::mem_pool::mem_pool_impl
page_to_index	src\storage\mdb\mem_pool.cpp	/^  int mem_pool::mem_pool_impl::page_to_index(const char *page)$/;"	f	class:tair::mem_pool::mem_pool_impl
page_to_index	src\storage\mdb\mem_pool.cpp	/^  int mem_pool::page_to_index(char *page)$/;"	f	class:tair::mem_pool
tair	src\storage\mdb\mem_pool.cpp	/^namespace tair {$/;"	n	file:
~mem_pool	src\storage\mdb\mem_pool.cpp	/^  mem_pool::~mem_pool()$/;"	f	class:tair::mem_pool
BITMAP_SIZE	src\storage\mdb\mem_pool.hpp	/^    static const int BITMAP_SIZE = (MAX_PAGES_NO + 7) \/ 8;$/;"	m	class:tair::mem_pool
MAX_PAGES_NO	src\storage\mdb\mem_pool.hpp	/^    static const int MAX_PAGES_NO = 65536;$/;"	m	class:tair::mem_pool
MDB_STATINFO_START	src\storage\mdb\mem_pool.hpp	/^    static const int MDB_STATINFO_START = 32768;        \/\/32K$/;"	m	class:tair::mem_pool
MEM_HASH_METADATA_START	src\storage\mdb\mem_pool.hpp	/^    static const int MEM_HASH_METADATA_START = 16384;        \/\/16K$/;"	m	class:tair::mem_pool
MEM_POOL_METADATA_LEN	src\storage\mdb\mem_pool.hpp	/^    static const int MEM_POOL_METADATA_LEN = 524288;        \/\/ 512K$/;"	m	class:tair::mem_pool
__MEM_POOL_H	src\storage\mdb\mem_pool.hpp	16;"	d
current_page	src\storage\mdb\mem_pool.hpp	/^      int current_page;$/;"	m	struct:tair::mem_pool::mem_pool_impl
display_statics	src\storage\mdb\mem_pool.hpp	/^      void display_statics()$/;"	f	struct:tair::mem_pool::mem_pool_impl
display_statics	src\storage\mdb\mem_pool.hpp	/^    void display_statics()$/;"	f	class:tair::mem_pool
free_pages	src\storage\mdb\mem_pool.hpp	/^      int free_pages;$/;"	m	struct:tair::mem_pool::mem_pool_impl
get_free_pages_num	src\storage\mdb\mem_pool.hpp	/^    int get_free_pages_num()$/;"	f	class:tair::mem_pool
get_page_size	src\storage\mdb\mem_pool.hpp	/^      int get_page_size()$/;"	f	struct:tair::mem_pool::mem_pool_impl
get_page_size	src\storage\mdb\mem_pool.hpp	/^    int get_page_size()$/;"	f	class:tair::mem_pool
get_pool_addr	src\storage\mdb\mem_pool.hpp	/^    char *get_pool_addr()$/;"	f	class:tair::mem_pool
impl	src\storage\mdb\mem_pool.hpp	/^    mem_pool_impl *impl;$/;"	m	class:tair::mem_pool
inited	src\storage\mdb\mem_pool.hpp	/^      int inited;$/;"	m	struct:tair::mem_pool::mem_pool_impl
mem_pool	src\storage\mdb\mem_pool.hpp	/^    mem_pool(char *pool, int this_page_size, int this_total_pages,$/;"	f	class:tair::mem_pool
mem_pool	src\storage\mdb\mem_pool.hpp	/^  class mem_pool {$/;"	c	namespace:tair
mem_pool_impl	src\storage\mdb\mem_pool.hpp	/^    struct mem_pool_impl$/;"	s	class:tair::mem_pool
page_bitmap	src\storage\mdb\mem_pool.hpp	/^      uint8_t page_bitmap[BITMAP_SIZE];$/;"	m	struct:tair::mem_pool::mem_pool_impl
page_size	src\storage\mdb\mem_pool.hpp	/^      int page_size;$/;"	m	struct:tair::mem_pool::mem_pool_impl
pool	src\storage\mdb\mem_pool.hpp	/^      char *pool;$/;"	m	struct:tair::mem_pool::mem_pool_impl
tair	src\storage\mdb\mem_pool.hpp	/^namespace tair {$/;"	n
total_pages	src\storage\mdb\mem_pool.hpp	/^      int total_pages;$/;"	m	struct:tair::mem_pool::mem_pool_impl
main	src\storage\mdb\slab_test.cpp	/^main(int argc, char **argv)$/;"	f
test_get	src\storage\mdb\slab_test.cpp	/^test_get(mdb_manager & slabcm)$/;"	f
test_put	src\storage\mdb\slab_test.cpp	/^test_put(mdb_manager & slabcm)$/;"	f
test_remove	src\storage\mdb\slab_test.cpp	/^test_remove(mdb_manager & slabcm)$/;"	f
get	src\storage\mock\mockdb_manager.cpp	/^int mockdb_manager::get(int bucket_number, data_entry & key, data_entry & value)$/;"	f	class:mockdb_manager
put	src\storage\mock\mockdb_manager.cpp	/^int mockdb_manager::put(int bucket_number, data_entry & key, data_entry & value, $/;"	f	class:mockdb_manager
remove	src\storage\mock\mockdb_manager.cpp	/^int mockdb_manager::remove(int bucket_number, data_entry & key, bool version_care) $/;"	f	class:mockdb_manager
MOCKDB_MANAGER_H	src\storage\mock\mockdb_manager.h	2;"	d
begin_scan	src\storage\mock\mockdb_manager.h	/^    void begin_scan(md_info & info)$/;"	f	class:tair::storage::mockdb::mockdb_manager
buf	src\storage\mock\mockdb_manager.h	/^    char buf[1024];$/;"	m	class:tair::storage::mockdb::mockdb_manager
buf_len	src\storage\mock\mockdb_manager.h	/^    int  buf_len;$/;"	m	class:tair::storage::mockdb::mockdb_manager
clear	src\storage\mock\mockdb_manager.h	/^    int clear(int area)$/;"	f	class:tair::storage::mockdb::mockdb_manager
close_buckets	src\storage\mock\mockdb_manager.h	/^    void close_buckets(const std::vector <int>&buckets)$/;"	f	class:tair::storage::mockdb::mockdb_manager
end_scan	src\storage\mock\mockdb_manager.h	/^    void end_scan(md_info & info)$/;"	f	class:tair::storage::mockdb::mockdb_manager
get_next_items	src\storage\mock\mockdb_manager.h	/^    bool get_next_items(md_info & info, std::vector <item_data_info *>&list)$/;"	f	class:tair::storage::mockdb::mockdb_manager
get_stats	src\storage\mock\mockdb_manager.h	/^    void get_stats(tair_stat * stat)$/;"	f	class:tair::storage::mockdb::mockdb_manager
init_buckets	src\storage\mock\mockdb_manager.h	/^    bool init_buckets(const std::vector <int>&buckets)$/;"	f	class:tair::storage::mockdb::mockdb_manager
mockdb	src\storage\mock\mockdb_manager.h	/^namespace mockdb$/;"	n	namespace:tair::storage
mockdb_manager	src\storage\mock\mockdb_manager.h	/^    mockdb_manager(): buf_len(800)$/;"	f	class:tair::storage::mockdb::mockdb_manager
mockdb_manager	src\storage\mock\mockdb_manager.h	/^class mockdb_manager : public tair::storage::storage_manager$/;"	c	namespace:tair::storage::mockdb
set_area_quota	src\storage\mock\mockdb_manager.h	/^    void set_area_quota(int area, uint64_t quota) $/;"	f	class:tair::storage::mockdb::mockdb_manager
set_area_quota	src\storage\mock\mockdb_manager.h	/^    void set_area_quota(std::map<int, uint64_t> &quota_map)$/;"	f	class:tair::storage::mockdb::mockdb_manager
storage	src\storage\mock\mockdb_manager.h	/^namespace storage $/;"	n	namespace:tair
tair	src\storage\mock\mockdb_manager.h	/^namespace tair $/;"	n
~mockdb_manager	src\storage\mock\mockdb_manager.h	/^    virtual ~mockdb_manager()$/;"	f	class:tair::storage::mockdb::mockdb_manager
CHECK_DATA_ENTRY_SIZE	src\storage\rdb\rdb_manager.cpp	12;"	d	file:
DATA_ENTRY_MAX_SIZE	src\storage\rdb\rdb_manager.cpp	20;"	d	file:
GET_VERSION_EXPIRE	src\storage\rdb\rdb_manager.cpp	22;"	d	file:
NOT_USED	src\storage\rdb\rdb_manager.cpp	10;"	d	file:
VERIFY_NAMESPACE	src\storage\rdb\rdb_manager.cpp	37;"	d	file:
addfilter	src\storage\rdb\rdb_manager.cpp	/^int rdb_manager::addfilter(int area, data_entry & key, data_entry & field, data_entry & value)$/;"	f	class:rdb_manager
close_buckets	src\storage\rdb\rdb_manager.cpp	/^void rdb_manager::close_buckets(const std::vector <int>&buckets)$/;"	f	class:rdb_manager
dumparea	src\storage\rdb\rdb_manager.cpp	/^int rdb_manager::dumparea(int area)$/;"	f	class:rdb_manager
exists	src\storage\rdb\rdb_manager.cpp	/^int rdb_manager::exists(int bucket_number, data_entry & key)$/;"	f	class:rdb_manager
expire	src\storage\rdb\rdb_manager.cpp	/^int rdb_manager::expire(int bucket_number, data_entry & key, int expiretime)$/;"	f	class:rdb_manager
expireat	src\storage\rdb\rdb_manager.cpp	/^int rdb_manager::expireat(int bucket_number, data_entry & key, int expiretime)$/;"	f	class:rdb_manager
genericHgetall	src\storage\rdb\rdb_manager.cpp	/^int rdb_manager::genericHgetall(int bucket_number, data_entry & key,$/;"	f	class:rdb_manager
genericZrangebyscore	src\storage\rdb\rdb_manager.cpp	/^int rdb_manager::genericZrangebyscore(int bucket_number, data_entry & key, double start, double end,$/;"	f	class:rdb_manager
get	src\storage\rdb\rdb_manager.cpp	/^int rdb_manager::get(int bucket_number, data_entry & key, data_entry & value)$/;"	f	class:rdb_manager
get_redis_config	src\storage\rdb\rdb_manager.cpp	/^void rdb_manager::get_redis_config(redisConfig* config)$/;"	f	class:rdb_manager
get_stats	src\storage\rdb\rdb_manager.cpp	/^void rdb_manager::get_stats(tair_stat *stat)$/;"	f	class:rdb_manager
getnsattr	src\storage\rdb\rdb_manager.cpp	/^int rdb_manager::getnsattr(int area, const char* attr, const int attr_len,$/;"	f	class:rdb_manager
getset	src\storage\rdb\rdb_manager.cpp	/^int rdb_manager::getset(int bucket_number, data_entry & key, data_entry & value,$/;"	f	class:rdb_manager
hdel	src\storage\rdb\rdb_manager.cpp	/^int rdb_manager::hdel(int bucket_number, data_entry & key, data_entry & field,$/;"	f	class:rdb_manager
hexists	src\storage\rdb\rdb_manager.cpp	/^int rdb_manager::hexists(int bucket_number, data_entry & key, data_entry & field)$/;"	f	class:rdb_manager
hget	src\storage\rdb\rdb_manager.cpp	/^int rdb_manager::hget(int bucket_number, data_entry & key, data_entry & field,$/;"	f	class:rdb_manager
hgetall	src\storage\rdb\rdb_manager.cpp	/^int rdb_manager::hgetall(int bucket_number, data_entry & key, std::vector<data_entry*> & values) {$/;"	f	class:rdb_manager
hincrby	src\storage\rdb\rdb_manager.cpp	/^int rdb_manager::hincrby(int bucket_number, data_entry & key, data_entry & field,$/;"	f	class:rdb_manager
hkeys	src\storage\rdb\rdb_manager.cpp	/^int rdb_manager::hkeys(int bucket_number, data_entry & key, std::vector<data_entry*> & values) {$/;"	f	class:rdb_manager
hlen	src\storage\rdb\rdb_manager.cpp	/^int rdb_manager::hlen(int bucket_number, data_entry &key, long long* retlen)$/;"	f	class:rdb_manager
hmget	src\storage\rdb\rdb_manager.cpp	/^int rdb_manager::hmget(int bucket_number, data_entry & key, std::vector<data_entry*> & fields,$/;"	f	class:rdb_manager
hmset	src\storage\rdb\rdb_manager.cpp	/^int rdb_manager::hmset(int bucket_number, data_entry & key, std::vector<data_entry*> & fields_value,$/;"	f	class:rdb_manager
hset	src\storage\rdb\rdb_manager.cpp	/^int rdb_manager::hset(int bucket_number, data_entry & key, data_entry & field,$/;"	f	class:rdb_manager
hsetnx	src\storage\rdb\rdb_manager.cpp	/^int rdb_manager::hsetnx(int bucket_number, data_entry & key, data_entry & field,$/;"	f	class:rdb_manager
hvals	src\storage\rdb\rdb_manager.cpp	/^int rdb_manager::hvals(int bucket_number, data_entry & key, std::vector<data_entry*> & values) {$/;"	f	class:rdb_manager
incdecr	src\storage\rdb\rdb_manager.cpp	/^int rdb_manager::incdecr(int bucket_number, data_entry & key, int init_value, int addvalue, int * retvalue,$/;"	f	class:rdb_manager
init_buckets	src\storage\rdb\rdb_manager.cpp	/^bool rdb_manager::init_buckets(const std::vector <int>&buckets)$/;"	f	class:rdb_manager
lazyclear	src\storage\rdb\rdb_manager.cpp	/^int rdb_manager::lazyclear(int area, const char* password, const int len)$/;"	f	class:rdb_manager
lindex	src\storage\rdb\rdb_manager.cpp	/^int rdb_manager::lindex(int bucket_number, data_entry &key, int32_t index, data_entry& value) {$/;"	f	class:rdb_manager
linsert	src\storage\rdb\rdb_manager.cpp	/^int rdb_manager::linsert(int bucket_number, data_entry &key, data_entry &value_in_list,$/;"	f	class:rdb_manager
llen	src\storage\rdb\rdb_manager.cpp	/^int rdb_manager::llen(int bucket_number, data_entry &key, long long *retlen)$/;"	f	class:rdb_manager
loadarea	src\storage\rdb\rdb_manager.cpp	/^int rdb_manager::loadarea(int area)$/;"	f	class:rdb_manager
lrange	src\storage\rdb\rdb_manager.cpp	/^int rdb_manager::lrange(int bucket_number, data_entry &key, int start, int end,$/;"	f	class:rdb_manager
lrem	src\storage\rdb\rdb_manager.cpp	/^int rdb_manager::lrem(int bucket_number, data_entry &key, int count,$/;"	f	class:rdb_manager
lrpop	src\storage\rdb\rdb_manager.cpp	/^int rdb_manager::lrpop(int bucket_number, data_entry &key, int count,$/;"	f	class:rdb_manager
lrpush	src\storage\rdb\rdb_manager.cpp	/^int rdb_manager::lrpush(int bucket_number, data_entry & key, const std::vector<data_entry* >& values,$/;"	f	class:rdb_manager
lset	src\storage\rdb\rdb_manager.cpp	/^int rdb_manager::lset(int bucket_number, data_entry &key, int index,$/;"	f	class:rdb_manager
ltrim	src\storage\rdb\rdb_manager.cpp	/^int rdb_manager::ltrim(int bucket_number, data_entry &key, int start, int end,$/;"	f	class:rdb_manager
persist	src\storage\rdb\rdb_manager.cpp	/^int rdb_manager::persist(int bucket_number, data_entry & key)$/;"	f	class:rdb_manager
put	src\storage\rdb\rdb_manager.cpp	/^int rdb_manager::put(int bucket_number, data_entry & key, data_entry & value,$/;"	f	class:rdb_manager
putnx	src\storage\rdb\rdb_manager.cpp	/^int rdb_manager::putnx(int bucket_number, data_entry & key, data_entry & value,$/;"	f	class:rdb_manager
rdb_manager	src\storage\rdb\rdb_manager.cpp	/^rdb_manager::rdb_manager()$/;"	f	class:rdb_manager
redis_tair_code	src\storage\rdb\rdb_manager.cpp	/^inline int redis_tair_code(int ret)$/;"	f
remove	src\storage\rdb\rdb_manager.cpp	/^int rdb_manager::remove(int bucket_number, data_entry & key, bool version_care)$/;"	f	class:rdb_manager
removefilter	src\storage\rdb\rdb_manager.cpp	/^int rdb_manager::removefilter(int area, data_entry & key, data_entry & field, data_entry & value)$/;"	f	class:rdb_manager
sadd	src\storage\rdb\rdb_manager.cpp	/^int rdb_manager::sadd(int bucket_number, data_entry & key, data_entry & value,$/;"	f	class:rdb_manager
scard	src\storage\rdb\rdb_manager.cpp	/^int rdb_manager::scard(int bucket_number, data_entry & key, long long* retnum)$/;"	f	class:rdb_manager
set_area_quota	src\storage\rdb\rdb_manager.cpp	/^void rdb_manager::set_area_quota(int area, uint64_t quota)$/;"	f	class:rdb_manager
set_area_quota	src\storage\rdb\rdb_manager.cpp	/^void rdb_manager::set_area_quota(std::map<int, uint64_t> &quota_map)$/;"	f	class:rdb_manager
setnsattr	src\storage\rdb\rdb_manager.cpp	/^int rdb_manager::setnsattr(int area, const char* attr, const int attr_len,$/;"	f	class:rdb_manager
smembers	src\storage\rdb\rdb_manager.cpp	/^int rdb_manager::smembers(int bucket_number, data_entry & key, std::vector<data_entry*> & values)$/;"	f	class:rdb_manager
spop	src\storage\rdb\rdb_manager.cpp	/^int rdb_manager::spop(int bucket_number, data_entry & key, data_entry & value,$/;"	f	class:rdb_manager
srem	src\storage\rdb\rdb_manager.cpp	/^int rdb_manager::srem(int bucket_number, data_entry & key, data_entry & value,$/;"	f	class:rdb_manager
ttl	src\storage\rdb\rdb_manager.cpp	/^int rdb_manager::ttl(int bucket_number, data_entry & key, long long* time_remain)$/;"	f	class:rdb_manager
type	src\storage\rdb\rdb_manager.cpp	/^int rdb_manager::type(int bucket_number, data_entry & key, long long* what_type)$/;"	f	class:rdb_manager
zadd	src\storage\rdb\rdb_manager.cpp	/^int rdb_manager::zadd(int bucket_number, data_entry & key, double score, data_entry & value,$/;"	f	class:rdb_manager
zcard	src\storage\rdb\rdb_manager.cpp	/^int rdb_manager::zcard(int bucket_number, data_entry & key, long long* retnum)$/;"	f	class:rdb_manager
zcount	src\storage\rdb\rdb_manager.cpp	/^int rdb_manager::zcount(int bucket_number, data_entry & key, double start, double end, long long* retnum)$/;"	f	class:rdb_manager
zincrby	src\storage\rdb\rdb_manager.cpp	/^int rdb_manager::zincrby(int bucket_number, data_entry & key, data_entry & value,$/;"	f	class:rdb_manager
zrange	src\storage\rdb\rdb_manager.cpp	/^int rdb_manager::zrange(int bucket_number, data_entry & key, int start, int end,$/;"	f	class:rdb_manager
zrangebyscore	src\storage\rdb\rdb_manager.cpp	/^int rdb_manager::zrangebyscore(int bucket_number, data_entry & key, double start, double end,$/;"	f	class:rdb_manager
zrank	src\storage\rdb\rdb_manager.cpp	/^int rdb_manager::zrank(int bucket_number, data_entry & key, data_entry & value, long long* rank)$/;"	f	class:rdb_manager
zrem	src\storage\rdb\rdb_manager.cpp	/^int rdb_manager::zrem(int bucket_number, data_entry & key, data_entry & value,$/;"	f	class:rdb_manager
zremrangebyrank	src\storage\rdb\rdb_manager.cpp	/^int rdb_manager::zremrangebyrank(int bucket_number, data_entry & key, int start,$/;"	f	class:rdb_manager
zremrangebyscore	src\storage\rdb\rdb_manager.cpp	/^int rdb_manager::zremrangebyscore(int bucket_number, data_entry & key, double start,$/;"	f	class:rdb_manager
zrevrange	src\storage\rdb\rdb_manager.cpp	/^int rdb_manager::zrevrange(int bucket_number, data_entry & key, int start, int end,$/;"	f	class:rdb_manager
zrevrangebyscore	src\storage\rdb\rdb_manager.cpp	/^int rdb_manager::zrevrangebyscore(int bucket_number, data_entry & key, double start, double end,$/;"	f	class:rdb_manager
zrevrank	src\storage\rdb\rdb_manager.cpp	/^int rdb_manager::zrevrank(int bucket_number, data_entry & key, data_entry & value, long long* rank)$/;"	f	class:rdb_manager
zscore	src\storage\rdb\rdb_manager.cpp	/^int rdb_manager::zscore(int bucket_number, data_entry & key,$/;"	f	class:rdb_manager
~rdb_manager	src\storage\rdb\rdb_manager.cpp	/^rdb_manager::~rdb_manager()$/;"	f	class:rdb_manager
METHOD_HGETALL	src\storage\rdb\rdb_manager.h	38;"	d
METHOD_HKEYS	src\storage\rdb\rdb_manager.h	39;"	d
METHOD_HVALS	src\storage\rdb\rdb_manager.h	40;"	d
RDB_MANAGER_H	src\storage\rdb\rdb_manager.h	18;"	d
begin_scan	src\storage\rdb\rdb_manager.h	/^    void begin_scan(md_info & info) {}$/;"	f	class:tair::storage::rdb::rdb_manager
clear	src\storage\rdb\rdb_manager.h	/^    int clear(int area)$/;"	f	class:tair::storage::rdb::rdb_manager
end_scan	src\storage\rdb\rdb_manager.h	/^    void end_scan(md_info & info) {}$/;"	f	class:tair::storage::rdb::rdb_manager
getAbsTime	src\storage\rdb\rdb_manager.h	/^    long getAbsTime(int expire_time)$/;"	f	class:tair::storage::rdb::rdb_manager
get_next_items	src\storage\rdb\rdb_manager.h	/^    bool get_next_items(md_info & info, std::vector <item_data_info *>&list)$/;"	f	class:tair::storage::rdb::rdb_manager
get_redis_instance	src\storage\rdb\rdb_manager.h	/^    redis_db *get_redis_instance()$/;"	f	class:tair::storage::rdb::rdb_manager
rdb	src\storage\rdb\rdb_manager.h	/^namespace rdb$/;"	n	namespace:tair::storage
rdb_manager	src\storage\rdb\rdb_manager.h	/^class rdb_manager : public tair::storage::storage_manager$/;"	c	namespace:tair::storage::rdb
redis_instance	src\storage\rdb\rdb_manager.h	/^    redis_db * redis_instance;$/;"	m	class:tair::storage::rdb::rdb_manager
storage	src\storage\rdb\rdb_manager.h	/^namespace storage$/;"	n	namespace:tair
tair	src\storage\rdb\rdb_manager.h	/^namespace tair$/;"	n
listAddNodeHead	src\storage\rdb\redis\adlist.c	/^list *listAddNodeHead(list *list, void *value)$/;"	f
listAddNodeTail	src\storage\rdb\redis\adlist.c	/^list *listAddNodeTail(list *list, void *value)$/;"	f
listCreate	src\storage\rdb\redis\adlist.c	/^list *listCreate(void)$/;"	f
listDelNode	src\storage\rdb\redis\adlist.c	/^void listDelNode(list *list, listNode *node)$/;"	f
listDup	src\storage\rdb\redis\adlist.c	/^list *listDup(list *orig)$/;"	f
listGetIterator	src\storage\rdb\redis\adlist.c	/^listIter *listGetIterator(list *list, int direction)$/;"	f
listIndex	src\storage\rdb\redis\adlist.c	/^listNode *listIndex(list *list, int index) {$/;"	f
listInsertNode	src\storage\rdb\redis\adlist.c	/^list *listInsertNode(list *list, listNode *old_node, void *value, int after) {$/;"	f
listNext	src\storage\rdb\redis\adlist.c	/^listNode *listNext(listIter *iter)$/;"	f
listRelease	src\storage\rdb\redis\adlist.c	/^void listRelease(list *list)$/;"	f
listReleaseIterator	src\storage\rdb\redis\adlist.c	/^void listReleaseIterator(listIter *iter) {$/;"	f
listRewind	src\storage\rdb\redis\adlist.c	/^void listRewind(list *list, listIter *li) {$/;"	f
listRewindTail	src\storage\rdb\redis\adlist.c	/^void listRewindTail(list *list, listIter *li) {$/;"	f
listSearchKey	src\storage\rdb\redis\adlist.c	/^listNode *listSearchKey(list *list, void *key)$/;"	f
AL_START_HEAD	src\storage\rdb\redis\adlist.h	89;"	d
AL_START_TAIL	src\storage\rdb\redis\adlist.h	90;"	d
__ADLIST_H__	src\storage\rdb\redis\adlist.h	32;"	d
direction	src\storage\rdb\redis\adlist.h	/^    int direction;$/;"	m	struct:listIter
dup	src\storage\rdb\redis\adlist.h	/^    void *(*dup)(void *ptr);$/;"	m	struct:list
free	src\storage\rdb\redis\adlist.h	/^    void (*free)(void *ptr);$/;"	m	struct:list
head	src\storage\rdb\redis\adlist.h	/^    listNode *head;$/;"	m	struct:list
len	src\storage\rdb\redis\adlist.h	/^    unsigned int len;$/;"	m	struct:list
list	src\storage\rdb\redis\adlist.h	/^typedef struct list {$/;"	s
list	src\storage\rdb\redis\adlist.h	/^} list;$/;"	t	typeref:struct:list
listFirst	src\storage\rdb\redis\adlist.h	58;"	d
listGetDupMethod	src\storage\rdb\redis\adlist.h	68;"	d
listGetFree	src\storage\rdb\redis\adlist.h	69;"	d
listGetMatchMethod	src\storage\rdb\redis\adlist.h	70;"	d
listIter	src\storage\rdb\redis\adlist.h	/^typedef struct listIter {$/;"	s
listIter	src\storage\rdb\redis\adlist.h	/^} listIter;$/;"	t	typeref:struct:listIter
listLast	src\storage\rdb\redis\adlist.h	59;"	d
listLength	src\storage\rdb\redis\adlist.h	57;"	d
listNextNode	src\storage\rdb\redis\adlist.h	61;"	d
listNode	src\storage\rdb\redis\adlist.h	/^typedef struct listNode {$/;"	s
listNode	src\storage\rdb\redis\adlist.h	/^} listNode;$/;"	t	typeref:struct:listNode
listNodeValue	src\storage\rdb\redis\adlist.h	62;"	d
listPrevNode	src\storage\rdb\redis\adlist.h	60;"	d
listSetDupMethod	src\storage\rdb\redis\adlist.h	64;"	d
listSetFreeMethod	src\storage\rdb\redis\adlist.h	65;"	d
listSetMatchMethod	src\storage\rdb\redis\adlist.h	66;"	d
match	src\storage\rdb\redis\adlist.h	/^    int (*match)(void *ptr, void *key);$/;"	m	struct:list
next	src\storage\rdb\redis\adlist.h	/^    listNode *next;$/;"	m	struct:listIter
next	src\storage\rdb\redis\adlist.h	/^    struct listNode *next;$/;"	m	struct:listNode	typeref:struct:listNode::listNode
prev	src\storage\rdb\redis\adlist.h	/^    struct listNode *prev;$/;"	m	struct:listNode	typeref:struct:listNode::listNode
tail	src\storage\rdb\redis\adlist.h	/^    listNode *tail;$/;"	m	struct:list
value	src\storage\rdb\redis\adlist.h	/^    void *value;$/;"	m	struct:listNode
DECRBY_COMMAND	src\storage\rdb\redis\command.h	122;"	d
DECR_COMMAND	src\storage\rdb\redis\command.h	22;"	d
DEL_COMMAND	src\storage\rdb\redis\command.h	16;"	d
EXISTS_COMMAND	src\storage\rdb\redis\command.h	18;"	d
EXPIRE_COMMAND	src\storage\rdb\redis\command.h	126;"	d
FILTER_COMMAND	src\storage\rdb\redis\command.h	144;"	d
GETSET_COMMAND	src\storage\rdb\redis\command.h	124;"	d
GET_COMMAND	src\storage\rdb\redis\command.h	8;"	d
HDEL_COMMAND	src\storage\rdb\redis\command.h	108;"	d
HEXISTS_COMMAND	src\storage\rdb\redis\command.h	118;"	d
HGETALL_COMMAND	src\storage\rdb\redis\command.h	116;"	d
HGET_COMMAND	src\storage\rdb\redis\command.h	100;"	d
HINCRBY_COMMAND	src\storage\rdb\redis\command.h	106;"	d
HKEYS_COMMAND	src\storage\rdb\redis\command.h	112;"	d
HLEN_COMMAND	src\storage\rdb\redis\command.h	110;"	d
HMGET_COMMAND	src\storage\rdb\redis\command.h	104;"	d
HMSET_COMMAND	src\storage\rdb\redis\command.h	102;"	d
HSETNX_COMMAND	src\storage\rdb\redis\command.h	98;"	d
HSET_COMMAND	src\storage\rdb\redis\command.h	96;"	d
HVALS_COMMAND	src\storage\rdb\redis\command.h	114;"	d
INCRBY_COMMAND	src\storage\rdb\redis\command.h	120;"	d
INCR_COMMAND	src\storage\rdb\redis\command.h	20;"	d
LINDEX_COMMAND	src\storage\rdb\redis\command.h	40;"	d
LINSERT_COMMAND	src\storage\rdb\redis\command.h	32;"	d
LLEN_COMMAND	src\storage\rdb\redis\command.h	38;"	d
LPOP_COMMAND	src\storage\rdb\redis\command.h	36;"	d
LPUSHX_COMMAND	src\storage\rdb\redis\command.h	30;"	d
LPUSH_COMMAND	src\storage\rdb\redis\command.h	26;"	d
LRANGE_COMMAND	src\storage\rdb\redis\command.h	44;"	d
LREM_COMMAND	src\storage\rdb\redis\command.h	48;"	d
LSET_COMMAND	src\storage\rdb\redis\command.h	42;"	d
LTRIM_COMMAND	src\storage\rdb\redis\command.h	46;"	d
PERSIST_COMMAND	src\storage\rdb\redis\command.h	132;"	d
RENAMENX_COMMAND	src\storage\rdb\redis\command.h	142;"	d
RENAME_COMMAND	src\storage\rdb\redis\command.h	140;"	d
RPOP_COMMAND	src\storage\rdb\redis\command.h	34;"	d
RPUSHX_COMMAND	src\storage\rdb\redis\command.h	28;"	d
RPUSH_COMMAND	src\storage\rdb\redis\command.h	24;"	d
SADD_COMMAND	src\storage\rdb\redis\command.h	50;"	d
SCARD_COMMAND	src\storage\rdb\redis\command.h	58;"	d
SETEX_COMMAND	src\storage\rdb\redis\command.h	14;"	d
SETNXEX_COMMAND	src\storage\rdb\redis\command.h	138;"	d
SETNX_COMMAND	src\storage\rdb\redis\command.h	12;"	d
SET_COMMAND	src\storage\rdb\redis\command.h	10;"	d
SINTERSTORE_COMMAND	src\storage\rdb\redis\command.h	64;"	d
SINTER_COMMAND	src\storage\rdb\redis\command.h	62;"	d
SISMEMBER_COMMAND	src\storage\rdb\redis\command.h	56;"	d
SMEMBERS_COMMAND	src\storage\rdb\redis\command.h	66;"	d
SMOVE_COMMAND	src\storage\rdb\redis\command.h	54;"	d
SPOP_COMMAND	src\storage\rdb\redis\command.h	60;"	d
SREM_COMMAND	src\storage\rdb\redis\command.h	52;"	d
STRING_AFTER	src\storage\rdb\redis\command.h	/^char* STRING_AFTER = "AFTER";$/;"	v
STRING_AFTER_LEN	src\storage\rdb\redis\command.h	154;"	d
STRING_BEFORE	src\storage\rdb\redis\command.h	/^char* STRING_BEFORE = "BEFORE";$/;"	v
STRING_BEFORE_LEN	src\storage\rdb\redis\command.h	153;"	d
TTL_COMMAND	src\storage\rdb\redis\command.h	130;"	d
TYPE_COMMAND	src\storage\rdb\redis\command.h	128;"	d
ZADD_COMMAND	src\storage\rdb\redis\command.h	68;"	d
ZCARD_COMMAND	src\storage\rdb\redis\command.h	88;"	d
ZCOUNT_COMMAND	src\storage\rdb\redis\command.h	84;"	d
ZINCRBY_COMMAND	src\storage\rdb\redis\command.h	70;"	d
ZRANGEBYSCORE_COMMAND	src\storage\rdb\redis\command.h	80;"	d
ZRANGEWITHSCORE_COMMAND	src\storage\rdb\redis\command.h	134;"	d
ZRANGE_COMMAND	src\storage\rdb\redis\command.h	78;"	d
ZRANK_COMMAND	src\storage\rdb\redis\command.h	92;"	d
ZREMRANGEBYRANK_COMMAND	src\storage\rdb\redis\command.h	76;"	d
ZREMRANGEBYSCORE_COMMAND	src\storage\rdb\redis\command.h	74;"	d
ZREM_COMMAND	src\storage\rdb\redis\command.h	72;"	d
ZREVRANGEBYSCORE_COMMAND	src\storage\rdb\redis\command.h	82;"	d
ZREVRANGEWITHSCORE_COMMAND	src\storage\rdb\redis\command.h	136;"	d
ZREVRANGE_COMMAND	src\storage\rdb\redis\command.h	86;"	d
ZREVRANK_COMMAND	src\storage\rdb\redis\command.h	94;"	d
ZSCORE_COMMAND	src\storage\rdb\redis\command.h	90;"	d
__REDIS_GLOBAL_COMMAND__	src\storage\rdb\redis\command.h	2;"	d
getCommand	src\storage\rdb\redis\command.h	148;"	d
getCommandArgc	src\storage\rdb\redis\command.h	149;"	d
readonlyCommandTable	src\storage\rdb\redis\command.h	/^struct redisCommand readonlyCommandTable[] = {$/;"	v	typeref:struct:redisCommand
HAVE_BACKTRACE	src\storage\rdb\redis\config.h	49;"	d
HAVE_EPOLL	src\storage\rdb\redis\config.h	54;"	d
HAVE_KQUEUE	src\storage\rdb\redis\config.h	58;"	d
HAVE_MALLOC_SIZE	src\storage\rdb\redis\config.h	19;"	d
HAVE_MALLOC_SIZE	src\storage\rdb\redis\config.h	24;"	d
HAVE_PROCFS	src\storage\rdb\redis\config.h	39;"	d
HAVE_TASKINFO	src\storage\rdb\redis\config.h	44;"	d
MAX_AREA_GROUP_NUM	src\storage\rdb\redis\config.h	10;"	d
MAX_DBNUM	src\storage\rdb\redis\config.h	11;"	d
MAX_UNIT_NUM	src\storage\rdb\redis\config.h	9;"	d
__CONFIG_H	src\storage\rdb\redis\config.h	2;"	d
aof_fsync	src\storage\rdb\redis\config.h	63;"	d
aof_fsync	src\storage\rdb\redis\config.h	65;"	d
redis_fstat	src\storage\rdb\redis\config.h	30;"	d
redis_fstat	src\storage\rdb\redis\config.h	33;"	d
redis_malloc_size	src\storage\rdb\redis\config.h	20;"	d
redis_malloc_size	src\storage\rdb\redis\config.h	25;"	d
redis_stat	src\storage\rdb\redis\config.h	31;"	d
redis_stat	src\storage\rdb\redis\config.h	34;"	d
dbAdd	src\storage\rdb\redis\db.c	/^int dbAdd(redisDb *db, robj *key, robj *val) {$/;"	f
dbDelete	src\storage\rdb\redis\db.c	/^int dbDelete(redisDb *db, robj *key) {$/;"	f
dbExists	src\storage\rdb\redis\db.c	/^int dbExists(redisDb *db, robj *key) {$/;"	f
dbRandomKey	src\storage\rdb\redis\db.c	/^robj *dbRandomKey(redisDb *db) {$/;"	f
dbReplace	src\storage\rdb\redis\db.c	/^int dbReplace(redisDb *db, robj *key, robj *val) {$/;"	f
dbSize	src\storage\rdb\redis\db.c	/^size_t dbSize(redisDb *db) {$/;"	f
dbSuperReplace	src\storage\rdb\redis\db.c	/^int dbSuperReplace(redisDb *db, robj *key, robj *val) {$/;"	f
dbUpdateKey	src\storage\rdb\redis\db.c	/^int dbUpdateKey(redisDb *db, robj* key) {$/;"	f
delCommand	src\storage\rdb\redis\db.c	/^void delCommand(redisClient *c) {$/;"	f
emptyDb	src\storage\rdb\redis\db.c	/^long long emptyDb(redisServer *server) {$/;"	f
existsCommand	src\storage\rdb\redis\db.c	/^void existsCommand(redisClient *c) {$/;"	f
expireCommand	src\storage\rdb\redis\db.c	/^void expireCommand(redisClient *c) {$/;"	f
expireIfNeeded	src\storage\rdb\redis\db.c	/^int expireIfNeeded(redisDb *db, robj *key) {$/;"	f
expireXGenericCommand	src\storage\rdb\redis\db.c	/^void expireXGenericCommand(redisClient *c, robj *key, robj *param) {$/;"	f
getExpire	src\storage\rdb\redis\db.c	/^time_t getExpire(redisDb *db, robj *key) {$/;"	f
getLogiClock	src\storage\rdb\redis\db.c	/^uint32_t getLogiClock(redisDb *db, robj *key) {$/;"	f
lookupKeyReadWithVersion	src\storage\rdb\redis\db.c	/^robj *lookupKeyReadWithVersion(redisDb *db, robj *key, uint16_t *version) {$/;"	f
lookupKeyWithVersion	src\storage\rdb\redis\db.c	/^robj *lookupKeyWithVersion(redisDb *db, robj *key, uint16_t* version) {$/;"	f
lookupKeyWriteWithVersion	src\storage\rdb\redis\db.c	/^robj *lookupKeyWriteWithVersion(redisDb *db, robj *key, uint16_t *version) {$/;"	f
persistCommand	src\storage\rdb\redis\db.c	/^void persistCommand(redisClient *c) {$/;"	f
removeExpire	src\storage\rdb\redis\db.c	/^int removeExpire(redisDb *db, robj *key) {$/;"	f
removeXExpire	src\storage\rdb\redis\db.c	/^int removeXExpire(redisDb *db, robj *key) {$/;"	f
renameCommand	src\storage\rdb\redis\db.c	/^void renameCommand(redisClient *c) {$/;"	f
renameGenericCommand	src\storage\rdb\redis\db.c	/^void renameGenericCommand(redisClient *c, int nx) {$/;"	f
renamenxCommand	src\storage\rdb\redis\db.c	/^void renamenxCommand(redisClient *c) {$/;"	f
selectClient	src\storage\rdb\redis\db.c	/^redisClient* selectClient(redisServer *server, int id) {$/;"	f
selectDb	src\storage\rdb\redis\db.c	/^redisDb* selectDb(redisServer *server, int id) {$/;"	f
setExpire	src\storage\rdb\redis\db.c	/^void setExpire(redisDb *db, robj *key, time_t when) {$/;"	f
setXExpire	src\storage\rdb\redis\db.c	/^void setXExpire(redisDb *db, robj *key, time_t when) {$/;"	f
ttlCommand	src\storage\rdb\redis\db.c	/^void ttlCommand(redisClient *c) {$/;"	f
typeCommand	src\storage\rdb\redis\db.c	/^void typeCommand(redisClient *c) {$/;"	f
DICT_STATS_VECTLEN	src\storage\rdb\redis\dict.c	698;"	d	file:
_dictClear	src\storage\rdb\redis\dict.c	/^int _dictClear(dict *d, dictht *ht)$/;"	f
_dictExpandIfNeeded	src\storage\rdb\redis\dict.c	/^static int _dictExpandIfNeeded(dict *d)$/;"	f	file:
_dictInit	src\storage\rdb\redis\dict.c	/^int _dictInit(dict *d, dictType *type,$/;"	f
_dictKeyIndex	src\storage\rdb\redis\dict.c	/^static int _dictKeyIndex(dict *d, const void *key)$/;"	f	file:
_dictNextPower	src\storage\rdb\redis\dict.c	/^static unsigned long _dictNextPower(unsigned long size)$/;"	f	file:
_dictPrintStatsHt	src\storage\rdb\redis\dict.c	/^static void _dictPrintStatsHt(dictht *ht) {$/;"	f	file:
_dictRehashStep	src\storage\rdb\redis\dict.c	/^static void _dictRehashStep(dict *d) {$/;"	f	file:
_dictReset	src\storage\rdb\redis\dict.c	/^static void _dictReset(dictht *ht)$/;"	f	file:
dictAdd	src\storage\rdb\redis\dict.c	/^int dictAdd(dict *d, void *key, void *val)$/;"	f
dictCreate	src\storage\rdb\redis\dict.c	/^dict *dictCreate(dictType *type,$/;"	f
dictDelete	src\storage\rdb\redis\dict.c	/^int dictDelete(dict *ht, const void *key) {$/;"	f
dictDeleteNoFree	src\storage\rdb\redis\dict.c	/^int dictDeleteNoFree(dict *ht, const void *key) {$/;"	f
dictDisableResize	src\storage\rdb\redis\dict.c	/^void dictDisableResize(void) {$/;"	f
dictEmpty	src\storage\rdb\redis\dict.c	/^void dictEmpty(dict *d) {$/;"	f
dictEnableResize	src\storage\rdb\redis\dict.c	/^void dictEnableResize(void) {$/;"	f
dictExpand	src\storage\rdb\redis\dict.c	/^int dictExpand(dict *d, unsigned long size)$/;"	f
dictFetchValue	src\storage\rdb\redis\dict.c	/^void *dictFetchValue(dict *d, const void *key) {$/;"	f
dictFind	src\storage\rdb\redis\dict.c	/^dictEntry *dictFind(dict *d, const void *key)$/;"	f
dictGenCaseHashFunction	src\storage\rdb\redis\dict.c	/^unsigned int dictGenCaseHashFunction(const unsigned char *buf, int len) {$/;"	f
dictGenHashFunction	src\storage\rdb\redis\dict.c	/^unsigned int dictGenHashFunction(const unsigned char *buf, int len) {$/;"	f
dictGenericDelete	src\storage\rdb\redis\dict.c	/^static int dictGenericDelete(dict *d, const void *key, int nofree)$/;"	f	file:
dictGetIndexSafeInterator	src\storage\rdb\redis\dict.c	/^dictIterator *dictGetIndexSafeInterator(dict *d, int table, long index) {$/;"	f
dictGetIterator	src\storage\rdb\redis\dict.c	/^dictIterator *dictGetIterator(dict *d)$/;"	f
dictGetRandomKey	src\storage\rdb\redis\dict.c	/^dictEntry *dictGetRandomKey(dict *d)$/;"	f
dictGetSafeIterator	src\storage\rdb\redis\dict.c	/^dictIterator *dictGetSafeIterator(dict *d) {$/;"	f
dictIdentityHashFunction	src\storage\rdb\redis\dict.c	/^unsigned int dictIdentityHashFunction(unsigned int key)$/;"	f
dictIntHashFunction	src\storage\rdb\redis\dict.c	/^unsigned int dictIntHashFunction(unsigned int key)$/;"	f
dictNext	src\storage\rdb\redis\dict.c	/^dictEntry *dictNext(dictIterator *iter)$/;"	f
dictNextInSlot	src\storage\rdb\redis\dict.c	/^dictEntry *dictNextInSlot(dictIterator *iter)$/;"	f
dictNextSlot	src\storage\rdb\redis\dict.c	/^dictEntry *dictNextSlot(dictIterator *iter)$/;"	f
dictPrintStats	src\storage\rdb\redis\dict.c	/^void dictPrintStats(dict *d) {$/;"	f
dictRehash	src\storage\rdb\redis\dict.c	/^int dictRehash(dict *d, int n) {$/;"	f
dictRehashMilliseconds	src\storage\rdb\redis\dict.c	/^int dictRehashMilliseconds(dict *d, int ms) {$/;"	f
dictRelease	src\storage\rdb\redis\dict.c	/^void dictRelease(dict *d)$/;"	f
dictReleaseIterator	src\storage\rdb\redis\dict.c	/^void dictReleaseIterator(dictIterator *iter)$/;"	f
dictReplace	src\storage\rdb\redis\dict.c	/^int dictReplace(dict *d, void *key, void *val)$/;"	f
dictResize	src\storage\rdb\redis\dict.c	/^int dictResize(dict *d)$/;"	f
dictSuperReplace	src\storage\rdb\redis\dict.c	/^int dictSuperReplace(dict *d, void *key, void *val)$/;"	f
dictUpdateKey	src\storage\rdb\redis\dict.c	/^int dictUpdateKey(dict *d, void *key)$/;"	f
dict_can_resize	src\storage\rdb\redis\dict.c	/^static int dict_can_resize = 1;$/;"	v	file:
dict_force_resize_ratio	src\storage\rdb\redis\dict.c	/^static unsigned int dict_force_resize_ratio = 5;$/;"	v	file:
setRdbSaveFlag	src\storage\rdb\redis\dict.c	/^int setRdbSaveFlag(dict *d, int flag) {$/;"	f
timeInMilliseconds	src\storage\rdb\redis\dict.c	/^long long timeInMilliseconds(void) {$/;"	f
DICT_ERR	src\storage\rdb\redis\dict.h	42;"	d
DICT_HT_INITIAL_SIZE	src\storage\rdb\redis\dict.h	95;"	d
DICT_NOTUSED	src\storage\rdb\redis\dict.h	45;"	d
DICT_OK	src\storage\rdb\redis\dict.h	41;"	d
__DICT_H	src\storage\rdb\redis\dict.h	37;"	d
d	src\storage\rdb\redis\dict.h	/^    dict *d;$/;"	m	struct:dictIterator
dict	src\storage\rdb\redis\dict.h	/^typedef struct dict {$/;"	s
dict	src\storage\rdb\redis\dict.h	/^} dict;$/;"	t	typeref:struct:dict
dictCompareHashKeys	src\storage\rdb\redis\dict.h	124;"	d
dictEntry	src\storage\rdb\redis\dict.h	/^typedef struct dictEntry {$/;"	s
dictEntry	src\storage\rdb\redis\dict.h	/^} dictEntry;$/;"	t	typeref:struct:dictEntry
dictFreeEntryKey	src\storage\rdb\redis\dict.h	109;"	d
dictFreeEntryVal	src\storage\rdb\redis\dict.h	98;"	d
dictGetEntryKey	src\storage\rdb\redis\dict.h	131;"	d
dictGetEntryVal	src\storage\rdb\redis\dict.h	132;"	d
dictHashKey	src\storage\rdb\redis\dict.h	129;"	d
dictIsRdbSaving	src\storage\rdb\redis\dict.h	135;"	d
dictIsRehashing	src\storage\rdb\redis\dict.h	136;"	d
dictIterator	src\storage\rdb\redis\dict.h	/^typedef struct dictIterator {$/;"	s
dictIterator	src\storage\rdb\redis\dict.h	/^} dictIterator;$/;"	t	typeref:struct:dictIterator
dictModifyHashKey	src\storage\rdb\redis\dict.h	120;"	d
dictSetHashKey	src\storage\rdb\redis\dict.h	113;"	d
dictSetHashVal	src\storage\rdb\redis\dict.h	102;"	d
dictSize	src\storage\rdb\redis\dict.h	134;"	d
dictSlots	src\storage\rdb\redis\dict.h	133;"	d
dictType	src\storage\rdb\redis\dict.h	/^typedef struct dictType {$/;"	s
dictType	src\storage\rdb\redis\dict.h	/^} dictType;$/;"	t	typeref:struct:dictType
dictht	src\storage\rdb\redis\dict.h	/^typedef struct dictht {$/;"	s
dictht	src\storage\rdb\redis\dict.h	/^} dictht;$/;"	t	typeref:struct:dictht
entry	src\storage\rdb\redis\dict.h	/^    dictEntry *entry, *nextEntry;$/;"	m	struct:dictIterator
hashFunction	src\storage\rdb\redis\dict.h	/^    unsigned int (*hashFunction)(const void *key);$/;"	m	struct:dictType
ht	src\storage\rdb\redis\dict.h	/^    dictht ht[2];$/;"	m	struct:dict
index	src\storage\rdb\redis\dict.h	/^    int table, index, safe;$/;"	m	struct:dictIterator
iterators	src\storage\rdb\redis\dict.h	/^    int iterators; \/* number of iterators currently running *\/$/;"	m	struct:dict
key	src\storage\rdb\redis\dict.h	/^    void *key;$/;"	m	struct:dictEntry
keyCompare	src\storage\rdb\redis\dict.h	/^    int (*keyCompare)(void *privdata, const void *key1, const void *key2);$/;"	m	struct:dictType
keyDestructor	src\storage\rdb\redis\dict.h	/^    void (*keyDestructor)(void *privdata, void *key);$/;"	m	struct:dictType
keyDup	src\storage\rdb\redis\dict.h	/^    void *(*keyDup)(void *privdata, const void *key);$/;"	m	struct:dictType
keyModify	src\storage\rdb\redis\dict.h	/^    void (*keyModify)(void *privdata, void *key1, void *key2);$/;"	m	struct:dictType
next	src\storage\rdb\redis\dict.h	/^    struct dictEntry *next;$/;"	m	struct:dictEntry	typeref:struct:dictEntry::dictEntry
nextEntry	src\storage\rdb\redis\dict.h	/^    dictEntry *entry, *nextEntry;$/;"	m	struct:dictIterator
privdata	src\storage\rdb\redis\dict.h	/^    void *privdata;$/;"	m	struct:dict
rdbsaving	src\storage\rdb\redis\dict.h	/^    int rdbsaving;$/;"	m	struct:dict
redisServer	src\storage\rdb\redis\dict.h	/^typedef struct redisServer redisServer;$/;"	t	typeref:struct:redisServer
rehashidx	src\storage\rdb\redis\dict.h	/^    int rehashidx; \/* rehashing not in progress if rehashidx == -1 *\/$/;"	m	struct:dict
safe	src\storage\rdb\redis\dict.h	/^    int table, index, safe;$/;"	m	struct:dictIterator
size	src\storage\rdb\redis\dict.h	/^    unsigned long size;$/;"	m	struct:dictht
sizemask	src\storage\rdb\redis\dict.h	/^    unsigned long sizemask;$/;"	m	struct:dictht
table	src\storage\rdb\redis\dict.h	/^    dictEntry **table;$/;"	m	struct:dictht
table	src\storage\rdb\redis\dict.h	/^    int table, index, safe;$/;"	m	struct:dictIterator
type	src\storage\rdb\redis\dict.h	/^    dictType *type;$/;"	m	struct:dict
used	src\storage\rdb\redis\dict.h	/^    unsigned long used;$/;"	m	struct:dictht
val	src\storage\rdb\redis\dict.h	/^    void *val;$/;"	m	struct:dictEntry
valDestructor	src\storage\rdb\redis\dict.h	/^    void (*valDestructor)(void *privdata, void *obj);$/;"	m	struct:dictType
valDup	src\storage\rdb\redis\dict.h	/^    void *(*valDup)(void *privdata, const void *obj);$/;"	m	struct:dictType
valModify	src\storage\rdb\redis\dict.h	/^    void (*valModify)(void *privdata, void *val1, void *val2);$/;"	m	struct:dictType
__REDIS_FILTER_LIST_H	src\storage\rdb\redis\filter_list.c	2;"	d	file:
_create_filter_node	src\storage\rdb\redis\filter_list.c	/^static struct filterNode* _create_filter_node(int8_t type, int len,$/;"	f	file:
_filter_node_cmp	src\storage\rdb\redis\filter_list.c	/^static int _filter_node_cmp(struct filterNode* node, int8_t type, int len,$/;"	f	file:
_free_filter_node	src\storage\rdb\redis\filter_list.c	/^static void _free_filter_node(struct filterNode* node) {$/;"	f	file:
add_filter_node	src\storage\rdb\redis\filter_list.c	/^int add_filter_node(struct filterList* list, int8_t type, int len, char* buff) {$/;"	f
add_filter_node1	src\storage\rdb\redis\filter_list.c	/^int add_filter_node1(struct filterList* list, struct filterNode* node) {$/;"	f
create_filter_list	src\storage\rdb\redis\filter_list.c	/^struct filterList* create_filter_list() {$/;"	f
create_filter_list_iterator	src\storage\rdb\redis\filter_list.c	/^struct filterListIterator* create_filter_list_iterator(struct filterList *list, int8_t type) {$/;"	f
free_filter_list	src\storage\rdb\redis\filter_list.c	/^int free_filter_list(struct filterList* list) {$/;"	f
free_filter_list_iterator	src\storage\rdb\redis\filter_list.c	/^void free_filter_list_iterator(struct filterListIterator *iter) {$/;"	f
next_filter_node	src\storage\rdb\redis\filter_list.c	/^struct filterNode* next_filter_node(struct filterListIterator* fli) {$/;"	f
remove_filter_node	src\storage\rdb\redis\filter_list.c	/^int remove_filter_node(struct filterList* list, int8_t type, int len, char* buff) {$/;"	f
reset_filter_list_iterator	src\storage\rdb\redis\filter_list.c	/^void reset_filter_list_iterator(struct filterListIterator* iter) {$/;"	f
search_filter_node	src\storage\rdb\redis\filter_list.c	/^unsigned int search_filter_node(struct filterList* list, int8_t type, int len, char* buff) {$/;"	f
_BSD_SOURCE	src\storage\rdb\redis\fmacros.h	5;"	d
_FILE_OFFSET_BITS	src\storage\rdb\redis\fmacros.h	20;"	d
_LARGEFILE_SOURCE	src\storage\rdb\redis\fmacros.h	17;"	d
_REDIS_FMACRO_H	src\storage\rdb\redis\fmacros.h	2;"	d
_XOPEN_SOURCE	src\storage\rdb\redis\fmacros.h	10;"	d
_XOPEN_SOURCE	src\storage\rdb\redis\fmacros.h	13;"	d
INTSET_ENC_INT16	src\storage\rdb\redis\intset.c	9;"	d	file:
INTSET_ENC_INT32	src\storage\rdb\redis\intset.c	10;"	d	file:
INTSET_ENC_INT64	src\storage\rdb\redis\intset.c	11;"	d	file:
_assert	src\storage\rdb\redis\intset.c	/^void _assert(char *estr, char *file, int line) {$/;"	f
_intsetGet	src\storage\rdb\redis\intset.c	/^static int64_t _intsetGet(intset *is, int pos) {$/;"	f	file:
_intsetGetEncoded	src\storage\rdb\redis\intset.c	/^static int64_t _intsetGetEncoded(intset *is, int pos, uint8_t enc) {$/;"	f	file:
_intsetSet	src\storage\rdb\redis\intset.c	/^static void _intsetSet(intset *is, int pos, int64_t value) {$/;"	f	file:
_intsetValueEncoding	src\storage\rdb\redis\intset.c	/^static uint8_t _intsetValueEncoding(int64_t v) {$/;"	f	file:
assert	src\storage\rdb\redis\intset.c	251;"	d	file:
checkConsistency	src\storage\rdb\redis\intset.c	/^void checkConsistency(intset *is) {$/;"	f
createSet	src\storage\rdb\redis\intset.c	/^intset *createSet(int bits, int size) {$/;"	f
error	src\storage\rdb\redis\intset.c	/^void error(char *err) {$/;"	f
intsetAdd	src\storage\rdb\redis\intset.c	/^intset *intsetAdd(intset *is, int64_t value, uint8_t *success) {$/;"	f
intsetFind	src\storage\rdb\redis\intset.c	/^uint8_t intsetFind(intset *is, int64_t value) {$/;"	f
intsetGet	src\storage\rdb\redis\intset.c	/^uint8_t intsetGet(intset *is, uint32_t pos, int64_t *value) {$/;"	f
intsetLen	src\storage\rdb\redis\intset.c	/^uint32_t intsetLen(intset *is) {$/;"	f
intsetMoveTail	src\storage\rdb\redis\intset.c	/^static void intsetMoveTail(intset *is, uint32_t from, uint32_t to) {$/;"	f	file:
intsetNew	src\storage\rdb\redis\intset.c	/^intset *intsetNew(void) {$/;"	f
intsetRandom	src\storage\rdb\redis\intset.c	/^int64_t intsetRandom(intset *is) {$/;"	f
intsetRemove	src\storage\rdb\redis\intset.c	/^intset *intsetRemove(intset *is, int64_t value, int *success) {$/;"	f
intsetRepr	src\storage\rdb\redis\intset.c	/^void intsetRepr(intset *is) {$/;"	f
intsetResize	src\storage\rdb\redis\intset.c	/^static intset *intsetResize(intset *is, uint32_t len) {$/;"	f	file:
intsetSearch	src\storage\rdb\redis\intset.c	/^static uint8_t intsetSearch(intset *is, int64_t value, uint32_t *pos) {$/;"	f	file:
intsetUpgradeAndAdd	src\storage\rdb\redis\intset.c	/^static intset *intsetUpgradeAndAdd(intset *is, int64_t value) {$/;"	f	file:
main	src\storage\rdb\redis\intset.c	/^int main(int argc, char **argv) {$/;"	f
ok	src\storage\rdb\redis\intset.c	/^void ok(void) {$/;"	f
usec	src\storage\rdb\redis\intset.c	/^long long usec(void) {$/;"	f
__INTSET_H	src\storage\rdb\redis\intset.h	2;"	d
contents	src\storage\rdb\redis\intset.h	/^    int8_t contents[];$/;"	m	struct:intset
encoding	src\storage\rdb\redis\intset.h	/^    uint32_t encoding;$/;"	m	struct:intset
intset	src\storage\rdb\redis\intset.h	/^typedef struct intset {$/;"	s
intset	src\storage\rdb\redis\intset.h	/^} intset;$/;"	t	typeref:struct:intset
length	src\storage\rdb\redis\intset.h	/^    uint32_t length;$/;"	m	struct:intset
LZF_H	src\storage\rdb\redis\lzf.h	38;"	d
LZF_VERSION	src\storage\rdb\redis\lzf.h	49;"	d
AVOID_ERRNO	src\storage\rdb\redis\lzfP.h	100;"	d
CHECK_INPUT	src\storage\rdb\redis\lzfP.h	121;"	d
HLOG	src\storage\rdb\redis\lzfP.h	55;"	d
INIT_HTAB	src\storage\rdb\redis\lzfP.h	91;"	d
LZFP_h	src\storage\rdb\redis\lzfP.h	38;"	d
LZF_STATE	src\storage\rdb\redis\lzfP.h	/^typedef const u8 *LZF_STATE[1 << (HLOG)];$/;"	t
LZF_STATE_ARG	src\storage\rdb\redis\lzfP.h	109;"	d
STANDALONE	src\storage\rdb\redis\lzfP.h	40;"	d
STRICT_ALIGN	src\storage\rdb\redis\lzfP.h	139;"	d
STRICT_ALIGN	src\storage\rdb\redis\lzfP.h	140;"	d
STRICT_ALIGN	src\storage\rdb\redis\lzfP.h	82;"	d
ULTRA_FAST	src\storage\rdb\redis\lzfP.h	75;"	d
VERY_FAST	src\storage\rdb\redis\lzfP.h	146;"	d
VERY_FAST	src\storage\rdb\redis\lzfP.h	64;"	d
u16	src\storage\rdb\redis\lzfP.h	/^    typedef unsigned int u16;$/;"	t
u16	src\storage\rdb\redis\lzfP.h	/^    typedef unsigned short u16;$/;"	t
u8	src\storage\rdb\redis\lzfP.h	/^typedef unsigned char u8;$/;"	t
FRST	src\storage\rdb\redis\lzf_c.c	48;"	d	file:
HSIZE	src\storage\rdb\redis\lzf_c.c	39;"	d	file:
IDX	src\storage\rdb\redis\lzf_c.c	51;"	d	file:
IDX	src\storage\rdb\redis\lzf_c.c	53;"	d	file:
IDX	src\storage\rdb\redis\lzf_c.c	55;"	d	file:
MAX_LIT	src\storage\rdb\redis\lzf_c.c	74;"	d	file:
MAX_OFF	src\storage\rdb\redis\lzf_c.c	75;"	d	file:
MAX_REF	src\storage\rdb\redis\lzf_c.c	76;"	d	file:
NEXT	src\storage\rdb\redis\lzf_c.c	49;"	d	file:
expect	src\storage\rdb\redis\lzf_c.c	79;"	d	file:
expect	src\storage\rdb\redis\lzf_c.c	82;"	d	file:
expect_false	src\storage\rdb\redis\lzf_c.c	86;"	d	file:
expect_true	src\storage\rdb\redis\lzf_c.c	87;"	d	file:
inline	src\storage\rdb\redis\lzf_c.c	80;"	d	file:
inline	src\storage\rdb\redis\lzf_c.c	83;"	d	file:
lzf_compress	src\storage\rdb\redis\lzf_c.c	/^lzf_compress (const void *const in_data, unsigned int in_len,$/;"	f
SET_ERRNO	src\storage\rdb\redis\lzf_d.c	40;"	d	file:
SET_ERRNO	src\storage\rdb\redis\lzf_d.c	43;"	d	file:
lzf_decompress	src\storage\rdb\redis\lzf_d.c	/^lzf_decompress (const void *const in_data,  unsigned int in_len,$/;"	f
createClient	src\storage\rdb\redis\networking.c	/^redisClient *createClient(struct redisServer *server, int index, int area) {$/;"	f
dupClientReplyValue	src\storage\rdb\redis\networking.c	/^void *dupClientReplyValue(void *o) {$/;"	f
dupLastObjectIfNeeded	src\storage\rdb\redis\networking.c	/^robj *dupLastObjectIfNeeded(list *reply) {$/;"	f
freeClient	src\storage\rdb\redis\networking.c	/^void freeClient(redisClient *c) {$/;"	f
freeClientArgv	src\storage\rdb\redis\networking.c	/^static void freeClientArgv(redisClient *c) {$/;"	f	file:
listMatchObjects	src\storage\rdb\redis\networking.c	/^int listMatchObjects(void *a, void *b) {$/;"	f
resetClient	src\storage\rdb\redis\networking.c	/^void resetClient(redisClient *c) {$/;"	f
checkType	src\storage\rdb\redis\object.c	/^int checkType(redisClient *c, robj *o, int type) {$/;"	f
compareStringObjects	src\storage\rdb\redis\object.c	/^int compareStringObjects(robj *a, robj *b) {$/;"	f
createHashObject	src\storage\rdb\redis\object.c	/^robj *createHashObject(void) {$/;"	f
createIntsetObject	src\storage\rdb\redis\object.c	/^robj *createIntsetObject(void) {$/;"	f
createListObject	src\storage\rdb\redis\object.c	/^robj *createListObject(void) {$/;"	f
createObject	src\storage\rdb\redis\object.c	/^robj *createObject(int type, void *ptr) {$/;"	f
createSetObject	src\storage\rdb\redis\object.c	/^robj *createSetObject(void) {$/;"	f
createStringObject	src\storage\rdb\redis\object.c	/^robj *createStringObject(char *ptr, size_t len, uint32_t logiclock, uint16_t version) {$/;"	f
createStringObjectFromLongLong	src\storage\rdb\redis\object.c	/^robj *createStringObjectFromLongLong(long long value) {$/;"	f
createZiplistObject	src\storage\rdb\redis\object.c	/^robj *createZiplistObject(void) {$/;"	f
createZsetObject	src\storage\rdb\redis\object.c	/^robj *createZsetObject(void) {$/;"	f
decrRefCount	src\storage\rdb\redis\object.c	/^void decrRefCount(void *obj) {$/;"	f
dupStringObject	src\storage\rdb\redis\object.c	/^robj *dupStringObject(robj *o) {$/;"	f
equalStringObjects	src\storage\rdb\redis\object.c	/^int equalStringObjects(robj *a, robj *b) {$/;"	f
estimateObjectIdleTime	src\storage\rdb\redis\object.c	/^unsigned long estimateObjectIdleTime(robj *o) {$/;"	f
forceFreeObject	src\storage\rdb\redis\object.c	/^void forceFreeObject(void *obj) {$/;"	f
freeHashObject	src\storage\rdb\redis\object.c	/^void freeHashObject(robj *o) {$/;"	f
freeListObject	src\storage\rdb\redis\object.c	/^void freeListObject(robj *o) {$/;"	f
freeSetObject	src\storage\rdb\redis\object.c	/^void freeSetObject(robj *o) {$/;"	f
freeStringObject	src\storage\rdb\redis\object.c	/^void freeStringObject(robj *o) {$/;"	f
freeZsetObject	src\storage\rdb\redis\object.c	/^void freeZsetObject(robj *o) {$/;"	f
getDecodedObject	src\storage\rdb\redis\object.c	/^robj *getDecodedObject(robj *o) {$/;"	f
getDoubleFromObject	src\storage\rdb\redis\object.c	/^int getDoubleFromObject(robj *o, double *target) {$/;"	f
getLongFromObject	src\storage\rdb\redis\object.c	/^int getLongFromObject(robj *o, long *target) {$/;"	f
getLongLongFromObject	src\storage\rdb\redis\object.c	/^int getLongLongFromObject(robj *o, long long *target) {$/;"	f
incrRefCount	src\storage\rdb\redis\object.c	/^void incrRefCount(robj *o) {$/;"	f
objectCommandLookup	src\storage\rdb\redis\object.c	/^robj *objectCommandLookup(redisClient *c, robj *key) {$/;"	f
strEncoding	src\storage\rdb\redis\object.c	/^char *strEncoding(int encoding) {$/;"	f
stringObjectLen	src\storage\rdb\redis\object.c	/^size_t stringObjectLen(robj *o) {$/;"	f
tryObjectEncoding	src\storage\rdb\redis\object.c	/^robj *tryObjectEncoding(robj *o) {$/;"	f
SWAPINIT	src\storage\rdb\redis\pqsort.c	66;"	d	file:
_pqsort	src\storage\rdb\redis\pqsort.c	/^_pqsort(void *a, size_t n, size_t es,$/;"	f	file:
med3	src\storage\rdb\redis\pqsort.c	/^med3(char *a, char *b, char *c,$/;"	f	file:
min	src\storage\rdb\redis\pqsort.c	50;"	d	file:
pqsort	src\storage\rdb\redis\pqsort.c	/^pqsort(void *a, size_t n, size_t es,$/;"	f
swap	src\storage\rdb\redis\pqsort.c	79;"	d	file:
swapcode	src\storage\rdb\redis\pqsort.c	55;"	d	file:
swapfunc	src\storage\rdb\redis\pqsort.c	/^swapfunc(char *a, char *b, size_t n, int swaptype)$/;"	f	file:
vecswap	src\storage\rdb\redis\pqsort.c	87;"	d	file:
__PQSORT_H	src\storage\rdb\redis\pqsort.h	9;"	d
rdbEncodeInteger	src\storage\rdb\redis\rdb.c	/^int rdbEncodeInteger(long long value, unsigned char *enc) {$/;"	f
rdbGenericLoadStringObject	src\storage\rdb\redis\rdb.c	/^robj *rdbGenericLoadStringObject(FILE*fp, int encode) {$/;"	f
rdbLoad	src\storage\rdb\redis\rdb.c	/^int rdbLoad(redisServer *server, char *filename, int dbnum) {$/;"	f
rdbLoadAttr	src\storage\rdb\redis\rdb.c	/^int rdbLoadAttr(FILE* fp, unsigned short* version, unsigned int* logiclock) {$/;"	f
rdbLoadDoubleValue	src\storage\rdb\redis\rdb.c	/^int rdbLoadDoubleValue(FILE *fp, double *val) {$/;"	f
rdbLoadEncodedStringObject	src\storage\rdb\redis\rdb.c	/^robj *rdbLoadEncodedStringObject(FILE *fp) {$/;"	f
rdbLoadFilterList	src\storage\rdb\redis\rdb.c	/^int rdbLoadFilterList(FILE *fp, struct filterList* plist) {$/;"	f
rdbLoadIntegerObject	src\storage\rdb\redis\rdb.c	/^robj *rdbLoadIntegerObject(FILE *fp, int enctype, int encode) {$/;"	f
rdbLoadLen	src\storage\rdb\redis\rdb.c	/^uint32_t rdbLoadLen(FILE *fp, int *isencoded) {$/;"	f
rdbLoadLzfStringObject	src\storage\rdb\redis\rdb.c	/^robj *rdbLoadLzfStringObject(FILE*fp) {$/;"	f
rdbLoadObject	src\storage\rdb\redis\rdb.c	/^robj *rdbLoadObject(redisServer *server, int type, FILE *fp) {$/;"	f
rdbLoadStringObject	src\storage\rdb\redis\rdb.c	/^robj *rdbLoadStringObject(FILE *fp) {$/;"	f
rdbLoadTime	src\storage\rdb\redis\rdb.c	/^time_t rdbLoadTime(FILE *fp) {$/;"	f
rdbLoadTimeStamp	src\storage\rdb\redis\rdb.c	/^int rdbLoadTimeStamp(FILE *fp, unsigned int *timestamp) {$/;"	f
rdbLoadType	src\storage\rdb\redis\rdb.c	/^int rdbLoadType(FILE *fp) {$/;"	f
rdbRemoveTempFile	src\storage\rdb\redis\rdb.c	/^void rdbRemoveTempFile(int dbnum) {$/;"	f
rdbSave	src\storage\rdb\redis\rdb.c	/^int rdbSave(redisServer *server, char *filename, int dbnum) {$/;"	f
rdbSaveAttr	src\storage\rdb\redis\rdb.c	/^int rdbSaveAttr(FILE *fp, unsigned short int version, unsigned int logiclock) {$/;"	f
rdbSaveDoubleValue	src\storage\rdb\redis\rdb.c	/^int rdbSaveDoubleValue(FILE *fp, double val) {$/;"	f
rdbSaveFilterList	src\storage\rdb\redis\rdb.c	/^int rdbSaveFilterList(FILE *fp, filterList *filter_list) {$/;"	f
rdbSaveLen	src\storage\rdb\redis\rdb.c	/^int rdbSaveLen(FILE *fp, uint32_t len) {$/;"	f
rdbSaveLongLongAsStringObject	src\storage\rdb\redis\rdb.c	/^int rdbSaveLongLongAsStringObject(FILE *fp, long long value) {$/;"	f
rdbSaveLzfStringObject	src\storage\rdb\redis\rdb.c	/^int rdbSaveLzfStringObject(FILE *fp, unsigned char *s, size_t len) {$/;"	f
rdbSaveObject	src\storage\rdb\redis\rdb.c	/^int rdbSaveObject(redisServer *server, FILE *fp, robj *o) {$/;"	f
rdbSaveRawString	src\storage\rdb\redis\rdb.c	/^int rdbSaveRawString(redisServer *server, FILE *fp, unsigned char *s, size_t len) {$/;"	f
rdbSaveStringObject	src\storage\rdb\redis\rdb.c	/^int rdbSaveStringObject(redisServer *server, FILE *fp, robj *obj) {$/;"	f
rdbSaveTime	src\storage\rdb\redis\rdb.c	/^int rdbSaveTime(FILE *fp, time_t t) {$/;"	f
rdbSaveTimeStamp	src\storage\rdb\redis\rdb.c	/^int rdbSaveTimeStamp(FILE *fp, unsigned int timestamp) {$/;"	f
rdbSaveType	src\storage\rdb\redis\rdb.c	/^int rdbSaveType(FILE *fp, unsigned char type) {$/;"	f
rdbSavedObjectLen	src\storage\rdb\redis\rdb.c	/^off_t rdbSavedObjectLen(redisServer *server, robj *o) {$/;"	f
rdbTryIntegerEncoding	src\storage\rdb\redis\rdb.c	/^int rdbTryIntegerEncoding(char *s, size_t len, unsigned char *enc) {$/;"	f
rdbWriteRaw	src\storage\rdb\redis\rdb.c	/^static int rdbWriteRaw(FILE *fp, void *p, size_t len) {$/;"	f	file:
startLoading	src\storage\rdb\redis\rdb.c	/^void startLoading(redisDb *db, FILE *fp) {$/;"	f
stopLoading	src\storage\rdb\redis\rdb.c	/^void stopLoading(redisDb *db) {$/;"	f
R_Nan	src\storage\rdb\redis\redis.c	/^double R_Zero, R_PosInf, R_NegInf, R_Nan;$/;"	v
R_NegInf	src\storage\rdb\redis\redis.c	/^double R_Zero, R_PosInf, R_NegInf, R_Nan;$/;"	v
R_PosInf	src\storage\rdb\redis\redis.c	/^double R_Zero, R_PosInf, R_NegInf, R_Nan;$/;"	v
R_Zero	src\storage\rdb\redis\redis.c	/^double R_Zero, R_PosInf, R_NegInf, R_Nan;$/;"	v
_redisAssert	src\storage\rdb\redis\redis.c	/^void _redisAssert(char *estr, char *file, int line) {$/;"	f
_redisPanic	src\storage\rdb\redis\redis.c	/^void _redisPanic(char *msg, char *file, int line) {$/;"	f
activeExpireCycle	src\storage\rdb\redis\redis.c	/^void activeExpireCycle(struct redisServer *server) {$/;"	f
activeExpireCycleByDb	src\storage\rdb\redis\redis.c	/^void activeExpireCycleByDb(struct redisServer *server, int index) {$/;"	f
bytesToHuman	src\storage\rdb\redis\redis.c	/^void bytesToHuman(char *s, unsigned long long n) {$/;"	f
call	src\storage\rdb\redis\redis.c	/^void call(redisClient *c) {$/;"	f
commandTableDictType	src\storage\rdb\redis\redis.c	/^dictType commandTableDictType = {$/;"	v
createSharedObjects	src\storage\rdb\redis\redis.c	/^void createSharedObjects() {$/;"	f
create_dump_thread_info	src\storage\rdb\redis\redis.c	/^struct dumpThreadInfo* create_dump_thread_info(redisServer *server, char *filename,$/;"	f
dbDictType	src\storage\rdb\redis\redis.c	/^dictType dbDictType = {$/;"	v
decr_max_memory_unsafe	src\storage\rdb\redis\redis.c	/^void decr_max_memory_unsafe(redisDb *db, unsigned long long _n) {$/;"	f
destoryDbLock	src\storage\rdb\redis\redis.c	/^void destoryDbLock(redisServer* server) {$/;"	f
dictEncObjHash	src\storage\rdb\redis\redis.c	/^unsigned int dictEncObjHash(const void *key) {$/;"	f
dictEncObjKeyCompare	src\storage\rdb\redis\redis.c	/^int dictEncObjKeyCompare(void *privdata, const void *key1,$/;"	f
dictListDestructor	src\storage\rdb\redis\redis.c	/^void dictListDestructor(void *privdata, void *val)$/;"	f
dictObjHash	src\storage\rdb\redis\redis.c	/^unsigned int dictObjHash(const void *key) {$/;"	f
dictObjKeyCompare	src\storage\rdb\redis\redis.c	/^int dictObjKeyCompare(void *privdata, const void *key1,$/;"	f
dictRedisObjectDestructor	src\storage\rdb\redis\redis.c	/^void dictRedisObjectDestructor(void *privdata, void *val)$/;"	f
dictRedisObjectModify	src\storage\rdb\redis\redis.c	/^void dictRedisObjectModify(void *privdata, void *key1, void *key2)$/;"	f
dictSdsCaseHash	src\storage\rdb\redis\redis.c	/^unsigned int dictSdsCaseHash(const void *key) {$/;"	f
dictSdsDestructor	src\storage\rdb\redis\redis.c	/^void dictSdsDestructor(void *privdata, void *val)$/;"	f
dictSdsHash	src\storage\rdb\redis\redis.c	/^unsigned int dictSdsHash(const void *key) {$/;"	f
dictSdsKeyCaseCompare	src\storage\rdb\redis\redis.c	/^int dictSdsKeyCaseCompare(void *privdata, const void *key1,$/;"	f
dictSdsKeyCompare	src\storage\rdb\redis\redis.c	/^int dictSdsKeyCompare(void *privdata, const void *key1,$/;"	f
dictVanillaFree	src\storage\rdb\redis\redis.c	/^void dictVanillaFree(void *privdata, void *val)$/;"	f
dump_db_thread	src\storage\rdb\redis\redis.c	/^void* dump_db_thread(void* argv) {$/;"	f
freeDBMemory	src\storage\rdb\redis\redis.c	/^int freeDBMemory(redisDb *db, int expires_db) {$/;"	f
freeDBMemoryIfNeeded	src\storage\rdb\redis\redis.c	/^void freeDBMemoryIfNeeded(struct redisDb *db) {$/;"	f
freeMemoryIfNeeded	src\storage\rdb\redis\redis.c	/^void freeMemoryIfNeeded(struct redisServer *server, int trigger) {$/;"	f
freeSharedObjects	src\storage\rdb\redis\redis.c	/^void freeSharedObjects() {$/;"	f
free_dump_thread_info	src\storage\rdb\redis\redis.c	/^void free_dump_thread_info(struct dumpThreadInfo* info) {$/;"	f
hashDictType	src\storage\rdb\redis\redis.c	/^dictType hashDictType = {$/;"	v
htNeedsResize	src\storage\rdb\redis\redis.c	/^int htNeedsResize(dict *dict) {$/;"	f
incr_max_memory_unsafe	src\storage\rdb\redis\redis.c	/^void incr_max_memory_unsafe(redisDb *db, unsigned long long _n) {$/;"	f
incrementallyRehash	src\storage\rdb\redis\redis.c	/^void incrementallyRehash(redisServer *server) {$/;"	f
incrementallyRehashByDb	src\storage\rdb\redis\redis.c	/^void incrementallyRehashByDb(redisServer *server, int index) {$/;"	f
initDbLock	src\storage\rdb\redis\redis.c	/^void initDbLock(redisServer* server, int max_dbnum) {$/;"	f
initServer	src\storage\rdb\redis\redis.c	/^void initServer(redisServer *server, const redisConfig *config) {$/;"	f
keylistDictType	src\storage\rdb\redis\redis.c	/^dictType keylistDictType = {$/;"	v
keyptrDictType	src\storage\rdb\redis\redis.c	/^dictType keyptrDictType = {$/;"	v
load_db_thread	src\storage\rdb\redis\redis.c	/^void* load_db_thread(void* argv) {$/;"	f
lock_db_memory_from_to	src\storage\rdb\redis\redis.c	/^void lock_db_memory_from_to(redisDb *db, int _from, int _to) {$/;"	f
logConfig	src\storage\rdb\redis\redis.c	/^struct redisLogConfig logConfig;$/;"	v	typeref:struct:redisLogConfig
oom	src\storage\rdb\redis\redis.c	/^void oom(const char *msg) {$/;"	f
processCommand	src\storage\rdb\redis\redis.c	/^int processCommand(redisClient *c) {$/;"	f
redisLog	src\storage\rdb\redis\redis.c	/^void redisLog(int level, const char *fmt, ...) {$/;"	f
serverCronByDb	src\storage\rdb\redis\redis.c	/^int serverCronByDb(struct redisServer *server, int index) {$/;"	f
setDBMaxmemory	src\storage\rdb\redis\redis.c	/^int setDBMaxmemory(redisServer *server, int id, uint64_t maxmem) {$/;"	f
setDictType	src\storage\rdb\redis\redis.c	/^dictType setDictType = {$/;"	v
shared	src\storage\rdb\redis\redis.c	/^struct sharedObjectsStruct shared;$/;"	v	typeref:struct:sharedObjectsStruct
shiftSpace	src\storage\rdb\redis\redis.c	/^int shiftSpace(struct redisDb *db) {$/;"	f
tryResizeHashTableByDb	src\storage\rdb\redis\redis.c	/^void tryResizeHashTableByDb(redisServer *server, int index) {$/;"	f
tryResizeHashTables	src\storage\rdb\redis\redis.c	/^void tryResizeHashTables(redisServer *server) {$/;"	f
unInitServer	src\storage\rdb\redis\redis.c	/^void unInitServer(redisServer* server) {$/;"	f
unlock_db_memory_from_to	src\storage\rdb\redis\redis.c	/^void unlock_db_memory_from_to(redisDb *db, int _from, int _to) {$/;"	f
updateDictResizePolicy	src\storage\rdb\redis\redis.c	/^void updateDictResizePolicy(redisServer *server) {$/;"	f
updateLRUClock	src\storage\rdb\redis\redis.c	/^void updateLRUClock() {$/;"	f
zsetDictType	src\storage\rdb\redis\redis.c	/^dictType zsetDictType = {$/;"	v
APPENDFSYNC_ALWAYS	src\storage\rdb\redis\redis.h	190;"	d
APPENDFSYNC_EVERYSEC	src\storage\rdb\redis\redis.h	191;"	d
APPENDFSYNC_NO	src\storage\rdb\redis\redis.h	189;"	d
EXPIRE_OR_NOT	src\storage\rdb\redis\redis.h	312;"	d
FILTER_TYPE_FIELD	src\storage\rdb\redis\redis.h	259;"	d
FILTER_TYPE_KEY	src\storage\rdb\redis\redis.h	260;"	d
FILTER_TYPE_VALUE	src\storage\rdb\redis\redis.h	261;"	d
NODE_TYPE_BUFFER	src\storage\rdb\redis\redis.h	224;"	d
NODE_TYPE_DOUBLE	src\storage\rdb\redis\redis.h	226;"	d
NODE_TYPE_LONGLONG	src\storage\rdb\redis\redis.h	225;"	d
NODE_TYPE_NULL	src\storage\rdb\redis\redis.h	222;"	d
NODE_TYPE_ROBJ	src\storage\rdb\redis\redis.h	223;"	d
REDIS_BLOCKED	src\storage\rdb\redis\redis.h	159;"	d
REDIS_CLOSE_AFTER_REPLY	src\storage\rdb\redis\redis.h	162;"	d
REDIS_CMD_DENYOOM	src\storage\rdb\redis\redis.h	91;"	d
REDIS_CMD_FORCE_REPLICATION	src\storage\rdb\redis\redis.h	92;"	d
REDIS_CONFIGLINE_MAX	src\storage\rdb\redis\redis.h	69;"	d
REDIS_DB_LESS_MEMORY	src\storage\rdb\redis\redis.h	79;"	d
REDIS_DB_STATUS_DUMPING	src\storage\rdb\redis\redis.h	347;"	d
REDIS_DB_STATUS_FORBIDDEN	src\storage\rdb\redis\redis.h	345;"	d
REDIS_DB_STATUS_LOADING	src\storage\rdb\redis\redis.h	346;"	d
REDIS_DB_STATUS_WORKING	src\storage\rdb\redis\redis.h	344;"	d
REDIS_DEBUG	src\storage\rdb\redis\redis.h	177;"	d
REDIS_DEFAULT_DBNUM	src\storage\rdb\redis\redis.h	68;"	d
REDIS_DEFAULT_DB_MAX_MEMOERY	src\storage\rdb\redis\redis.h	77;"	d
REDIS_DIRTY_CAS	src\storage\rdb\redis\redis.h	161;"	d
REDIS_ENCODING_HT	src\storage\rdb\redis\redis.h	109;"	d
REDIS_ENCODING_INT	src\storage\rdb\redis\redis.h	108;"	d
REDIS_ENCODING_INTSET	src\storage\rdb\redis\redis.h	113;"	d
REDIS_ENCODING_LINKEDLIST	src\storage\rdb\redis\redis.h	111;"	d
REDIS_ENCODING_RAW	src\storage\rdb\redis\redis.h	107;"	d
REDIS_ENCODING_SKIPLIST	src\storage\rdb\redis\redis.h	114;"	d
REDIS_ENCODING_ZIPLIST	src\storage\rdb\redis\redis.h	112;"	d
REDIS_ENCODING_ZIPMAP	src\storage\rdb\redis\redis.h	110;"	d
REDIS_EOF	src\storage\rdb\redis\redis.h	119;"	d
REDIS_ERR	src\storage\rdb\redis\redis.h	35;"	d
REDIS_ERR_ATTR	src\storage\rdb\redis\redis.h	59;"	d
REDIS_ERR_CNEGO_ERROR	src\storage\rdb\redis\redis.h	48;"	d
REDIS_ERR_DATA_LEN_LIMITED	src\storage\rdb\redis\redis.h	57;"	d
REDIS_ERR_EXPIRE_TIME_OUT	src\storage\rdb\redis\redis.h	30;"	d
REDIS_ERR_FORBIDDEN_ABOUT_PUBSUB	src\storage\rdb\redis\redis.h	43;"	d
REDIS_ERR_FORBIDDEN_INFO_SLAVEOF	src\storage\rdb\redis\redis.h	44;"	d
REDIS_ERR_INCDECR_OVERFLOW	src\storage\rdb\redis\redis.h	50;"	d
REDIS_ERR_IS_NOT_DOUBLE	src\storage\rdb\redis\redis.h	54;"	d
REDIS_ERR_IS_NOT_INTEGER	src\storage\rdb\redis\redis.h	51;"	d
REDIS_ERR_IS_NOT_NUMBER	src\storage\rdb\redis\redis.h	49;"	d
REDIS_ERR_LENGTHZERO	src\storage\rdb\redis\redis.h	36;"	d
REDIS_ERR_LOADINGERR	src\storage\rdb\redis\redis.h	42;"	d
REDIS_ERR_MEMORY_ALLOCATE_ERROR	src\storage\rdb\redis\redis.h	52;"	d
REDIS_ERR_NAMESPACE_ERROR	src\storage\rdb\redis\redis.h	56;"	d
REDIS_ERR_OPERATION_NOT_PERMITTED	src\storage\rdb\redis\redis.h	40;"	d
REDIS_ERR_OUT_OF_RANGE	src\storage\rdb\redis\redis.h	53;"	d
REDIS_ERR_QUEUED	src\storage\rdb\redis\redis.h	41;"	d
REDIS_ERR_REACH_MAXMEMORY	src\storage\rdb\redis\redis.h	37;"	d
REDIS_ERR_SYNTAX_ERROR	src\storage\rdb\redis\redis.h	55;"	d
REDIS_ERR_UNKNOWN_COMMAND	src\storage\rdb\redis\redis.h	38;"	d
REDIS_ERR_VERSION_ERROR	src\storage\rdb\redis\redis.h	45;"	d
REDIS_ERR_WRONG_NUMBER_ARGUMENTS	src\storage\rdb\redis\redis.h	39;"	d
REDIS_ERR_WRONG_TYPE_ERROR	src\storage\rdb\redis\redis.h	47;"	d
REDIS_EXPIRELOOKUPS_PER_CRON	src\storage\rdb\redis\redis.h	71;"	d
REDIS_EXPIRETIME	src\storage\rdb\redis\redis.h	117;"	d
REDIS_HASH	src\storage\rdb\redis\redis.h	99;"	d
REDIS_HASH_KEY	src\storage\rdb\redis\redis.h	577;"	d
REDIS_HASH_MAX_ZIPMAP_ENTRIES	src\storage\rdb\redis\redis.h	194;"	d
REDIS_HASH_MAX_ZIPMAP_VALUE	src\storage\rdb\redis\redis.h	195;"	d
REDIS_HASH_VALUE	src\storage\rdb\redis\redis.h	578;"	d
REDIS_HEAD	src\storage\rdb\redis\redis.h	167;"	d
REDIS_HT_MINFILL	src\storage\rdb\redis\redis.h	82;"	d
REDIS_IOBUF_LEN	src\storage\rdb\redis\redis.h	65;"	d
REDIS_IO_WAIT	src\storage\rdb\redis\redis.h	160;"	d
REDIS_IS_DUMPING	src\storage\rdb\redis\redis.h	27;"	d
REDIS_IS_LOADING	src\storage\rdb\redis\redis.h	28;"	d
REDIS_LIST	src\storage\rdb\redis\redis.h	96;"	d
REDIS_LIST_MAX_ZIPLIST_ENTRIES	src\storage\rdb\redis\redis.h	196;"	d
REDIS_LIST_MAX_ZIPLIST_VALUE	src\storage\rdb\redis\redis.h	197;"	d
REDIS_LOADBUF_LEN	src\storage\rdb\redis\redis.h	66;"	d
REDIS_LRU_CLOCK_MAX	src\storage\rdb\redis\redis.h	291;"	d
REDIS_LRU_CLOCK_RESOLUTION	src\storage\rdb\redis\redis.h	292;"	d
REDIS_MASTER	src\storage\rdb\redis\redis.h	156;"	d
REDIS_MAXIDLETIME	src\storage\rdb\redis\redis.h	64;"	d
REDIS_MAXMEMORY_ALLKEYS_LRU	src\storage\rdb\redis\redis.h	209;"	d
REDIS_MAXMEMORY_ALLKEYS_RANDOM	src\storage\rdb\redis\redis.h	210;"	d
REDIS_MAXMEMORY_NO_EVICTION	src\storage\rdb\redis\redis.h	211;"	d
REDIS_MAXMEMORY_VOLATILE_LRU	src\storage\rdb\redis\redis.h	206;"	d
REDIS_MAXMEMORY_VOLATILE_RANDOM	src\storage\rdb\redis\redis.h	208;"	d
REDIS_MAXMEMORY_VOLATILE_TTL	src\storage\rdb\redis\redis.h	207;"	d
REDIS_MAX_COMPLETED_JOBS_PROCESSED	src\storage\rdb\redis\redis.h	152;"	d
REDIS_MAX_LOGMSG_LEN	src\storage\rdb\redis\redis.h	76;"	d
REDIS_MAX_SYNC_TIME	src\storage\rdb\redis\redis.h	70;"	d
REDIS_MAX_WRITE_PER_EVENT	src\storage\rdb\redis\redis.h	72;"	d
REDIS_MONITOR	src\storage\rdb\redis\redis.h	157;"	d
REDIS_MULTI	src\storage\rdb\redis\redis.h	158;"	d
REDIS_NONE	src\storage\rdb\redis\redis.h	101;"	d
REDIS_NOTICE	src\storage\rdb\redis\redis.h	179;"	d
REDIS_NOTUSED	src\storage\rdb\redis\redis.h	183;"	d
REDIS_OK	src\storage\rdb\redis\redis.h	34;"	d
REDIS_OK_BUT_ALREADY_EXIST	src\storage\rdb\redis\redis.h	29;"	d
REDIS_OK_BUT_CONE	src\storage\rdb\redis\redis.h	32;"	d
REDIS_OK_BUT_CZERO	src\storage\rdb\redis\redis.h	33;"	d
REDIS_OK_NOT_EXIST	src\storage\rdb\redis\redis.h	31;"	d
REDIS_OK_RANGE_HAVE_NONE	src\storage\rdb\redis\redis.h	46;"	d
REDIS_OP_DIFF	src\storage\rdb\redis\redis.h	202;"	d
REDIS_OP_INTER	src\storage\rdb\redis\redis.h	203;"	d
REDIS_OP_UNION	src\storage\rdb\redis\redis.h	201;"	d
REDIS_RDB_14BITLEN	src\storage\rdb\redis\redis.h	135;"	d
REDIS_RDB_32BITLEN	src\storage\rdb\redis\redis.h	136;"	d
REDIS_RDB_6BITLEN	src\storage\rdb\redis\redis.h	134;"	d
REDIS_RDB_ENCVAL	src\storage\rdb\redis\redis.h	137;"	d
REDIS_RDB_ENC_INT16	src\storage\rdb\redis\redis.h	144;"	d
REDIS_RDB_ENC_INT32	src\storage\rdb\redis\redis.h	145;"	d
REDIS_RDB_ENC_INT8	src\storage\rdb\redis\redis.h	143;"	d
REDIS_RDB_ENC_LZF	src\storage\rdb\redis\redis.h	146;"	d
REDIS_RDB_LENERR	src\storage\rdb\redis\redis.h	138;"	d
REDIS_REPLY_CHUNK_BYTES	src\storage\rdb\redis\redis.h	75;"	d
REDIS_REQUEST_MAX_SIZE	src\storage\rdb\redis\redis.h	73;"	d
REDIS_SAME_OBJECT_ERR	src\storage\rdb\redis\redis.h	58;"	d
REDIS_SELECTDB	src\storage\rdb\redis\redis.h	118;"	d
REDIS_SERVERPORT	src\storage\rdb\redis\redis.h	63;"	d
REDIS_SET	src\storage\rdb\redis\redis.h	97;"	d
REDIS_SET_MAX_INTSET_ENTRIES	src\storage\rdb\redis\redis.h	198;"	d
REDIS_SHARED_INTEGERS	src\storage\rdb\redis\redis.h	74;"	d
REDIS_SLAVE	src\storage\rdb\redis\redis.h	155;"	d
REDIS_SORTKEY_MAX	src\storage\rdb\redis\redis.h	174;"	d
REDIS_SORT_ASC	src\storage\rdb\redis\redis.h	172;"	d
REDIS_SORT_DESC	src\storage\rdb\redis\redis.h	173;"	d
REDIS_SORT_GET	src\storage\rdb\redis\redis.h	171;"	d
REDIS_STATIC_ARGS	src\storage\rdb\redis\redis.h	67;"	d
REDIS_STRING	src\storage\rdb\redis\redis.h	95;"	d
REDIS_TAIL	src\storage\rdb\redis\redis.h	168;"	d
REDIS_UNBLOCKED	src\storage\rdb\redis\redis.h	163;"	d
REDIS_UNKNOWN	src\storage\rdb\redis\redis.h	102;"	d
REDIS_VERBOSE	src\storage\rdb\redis\redis.h	178;"	d
REDIS_VERIFY_FAILED	src\storage\rdb\redis\redis.h	60;"	d
REDIS_VMPOINTER	src\storage\rdb\redis\redis.h	100;"	d
REDIS_WARNING	src\storage\rdb\redis\redis.h	180;"	d
REDIS_ZSET	src\storage\rdb\redis\redis.h	98;"	d
ZSKIPLIST_MAXLEVEL	src\storage\rdb\redis\redis.h	185;"	d
ZSKIPLIST_P	src\storage\rdb\redis\redis.h	186;"	d
__REDIS_H	src\storage\rdb\redis\redis.h	2;"	d
_obj	src\storage\rdb\redis\redis.h	/^    union _obj {$/;"	u	struct:value_item_node
_redisSortObject	src\storage\rdb\redis\redis.h	/^typedef struct _redisSortObject {$/;"	s
_redisSortOperation	src\storage\rdb\redis\redis.h	/^typedef struct _redisSortOperation {$/;"	s
activerehashing	src\storage\rdb\redis\redis.h	/^    int activerehashing;$/;"	m	struct:redisServer
area	src\storage\rdb\redis\redis.h	/^    int area;$/;"	m	struct:dumpThreadInfo
area_conf	src\storage\rdb\redis\redis.h	/^    redisAreaConf *area_conf;$/;"	m	struct:redisClient
area_confs	src\storage\rdb\redis\redis.h	/^    redisAreaConf *area_confs;$/;"	m	struct:redisServer
area_group_end	src\storage\rdb\redis\redis.h	/^    int area_group_end;$/;"	m	struct:redisDb
area_group_num	src\storage\rdb\redis\redis.h	/^    int area_group_num;$/;"	m	struct:redisServer
area_group_num	src\storage\rdb\redis\redis.h	/^  int area_group_num;$/;"	m	struct:redisConfig
area_group_start	src\storage\rdb\redis\redis.h	/^    int area_group_start;$/;"	m	struct:redisDb
argc	src\storage\rdb\redis\redis.h	/^    int argc;$/;"	m	struct:redisClient
argc	src\storage\rdb\redis\redis.h	/^    int argc;$/;"	m	struct:redisCommand
argv	src\storage\rdb\redis\redis.h	/^    robj **argv;$/;"	m	struct:redisClient
backward	src\storage\rdb\redis\redis.h	/^    struct zskiplistNode *backward;$/;"	m	struct:zskiplistNode	typeref:struct:zskiplistNode::zskiplistNode
buff	src\storage\rdb\redis\redis.h	/^    char buff[];$/;"	m	struct:filterNode
changes	src\storage\rdb\redis\redis.h	/^    int changes;$/;"	m	struct:saveparam
clients	src\storage\rdb\redis\redis.h	/^    redisClient **clients;$/;"	m	struct:redisServer
cmd	src\storage\rdb\redis\redis.h	/^    struct redisCommand *cmd;$/;"	m	struct:redisClient	typeref:struct:redisClient::redisCommand
cmpobj	src\storage\rdb\redis\redis.h	/^        robj *cmpobj;$/;"	m	union:_redisSortObject::__anon29
create_load_thread_info	src\storage\rdb\redis\redis.h	895;"	d
cronloops	src\storage\rdb\redis\redis.h	/^    int cronloops;              \/* number of times the cron function run *\/$/;"	m	struct:redisServer
db	src\storage\rdb\redis\redis.h	/^    redisDb *db;$/;"	m	struct:redisClient
db	src\storage\rdb\redis\redis.h	/^    redisDb *db;$/;"	m	struct:redisServer
db_maxmemory	src\storage\rdb\redis\redis.h	/^  const char* db_maxmemory;$/;"	m	struct:redisConfig
db_mutexs	src\storage\rdb\redis\redis.h	/^    pthread_mutex_t *db_mutexs;$/;"	m	struct:redisServer
db_num	src\storage\rdb\redis\redis.h	/^    int db_num;$/;"	m	struct:redisServer
de	src\storage\rdb\redis\redis.h	/^    dictEntry *de;$/;"	m	struct:__anon33
di	src\storage\rdb\redis\redis.h	/^    dictIterator *di;$/;"	m	struct:__anon32
di	src\storage\rdb\redis\redis.h	/^    dictIterator *di;$/;"	m	struct:__anon33
dict	src\storage\rdb\redis\redis.h	/^    struct dict *dict;$/;"	m	struct:redisDb	typeref:struct:redisDb::dict
dict	src\storage\rdb\redis\redis.h	/^    struct dict *dict;$/;"	m	struct:zset	typeref:struct:zset::dict
dictid	src\storage\rdb\redis\redis.h	/^    int dictid;$/;"	m	struct:redisClient
direction	src\storage\rdb\redis\redis.h	/^    unsigned char direction; \/* Iteration direction *\/$/;"	m	struct:__anon30
dirty	src\storage\rdb\redis\redis.h	/^    long long dirty;            \/* changes to DB from the last save *\/$/;"	m	struct:redisDb
dnum	src\storage\rdb\redis\redis.h	/^        double dnum;$/;"	m	union:value_item_node::_obj
dnum	src\storage\rdb\redis\redis.h	/^    double dnum;$/;"	m	union:ret_val
dumpThreadInfo	src\storage\rdb\redis\redis.h	/^struct dumpThreadInfo {$/;"	s
dumpThreadInfo	src\storage\rdb\redis\redis.h	/^typedef struct dumpThreadInfo dumpThreadInfo;$/;"	t	typeref:struct:dumpThreadInfo
encoding	src\storage\rdb\redis\redis.h	/^    int encoding;$/;"	m	struct:__anon32
encoding	src\storage\rdb\redis\redis.h	/^    int encoding;$/;"	m	struct:__anon33
encoding	src\storage\rdb\redis\redis.h	/^    unsigned char encoding;$/;"	m	struct:__anon30
encoding	src\storage\rdb\redis\redis.h	/^    unsigned encoding:4;$/;"	m	struct:redisObject
expires	src\storage\rdb\redis\redis.h	/^    struct dict *expires;              \/* Timeout of keys with a timeout set *\/$/;"	m	struct:redisDb	typeref:struct:redisDb::dict
expiretime	src\storage\rdb\redis\redis.h	/^    long expiretime;$/;"	m	struct:redisClient
filename	src\storage\rdb\redis\redis.h	/^    char* filename;$/;"	m	struct:dumpThreadInfo
filterList	src\storage\rdb\redis\redis.h	/^typedef struct filterList {$/;"	s
filterList	src\storage\rdb\redis\redis.h	/^} filterList;$/;"	t	typeref:struct:filterList
filterListIterator	src\storage\rdb\redis\redis.h	/^typedef struct filterListIterator {$/;"	s
filterListIterator	src\storage\rdb\redis\redis.h	/^} filterListIterator;$/;"	t	typeref:struct:filterListIterator
filterNode	src\storage\rdb\redis\redis.h	/^typedef struct filterNode {$/;"	s
filterNode	src\storage\rdb\redis\redis.h	/^} filterNode;$/;"	t	typeref:struct:filterNode
filter_list	src\storage\rdb\redis\redis.h	/^    struct filterList filter_list;$/;"	m	struct:redisDb	typeref:struct:redisDb::filterList
flags	src\storage\rdb\redis\redis.h	/^    int flags;$/;"	m	struct:redisCommand
forward	src\storage\rdb\redis\redis.h	/^        struct zskiplistNode *forward;$/;"	m	struct:zskiplistNode::zskiplistLevel	typeref:struct:zskiplistNode::zskiplistLevel::zskiplistNode
free_load_thread_info	src\storage\rdb\redis\redis.h	897;"	d
hashTypeIterator	src\storage\rdb\redis\redis.h	/^} hashTypeIterator;$/;"	t	typeref:struct:__anon33
hash_max_size	src\storage\rdb\redis\redis.h	/^    int hash_max_size;$/;"	m	struct:redisAreaConf
hash_max_size	src\storage\rdb\redis\redis.h	/^  int hash_max_size;$/;"	m	struct:redisConfig
hash_max_zipmap_entries	src\storage\rdb\redis\redis.h	/^    size_t hash_max_zipmap_entries;$/;"	m	struct:redisServer
hash_max_zipmap_value	src\storage\rdb\redis\redis.h	/^    size_t hash_max_zipmap_value;$/;"	m	struct:redisServer
head	src\storage\rdb\redis\redis.h	/^    struct filterNode* head;$/;"	m	struct:filterList	typeref:struct:filterList::filterNode
head	src\storage\rdb\redis\redis.h	/^    struct filterNode* head;$/;"	m	struct:filterListIterator	typeref:struct:filterListIterator::filterNode
head	src\storage\rdb\redis\redis.h	/^    struct value_item_node* head;$/;"	m	struct:value_item_list	typeref:struct:value_item_list::value_item_node
header	src\storage\rdb\redis\redis.h	/^    struct zskiplistNode *header, *tail;$/;"	m	struct:zskiplist	typeref:struct:zskiplist::zskiplistNode
hit_count	src\storage\rdb\redis\redis.h	/^    int hit_count;$/;"	m	struct:redisDb
id	src\storage\rdb\redis\redis.h	/^    int id;$/;"	m	struct:redisAreaConf
id	src\storage\rdb\redis\redis.h	/^    int id;$/;"	m	struct:redisDb
ii	src\storage\rdb\redis\redis.h	/^    int ii; \/* intset iterator *\/$/;"	m	struct:__anon32
initStaticStringObject	src\storage\rdb\redis\redis.h	305;"	d
lastsave	src\storage\rdb\redis\redis.h	/^    time_t lastsave;$/;"	m	struct:redisDb
len	src\storage\rdb\redis\redis.h	/^    int len;$/;"	m	struct:filterNode
len	src\storage\rdb\redis\redis.h	/^    int len;$/;"	m	struct:value_item_list
length	src\storage\rdb\redis\redis.h	/^    unsigned long length;$/;"	m	struct:zskiplist
level	src\storage\rdb\redis\redis.h	/^    int level;$/;"	m	struct:zskiplist
level	src\storage\rdb\redis\redis.h	/^    } level[];$/;"	m	struct:zskiplistNode	typeref:struct:zskiplistNode::zskiplistLevel
li	src\storage\rdb\redis\redis.h	/^    listTypeIterator *li;$/;"	m	struct:__anon31
listTypeEntry	src\storage\rdb\redis\redis.h	/^} listTypeEntry;$/;"	t	typeref:struct:__anon31
listTypeIterator	src\storage\rdb\redis\redis.h	/^} listTypeIterator;$/;"	t	typeref:struct:__anon30
list_len	src\storage\rdb\redis\redis.h	/^    uint32_t list_len;     \/* after insert, length of list *\/$/;"	m	struct:push_return_value
list_max_size	src\storage\rdb\redis\redis.h	/^    int list_max_size;$/;"	m	struct:redisAreaConf
list_max_size	src\storage\rdb\redis\redis.h	/^  int list_max_size;$/;"	m	struct:redisConfig
list_max_ziplist_entries	src\storage\rdb\redis\redis.h	/^    size_t list_max_ziplist_entries;$/;"	m	struct:redisServer
list_max_ziplist_value	src\storage\rdb\redis\redis.h	/^    size_t list_max_ziplist_value;$/;"	m	struct:redisServer
llnum	src\storage\rdb\redis\redis.h	/^        long long llnum;$/;"	m	union:value_item_node::_obj
llnum	src\storage\rdb\redis\redis.h	/^    long long llnum;$/;"	m	union:ret_val
ln	src\storage\rdb\redis\redis.h	/^    listNode *ln;       \/* Entry in linked list *\/$/;"	m	struct:__anon31
ln	src\storage\rdb\redis\redis.h	/^    listNode *ln;$/;"	m	struct:__anon30
loadThreadInfo	src\storage\rdb\redis\redis.h	/^typedef struct dumpThreadInfo loadThreadInfo;$/;"	t	typeref:struct:dumpThreadInfo
loading	src\storage\rdb\redis\redis.h	/^    int loading;$/;"	m	struct:redisDb
loading_loaded_bytes	src\storage\rdb\redis\redis.h	/^    off_t loading_loaded_bytes;$/;"	m	struct:redisDb
loading_start_time	src\storage\rdb\redis\redis.h	/^    time_t loading_start_time;$/;"	m	struct:redisDb
loading_total_bytes	src\storage\rdb\redis\redis.h	/^    off_t loading_total_bytes;$/;"	m	struct:redisDb
lock	src\storage\rdb\redis\redis.h	/^    pthread_mutex_t lock;$/;"	m	struct:redisAreaConf
lock	src\storage\rdb\redis\redis.h	/^    pthread_mutex_t lock;$/;"	m	struct:redisDb
logfile	src\storage\rdb\redis\redis.h	/^    char *logfile;$/;"	m	struct:redisLogConfig
logiclock	src\storage\rdb\redis\redis.h	/^    uint32_t logiclock;$/;"	m	struct:redisDb
lru	src\storage\rdb\redis\redis.h	/^    unsigned lru:24;        \/* lru time (relative to server.lruclock) *\/$/;"	m	struct:redisObject
lruclock	src\storage\rdb\redis\redis.h	/^    unsigned lruclock:22;        \/* clock incrementing every minute, for LRU *\/$/;"	m	struct:sharedObjectsStruct
lruclock_padding	src\storage\rdb\redis\redis.h	/^    unsigned lruclock_padding:10;$/;"	m	struct:redisServer
mainthread	src\storage\rdb\redis\redis.h	/^    pthread_t mainthread;$/;"	m	struct:redisServer
max_count	src\storage\rdb\redis\redis.h	/^    int max_count;$/;"	m	struct:redisClient
maxmemory	src\storage\rdb\redis\redis.h	/^    unsigned long long maxmemory;$/;"	m	struct:redisDb
maxmemory	src\storage\rdb\redis\redis.h	/^    unsigned long long maxmemory;$/;"	m	struct:redisServer
maxmemory	src\storage\rdb\redis\redis.h	/^  const char* maxmemory;$/;"	m	struct:redisConfig
maxmemory_policy	src\storage\rdb\redis\redis.h	/^    int maxmemory_policy;$/;"	m	struct:redisServer
maxmemory_policy	src\storage\rdb\redis\redis.h	/^  int maxmemory_policy;$/;"	m	struct:redisConfig
maxmemory_samples	src\storage\rdb\redis\redis.h	/^    int maxmemory_samples;$/;"	m	struct:redisDb
maxmemory_samples	src\storage\rdb\redis\redis.h	/^    int maxmemory_samples;$/;"	m	struct:redisServer
maxmemory_samples	src\storage\rdb\redis\redis.h	/^  int maxmemory_samples;$/;"	m	struct:redisConfig
name	src\storage\rdb\redis\redis.h	/^    char *name;$/;"	m	struct:redisCommand
name	src\storage\rdb\redis\redis.h	/^    char *name;$/;"	m	struct:redisFunctionSym
need_remove_key	src\storage\rdb\redis\redis.h	/^    size_t need_remove_key;$/;"	m	struct:redisDb
next	src\storage\rdb\redis\redis.h	/^    struct filterNode* next;$/;"	m	struct:filterListIterator	typeref:struct:filterListIterator::filterNode
next	src\storage\rdb\redis\redis.h	/^    struct filterNode* next;$/;"	m	struct:filterNode	typeref:struct:filterNode::filterNode
next	src\storage\rdb\redis\redis.h	/^    struct value_item_node* next;$/;"	m	struct:value_item_iterator	typeref:struct:value_item_iterator::value_item_node
next	src\storage\rdb\redis\redis.h	/^    struct value_item_node* next;$/;"	m	struct:value_item_node	typeref:struct:value_item_node::value_item_node
now	src\storage\rdb\redis\redis.h	/^    int now;$/;"	m	struct:value_item_iterator
obj	src\storage\rdb\redis\redis.h	/^        void* obj;$/;"	m	union:value_item_node::_obj
obj	src\storage\rdb\redis\redis.h	/^    robj *obj;$/;"	m	struct:_redisSortObject
obj	src\storage\rdb\redis\redis.h	/^    robj *obj;$/;"	m	struct:zskiplistNode
obj	src\storage\rdb\redis\redis.h	/^    } obj;$/;"	m	struct:value_item_node	typeref:union:value_item_node::_obj
old_dbnum	src\storage\rdb\redis\redis.h	/^    int old_dbnum;          \/* last db num *\/$/;"	m	struct:redisClient
oldargc	src\storage\rdb\redis\redis.h	/^    int oldargc;            \/* last max argc *\/$/;"	m	struct:redisClient
password	src\storage\rdb\redis\redis.h	/^    char* password;$/;"	m	struct:redisAreaConf
password	src\storage\rdb\redis\redis.h	/^    char* password;$/;"	m	struct:redisServer
password	src\storage\rdb\redis\redis.h	/^  const char* password;$/;"	m	struct:redisConfig
pattern	src\storage\rdb\redis\redis.h	/^    robj *pattern;$/;"	m	struct:_redisSortOperation
pointer	src\storage\rdb\redis\redis.h	/^    unsigned long pointer;$/;"	m	struct:redisFunctionSym
pre	src\storage\rdb\redis\redis.h	/^    struct value_item_node* pre;$/;"	m	struct:value_item_node	typeref:struct:value_item_node::value_item_node
proc	src\storage\rdb\redis\redis.h	/^    redisCommandProc *proc;$/;"	m	struct:redisCommand
ptr	src\storage\rdb\redis\redis.h	/^    void *ptr;$/;"	m	struct:redisObject
push_return_value	src\storage\rdb\redis\redis.h	/^typedef struct push_return_value {$/;"	s
push_return_value	src\storage\rdb\redis\redis.h	/^} push_return_value;$/;"	t	typeref:struct:push_return_value
pushed_num	src\storage\rdb\redis\redis.h	/^    uint32_t pushed_num;   \/* amount of pushed values successfull*\/$/;"	m	struct:push_return_value
rdb_compression	src\storage\rdb\redis\redis.h	/^    int rdb_compression;$/;"	m	struct:redisServer
read_count	src\storage\rdb\redis\redis.h	/^    int read_count;$/;"	m	struct:redisDb
redisAreaConf	src\storage\rdb\redis\redis.h	/^typedef struct redisAreaConf {$/;"	s
redisAreaConf	src\storage\rdb\redis\redis.h	/^} redisAreaConf;$/;"	t	typeref:struct:redisAreaConf
redisAssert	src\storage\rdb\redis\redis.h	214;"	d
redisClient	src\storage\rdb\redis\redis.h	/^typedef struct redisClient {$/;"	s
redisClient	src\storage\rdb\redis\redis.h	/^} redisClient;$/;"	t	typeref:struct:redisClient
redisCommand	src\storage\rdb\redis\redis.h	/^struct redisCommand {$/;"	s
redisCommandProc	src\storage\rdb\redis\redis.h	/^typedef void redisCommandProc(redisClient *c);$/;"	t
redisConfig	src\storage\rdb\redis\redis.h	/^typedef struct redisConfig {$/;"	s
redisConfig	src\storage\rdb\redis\redis.h	/^} redisConfig;$/;"	t	typeref:struct:redisConfig
redisDb	src\storage\rdb\redis\redis.h	/^typedef struct redisDb {$/;"	s
redisDb	src\storage\rdb\redis\redis.h	/^} redisDb;$/;"	t	typeref:struct:redisDb
redisFunctionSym	src\storage\rdb\redis\redis.h	/^struct redisFunctionSym {$/;"	s
redisLogConfig	src\storage\rdb\redis\redis.h	/^struct redisLogConfig {$/;"	s
redisObject	src\storage\rdb\redis\redis.h	/^typedef struct redisObject {$/;"	s
redisPanic	src\storage\rdb\redis\redis.h	215;"	d
redisServer	src\storage\rdb\redis\redis.h	/^struct redisServer {$/;"	s
redisSortObject	src\storage\rdb\redis\redis.h	/^} redisSortObject;$/;"	t	typeref:struct:_redisSortObject
redisSortOperation	src\storage\rdb\redis\redis.h	/^} redisSortOperation;$/;"	t	typeref:struct:_redisSortOperation
refcount	src\storage\rdb\redis\redis.h	/^    int refcount;$/;"	m	struct:redisObject
remove_count	src\storage\rdb\redis\redis.h	/^    int remove_count;$/;"	m	struct:redisDb
ret_val	src\storage\rdb\redis\redis.h	/^typedef union ret_val {$/;"	u
ret_val	src\storage\rdb\redis\redis.h	/^} ret_val;$/;"	t	typeref:union:ret_val
return_value	src\storage\rdb\redis\redis.h	/^    void* return_value; \/\/return value by list$/;"	m	struct:redisClient
returncode	src\storage\rdb\redis\redis.h	/^    int returncode; \/\/return code for example REDIS_OK;$/;"	m	struct:redisClient
retvalue	src\storage\rdb\redis\redis.h	/^    ret_val retvalue;  \/\/integer or double value$/;"	m	struct:redisClient
robj	src\storage\rdb\redis\redis.h	/^} robj;$/;"	t	typeref:struct:redisObject
saveparam	src\storage\rdb\redis\redis.h	/^struct saveparam {$/;"	s
score	src\storage\rdb\redis\redis.h	/^        double score;$/;"	m	union:_redisSortObject::__anon29
score	src\storage\rdb\redis\redis.h	/^    double score;$/;"	m	struct:zskiplistNode
seconds	src\storage\rdb\redis\redis.h	/^    time_t seconds;$/;"	m	struct:saveparam
server	src\storage\rdb\redis\redis.h	/^    struct redisServer *server;$/;"	m	struct:dumpThreadInfo	typeref:struct:dumpThreadInfo::redisServer
server	src\storage\rdb\redis\redis.h	/^    struct redisServer *server;$/;"	m	struct:redisClient	typeref:struct:redisClient::redisServer
setTypeIterator	src\storage\rdb\redis\redis.h	/^} setTypeIterator;$/;"	t	typeref:struct:__anon32
set_max_intset_entries	src\storage\rdb\redis\redis.h	/^    size_t set_max_intset_entries;$/;"	m	struct:redisServer
set_max_size	src\storage\rdb\redis\redis.h	/^    int set_max_size;$/;"	m	struct:redisAreaConf
set_max_size	src\storage\rdb\redis\redis.h	/^  int set_max_size;$/;"	m	struct:redisConfig
sharedObjectsStruct	src\storage\rdb\redis\redis.h	/^struct sharedObjectsStruct {$/;"	s
size	src\storage\rdb\redis\redis.h	/^    int size;$/;"	m	struct:filterList
size	src\storage\rdb\redis\redis.h	/^    uint32_t size;$/;"	m	struct:value_item_node
span	src\storage\rdb\redis\redis.h	/^        unsigned int span;$/;"	m	struct:zskiplistNode::zskiplistLevel
stat_evictedkeys	src\storage\rdb\redis\redis.h	/^    long long stat_evictedkeys;     \/* number of evicted keys (maxmemory) *\/$/;"	m	struct:redisDb
stat_expiredkeys	src\storage\rdb\redis\redis.h	/^    long long stat_expiredkeys;     \/* number of expired keys *\/$/;"	m	struct:redisDb
stat_numcommands	src\storage\rdb\redis\redis.h	/^    long long stat_numcommands;     \/* number of processed commands *\/$/;"	m	struct:redisServer
stat_numconnections	src\storage\rdb\redis\redis.h	/^    long long stat_numconnections;  \/* number of connections received *\/$/;"	m	struct:redisServer
stat_starttime	src\storage\rdb\redis\redis.h	/^    time_t stat_starttime;          \/* server start time *\/$/;"	m	struct:redisServer
status	src\storage\rdb\redis\redis.h	/^    int status;$/;"	m	struct:redisDb
subject	src\storage\rdb\redis\redis.h	/^    robj *subject;$/;"	m	struct:__anon30
subject	src\storage\rdb\redis\redis.h	/^    robj *subject;$/;"	m	struct:__anon32
syslog_enabled	src\storage\rdb\redis\redis.h	/^    int syslog_enabled;$/;"	m	struct:redisLogConfig
syslog_facility	src\storage\rdb\redis\redis.h	/^    int syslog_facility;$/;"	m	struct:redisLogConfig
syslog_ident	src\storage\rdb\redis\redis.h	/^    char *syslog_ident;$/;"	m	struct:redisLogConfig
tail	src\storage\rdb\redis\redis.h	/^    struct value_item_node* tail;$/;"	m	struct:value_item_list	typeref:struct:value_item_list::value_item_node
tail	src\storage\rdb\redis\redis.h	/^    struct zskiplistNode *header, *tail;$/;"	m	struct:zskiplist	typeref:struct:zskiplist::
timestamp	src\storage\rdb\redis\redis.h	/^    unsigned int timestamp;$/;"	m	struct:__anon33
timestamp	src\storage\rdb\redis\redis.h	/^    unsigned int timestamp;$/;"	m	struct:filterNode
type	src\storage\rdb\redis\redis.h	/^    int type;$/;"	m	struct:_redisSortOperation
type	src\storage\rdb\redis\redis.h	/^    int8_t type;  \/* key or field *\/$/;"	m	struct:filterNode
type	src\storage\rdb\redis\redis.h	/^    int8_t type;$/;"	m	struct:filterListIterator
type	src\storage\rdb\redis\redis.h	/^    int8_t type;\/* NODE_TYPE_ROBJ,NODE_TYPE_BUFFER,NODE_TYPE_LONGLONG *\/$/;"	m	struct:value_item_node
type	src\storage\rdb\redis\redis.h	/^    unsigned type:4;$/;"	m	struct:redisObject
u	src\storage\rdb\redis\redis.h	/^    } u;$/;"	m	struct:_redisSortObject	typeref:union:_redisSortObject::__anon29
unit_num	src\storage\rdb\redis\redis.h	/^    int unit_num;$/;"	m	struct:redisServer
unit_num	src\storage\rdb\redis\redis.h	/^  int unit_num;$/;"	m	struct:redisConfig
value_item_iterator	src\storage\rdb\redis\redis.h	/^typedef struct value_item_iterator {$/;"	s
value_item_iterator	src\storage\rdb\redis\redis.h	/^} value_item_iterator;$/;"	t	typeref:struct:value_item_iterator
value_item_list	src\storage\rdb\redis\redis.h	/^typedef struct value_item_list {$/;"	s
value_item_list	src\storage\rdb\redis\redis.h	/^} value_item_list;$/;"	t	typeref:struct:value_item_list
value_item_node	src\storage\rdb\redis\redis.h	/^typedef struct value_item_node {$/;"	s
value_item_node	src\storage\rdb\redis\redis.h	/^} value_item_node;$/;"	t	typeref:struct:value_item_node
verbosity	src\storage\rdb\redis\redis.h	/^    int verbosity;$/;"	m	struct:redisLogConfig
verbosity	src\storage\rdb\redis\redis.h	/^  int verbosity;$/;"	m	struct:redisConfig
version	src\storage\rdb\redis\redis.h	/^    uint16_t version;$/;"	m	struct:redisClient
version_care	src\storage\rdb\redis\redis.h	/^    char version_care;$/;"	m	struct:redisClient
write_count	src\storage\rdb\redis\redis.h	/^    int write_count;$/;"	m	struct:redisDb
zi	src\storage\rdb\redis\redis.h	/^    unsigned char *zi;  \/* Entry in ziplist *\/$/;"	m	struct:__anon31
zi	src\storage\rdb\redis\redis.h	/^    unsigned char *zi;$/;"	m	struct:__anon30
zi	src\storage\rdb\redis\redis.h	/^    unsigned char *zi;$/;"	m	struct:__anon33
zk	src\storage\rdb\redis\redis.h	/^    unsigned char *zk, *zv;$/;"	m	struct:__anon33
zklen	src\storage\rdb\redis\redis.h	/^    unsigned int zklen, zvlen;$/;"	m	struct:__anon33
zset	src\storage\rdb\redis\redis.h	/^typedef struct zset {$/;"	s
zset	src\storage\rdb\redis\redis.h	/^} zset;$/;"	t	typeref:struct:zset
zset_max_size	src\storage\rdb\redis\redis.h	/^    int zset_max_size;$/;"	m	struct:redisAreaConf
zset_max_size	src\storage\rdb\redis\redis.h	/^  int zset_max_size;$/;"	m	struct:redisConfig
zskiplist	src\storage\rdb\redis\redis.h	/^typedef struct zskiplist {$/;"	s
zskiplist	src\storage\rdb\redis\redis.h	/^} zskiplist;$/;"	t	typeref:struct:zskiplist
zskiplistLevel	src\storage\rdb\redis\redis.h	/^    struct zskiplistLevel {$/;"	s	struct:zskiplistNode
zskiplistNode	src\storage\rdb\redis\redis.h	/^typedef struct zskiplistNode {$/;"	s
zskiplistNode	src\storage\rdb\redis\redis.h	/^} zskiplistNode;$/;"	t	typeref:struct:zskiplistNode
zsl	src\storage\rdb\redis\redis.h	/^    zskiplist *zsl;$/;"	m	struct:zset
zv	src\storage\rdb\redis\redis.h	/^    unsigned char *zk, *zv;$/;"	m	struct:__anon33
zvlen	src\storage\rdb\redis\redis.h	/^    unsigned int zklen, zvlen;$/;"	m	struct:__anon33
REDISLIB_H	src\storage\rdb\redis\redislib.h	2;"	d
SDS_ABORT_ON_OOM	src\storage\rdb\redis\sds.c	37;"	d	file:
hex_digit_to_int	src\storage\rdb\redis\sds.c	/^int hex_digit_to_int(char c) {$/;"	f
is_hex_digit	src\storage\rdb\redis\sds.c	/^int is_hex_digit(char c) {$/;"	f
main	src\storage\rdb\redis\sds.c	/^int main(void) {$/;"	f
sdsMakeRoomFor	src\storage\rdb\redis\sds.c	/^static sds sdsMakeRoomFor(sds s, size_t addlen) {$/;"	f	file:
sdsOomAbort	src\storage\rdb\redis\sds.c	/^static void sdsOomAbort(void) {$/;"	f	file:
sdsavail	src\storage\rdb\redis\sds.c	/^size_t sdsavail(sds s) {$/;"	f
sdscat	src\storage\rdb\redis\sds.c	/^sds sdscat(sds s, char *t) {$/;"	f
sdscatlen	src\storage\rdb\redis\sds.c	/^sds sdscatlen(sds s, void *t, size_t len) {$/;"	f
sdscatprintf	src\storage\rdb\redis\sds.c	/^sds sdscatprintf(sds s, const char *fmt, ...) {$/;"	f
sdscatrepr	src\storage\rdb\redis\sds.c	/^sds sdscatrepr(sds s, char *p, size_t len) {$/;"	f
sdscatvprintf	src\storage\rdb\redis\sds.c	/^sds sdscatvprintf(sds s, const char *fmt, va_list ap) {$/;"	f
sdscmp	src\storage\rdb\redis\sds.c	/^int sdscmp(sds s1, sds s2) {$/;"	f
sdscpy	src\storage\rdb\redis\sds.c	/^sds sdscpy(sds s, char *t) {$/;"	f
sdscpylen	src\storage\rdb\redis\sds.c	/^sds sdscpylen(sds s, char *t, size_t len) {$/;"	f
sdsdup	src\storage\rdb\redis\sds.c	/^sds sdsdup(const sds s) {$/;"	f
sdsempty	src\storage\rdb\redis\sds.c	/^sds sdsempty(void) {$/;"	f
sdsfree	src\storage\rdb\redis\sds.c	/^void sdsfree(sds s) {$/;"	f
sdsfreesplitres	src\storage\rdb\redis\sds.c	/^void sdsfreesplitres(sds *tokens, int count) {$/;"	f
sdsfromlonglong	src\storage\rdb\redis\sds.c	/^sds sdsfromlonglong(long long value) {$/;"	f
sdsgrowzero	src\storage\rdb\redis\sds.c	/^sds sdsgrowzero(sds s, size_t len) {$/;"	f
sdslen	src\storage\rdb\redis\sds.c	/^size_t sdslen(const sds s) {$/;"	f
sdslogiclock	src\storage\rdb\redis\sds.c	/^uint32_t sdslogiclock(const sds s) {$/;"	f
sdslogiclock_update	src\storage\rdb\redis\sds.c	/^void sdslogiclock_update(const sds s, uint32_t logiclock) {$/;"	f
sdsnew	src\storage\rdb\redis\sds.c	/^sds sdsnew(const char *init, uint32_t logiclock, uint16_t version) {$/;"	f
sdsnewlen	src\storage\rdb\redis\sds.c	/^sds sdsnewlen(const void *init, size_t initlen, uint32_t logiclock, uint16_t version) {$/;"	f
sdsrange	src\storage\rdb\redis\sds.c	/^sds sdsrange(sds s, int start, int end) {$/;"	f
sdssplitargs	src\storage\rdb\redis\sds.c	/^sds *sdssplitargs(char *line, int *argc) {$/;"	f
sdssplitlen	src\storage\rdb\redis\sds.c	/^sds *sdssplitlen(char *s, int len, char *sep, int seplen, int *count) {$/;"	f
sdstolower	src\storage\rdb\redis\sds.c	/^void sdstolower(sds s) {$/;"	f
sdstoupper	src\storage\rdb\redis\sds.c	/^void sdstoupper(sds s) {$/;"	f
sdstrim	src\storage\rdb\redis\sds.c	/^sds sdstrim(sds s, const char *cset) {$/;"	f
sdsupdatelen	src\storage\rdb\redis\sds.c	/^void sdsupdatelen(sds s) {$/;"	f
sdsversion	src\storage\rdb\redis\sds.c	/^uint16_t sdsversion(const sds s) {$/;"	f
sdsversion_add	src\storage\rdb\redis\sds.c	/^void sdsversion_add(const sds s, uint16_t version) {$/;"	f
sdsversion_change	src\storage\rdb\redis\sds.c	/^void sdsversion_change(const sds s, uint16_t version) {$/;"	f
__SDS_H	src\storage\rdb\redis\sds.h	32;"	d
buf	src\storage\rdb\redis\sds.h	/^    char buf[];$/;"	m	struct:sdshdr
free	src\storage\rdb\redis\sds.h	/^    int free;$/;"	m	struct:sdshdr
len	src\storage\rdb\redis\sds.h	/^    int len;$/;"	m	struct:sdshdr
logiclock	src\storage\rdb\redis\sds.h	/^    unsigned int logiclock;$/;"	m	struct:sdshdr
sds	src\storage\rdb\redis\sds.h	/^typedef char *sds;$/;"	t
sdshdr	src\storage\rdb\redis\sds.h	/^struct sdshdr {$/;"	s
version	src\storage\rdb\redis\sds.h	/^    unsigned short int  version;$/;"	m	struct:sdshdr
arg	src\storage\rdb\redis\sort.c	/^} arg;$/;"	v	typeref:struct:sortArgument
createSortOperation	src\storage\rdb\redis\sort.c	/^redisSortOperation *createSortOperation(int type, robj *pattern) {$/;"	f
lookupKeyByPattern	src\storage\rdb\redis\sort.c	/^robj *lookupKeyByPattern(redisDb *db, robj *pattern, robj *subst) {$/;"	f
sortArgument	src\storage\rdb\redis\sort.c	/^struct sortArgument {$/;"	s	file:
sortCompare	src\storage\rdb\redis\sort.c	/^int sortCompare(const void *s1, const void *s2) {$/;"	f
sort_alpha	src\storage\rdb\redis\sort.c	/^    int sort_alpha;$/;"	m	struct:sortArgument	file:
sort_bypattern	src\storage\rdb\redis\sort.c	/^    int sort_bypattern;$/;"	m	struct:sortArgument	file:
sort_desc	src\storage\rdb\redis\sort.c	/^    int sort_desc;$/;"	m	struct:sortArgument	file:
CHECK_HASH_LENGTH	src\storage\rdb\redis\t_hash.c	9;"	d	file:
convertToRealHash	src\storage\rdb\redis\t_hash.c	/^void convertToRealHash(robj *o) {$/;"	f
filterCommand	src\storage\rdb\redis\t_hash.c	/^void filterCommand(redisClient *c) {$/;"	f
genericHgetallCommand	src\storage\rdb\redis\t_hash.c	/^void genericHgetallCommand(redisClient *c, int flags) {$/;"	f
hashTypeCurrent	src\storage\rdb\redis\t_hash.c	/^int hashTypeCurrent(hashTypeIterator *hi, int what, robj **objval, unsigned char **v, unsigned int *vlen) {$/;"	f
hashTypeCurrentObject	src\storage\rdb\redis\t_hash.c	/^robj *hashTypeCurrentObject(hashTypeIterator *hi, int what) {$/;"	f
hashTypeDelete	src\storage\rdb\redis\t_hash.c	/^int hashTypeDelete(robj *o, robj *key) {$/;"	f
hashTypeExists	src\storage\rdb\redis\t_hash.c	/^int hashTypeExists(robj *o, robj *key) {$/;"	f
hashTypeGet	src\storage\rdb\redis\t_hash.c	/^int hashTypeGet(robj *o, robj *key, robj **objval, unsigned char **v,$/;"	f
hashTypeGetObject	src\storage\rdb\redis\t_hash.c	/^robj *hashTypeGetObject(robj *o, robj *key) {$/;"	f
hashTypeInitIterator	src\storage\rdb\redis\t_hash.c	/^hashTypeIterator *hashTypeInitIterator(robj *subject) {$/;"	f
hashTypeLength	src\storage\rdb\redis\t_hash.c	/^unsigned long hashTypeLength(robj *o) {$/;"	f
hashTypeLookupWriteOrCreate	src\storage\rdb\redis\t_hash.c	/^robj *hashTypeLookupWriteOrCreate(redisClient *c, robj *key) {$/;"	f
hashTypeNext	src\storage\rdb\redis\t_hash.c	/^int hashTypeNext(hashTypeIterator *hi) {$/;"	f
hashTypeReleaseIterator	src\storage\rdb\redis\t_hash.c	/^void hashTypeReleaseIterator(hashTypeIterator *hi) {$/;"	f
hashTypeSet	src\storage\rdb\redis\t_hash.c	/^int hashTypeSet(redisClient *c, robj *o, robj *key, robj *value) {$/;"	f
hashTypeSimpleDel	src\storage\rdb\redis\t_hash.c	/^static int hashTypeSimpleDel(robj *o, robj *key, dictEntry *de)$/;"	f	file:
hashTypeTryConversion	src\storage\rdb\redis\t_hash.c	/^void hashTypeTryConversion(struct redisClient* c, robj *subject, robj **argv, int start, int end) {$/;"	f
hashTypeTryObjectEncoding	src\storage\rdb\redis\t_hash.c	/^void hashTypeTryObjectEncoding(robj *subject, robj **o1, robj **o2) {$/;"	f
hdelCommand	src\storage\rdb\redis\t_hash.c	/^void hdelCommand(redisClient *c) {$/;"	f
hexistsCommand	src\storage\rdb\redis\t_hash.c	/^void hexistsCommand(redisClient *c) {$/;"	f
hgetCommand	src\storage\rdb\redis\t_hash.c	/^void hgetCommand(redisClient *c) {$/;"	f
hgetallCommand	src\storage\rdb\redis\t_hash.c	/^void hgetallCommand(redisClient *c) {$/;"	f
hincrbyCommand	src\storage\rdb\redis\t_hash.c	/^void hincrbyCommand(redisClient *c) {$/;"	f
hkeysCommand	src\storage\rdb\redis\t_hash.c	/^void hkeysCommand(redisClient *c) {$/;"	f
hlenCommand	src\storage\rdb\redis\t_hash.c	/^void hlenCommand(redisClient *c) {$/;"	f
hmgetCommand	src\storage\rdb\redis\t_hash.c	/^void hmgetCommand(redisClient *c) {$/;"	f
hmsetCommand	src\storage\rdb\redis\t_hash.c	/^void hmsetCommand(redisClient *c) {$/;"	f
hsetCommand	src\storage\rdb\redis\t_hash.c	/^void hsetCommand(redisClient *c) {$/;"	f
hsetnxCommand	src\storage\rdb\redis\t_hash.c	/^void hsetnxCommand(redisClient *c) {$/;"	f
hvalsCommand	src\storage\rdb\redis\t_hash.c	/^void hvalsCommand(redisClient *c) {$/;"	f
getTimeoutFromObject	src\storage\rdb\redis\t_list.c	/^int getTimeoutFromObject(robj *object, time_t *timeout) {$/;"	f
lindexCommand	src\storage\rdb\redis\t_list.c	/^void lindexCommand(redisClient *c) {$/;"	f
linsertCommand	src\storage\rdb\redis\t_list.c	/^void linsertCommand(redisClient *c) {$/;"	f
listTypeConvert	src\storage\rdb\redis\t_list.c	/^void listTypeConvert(robj *subject, int enc) {$/;"	f
listTypeDelete	src\storage\rdb\redis\t_list.c	/^void listTypeDelete(listTypeEntry *entry) {$/;"	f
listTypeEqual	src\storage\rdb\redis\t_list.c	/^int listTypeEqual(listTypeEntry *entry, robj *o) {$/;"	f
listTypeGet	src\storage\rdb\redis\t_list.c	/^robj *listTypeGet(listTypeEntry *entry) {$/;"	f
listTypeInitIterator	src\storage\rdb\redis\t_list.c	/^listTypeIterator *listTypeInitIterator(robj *subject, int index, unsigned char direction) {$/;"	f
listTypeInsert	src\storage\rdb\redis\t_list.c	/^void listTypeInsert(listTypeEntry *entry, robj *value, int where) {$/;"	f
listTypeLength	src\storage\rdb\redis\t_list.c	/^unsigned long listTypeLength(robj *subject) {$/;"	f
listTypeNext	src\storage\rdb\redis\t_list.c	/^int listTypeNext(listTypeIterator *li, listTypeEntry *entry) {$/;"	f
listTypePop	src\storage\rdb\redis\t_list.c	/^robj *listTypePop(robj *subject, int where) {$/;"	f
listTypePush	src\storage\rdb\redis\t_list.c	/^void listTypePush(redisClient *c, robj *subject, robj *value, int where) {$/;"	f
listTypeReleaseIterator	src\storage\rdb\redis\t_list.c	/^void listTypeReleaseIterator(listTypeIterator *li) {$/;"	f
listTypeTryConversion	src\storage\rdb\redis\t_list.c	/^void listTypeTryConversion(redisClient *c, robj *subject, robj *value) {$/;"	f
llenCommand	src\storage\rdb\redis\t_list.c	/^void llenCommand(redisClient *c) {$/;"	f
lpopCommand	src\storage\rdb\redis\t_list.c	/^void lpopCommand(redisClient *c) {$/;"	f
lpushCommand	src\storage\rdb\redis\t_list.c	/^void lpushCommand(redisClient *c) {$/;"	f
lpushxCommand	src\storage\rdb\redis\t_list.c	/^void lpushxCommand(redisClient *c) {$/;"	f
lrangeCommand	src\storage\rdb\redis\t_list.c	/^void lrangeCommand(redisClient *c) {$/;"	f
lremCommand	src\storage\rdb\redis\t_list.c	/^void lremCommand(redisClient *c) {$/;"	f
lsetCommand	src\storage\rdb\redis\t_list.c	/^void lsetCommand(redisClient *c) {$/;"	f
ltrimCommand	src\storage\rdb\redis\t_list.c	/^void ltrimCommand(redisClient *c) {$/;"	f
popnGenericCommand	src\storage\rdb\redis\t_list.c	/^void popnGenericCommand(redisClient *c, int where) {$/;"	f
pushnGenericCommand	src\storage\rdb\redis\t_list.c	/^void pushnGenericCommand(redisClient *c, int where) {$/;"	f
pushxnGenericCommand	src\storage\rdb\redis\t_list.c	/^void pushxnGenericCommand(redisClient *c, robj *refval, robj *val, int where) {$/;"	f
rpopCommand	src\storage\rdb\redis\t_list.c	/^void rpopCommand(redisClient *c) {$/;"	f
rpushCommand	src\storage\rdb\redis\t_list.c	/^void rpushCommand(redisClient *c) {$/;"	f
rpushxCommand	src\storage\rdb\redis\t_list.c	/^void rpushxCommand(redisClient *c) {$/;"	f
qsortCompareSetsByCardinality	src\storage\rdb\redis\t_set.c	/^int qsortCompareSetsByCardinality(const void *s1, const void *s2) {$/;"	f
saddCommand	src\storage\rdb\redis\t_set.c	/^void saddCommand(redisClient *c) {$/;"	f
scardCommand	src\storage\rdb\redis\t_set.c	/^void scardCommand(redisClient *c) {$/;"	f
setTypeAdd	src\storage\rdb\redis\t_set.c	/^int setTypeAdd(struct redisClient *c, robj *subject, robj *value) {$/;"	f
setTypeConvert	src\storage\rdb\redis\t_set.c	/^void setTypeConvert(robj *setobj, int enc) {$/;"	f
setTypeCreate	src\storage\rdb\redis\t_set.c	/^robj *setTypeCreate(robj *value) {$/;"	f
setTypeInitIterator	src\storage\rdb\redis\t_set.c	/^setTypeIterator *setTypeInitIterator(robj *subject) {$/;"	f
setTypeIsMember	src\storage\rdb\redis\t_set.c	/^int setTypeIsMember(robj *subject, robj *value) {$/;"	f
setTypeNext	src\storage\rdb\redis\t_set.c	/^int setTypeNext(setTypeIterator *si, robj **objele, int64_t *llele) {$/;"	f
setTypeNextObject	src\storage\rdb\redis\t_set.c	/^robj *setTypeNextObject(setTypeIterator *si) {$/;"	f
setTypeRandomElement	src\storage\rdb\redis\t_set.c	/^int setTypeRandomElement(robj *setobj, robj **objele, int64_t *llele) {$/;"	f
setTypeReleaseIterator	src\storage\rdb\redis\t_set.c	/^void setTypeReleaseIterator(setTypeIterator *si) {$/;"	f
setTypeRemove	src\storage\rdb\redis\t_set.c	/^int setTypeRemove(robj *setobj, robj *value) {$/;"	f
setTypeSize	src\storage\rdb\redis\t_set.c	/^unsigned long setTypeSize(robj *subject) {$/;"	f
sinterCommand	src\storage\rdb\redis\t_set.c	/^void sinterCommand(redisClient *c) {$/;"	f
sinterGenericCommand	src\storage\rdb\redis\t_set.c	/^void sinterGenericCommand(redisClient *c, robj **setkeys, unsigned long setnum, robj *dstkey) {$/;"	f
sinterstoreCommand	src\storage\rdb\redis\t_set.c	/^void sinterstoreCommand(redisClient *c) {$/;"	f
sismemberCommand	src\storage\rdb\redis\t_set.c	/^void sismemberCommand(redisClient *c) {$/;"	f
smoveCommand	src\storage\rdb\redis\t_set.c	/^void smoveCommand(redisClient *c) {$/;"	f
spopCommand	src\storage\rdb\redis\t_set.c	/^void spopCommand(redisClient *c) {$/;"	f
sremCommand	src\storage\rdb\redis\t_set.c	/^void sremCommand(redisClient *c) {$/;"	f
decrCommand	src\storage\rdb\redis\t_string.c	/^void decrCommand(redisClient *c) {$/;"	f
decrbyCommand	src\storage\rdb\redis\t_string.c	/^void decrbyCommand(redisClient *c) {$/;"	f
getCommand	src\storage\rdb\redis\t_string.c	/^void getCommand(redisClient *c) {$/;"	f
getGenericCommand	src\storage\rdb\redis\t_string.c	/^int getGenericCommand(redisClient *c) {$/;"	f
getsetCommand	src\storage\rdb\redis\t_string.c	/^void getsetCommand(redisClient *c) {$/;"	f
incrCommand	src\storage\rdb\redis\t_string.c	/^void incrCommand(redisClient *c) {$/;"	f
incrDecrCommand	src\storage\rdb\redis\t_string.c	/^void incrDecrCommand(redisClient *c, long long init_value, long long incr) {$/;"	f
incrbyCommand	src\storage\rdb\redis\t_string.c	/^void incrbyCommand(redisClient *c) {$/;"	f
setCommand	src\storage\rdb\redis\t_string.c	/^void setCommand(redisClient *c) {$/;"	f
setGenericCommand	src\storage\rdb\redis\t_string.c	/^void setGenericCommand(redisClient *c, int nx, robj *key, robj *val, robj *expire) {$/;"	f
setexCommand	src\storage\rdb\redis\t_string.c	/^void setexCommand(redisClient *c) {$/;"	f
setnxCommand	src\storage\rdb\redis\t_string.c	/^void setnxCommand(redisClient *c) {$/;"	f
setnxexCommand	src\storage\rdb\redis\t_string.c	/^void setnxexCommand(redisClient *c) {$/;"	f
REDIS_AGGR_MAX	src\storage\rdb\redis\t_zset.c	678;"	d	file:
REDIS_AGGR_MIN	src\storage\rdb\redis\t_zset.c	677;"	d	file:
REDIS_AGGR_SUM	src\storage\rdb\redis\t_zset.c	676;"	d	file:
VERSION_OP	src\storage\rdb\redis\t_zset.c	26;"	d	file:
dict	src\storage\rdb\redis\t_zset.c	/^    dict *dict;$/;"	m	struct:__anon35	file:
genericZrangebyscoreCommand	src\storage\rdb\redis\t_zset.c	/^void genericZrangebyscoreCommand(redisClient *c, int reverse, int justcount) {$/;"	f
max	src\storage\rdb\redis\t_zset.c	/^    double min, max;$/;"	m	struct:__anon34	file:
maxex	src\storage\rdb\redis\t_zset.c	/^    int minex, maxex; \/* are min or max exclusive? *\/$/;"	m	struct:__anon34	file:
min	src\storage\rdb\redis\t_zset.c	/^    double min, max;$/;"	m	struct:__anon34	file:
minex	src\storage\rdb\redis\t_zset.c	/^    int minex, maxex; \/* are min or max exclusive? *\/$/;"	m	struct:__anon34	file:
qsortCompareZsetopsrcByCardinality	src\storage\rdb\redis\t_zset.c	/^int qsortCompareZsetopsrcByCardinality(const void *s1, const void *s2) {$/;"	f
weight	src\storage\rdb\redis\t_zset.c	/^    double weight;$/;"	m	struct:__anon35	file:
zaddCommand	src\storage\rdb\redis\t_zset.c	/^void zaddCommand(redisClient *c) {$/;"	f
zaddGenericCommand	src\storage\rdb\redis\t_zset.c	/^void zaddGenericCommand(redisClient *c, robj *key, robj *ele, double score, int incr) {$/;"	f
zcardCommand	src\storage\rdb\redis\t_zset.c	/^void zcardCommand(redisClient *c) {$/;"	f
zcountCommand	src\storage\rdb\redis\t_zset.c	/^void zcountCommand(redisClient *c) {$/;"	f
zincrbyCommand	src\storage\rdb\redis\t_zset.c	/^void zincrbyCommand(redisClient *c) {$/;"	f
zinterstoreCommand	src\storage\rdb\redis\t_zset.c	/^void zinterstoreCommand(redisClient *c) {$/;"	f
zrangeCommand	src\storage\rdb\redis\t_zset.c	/^void zrangeCommand(redisClient *c) {$/;"	f
zrangeGenericCommand	src\storage\rdb\redis\t_zset.c	/^void zrangeGenericCommand(redisClient *c, int reverse, int withscores) {$/;"	f
zrangebyscoreCommand	src\storage\rdb\redis\t_zset.c	/^void zrangebyscoreCommand(redisClient *c) {$/;"	f
zrangespec	src\storage\rdb\redis\t_zset.c	/^} zrangespec;$/;"	t	typeref:struct:__anon34	file:
zrangewithscoreCommand	src\storage\rdb\redis\t_zset.c	/^void zrangewithscoreCommand(redisClient *c) {$/;"	f
zrankCommand	src\storage\rdb\redis\t_zset.c	/^void zrankCommand(redisClient *c) {$/;"	f
zrankGenericCommand	src\storage\rdb\redis\t_zset.c	/^void zrankGenericCommand(redisClient *c, int reverse) {$/;"	f
zremCommand	src\storage\rdb\redis\t_zset.c	/^void zremCommand(redisClient *c) {$/;"	f
zremrangebyrankCommand	src\storage\rdb\redis\t_zset.c	/^void zremrangebyrankCommand(redisClient *c) {$/;"	f
zremrangebyscoreCommand	src\storage\rdb\redis\t_zset.c	/^void zremrangebyscoreCommand(redisClient *c) {$/;"	f
zrevrangeCommand	src\storage\rdb\redis\t_zset.c	/^void zrevrangeCommand(redisClient *c) {$/;"	f
zrevrangebyscoreCommand	src\storage\rdb\redis\t_zset.c	/^void zrevrangebyscoreCommand(redisClient *c) {$/;"	f
zrevrangewithscoreCommand	src\storage\rdb\redis\t_zset.c	/^void zrevrangewithscoreCommand(redisClient *c) {$/;"	f
zrevrankCommand	src\storage\rdb\redis\t_zset.c	/^void zrevrankCommand(redisClient *c) {$/;"	f
zscoreCommand	src\storage\rdb\redis\t_zset.c	/^void zscoreCommand(redisClient *c) {$/;"	f
zsetopsrc	src\storage\rdb\redis\t_zset.c	/^} zsetopsrc;$/;"	t	typeref:struct:__anon35	file:
zslCreate	src\storage\rdb\redis\t_zset.c	/^zskiplist *zslCreate(void) {$/;"	f
zslCreateNode	src\storage\rdb\redis\t_zset.c	/^zskiplistNode *zslCreateNode(int level, double score, robj *obj) {$/;"	f
zslDelete	src\storage\rdb\redis\t_zset.c	/^int zslDelete(zskiplist *zsl, double score, robj *obj) {$/;"	f
zslDeleteNode	src\storage\rdb\redis\t_zset.c	/^void zslDeleteNode(zskiplist *zsl, zskiplistNode *x, zskiplistNode **update) {$/;"	f
zslDeleteRangeByRank	src\storage\rdb\redis\t_zset.c	/^unsigned long zslDeleteRangeByRank(zskiplist *zsl, unsigned int start, unsigned int end, dict *dict) {$/;"	f
zslDeleteRangeByScore	src\storage\rdb\redis\t_zset.c	/^unsigned long zslDeleteRangeByScore(zskiplist *zsl, zrangespec range, dict *dict) {$/;"	f
zslFirstWithScore	src\storage\rdb\redis\t_zset.c	/^zskiplistNode *zslFirstWithScore(zskiplist *zsl, double score) {$/;"	f
zslFree	src\storage\rdb\redis\t_zset.c	/^void zslFree(zskiplist *zsl) {$/;"	f
zslFreeNode	src\storage\rdb\redis\t_zset.c	/^void zslFreeNode(zskiplistNode *node) {$/;"	f
zslGetElementByRank	src\storage\rdb\redis\t_zset.c	/^zskiplistNode* zslGetElementByRank(zskiplist *zsl, unsigned long rank) {$/;"	f
zslGetRank	src\storage\rdb\redis\t_zset.c	/^unsigned long zslGetRank(zskiplist *zsl, double score, robj *o) {$/;"	f
zslInsert	src\storage\rdb\redis\t_zset.c	/^zskiplistNode *zslInsert(zskiplist *zsl, double score, robj *obj) {$/;"	f
zslParseRange	src\storage\rdb\redis\t_zset.c	/^static int zslParseRange(robj *min, robj *max, zrangespec *spec) {$/;"	f	file:
zslRandomLevel	src\storage\rdb\redis\t_zset.c	/^int zslRandomLevel(void) {$/;"	f
zunionInterAggregate	src\storage\rdb\redis\t_zset.c	/^inline static void zunionInterAggregate(double *target, double val, int aggregate) {$/;"	f	file:
zunionInterDictValue	src\storage\rdb\redis\t_zset.c	679;"	d	file:
zunionInterGenericCommand	src\storage\rdb\redis\t_zset.c	/^void zunionInterGenericCommand(redisClient *c, robj *dstkey, int op) {$/;"	f
zunionstoreCommand	src\storage\rdb\redis\t_zset.c	/^void zunionstoreCommand(redisClient *c) {$/;"	f
isObjectRepresentableAsLongLong	src\storage\rdb\redis\util.c	/^int isObjectRepresentableAsLongLong(robj *o, long long *llongval) {$/;"	f
isStringRepresentableAsLong	src\storage\rdb\redis\util.c	/^int isStringRepresentableAsLong(sds s, long *longval) {$/;"	f
isStringRepresentableAsLongLong	src\storage\rdb\redis\util.c	/^int isStringRepresentableAsLongLong(sds s, long long *llongval) {$/;"	f
ll2string	src\storage\rdb\redis\util.c	/^int ll2string(char *s, size_t len, long long value) {$/;"	f
memtoll	src\storage\rdb\redis\util.c	/^long long memtoll(const char *p, int *err) {$/;"	f
stringmatch	src\storage\rdb\redis\util.c	/^int stringmatch(const char *pattern, const char *string, int nocase) {$/;"	f
stringmatchlen	src\storage\rdb\redis\util.c	/^int stringmatchlen(const char *pattern, int patternLen,$/;"	f
ustime	src\storage\rdb\redis\util.c	/^long long ustime(void) {$/;"	f
__REDIS_UTIL_H	src\storage\rdb\redis\util.h	2;"	d
createDoubleValueItemNode	src\storage\rdb\redis\value_item_list.c	/^value_item_node* createDoubleValueItemNode(double score) {$/;"	f
createGenericValueItemNode	src\storage\rdb\redis\value_item_list.c	/^value_item_node* createGenericValueItemNode(void* buffer,uint32_t size,int type) {$/;"	f
createLongLongValueItemNode	src\storage\rdb\redis\value_item_list.c	/^value_item_node* createLongLongValueItemNode(long long llnum) {$/;"	f
createValueItemIterator	src\storage\rdb\redis\value_item_list.c	/^value_item_iterator* createValueItemIterator(value_item_list* list) {$/;"	f
createValueItemList	src\storage\rdb\redis\value_item_list.c	/^value_item_list* createValueItemList() {$/;"	f
createValueItemNode	src\storage\rdb\redis\value_item_list.c	/^value_item_node* createValueItemNode(robj* obj) {$/;"	f
freeValueItemIterator	src\storage\rdb\redis\value_item_list.c	/^void freeValueItemIterator(value_item_iterator** it) {$/;"	f
freeValueItemList	src\storage\rdb\redis\value_item_list.c	/^void freeValueItemList(value_item_list* list) {$/;"	f
freeValueItemNode	src\storage\rdb\redis\value_item_list.c	/^void freeValueItemNode(value_item_node* node) {$/;"	f
getValueItemNodeSize	src\storage\rdb\redis\value_item_list.c	/^int getValueItemNodeSize(value_item_node* node) {$/;"	f
getValueItemNodeType	src\storage\rdb\redis\value_item_list.c	/^int getValueItemNodeType(value_item_node* node) {$/;"	f
lpopValueItemNode	src\storage\rdb\redis\value_item_list.c	/^value_item_node* lpopValueItemNode(value_item_list* list) {$/;"	f
lpushDoubleValueItemNode	src\storage\rdb\redis\value_item_list.c	/^int lpushDoubleValueItemNode(value_item_list* list,double score) {$/;"	f
lpushGenericValueItemNode	src\storage\rdb\redis\value_item_list.c	/^int lpushGenericValueItemNode(value_item_list* list,void* obj,uint32_t size,int type) {$/;"	f
lpushLongLongValueItemNode	src\storage\rdb\redis\value_item_list.c	/^int lpushLongLongValueItemNode(value_item_list* list,long long llnum) {$/;"	f
lpushValueItemNode	src\storage\rdb\redis\value_item_list.c	/^int lpushValueItemNode(value_item_list* list, robj* obj) {$/;"	f
nextValueItemNode	src\storage\rdb\redis\value_item_list.c	/^value_item_node* nextValueItemNode(value_item_iterator** it) {$/;"	f
removeValueItemNode	src\storage\rdb\redis\value_item_list.c	/^void removeValueItemNode(value_item_node* node) {$/;"	f
rpopValueItemNode	src\storage\rdb\redis\value_item_list.c	/^value_item_node* rpopValueItemNode(value_item_list* list) {$/;"	f
rpushDoubleValueItemNode	src\storage\rdb\redis\value_item_list.c	/^int rpushDoubleValueItemNode(value_item_list* list,double score) {$/;"	f
rpushGenericValueItemNode	src\storage\rdb\redis\value_item_list.c	/^int rpushGenericValueItemNode(value_item_list* list,void* obj,uint32_t size,int type) {$/;"	f
rpushLongLongValueItemNode	src\storage\rdb\redis\value_item_list.c	/^int rpushLongLongValueItemNode(value_item_list* list,long long llnum) {$/;"	f
rpushValueItemNode	src\storage\rdb\redis\value_item_list.c	/^int rpushValueItemNode(value_item_list* list, robj* obj) {$/;"	f
REDIS_VERSION	src\storage\rdb\redis\version.h	1;"	d
ZIPLIST_BYTES	src\storage\rdb\redis\ziplist.c	90;"	d	file:
ZIPLIST_ENTRY_END	src\storage\rdb\redis\ziplist.c	96;"	d	file:
ZIPLIST_ENTRY_HEAD	src\storage\rdb\redis\ziplist.c	94;"	d	file:
ZIPLIST_ENTRY_TAIL	src\storage\rdb\redis\ziplist.c	95;"	d	file:
ZIPLIST_HEADER_SIZE	src\storage\rdb\redis\ziplist.c	93;"	d	file:
ZIPLIST_INCR_LENGTH	src\storage\rdb\redis\ziplist.c	100;"	d	file:
ZIPLIST_LENGTH	src\storage\rdb\redis\ziplist.c	92;"	d	file:
ZIPLIST_TAIL_OFFSET	src\storage\rdb\redis\ziplist.c	91;"	d	file:
ZIP_BIGLEN	src\storage\rdb\redis\ziplist.c	75;"	d	file:
ZIP_END	src\storage\rdb\redis\ziplist.c	74;"	d	file:
ZIP_INT_16B	src\storage\rdb\redis\ziplist.c	81;"	d	file:
ZIP_INT_32B	src\storage\rdb\redis\ziplist.c	82;"	d	file:
ZIP_INT_64B	src\storage\rdb\redis\ziplist.c	83;"	d	file:
ZIP_IS_INT	src\storage\rdb\redis\ziplist.c	87;"	d	file:
ZIP_IS_STR	src\storage\rdb\redis\ziplist.c	86;"	d	file:
ZIP_STR_06B	src\storage\rdb\redis\ziplist.c	78;"	d	file:
ZIP_STR_14B	src\storage\rdb\redis\ziplist.c	79;"	d	file:
ZIP_STR_32B	src\storage\rdb\redis\ziplist.c	80;"	d	file:
__ziplistCascadeUpdate	src\storage\rdb\redis\ziplist.c	/^static unsigned char *__ziplistCascadeUpdate(unsigned char *zl, unsigned char *p) {$/;"	f	file:
__ziplistDelete	src\storage\rdb\redis\ziplist.c	/^static unsigned char *__ziplistDelete(unsigned char *zl, unsigned char *p, unsigned int num) {$/;"	f	file:
__ziplistInsert	src\storage\rdb\redis\ziplist.c	/^static unsigned char *__ziplistInsert(unsigned char *zl, unsigned char *p, unsigned char *s, unsigned int slen) {$/;"	f	file:
createIntList	src\storage\rdb\redis\ziplist.c	/^unsigned char *createIntList() {$/;"	f
createList	src\storage\rdb\redis\ziplist.c	/^unsigned char *createList() {$/;"	f
debug	src\storage\rdb\redis\ziplist.c	801;"	d	file:
encoding	src\storage\rdb\redis\ziplist.c	/^    unsigned char encoding;$/;"	m	struct:zlentry	file:
headersize	src\storage\rdb\redis\ziplist.c	/^    unsigned int headersize;$/;"	m	struct:zlentry	file:
len	src\storage\rdb\redis\ziplist.c	/^    unsigned int lensize, len;$/;"	m	struct:zlentry	file:
lensize	src\storage\rdb\redis\ziplist.c	/^    unsigned int lensize, len;$/;"	m	struct:zlentry	file:
main	src\storage\rdb\redis\ziplist.c	/^int main(int argc, char **argv) {$/;"	f
p	src\storage\rdb\redis\ziplist.c	/^    unsigned char *p;$/;"	m	struct:zlentry	file:
pop	src\storage\rdb\redis\ziplist.c	/^void pop(unsigned char *zl, int where) {$/;"	f
prevrawlen	src\storage\rdb\redis\ziplist.c	/^    unsigned int prevrawlensize, prevrawlen;$/;"	m	struct:zlentry	file:
prevrawlensize	src\storage\rdb\redis\ziplist.c	/^    unsigned int prevrawlensize, prevrawlen;$/;"	m	struct:zlentry	file:
randstring	src\storage\rdb\redis\ziplist.c	/^int randstring(char *target, unsigned int min, unsigned int max) {$/;"	f
stress	src\storage\rdb\redis\ziplist.c	/^void stress(int pos, int num, int maxsize, int dnum) {$/;"	f
usec	src\storage\rdb\redis\ziplist.c	/^long long usec(void) {$/;"	f
zipDecodeLength	src\storage\rdb\redis\ziplist.c	/^static unsigned int zipDecodeLength(unsigned char *p, unsigned int *lensize) {$/;"	f	file:
zipEncodeLength	src\storage\rdb\redis\ziplist.c	/^static unsigned int zipEncodeLength(unsigned char *p, unsigned char encoding, unsigned int rawlen) {$/;"	f	file:
zipEntry	src\storage\rdb\redis\ziplist.c	/^static zlentry zipEntry(unsigned char *p) {$/;"	f	file:
zipEntryEncoding	src\storage\rdb\redis\ziplist.c	/^static unsigned int zipEntryEncoding(unsigned char *p) {$/;"	f	file:
zipIntSize	src\storage\rdb\redis\ziplist.c	/^static unsigned int zipIntSize(unsigned char encoding) {$/;"	f	file:
zipLoadInteger	src\storage\rdb\redis\ziplist.c	/^static int64_t zipLoadInteger(unsigned char *p, unsigned char encoding) {$/;"	f	file:
zipPrevDecodeLength	src\storage\rdb\redis\ziplist.c	/^static unsigned int zipPrevDecodeLength(unsigned char *p, unsigned int *lensize) {$/;"	f	file:
zipPrevEncodeLength	src\storage\rdb\redis\ziplist.c	/^static unsigned int zipPrevEncodeLength(unsigned char *p, unsigned int len) {$/;"	f	file:
zipPrevEncodeLengthForceLarge	src\storage\rdb\redis\ziplist.c	/^static void zipPrevEncodeLengthForceLarge(unsigned char *p, unsigned int len) {$/;"	f	file:
zipPrevLenByteDiff	src\storage\rdb\redis\ziplist.c	/^static int zipPrevLenByteDiff(unsigned char *p, unsigned int len) {$/;"	f	file:
zipRawEntryLength	src\storage\rdb\redis\ziplist.c	/^static unsigned int zipRawEntryLength(unsigned char *p) {$/;"	f	file:
zipSaveInteger	src\storage\rdb\redis\ziplist.c	/^static void zipSaveInteger(unsigned char *p, int64_t value, unsigned char encoding) {$/;"	f	file:
zipTryEncoding	src\storage\rdb\redis\ziplist.c	/^static int zipTryEncoding(unsigned char *entry, unsigned int entrylen, long long *v, unsigned char *encoding) {$/;"	f	file:
ziplistCompare	src\storage\rdb\redis\ziplist.c	/^unsigned int ziplistCompare(unsigned char *p, unsigned char *sstr, unsigned int slen) {$/;"	f
ziplistDelete	src\storage\rdb\redis\ziplist.c	/^unsigned char *ziplistDelete(unsigned char *zl, unsigned char **p) {$/;"	f
ziplistDeleteRange	src\storage\rdb\redis\ziplist.c	/^unsigned char *ziplistDeleteRange(unsigned char *zl, unsigned int index, unsigned int num) {$/;"	f
ziplistGet	src\storage\rdb\redis\ziplist.c	/^unsigned int ziplistGet(unsigned char *p, unsigned char **sstr, unsigned int *slen, long long *sval) {$/;"	f
ziplistIndex	src\storage\rdb\redis\ziplist.c	/^unsigned char *ziplistIndex(unsigned char *zl, int index) {$/;"	f
ziplistInsert	src\storage\rdb\redis\ziplist.c	/^unsigned char *ziplistInsert(unsigned char *zl, unsigned char *p, unsigned char *s, unsigned int slen) {$/;"	f
ziplistLen	src\storage\rdb\redis\ziplist.c	/^unsigned int ziplistLen(unsigned char *zl) {$/;"	f
ziplistNew	src\storage\rdb\redis\ziplist.c	/^unsigned char *ziplistNew(void) {$/;"	f
ziplistNext	src\storage\rdb\redis\ziplist.c	/^unsigned char *ziplistNext(unsigned char *zl, unsigned char *p) {$/;"	f
ziplistPrev	src\storage\rdb\redis\ziplist.c	/^unsigned char *ziplistPrev(unsigned char *zl, unsigned char *p) {$/;"	f
ziplistPush	src\storage\rdb\redis\ziplist.c	/^unsigned char *ziplistPush(unsigned char *zl, unsigned char *s, unsigned int slen, int where) {$/;"	f
ziplistRepr	src\storage\rdb\redis\ziplist.c	/^void ziplistRepr(unsigned char *zl) {$/;"	f
ziplistResize	src\storage\rdb\redis\ziplist.c	/^static unsigned char *ziplistResize(unsigned char *zl, unsigned int len) {$/;"	f	file:
ziplistSize	src\storage\rdb\redis\ziplist.c	/^unsigned int ziplistSize(unsigned char *zl) {$/;"	f
zlentry	src\storage\rdb\redis\ziplist.c	/^typedef struct zlentry {$/;"	s	file:
zlentry	src\storage\rdb\redis\ziplist.c	/^} zlentry;$/;"	t	typeref:struct:zlentry	file:
ZIPLIST_HEAD	src\storage\rdb\redis\ziplist.h	1;"	d
ZIPLIST_TAIL	src\storage\rdb\redis\ziplist.h	2;"	d
ZIPMAP_BIGLEN	src\storage\rdb\redis\zipmap.c	84;"	d	file:
ZIPMAP_END	src\storage\rdb\redis\zipmap.c	85;"	d	file:
ZIPMAP_LEN_BYTES	src\storage\rdb\redis\zipmap.c	94;"	d	file:
ZIPMAP_VALUE_MAX_FREE	src\storage\rdb\redis\zipmap.c	89;"	d	file:
main	src\storage\rdb\redis\zipmap.c	/^int main(void) {$/;"	f
zipmapDecodeLength	src\storage\rdb\redis\zipmap.c	/^static unsigned int zipmapDecodeLength(unsigned char *p) {$/;"	f	file:
zipmapEncodeLength	src\storage\rdb\redis\zipmap.c	/^static unsigned int zipmapEncodeLength(unsigned char *p, unsigned int len) {$/;"	f	file:
zipmapRawKeyLength	src\storage\rdb\redis\zipmap.c	/^static unsigned int zipmapRawKeyLength(unsigned char *p) {$/;"	f	file:
zipmapRawValueLength	src\storage\rdb\redis\zipmap.c	/^static unsigned int zipmapRawValueLength(unsigned char *p) {$/;"	f	file:
zipmapResize	src\storage\rdb\redis\zipmap.c	/^static inline unsigned char *zipmapResize(unsigned char *zm, unsigned int len) {$/;"	f	file:
zipmapXDel	src\storage\rdb\redis\zipmap.c	/^unsigned char *zipmapXDel(unsigned char *zm, unsigned char *key, unsigned int klen, int *deleted) {$/;"	f
zipmapXExists	src\storage\rdb\redis\zipmap.c	/^int zipmapXExists(unsigned char **zm, unsigned char *key,$/;"	f
zipmapXGet	src\storage\rdb\redis\zipmap.c	/^int zipmapXGet(unsigned char **zm, unsigned char *key, unsigned int klen,$/;"	f
zipmapXLen	src\storage\rdb\redis\zipmap.c	/^unsigned int zipmapXLen(unsigned char *zm) {$/;"	f
zipmapXLookupRaw	src\storage\rdb\redis\zipmap.c	/^static unsigned char *zipmapXLookupRaw(unsigned char *zm, unsigned char *key,$/;"	f	file:
zipmapXNew	src\storage\rdb\redis\zipmap.c	/^unsigned char *zipmapXNew(void) {$/;"	f
zipmapXNext	src\storage\rdb\redis\zipmap.c	/^unsigned char *zipmapXNext(unsigned char *zm, unsigned char **key, unsigned int *klen,$/;"	f
zipmapXRawEntryLength	src\storage\rdb\redis\zipmap.c	/^static unsigned int zipmapXRawEntryLength(unsigned char *p) {$/;"	f	file:
zipmapXRepr	src\storage\rdb\redis\zipmap.c	/^void zipmapXRepr(unsigned char *p) {$/;"	f
zipmapXRequiredLength	src\storage\rdb\redis\zipmap.c	/^static unsigned long zipmapXRequiredLength(unsigned int klen, unsigned int vlen) {$/;"	f	file:
zipmapXRewind	src\storage\rdb\redis\zipmap.c	/^unsigned char *zipmapXRewind(unsigned char *zm) {$/;"	f
zipmapXSet	src\storage\rdb\redis\zipmap.c	/^unsigned char *zipmapXSet(unsigned char *zm, unsigned char *key, unsigned int klen,$/;"	f
_ZIPMAP_H	src\storage\rdb\redis\zipmap.h	36;"	d
PREFIX_SIZE	src\storage\rdb\redis\zmalloc.c	40;"	d	file:
PREFIX_SIZE	src\storage\rdb\redis\zmalloc.c	43;"	d	file:
PREFIX_SIZE	src\storage\rdb\redis\zmalloc.c	45;"	d	file:
calloc	src\storage\rdb\redis\zmalloc.c	52;"	d	file:
db_used_memory	src\storage\rdb\redis\zmalloc.c	/^static size_t db_used_memory[MAX_DBNUM];$/;"	v	file:
dbnum	src\storage\rdb\redis\zmalloc.c	/^static __thread int dbnum;$/;"	v	file:
free	src\storage\rdb\redis\zmalloc.c	54;"	d	file:
get_malloc_dbnum	src\storage\rdb\redis\zmalloc.c	/^int get_malloc_dbnum() {$/;"	f
init_db_used_memory	src\storage\rdb\redis\zmalloc.c	/^void init_db_used_memory() {$/;"	f
malloc	src\storage\rdb\redis\zmalloc.c	51;"	d	file:
realloc	src\storage\rdb\redis\zmalloc.c	53;"	d	file:
redis_zcalloc	src\storage\rdb\redis\zmalloc.c	/^void *redis_zcalloc(size_t size) {$/;"	f
set_malloc_dbnum	src\storage\rdb\redis\zmalloc.c	/^void set_malloc_dbnum(int n) {$/;"	f
update_zmalloc_stat_alloc	src\storage\rdb\redis\zmalloc.c	58;"	d	file:
update_zmalloc_stat_free	src\storage\rdb\redis\zmalloc.c	72;"	d	file:
used_memory	src\storage\rdb\redis\zmalloc.c	/^static size_t used_memory = 0;$/;"	v	file:
used_memory_mutex	src\storage\rdb\redis\zmalloc.c	/^static pthread_mutex_t used_memory_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
zfree	src\storage\rdb\redis\zmalloc.c	/^void zfree(void *ptr) {$/;"	f
zfree_simple	src\storage\rdb\redis\zmalloc.c	/^void zfree_simple(void *ptr) {$/;"	f
zmalloc	src\storage\rdb\redis\zmalloc.c	/^void *zmalloc(size_t size) {$/;"	f
zmalloc_db_used_memory	src\storage\rdb\redis\zmalloc.c	/^size_t zmalloc_db_used_memory(int id) {$/;"	f
zmalloc_enable_thread_safeness	src\storage\rdb\redis\zmalloc.c	/^void zmalloc_enable_thread_safeness(void) {$/;"	f
zmalloc_get_fragmentation_ratio	src\storage\rdb\redis\zmalloc.c	/^float zmalloc_get_fragmentation_ratio(void) {$/;"	f
zmalloc_get_rss	src\storage\rdb\redis\zmalloc.c	/^size_t zmalloc_get_rss(void) {$/;"	f
zmalloc_oom	src\storage\rdb\redis\zmalloc.c	/^static void zmalloc_oom(size_t size) {$/;"	f	file:
zmalloc_simple	src\storage\rdb\redis\zmalloc.c	/^void *zmalloc_simple(size_t size) {$/;"	f
zmalloc_thread_safe	src\storage\rdb\redis\zmalloc.c	/^static int zmalloc_thread_safe = 0;$/;"	v	file:
zmalloc_thread_safeness	src\storage\rdb\redis\zmalloc.c	/^int zmalloc_thread_safeness(void) {$/;"	f
zmalloc_used_memory	src\storage\rdb\redis\zmalloc.c	/^size_t zmalloc_used_memory(void) {$/;"	f
zrealloc	src\storage\rdb\redis\zmalloc.c	/^void *zrealloc(void *ptr, size_t size) {$/;"	f
zstrdup	src\storage\rdb\redis\zmalloc.c	/^char *zstrdup(const char *s) {$/;"	f
_ZMALLOC_H	src\storage\rdb\redis\zmalloc.h	32;"	d
REDIS_DB_H	src\storage\rdb\redis_db.h	2;"	d
REDIS_DB_KEY_FIELDS_VERIFY	src\storage\rdb\redis_db.h	69;"	d
REDIS_DB_KEY_FIELD_S_VERIFY	src\storage\rdb\redis_db.h	54;"	d
REDIS_DB_KEY_FIELD_VERIFY	src\storage\rdb\redis_db.h	61;"	d
REDIS_DB_KEY_ITEMS_VERIFY	src\storage\rdb\redis_db.h	47;"	d
REDIS_DB_KEY_ITEM_VERIFY	src\storage\rdb\redis_db.h	22;"	d
REDIS_DB_KEY_VALUE_S_VERIFY	src\storage\rdb\redis_db.h	40;"	d
REDIS_DB_KEY_VALUE_VERIFY	src\storage\rdb\redis_db.h	31;"	d
REDIS_DB_KEY_VERIFY	src\storage\rdb\redis_db.h	15;"	d
addfilter	src\storage\rdb\redis_db.h	/^    virtual int addfilter(int area, value_item* key_pattern, value_item* field_pattern,$/;"	f	class:redis_db
autoremove_count	src\storage\rdb\redis_db.h	/^    size_t autoremove_count(uint32_t area)$/;"	f	class:redis_db
context	src\storage\rdb\redis_db.h	/^    redis_db_context *context;$/;"	m	class:redis_db
dumparea	src\storage\rdb\redis_db.h	/^    virtual int dumparea(uint32_t area) {$/;"	f	class:redis_db
exists	src\storage\rdb\redis_db.h	/^    virtual int exists(MKEY)$/;"	f	class:redis_db
expire	src\storage\rdb\redis_db.h	/^    virtual int expire(MKEY, long expiretime)$/;"	f	class:redis_db
genericZrangebyscore	src\storage\rdb\redis_db.h	/^    virtual int genericZrangebyscore(MKEY, double start, double end, OITEMSVSN,$/;"	f	class:redis_db
generic_hash	src\storage\rdb\redis_db.h	/^    unsigned int generic_hash(char *buffer, int len) {$/;"	f	class:redis_db
get	src\storage\rdb\redis_db.h	/^    virtual int get(MKEY, OITEMVSN)$/;"	f	class:redis_db
get_area_num	src\storage\rdb\redis_db.h	/^    uint16_t get_area_num() {$/;"	f	class:redis_db
get_db_used_maxmemory	src\storage\rdb\redis_db.h	/^    uint64_t get_db_used_maxmemory(uint32_t area)$/;"	f	class:redis_db
get_hit_count	src\storage\rdb\redis_db.h	/^    int get_hit_count(uint32_t area) {$/;"	f	class:redis_db
get_maxmemory	src\storage\rdb\redis_db.h	/^    uint64_t get_maxmemory() {$/;"	f	class:redis_db
get_read_count	src\storage\rdb\redis_db.h	/^    int get_read_count(uint32_t area) {$/;"	f	class:redis_db
get_redis_db	src\storage\rdb\redis_db.h	76;"	d
get_remove_count	src\storage\rdb\redis_db.h	/^    int get_remove_count(uint32_t area) {$/;"	f	class:redis_db
get_write_count	src\storage\rdb\redis_db.h	/^    int get_write_count(uint32_t area) {$/;"	f	class:redis_db
getnsattr	src\storage\rdb\redis_db.h	/^    virtual int getnsattr(uint32_t area, const char* attr, const int attr_len,$/;"	f	class:redis_db
getset	src\storage\rdb\redis_db.h	/^    virtual int getset(MKEY, MDETA, value_item* new_item, OITEMVSN)$/;"	f	class:redis_db
hdel	src\storage\rdb\redis_db.h	/^    virtual int hdel(MKEY, MDETA, CFIELD)$/;"	f	class:redis_db
hexists	src\storage\rdb\redis_db.h	/^    virtual int hexists(MKEY, CFIELD)$/;"	f	class:redis_db
hget	src\storage\rdb\redis_db.h	/^    virtual int hget(MKEY, CFIELD, OITEMVSN)$/;"	f	class:redis_db
hgetall	src\storage\rdb\redis_db.h	/^    virtual int hgetall(MKEY, OITEMSVSN)$/;"	f	class:redis_db
hincrby	src\storage\rdb\redis_db.h	/^    virtual int hincrby(MKEY, MDETA, value_item* field, int addvalue, long long * retvalue)$/;"	f	class:redis_db
hkeys	src\storage\rdb\redis_db.h	/^    virtual int hkeys(MKEY, OITEMSVSN)$/;"	f	class:redis_db
hlen	src\storage\rdb\redis_db.h	/^    virtual int hlen(MKEY, long long *len)$/;"	f	class:redis_db
hmget	src\storage\rdb\redis_db.h	/^    virtual int hmget(MKEY, MFIELD, OITEMSVSN)$/;"	f	class:redis_db
hmset	src\storage\rdb\redis_db.h	/^    virtual int hmset(MKEY, MDETA, value_item* field_value, int field_val_len, int* retvalue)$/;"	f	class:redis_db
hset	src\storage\rdb\redis_db.h	/^    virtual int hset(MKEY, MDETA, CFIELD, value_item* item)$/;"	f	class:redis_db
hsetnx	src\storage\rdb\redis_db.h	/^    virtual int hsetnx(MKEY, MDETA, CFIELD, value_item* item)$/;"	f	class:redis_db
hvals	src\storage\rdb\redis_db.h	/^    virtual int hvals(MKEY, OITEMSVSN) {$/;"	f	class:redis_db
incdecr	src\storage\rdb\redis_db.h	/^    virtual int incdecr(MKEY, MDETA, int init_value, int addvalue, int *retvalue)$/;"	f	class:redis_db
item_count	src\storage\rdb\redis_db.h	/^    size_t item_count(uint32_t area)$/;"	f	class:redis_db
lazyflushdb	src\storage\rdb\redis_db.h	/^    virtual int lazyflushdb(uint32_t area, const char* password, const int len) {$/;"	f	class:redis_db
lindex	src\storage\rdb\redis_db.h	/^    virtual int lindex(MKEY, int index, OITEMVSN)$/;"	f	class:redis_db
linsert	src\storage\rdb\redis_db.h	/^    virtual int linsert(MKEY, MDETA, BORA, char* value_in_list, size_t value_in_list_len,$/;"	f	class:redis_db
llen	src\storage\rdb\redis_db.h	/^    virtual int llen(MKEY, long long *len)$/;"	f	class:redis_db
loadarea	src\storage\rdb\redis_db.h	/^    virtual int loadarea(uint32_t area) {$/;"	f	class:redis_db
lrange	src\storage\rdb\redis_db.h	/^    virtual int lrange(MKEY, int start, int end, OITEMSVSN)$/;"	f	class:redis_db
lrem	src\storage\rdb\redis_db.h	/^    virtual int lrem(MKEY, MDETA, int count, value_item* value, long long* remlen)$/;"	f	class:redis_db
lrpop	src\storage\rdb\redis_db.h	/^    virtual int lrpop(MKEY, MDETA, int count, LORR, OITEMSVSN)$/;"	f	class:redis_db
lrpush	src\storage\rdb\redis_db.h	/^    virtual int lrpush(MKEY, MDETA, MITEMSVNS, LORR, EORN, int max_count, push_return_value *prv)$/;"	f	class:redis_db
lset	src\storage\rdb\redis_db.h	/^    virtual int lset(MKEY, MDETA, int index, value_item* value)$/;"	f	class:redis_db
ltrim	src\storage\rdb\redis_db.h	/^    virtual int ltrim(MKEY, MDETA, int start, int end)$/;"	f	class:redis_db
persist	src\storage\rdb\redis_db.h	/^    virtual int persist(MKEY)$/;"	f	class:redis_db
put	src\storage\rdb\redis_db.h	/^    virtual int put(MKEY, MDETA, value_item* item, EORN)$/;"	f	class:redis_db
redis_db	src\storage\rdb\redis_db.h	/^	redis_db(redisConfig &config)$/;"	f	class:redis_db
redis_db	src\storage\rdb\redis_db.h	/^    redis_db()$/;"	f	class:redis_db
redis_db	src\storage\rdb\redis_db.h	/^class redis_db$/;"	c
remove	src\storage\rdb\redis_db.h	/^    virtual int remove(MKEY, int version_care)$/;"	f	class:redis_db
removefilter	src\storage\rdb\redis_db.h	/^    virtual int removefilter(int area, value_item* key_pattern, value_item* field_pattern,$/;"	f	class:redis_db
reset_autoremove_count	src\storage\rdb\redis_db.h	/^    void reset_autoremove_count(uint32_t area)$/;"	f	class:redis_db
reset_hit_count	src\storage\rdb\redis_db.h	/^    void reset_hit_count(uint32_t area) {$/;"	f	class:redis_db
reset_read_count	src\storage\rdb\redis_db.h	/^    void reset_read_count(uint32_t area) {$/;"	f	class:redis_db
reset_remove_count	src\storage\rdb\redis_db.h	/^    void reset_remove_count(uint32_t area) {$/;"	f	class:redis_db
reset_write_count	src\storage\rdb\redis_db.h	/^    void reset_write_count(uint32_t area) {$/;"	f	class:redis_db
sadd	src\storage\rdb\redis_db.h	/^    virtual int sadd(MKEY, MDETA, value_item* item)$/;"	f	class:redis_db
scard	src\storage\rdb\redis_db.h	/^    virtual int scard(MKEY, long long* retnum)$/;"	f	class:redis_db
session	src\storage\rdb\redis_db.h	/^    redis_db_session *session;$/;"	m	class:redis_db
set_maxmemory	src\storage\rdb\redis_db.h	/^    virtual void set_maxmemory(uint32_t area, uint64_t quota)$/;"	f	class:redis_db
setnsattr	src\storage\rdb\redis_db.h	/^    virtual int setnsattr(uint32_t area, const char* attr, const int attr_len,$/;"	f	class:redis_db
smembers	src\storage\rdb\redis_db.h	/^    virtual int smembers(MKEY, OITEMSVSN)$/;"	f	class:redis_db
spop	src\storage\rdb\redis_db.h	/^    virtual int spop(MKEY, MDETA, OITEMVSN)$/;"	f	class:redis_db
srem	src\storage\rdb\redis_db.h	/^    virtual int srem(MKEY, MDETA, value_item* item)$/;"	f	class:redis_db
ttl	src\storage\rdb\redis_db.h	/^    virtual int ttl(MKEY, long long* time_remain)$/;"	f	class:redis_db
type	src\storage\rdb\redis_db.h	/^    virtual int type(MKEY, long long* what_type)$/;"	f	class:redis_db
verify_password	src\storage\rdb\redis_db.h	/^    virtual int verify_password(uint32_t area, const char* password, const int len)$/;"	f	class:redis_db
zadd	src\storage\rdb\redis_db.h	/^    virtual int zadd(MKEY, MDETA, double score, value_item* item)$/;"	f	class:redis_db
zcard	src\storage\rdb\redis_db.h	/^    virtual int zcard(MKEY, long long* retnum) {$/;"	f	class:redis_db
zcount	src\storage\rdb\redis_db.h	/^    virtual int zcount(MKEY, double start, double end, long long *retnum)$/;"	f	class:redis_db
zincrby	src\storage\rdb\redis_db.h	/^	virtual int zincrby(MKEY, MDETA, value_item* value, double addscore, double *retvalue)$/;"	f	class:redis_db
zrange	src\storage\rdb\redis_db.h	/^    virtual int zrange(MKEY, int start, int end, OITEMSVSN,$/;"	f	class:redis_db
zrank	src\storage\rdb\redis_db.h	/^    virtual int zrank(MKEY, char* value, size_t value_len, long long* rank)$/;"	f	class:redis_db
zrem	src\storage\rdb\redis_db.h	/^	virtual int zrem(MKEY, MDETA, value_item* item)$/;"	f	class:redis_db
zremrangebyrank	src\storage\rdb\redis_db.h	/^	virtual int zremrangebyrank(MKEY, MDETA, int start, int end, long long* remnum)$/;"	f	class:redis_db
zremrangebyscore	src\storage\rdb\redis_db.h	/^	virtual int zremrangebyscore(MKEY, MDETA, double start, double end, long long* remnum)$/;"	f	class:redis_db
zrevrange	src\storage\rdb\redis_db.h	/^    virtual int zrevrange(MKEY, int start, int end, OITEMSVSN,$/;"	f	class:redis_db
zrevrank	src\storage\rdb\redis_db.h	/^    virtual int zrevrank(MKEY, char* value, size_t value_len, long long* rank)$/;"	f	class:redis_db
zscore	src\storage\rdb\redis_db.h	/^    virtual int zscore(MKEY, char* value, size_t value_len, double* retscore)$/;"	f	class:redis_db
~redis_db	src\storage\rdb\redis_db.h	/^    virtual ~redis_db()$/;"	f	class:redis_db
autoremove_count	src\storage\rdb\redis_db_context.cpp	/^size_t redis_db_context::autoremove_count(uint32_t dbnum) const$/;"	f	class:redis_db_context
create_context	src\storage\rdb\redis_db_context.cpp	/^redisServer *redis_db_context::create_context(const redisConfig &config)$/;"	f	class:redis_db_context
destroy_context	src\storage\rdb\redis_db_context.cpp	/^void redis_db_context::destroy_context(redisServer *context)$/;"	f	class:redis_db_context
get_db_used_maxmemory	src\storage\rdb\redis_db_context.cpp	/^uint64_t redis_db_context::get_db_used_maxmemory(uint32_t db)$/;"	f	class:redis_db_context
get_hit_count	src\storage\rdb\redis_db_context.cpp	/^int redis_db_context::get_hit_count(uint32_t dbnum) const$/;"	f	class:redis_db_context
get_maxmemory	src\storage\rdb\redis_db_context.cpp	/^uint64_t redis_db_context::get_maxmemory()$/;"	f	class:redis_db_context
get_read_count	src\storage\rdb\redis_db_context.cpp	/^int redis_db_context::get_read_count(uint32_t dbnum) const$/;"	f	class:redis_db_context
get_remove_count	src\storage\rdb\redis_db_context.cpp	/^int redis_db_context::get_remove_count(uint32_t dbnum) const$/;"	f	class:redis_db_context
get_write_count	src\storage\rdb\redis_db_context.cpp	/^int redis_db_context::get_write_count(uint32_t dbnum) const$/;"	f	class:redis_db_context
initialize_shared_data	src\storage\rdb\redis_db_context.cpp	/^void redis_db_context::initialize_shared_data()$/;"	f	class:redis_db_context
item_count	src\storage\rdb\redis_db_context.cpp	/^size_t redis_db_context::item_count(uint32_t dbnum) const$/;"	f	class:redis_db_context
redis_db_context	src\storage\rdb\redis_db_context.cpp	/^redis_db_context::redis_db_context(const redisConfig &config) : server_cron(NULL), server(NULL)$/;"	f	class:redis_db_context
reset_autoremove_count	src\storage\rdb\redis_db_context.cpp	/^void redis_db_context::reset_autoremove_count(uint32_t dbnum)$/;"	f	class:redis_db_context
reset_hit_count	src\storage\rdb\redis_db_context.cpp	/^void redis_db_context::reset_hit_count(uint32_t dbnum)$/;"	f	class:redis_db_context
reset_read_count	src\storage\rdb\redis_db_context.cpp	/^void redis_db_context::reset_read_count(uint32_t dbnum)$/;"	f	class:redis_db_context
reset_remove_count	src\storage\rdb\redis_db_context.cpp	/^void redis_db_context::reset_remove_count(uint32_t dbnum)$/;"	f	class:redis_db_context
reset_write_count	src\storage\rdb\redis_db_context.cpp	/^void redis_db_context::reset_write_count(uint32_t dbnum)$/;"	f	class:redis_db_context
set_db_maxmemory	src\storage\rdb\redis_db_context.cpp	/^void redis_db_context::set_db_maxmemory(int db, uint64_t maxmem)$/;"	f	class:redis_db_context
start	src\storage\rdb\redis_db_context.cpp	/^void redis_db_context::start() {$/;"	f	class:redis_db_context
stop	src\storage\rdb\redis_db_context.cpp	/^void redis_db_context::stop() {$/;"	f	class:redis_db_context
~redis_db_context	src\storage\rdb\redis_db_context.cpp	/^redis_db_context::~redis_db_context()$/;"	f	class:redis_db_context
REDIS_DB_CONTEXT_H	src\storage\rdb\redis_db_context.h	2;"	d
area_group_num	src\storage\rdb\redis_db_context.h	/^    int area_group_num;$/;"	m	class:redis_db_context
get_area_conf	src\storage\rdb\redis_db_context.h	/^    redisAreaConf* get_area_conf(int area) {return (&(server->area_confs[area]));}$/;"	f	class:redis_db_context
get_area_num	src\storage\rdb\redis_db_context.h	/^    int get_area_num() {return area_group_num;}$/;"	f	class:redis_db_context
get_unit_num	src\storage\rdb\redis_db_context.h	/^    int get_unit_num() {return unit_num;}$/;"	f	class:redis_db_context
inited	src\storage\rdb\redis_db_context.h	/^    static bool inited;$/;"	m	class:redis_db_context
redis_db_context	src\storage\rdb\redis_db_context.h	/^class redis_db_context$/;"	c
server	src\storage\rdb\redis_db_context.h	/^    redisServer *server;$/;"	m	class:redis_db_context
server_cron	src\storage\rdb\redis_db_context.h	/^    redis_server_cron *server_cron;$/;"	m	class:redis_db_context
unit_num	src\storage\rdb\redis_db_context.h	/^    int unit_num;$/;"	m	class:redis_db_context
BUFFER_SIZE	src\storage\rdb\redis_db_session.cpp	26;"	d	file:
DB_CONTEXT_LOCK	src\storage\rdb\redis_db_session.cpp	27;"	d	file:
addfilter	src\storage\rdb\redis_db_session.cpp	/^int redis_db_session::addfilter(int area, char* key_pattern,$/;"	f	class:redis_db_session
del	src\storage\rdb\redis_db_session.cpp	/^int redis_db_session::del(MKEY, int version_care)$/;"	f	class:redis_db_session
dumpDb	src\storage\rdb\redis_db_session.cpp	/^int redis_db_session::dumpDb(int area)$/;"	f	class:redis_db_session
exists	src\storage\rdb\redis_db_session.cpp	/^int redis_db_session::exists(MKEY) {$/;"	f	class:redis_db_session
expire	src\storage\rdb\redis_db_session.cpp	/^int redis_db_session::expire(MKEY, long expiretime) {$/;"	f	class:redis_db_session
filter_field	src\storage\rdb\redis_db_session.cpp	/^int redis_db_session::filter_field(redisServer* server, int dbnum, char* key, size_t key_len) {$/;"	f	class:redis_db_session
genericZrangebyscore	src\storage\rdb\redis_db_session.cpp	/^int redis_db_session::genericZrangebyscore(MKEY, double start, double end,$/;"	f	class:redis_db_session
get	src\storage\rdb\redis_db_session.cpp	/^int redis_db_session::get(MKEY, OITEMVSN)$/;"	f	class:redis_db_session
get_redis_client	src\storage\rdb\redis_db_session.cpp	/^int redis_db_session::get_redis_client(redisClient **client, const uint32_t dbnum, const int argc)$/;"	f	class:redis_db_session
getdbattr	src\storage\rdb\redis_db_session.cpp	/^int redis_db_session::getdbattr(uint32_t area, const char* attr, int attr_len,$/;"	f	class:redis_db_session
getset	src\storage\rdb\redis_db_session.cpp	/^int redis_db_session::getset(MKEY, MDETA, value_item* new_item, OITEMVSN) {$/;"	f	class:redis_db_session
hdel	src\storage\rdb\redis_db_session.cpp	/^int redis_db_session::hdel(MKEY, MDETA, CFIELD) {$/;"	f	class:redis_db_session
hexists	src\storage\rdb\redis_db_session.cpp	/^int redis_db_session::hexists(MKEY, CFIELD)$/;"	f	class:redis_db_session
hget	src\storage\rdb\redis_db_session.cpp	/^int redis_db_session::hget(MKEY, CFIELD, OITEMVSN)$/;"	f	class:redis_db_session
hgetall	src\storage\rdb\redis_db_session.cpp	/^int redis_db_session::hgetall(MKEY, OITEMSVSN) {$/;"	f	class:redis_db_session
hincrby	src\storage\rdb\redis_db_session.cpp	/^int redis_db_session::hincrby(MKEY, MDETA, value_item* field, long long addvalue, long long *retvalue) {$/;"	f	class:redis_db_session
hkeys	src\storage\rdb\redis_db_session.cpp	/^int redis_db_session::hkeys(MKEY, OITEMSVSN) {$/;"	f	class:redis_db_session
hlen	src\storage\rdb\redis_db_session.cpp	/^int redis_db_session::hlen(MKEY, long long* len) {$/;"	f	class:redis_db_session
hmget	src\storage\rdb\redis_db_session.cpp	/^int redis_db_session::hmget(MKEY, MFIELD, OITEMSVSN)$/;"	f	class:redis_db_session
hmset	src\storage\rdb\redis_db_session.cpp	/^int redis_db_session::hmset(MKEY, MDETA, value_item* field_value, int field_val_len, int* retvalue)$/;"	f	class:redis_db_session
hset	src\storage\rdb\redis_db_session.cpp	/^int redis_db_session::hset(MKEY, MDETA, CFIELD, value_item* item)$/;"	f	class:redis_db_session
hsetnx	src\storage\rdb\redis_db_session.cpp	/^int redis_db_session::hsetnx(MKEY, MDETA, CFIELD, value_item* item)$/;"	f	class:redis_db_session
hvals	src\storage\rdb\redis_db_session.cpp	/^int redis_db_session::hvals(MKEY, OITEMSVSN) {$/;"	f	class:redis_db_session
incdecr	src\storage\rdb\redis_db_session.cpp	/^int redis_db_session::incdecr(MKEY, MDETA, int init_value, int addvalue, int *retvalue) {$/;"	f	class:redis_db_session
lazyflushdb	src\storage\rdb\redis_db_session.cpp	/^int redis_db_session::lazyflushdb(int area)$/;"	f	class:redis_db_session
lindex	src\storage\rdb\redis_db_session.cpp	/^int redis_db_session::lindex(MKEY, int index, OITEMVSN)$/;"	f	class:redis_db_session
linsert	src\storage\rdb\redis_db_session.cpp	/^int redis_db_session::linsert(MKEY, MDETA, BORA, char* value_in_list,$/;"	f	class:redis_db_session
llen	src\storage\rdb\redis_db_session.cpp	/^int redis_db_session::llen(MKEY, long long* len)$/;"	f	class:redis_db_session
loadDb	src\storage\rdb\redis_db_session.cpp	/^int redis_db_session::loadDb(int area)$/;"	f	class:redis_db_session
lrange	src\storage\rdb\redis_db_session.cpp	/^int redis_db_session::lrange(MKEY, int start, int end, OITEMSVSN)$/;"	f	class:redis_db_session
lrem	src\storage\rdb\redis_db_session.cpp	/^int redis_db_session::lrem(MKEY, MDETA, int count, value_item* value, long long* remlen)$/;"	f	class:redis_db_session
lrpop	src\storage\rdb\redis_db_session.cpp	/^int redis_db_session::lrpop(MKEY, MDETA, int count, LORR, OITEMSVSN)$/;"	f	class:redis_db_session
lrpush	src\storage\rdb\redis_db_session.cpp	/^int redis_db_session::lrpush(MKEY, MDETA, value_item* item, int item_num, LORR,$/;"	f	class:redis_db_session
lset	src\storage\rdb\redis_db_session.cpp	/^int redis_db_session::lset(MKEY, MDETA, int index, value_item *item)$/;"	f	class:redis_db_session
ltrim	src\storage\rdb\redis_db_session.cpp	/^int redis_db_session::ltrim(MKEY, MDETA, int start, int end)$/;"	f	class:redis_db_session
persist	src\storage\rdb\redis_db_session.cpp	/^int redis_db_session::persist(MKEY) {$/;"	f	class:redis_db_session
ready_client	src\storage\rdb\redis_db_session.cpp	/^int redis_db_session::ready_client(redisClient *client, size_t arglen)$/;"	f	class:redis_db_session
redis_db_session	src\storage\rdb\redis_db_session.cpp	/^redis_db_session::redis_db_session(const redis_db_context &context)$/;"	f	class:redis_db_session
removefilter	src\storage\rdb\redis_db_session.cpp	/^int redis_db_session::removefilter(int area, char* key_pattern,$/;"	f	class:redis_db_session
rename	src\storage\rdb\redis_db_session.cpp	/^int redis_db_session::rename(MKEY, char* target_key, size_t target_key_len, int nx)$/;"	f	class:redis_db_session
sadd	src\storage\rdb\redis_db_session.cpp	/^int redis_db_session::sadd(MKEY, MDETA, value_item* item)$/;"	f	class:redis_db_session
scard	src\storage\rdb\redis_db_session.cpp	/^int redis_db_session::scard(MKEY, long long* retnum) {$/;"	f	class:redis_db_session
set	src\storage\rdb\redis_db_session.cpp	/^int redis_db_session::set(MKEY, MDETA, value_item* item, EORN)$/;"	f	class:redis_db_session
setdbattr	src\storage\rdb\redis_db_session.cpp	/^int redis_db_session::setdbattr(uint32_t area, const char* attr, int attr_len,$/;"	f	class:redis_db_session
smembers	src\storage\rdb\redis_db_session.cpp	/^int redis_db_session::smembers(MKEY, OITEMSVSN) {$/;"	f	class:redis_db_session
spop	src\storage\rdb\redis_db_session.cpp	/^int redis_db_session::spop(MKEY, MDETA, OITEMVSN) {$/;"	f	class:redis_db_session
srem	src\storage\rdb\redis_db_session.cpp	/^int redis_db_session::srem(MKEY, MDETA, value_item* item)$/;"	f	class:redis_db_session
ttl	src\storage\rdb\redis_db_session.cpp	/^int redis_db_session::ttl(MKEY, long long* time_remain)$/;"	f	class:redis_db_session
type	src\storage\rdb\redis_db_session.cpp	/^int redis_db_session::type(MKEY, long long* what_type)$/;"	f	class:redis_db_session
verify_password	src\storage\rdb\redis_db_session.cpp	/^int redis_db_session::verify_password(uint32_t area, const char* pwd, const int pwd_len)$/;"	f	class:redis_db_session
zadd	src\storage\rdb\redis_db_session.cpp	/^int redis_db_session::zadd(MKEY, MDETA, double score, value_item* item)$/;"	f	class:redis_db_session
zcard	src\storage\rdb\redis_db_session.cpp	/^int redis_db_session::zcard(MKEY, long long* retnum)$/;"	f	class:redis_db_session
zcount	src\storage\rdb\redis_db_session.cpp	/^int redis_db_session::zcount(MKEY, double start, double end, long long *retnum)$/;"	f	class:redis_db_session
zincrby	src\storage\rdb\redis_db_session.cpp	/^int redis_db_session::zincrby(MKEY, MDETA, value_item* value, double addscore, double *retvalue)$/;"	f	class:redis_db_session
zrange	src\storage\rdb\redis_db_session.cpp	/^int redis_db_session::zrange(MKEY, int start, int end, OITEMSVSN,$/;"	f	class:redis_db_session
zrank	src\storage\rdb\redis_db_session.cpp	/^int redis_db_session::zrank(MKEY, char* value, size_t value_len, long long* rank)$/;"	f	class:redis_db_session
zrem	src\storage\rdb\redis_db_session.cpp	/^int redis_db_session::zrem(MKEY, MDETA, value_item* item)$/;"	f	class:redis_db_session
zremrangebyrank	src\storage\rdb\redis_db_session.cpp	/^int redis_db_session::zremrangebyrank(MKEY, MDETA, int start, int end, long long* remnum)$/;"	f	class:redis_db_session
zremrangebyscore	src\storage\rdb\redis_db_session.cpp	/^int redis_db_session::zremrangebyscore(MKEY, MDETA, double start, double end, long long* remnum)$/;"	f	class:redis_db_session
zrevrange	src\storage\rdb\redis_db_session.cpp	/^int redis_db_session::zrevrange(MKEY, int start, int end, OITEMSVSN,$/;"	f	class:redis_db_session
zrevrank	src\storage\rdb\redis_db_session.cpp	/^int redis_db_session::zrevrank(MKEY, char* value, size_t value_len, long long* rank)$/;"	f	class:redis_db_session
zscore	src\storage\rdb\redis_db_session.cpp	/^int redis_db_session::zscore(MKEY, char* value, size_t value_len, double* retscore)$/;"	f	class:redis_db_session
~redis_db_session	src\storage\rdb\redis_db_session.cpp	/^redis_db_session::~redis_db_session()$/;"	f	class:redis_db_session
BITEMSVSN	src\storage\rdb\redis_db_session.h	33;"	d
BITEMVSN	src\storage\rdb\redis_db_session.h	31;"	d
BORA	src\storage\rdb\redis_db_session.h	39;"	d
CFIELD	src\storage\rdb\redis_db_session.h	34;"	d
EORN	src\storage\rdb\redis_db_session.h	38;"	d
IDETA	src\storage\rdb\redis_db_session.h	24;"	d
IFIELD	src\storage\rdb\redis_db_session.h	36;"	d
IITEMSVNS	src\storage\rdb\redis_db_session.h	29;"	d
IKEY	src\storage\rdb\redis_db_session.h	26;"	d
LORR	src\storage\rdb\redis_db_session.h	37;"	d
MDETA	src\storage\rdb\redis_db_session.h	23;"	d
MFIELD	src\storage\rdb\redis_db_session.h	35;"	d
MITEMSVNS	src\storage\rdb\redis_db_session.h	27;"	d
MITEMVSN	src\storage\rdb\redis_db_session.h	28;"	d
MKEY	src\storage\rdb\redis_db_session.h	25;"	d
OITEMSVSN	src\storage\rdb\redis_db_session.h	32;"	d
OITEMVSN	src\storage\rdb\redis_db_session.h	30;"	d
REDIS_DB_SESSION_H	src\storage\rdb\redis_db_session.h	2;"	d
context	src\storage\rdb\redis_db_session.h	/^    const redis_db_context &context;$/;"	m	class:redis_db_session
data	src\storage\rdb\redis_db_session.h	/^    char* data;$/;"	m	struct:value_item
data_len	src\storage\rdb\redis_db_session.h	/^    size_t data_len;    \/\/8$/;"	m	struct:value_item
redis_db_session	src\storage\rdb\redis_db_session.h	/^class redis_db_session$/;"	c
value_item	src\storage\rdb\redis_db_session.h	/^typedef struct value_item$/;"	s
BEGIN_NS	src\storage\rdb\redis_define.h	7;"	d
END_NS	src\storage\rdb\redis_define.h	8;"	d
TAIR_REDIS_H	src\storage\rdb\redis_define.h	2;"	d
USE_NS	src\storage\rdb\redis_define.h	9;"	d
REDIS_LIB_H	src\storage\rdb\redis_lib.h	2;"	d
redis_server_cron	src\storage\rdb\redis_server_cron.cpp	/^redis_server_cron::redis_server_cron(const redis_db_context &context)$/;"	f	class:redis_server_cron
run	src\storage\rdb\redis_server_cron.cpp	/^void redis_server_cron::run(CThread *thread, void *arg)$/;"	f	class:redis_server_cron
stop	src\storage\rdb\redis_server_cron.cpp	/^void redis_server_cron::stop()$/;"	f	class:redis_server_cron
~redis_server_cron	src\storage\rdb\redis_server_cron.cpp	/^redis_server_cron::~redis_server_cron()$/;"	f	class:redis_server_cron
REDIS_SERVER_CRON_H	src\storage\rdb\redis_server_cron.h	2;"	d
cond	src\storage\rdb\redis_server_cron.h	/^    tbsys::CThreadCond cond;$/;"	m	class:redis_server_cron
context	src\storage\rdb\redis_server_cron.h	/^    const redis_db_context &context;$/;"	m	class:redis_server_cron
redis_server_cron	src\storage\rdb\redis_server_cron.h	/^class redis_server_cron : public tbsys::CDefaultRunnable $/;"	c
_mutex	src\storage\rdb\scope_lock.h	/^    pthread_mutex_t *_mutex;$/;"	m	class:scope_lock
scope_lock	src\storage\rdb\scope_lock.h	/^    scope_lock(pthread_mutex_t* mutex) {$/;"	f	class:scope_lock
scope_lock	src\storage\rdb\scope_lock.h	/^class scope_lock$/;"	c
~scope_lock	src\storage\rdb\scope_lock.h	/^    ~scope_lock() {$/;"	f	class:scope_lock
BeforeOrAfter	src\storage\storage_manager.hpp	/^enum BeforeOrAfter$/;"	g	namespace:tair
ExistOrNot	src\storage\storage_manager.hpp	/^enum ExistOrNot$/;"	g	namespace:tair
IS_AFTER	src\storage\storage_manager.hpp	/^    IS_BEFORE, IS_AFTER$/;"	e	enum:tair::BeforeOrAfter
IS_BEFORE	src\storage\storage_manager.hpp	/^    IS_BEFORE, IS_AFTER$/;"	e	enum:tair::BeforeOrAfter
IS_EXIST	src\storage\storage_manager.hpp	/^    IS_EXIST = 1,$/;"	e	enum:tair::ExistOrNot
IS_EXIST_AND_EXPIRE	src\storage\storage_manager.hpp	/^    IS_EXIST_AND_EXPIRE = 3$/;"	e	enum:tair::ExistOrNot
IS_LEFT	src\storage\storage_manager.hpp	/^    IS_LEFT, IS_RIGHT$/;"	e	enum:tair::LeftOrRight
IS_NOT_EXIST	src\storage\storage_manager.hpp	/^    IS_NOT_EXIST = 0, \/\/nx$/;"	e	enum:tair::ExistOrNot
IS_NOT_EXIST_AND_EXPIRE	src\storage\storage_manager.hpp	/^    IS_NOT_EXIST_AND_EXPIRE = 2,$/;"	e	enum:tair::ExistOrNot
IS_RIGHT	src\storage\storage_manager.hpp	/^    IS_LEFT, IS_RIGHT$/;"	e	enum:tair::LeftOrRight
LeftOrRight	src\storage\storage_manager.hpp	/^enum LeftOrRight$/;"	g	namespace:tair
TAIR_STORAGE_MANAGER_H	src\storage\storage_manager.hpp	18;"	d
_migrate_dump_index	src\storage\storage_manager.hpp	/^typedef struct _migrate_dump_index$/;"	s	namespace:tair
addfilter	src\storage\storage_manager.hpp	/^        virtual int addfilter(int area, data_entry & key, data_entry & field,$/;"	f	class:tair::storage::storage_manager
bucket_count	src\storage\storage_manager.hpp	/^              uint32_t bucket_count;$/;"	m	class:tair::storage::storage_manager
db_id	src\storage\storage_manager.hpp	/^    uint32_t db_id;$/;"	m	struct:tair::_migrate_dump_index
dumparea	src\storage\storage_manager.hpp	/^        virtual int dumparea(int area)$/;"	f	class:tair::storage::storage_manager
exists	src\storage\storage_manager.hpp	/^        virtual int exists(int bucket_number, data_entry & key)$/;"	f	class:tair::storage::storage_manager
expire	src\storage\storage_manager.hpp	/^        virtual int expire(int bucket_number, data_entry & key, int expiretime)$/;"	f	class:tair::storage::storage_manager
expireat	src\storage\storage_manager.hpp	/^        virtual int expireat(int bucket_number, data_entry & key, int expiretime)$/;"	f	class:tair::storage::storage_manager
getnsattr	src\storage\storage_manager.hpp	/^        virtual int getnsattr(int area, const char* attr, const int attr_len,$/;"	f	class:tair::storage::storage_manager
getset	src\storage\storage_manager.hpp	/^        virtual int getset(int bucket_number, data_entry & key, data_entry & value,$/;"	f	class:tair::storage::storage_manager
hash_index	src\storage\storage_manager.hpp	/^    uint32_t hash_index;$/;"	m	struct:tair::_migrate_dump_index
hdel	src\storage\storage_manager.hpp	/^        virtual int hdel(int bucket_number, data_entry & key, data_entry & field,$/;"	f	class:tair::storage::storage_manager
hexists	src\storage\storage_manager.hpp	/^        virtual int hexists(int bucket_number, data_entry & key, data_entry & field)$/;"	f	class:tair::storage::storage_manager
hget	src\storage\storage_manager.hpp	/^        virtual int hget(int bucket_number, data_entry & key, data_entry & field,$/;"	f	class:tair::storage::storage_manager
hgetall	src\storage\storage_manager.hpp	/^        virtual int hgetall(int bucket_number, data_entry & key, std::vector<data_entry*> & values)$/;"	f	class:tair::storage::storage_manager
hincrby	src\storage\storage_manager.hpp	/^        virtual int hincrby(int bucket_number, data_entry & key, data_entry & field,$/;"	f	class:tair::storage::storage_manager
hkeys	src\storage\storage_manager.hpp	/^        virtual int hkeys(int bucket_number, data_entry & key, std::vector<data_entry*> & values)$/;"	f	class:tair::storage::storage_manager
hlen	src\storage\storage_manager.hpp	/^		virtual int hlen(int bucket_number, data_entry &key, long long* len)$/;"	f	class:tair::storage::storage_manager
hmget	src\storage\storage_manager.hpp	/^        virtual int hmget(int bucket_number, data_entry & key, std::vector<data_entry*> & field,$/;"	f	class:tair::storage::storage_manager
hmset	src\storage\storage_manager.hpp	/^        virtual int hmset(int bucket_number, data_entry & key, std::vector<data_entry*> & field_value,$/;"	f	class:tair::storage::storage_manager
hset	src\storage\storage_manager.hpp	/^        virtual int hset(int bucket_number, data_entry & key, data_entry & field,$/;"	f	class:tair::storage::storage_manager
hsetnx	src\storage\storage_manager.hpp	/^        virtual int hsetnx(int bucket_number, data_entry & key, data_entry & field,$/;"	f	class:tair::storage::storage_manager
hvals	src\storage\storage_manager.hpp	/^        virtual int hvals(int bucket_number, data_entry & key, std::vector<data_entry*> & values)$/;"	f	class:tair::storage::storage_manager
incdecr	src\storage\storage_manager.hpp	/^        virtual int incdecr(int bucket_number,data_entry & key,$/;"	f	class:tair::storage::storage_manager
is_migrate	src\storage\storage_manager.hpp	/^    int is_migrate;$/;"	m	struct:tair::_migrate_dump_index
lazyclear	src\storage\storage_manager.hpp	/^        virtual int lazyclear(int area, const char* password, const int pwd_len)$/;"	f	class:tair::storage::storage_manager
lindex	src\storage\storage_manager.hpp	/^        virtual int lindex(int bucket_number, data_entry &key, int32_t index, data_entry& value)$/;"	f	class:tair::storage::storage_manager
linsert	src\storage\storage_manager.hpp	/^        virtual int linsert(int bucket_number, data_entry &key, data_entry &value_in_list,$/;"	f	class:tair::storage::storage_manager
llen	src\storage\storage_manager.hpp	/^        virtual int llen(int bucket_number, data_entry &key, long long *len)$/;"	f	class:tair::storage::storage_manager
loadarea	src\storage\storage_manager.hpp	/^        virtual int loadarea(int area)$/;"	f	class:tair::storage::storage_manager
lrange	src\storage\storage_manager.hpp	/^        virtual int lrange(int bucket_number, data_entry &key, int start, int end,$/;"	f	class:tair::storage::storage_manager
lrem	src\storage\storage_manager.hpp	/^        virtual int lrem(int bucket_number, data_entry &key, int count,$/;"	f	class:tair::storage::storage_manager
lrpop	src\storage\storage_manager.hpp	/^        virtual int lrpop(int bucket_number, data_entry &key, int count,$/;"	f	class:tair::storage::storage_manager
lrpush	src\storage\storage_manager.hpp	/^        virtual int lrpush(int bucket_number, data_entry &key, const std::vector<data_entry *>& values,$/;"	f	class:tair::storage::storage_manager
lset	src\storage\storage_manager.hpp	/^        virtual int lset(int bucket_number, data_entry &key, int index,$/;"	f	class:tair::storage::storage_manager
ltrim	src\storage\storage_manager.hpp	/^        virtual int ltrim(int bucket_number, data_entry &key, int start, int end,$/;"	f	class:tair::storage::storage_manager
md_info	src\storage\storage_manager.hpp	/^} md_info;$/;"	t	namespace:tair	typeref:struct:tair::_migrate_dump_index
persist	src\storage\storage_manager.hpp	/^        virtual int persist(int bucket_number, data_entry & key)$/;"	f	class:tair::storage::storage_manager
putnx	src\storage\storage_manager.hpp	/^        virtual int putnx(int bucket_number, data_entry & key, data_entry & value,$/;"	f	class:tair::storage::storage_manager
removefilter	src\storage\storage_manager.hpp	/^        virtual int removefilter(int area, data_entry & key, data_entry & field,$/;"	f	class:tair::storage::storage_manager
sadd	src\storage\storage_manager.hpp	/^        virtual int sadd(int bucket_number, data_entry & key, data_entry & value,$/;"	f	class:tair::storage::storage_manager
scard	src\storage\storage_manager.hpp	/^        virtual int scard(int bucket_number, data_entry & key, long long* retnum)$/;"	f	class:tair::storage::storage_manager
set_bucket_count	src\storage\storage_manager.hpp	/^        void set_bucket_count(uint32_t bucket_count)$/;"	f	class:tair::storage::storage_manager
setnsattr	src\storage\storage_manager.hpp	/^        virtual int setnsattr(int area, const char* attr, const int attr_len,$/;"	f	class:tair::storage::storage_manager
smembers	src\storage\storage_manager.hpp	/^        virtual int smembers(int bucket_number, data_entry & key, std::vector<data_entry*> & values)$/;"	f	class:tair::storage::storage_manager
spop	src\storage\storage_manager.hpp	/^        virtual int spop(int bucket_number, data_entry & key, data_entry & valuei,$/;"	f	class:tair::storage::storage_manager
srem	src\storage\storage_manager.hpp	/^        virtual int srem(int bucket_number, data_entry & key, data_entry & value,$/;"	f	class:tair::storage::storage_manager
storage	src\storage\storage_manager.hpp	/^namespace storage$/;"	n	namespace:tair
storage_manager	src\storage\storage_manager.hpp	/^        storage_manager():bucket_count(0){}$/;"	f	class:tair::storage::storage_manager
storage_manager	src\storage\storage_manager.hpp	/^class storage_manager  {$/;"	c	namespace:tair::storage
tair	src\storage\storage_manager.hpp	/^namespace tair {$/;"	n
ttl	src\storage\storage_manager.hpp	/^        virtual int ttl(int bucket_number, data_entry & key, long long* time_remain)$/;"	f	class:tair::storage::storage_manager
type	src\storage\storage_manager.hpp	/^        virtual int type(int bucket_number, data_entry & key, long long* what_type)$/;"	f	class:tair::storage::storage_manager
zadd	src\storage\storage_manager.hpp	/^        virtual int zadd(int bucket_number, data_entry & key, double score, data_entry & value,$/;"	f	class:tair::storage::storage_manager
zcard	src\storage\storage_manager.hpp	/^        virtual int zcard(int bucket_number, data_entry & key, long long* retnum)$/;"	f	class:tair::storage::storage_manager
zcount	src\storage\storage_manager.hpp	/^	    virtual int zcount(int bucket_number, data_entry & key, double start, double end, long long* retnum)$/;"	f	class:tair::storage::storage_manager
zincrby	src\storage\storage_manager.hpp	/^        virtual int zincrby(int bucket_number, data_entry & key, data_entry & value,$/;"	f	class:tair::storage::storage_manager
zrange	src\storage\storage_manager.hpp	/^        virtual int zrange(int bucket_number, data_entry & key, int start, int end,$/;"	f	class:tair::storage::storage_manager
zrangebyscore	src\storage\storage_manager.hpp	/^        virtual int zrangebyscore(int bucket_number, data_entry & key, double start, double end,$/;"	f	class:tair::storage::storage_manager
zrank	src\storage\storage_manager.hpp	/^        virtual int zrank(int bucket_number, data_entry & key, data_entry & value, long long* rank)$/;"	f	class:tair::storage::storage_manager
zrem	src\storage\storage_manager.hpp	/^		virtual int zrem(int bucket_number, data_entry & key, data_entry & value,$/;"	f	class:tair::storage::storage_manager
zremrangebyrank	src\storage\storage_manager.hpp	/^		virtual int zremrangebyrank(int bucket_number, data_entry & key, int start,$/;"	f	class:tair::storage::storage_manager
zremrangebyscore	src\storage\storage_manager.hpp	/^		virtual int zremrangebyscore(int bucket_number, data_entry & key, double start,$/;"	f	class:tair::storage::storage_manager
zrevrange	src\storage\storage_manager.hpp	/^        virtual int zrevrange(int bucket_number, data_entry & key, int start, int end,$/;"	f	class:tair::storage::storage_manager
zrevrangebyscore	src\storage\storage_manager.hpp	/^        virtual int zrevrangebyscore(int bucket_number, data_entry & key, double start, double end,$/;"	f	class:tair::storage::storage_manager
zrevrank	src\storage\storage_manager.hpp	/^		virtual int zrevrank(int bucket_number, data_entry & key, data_entry & value, long long* rank)$/;"	f	class:tair::storage::storage_manager
zscore	src\storage\storage_manager.hpp	/^        virtual int zscore(int bucket_number, data_entry & key, data_entry & value, double* retstore)$/;"	f	class:tair::storage::storage_manager
~storage_manager	src\storage\storage_manager.hpp	/^        virtual ~ storage_manager(){}$/;"	f	class:tair::storage::storage_manager
TEST	test\binlog_test\binlog_test.cpp	/^TEST(test_simple_1, simple_binlog_test) {$/;"	f
AreaTestBaseCase	test\failover_test\src\test\java\com\taobao\function\areaTest\AreaTestBaseCase.java	/^public class AreaTestBaseCase extends BaseTestCase {$/;"	c
Get	test\failover_test\src\test\java\com\taobao\function\areaTest\AreaTestBaseCase.java	/^	final static String Get="Get";$/;"	f	class:AreaTestBaseCase
Put	test\failover_test\src\test\java\com\taobao\function\areaTest\AreaTestBaseCase.java	/^	final static String Put="Put";$/;"	f	class:AreaTestBaseCase
Rem	test\failover_test\src\test\java\com\taobao\function\areaTest\AreaTestBaseCase.java	/^	final static String Rem="Rem";$/;"	f	class:AreaTestBaseCase
batch_clean_data	test\failover_test\src\test\java\com\taobao\function\areaTest\AreaTestBaseCase.java	/^	public boolean batch_clean_data(List machines)$/;"	m	class:AreaTestBaseCase
batch_control_cs	test\failover_test\src\test\java\com\taobao\function\areaTest\AreaTestBaseCase.java	/^	public boolean batch_control_cs(List cs_group,String opID, int type)$/;"	m	class:AreaTestBaseCase
batch_control_ds	test\failover_test\src\test\java\com\taobao\function\areaTest\AreaTestBaseCase.java	/^	public boolean batch_control_ds(List ds_group,String opID, int type)$/;"	m	class:AreaTestBaseCase
changeAreaQuota	test\failover_test\src\test\java\com\taobao\function\areaTest\AreaTestBaseCase.java	/^	public boolean changeAreaQuota(String machine,int area,int value)$/;"	m	class:AreaTestBaseCase
changeHourRange	test\failover_test\src\test\java\com\taobao\function\areaTest\AreaTestBaseCase.java	/^	public boolean changeHourRange(String machine,String expired_slab,int startHour,int endHour)$/;"	m	class:AreaTestBaseCase
checkSlab	test\failover_test\src\test\java\com\taobao\function\areaTest\AreaTestBaseCase.java	/^	public int checkSlab(String machine,int slab_size)$/;"	m	class:AreaTestBaseCase
check_keyword	test\failover_test\src\test\java\com\taobao\function\areaTest\AreaTestBaseCase.java	/^	public int check_keyword(String machine,String keyword,String logfile)$/;"	m	class:AreaTestBaseCase
check_process	test\failover_test\src\test\java\com\taobao\function\areaTest\AreaTestBaseCase.java	/^	public int check_process(String machine,String prname)$/;"	m	class:AreaTestBaseCase
clean_data	test\failover_test\src\test\java\com\taobao\function\areaTest\AreaTestBaseCase.java	/^	public boolean clean_data(String machine)$/;"	m	class:AreaTestBaseCase
clean_tool	test\failover_test\src\test\java\com\taobao\function\areaTest\AreaTestBaseCase.java	/^	public boolean clean_tool(String machine)$/;"	m	class:AreaTestBaseCase
com.taobao.function.areaTest	test\failover_test\src\test\java\com\taobao\function\areaTest\AreaTestBaseCase.java	/^package com.taobao.function.areaTest;$/;"	p
control_cluster	test\failover_test\src\test\java\com\taobao\function\areaTest\AreaTestBaseCase.java	/^	public boolean control_cluster(List cs_group,List ds_group,String opID, int type)$/;"	m	class:AreaTestBaseCase
control_cs	test\failover_test\src\test\java\com\taobao\function\areaTest\AreaTestBaseCase.java	/^	public boolean control_cs(String machine,String opID, int type)$/;"	m	class:AreaTestBaseCase
control_ds	test\failover_test\src\test\java\com\taobao\function\areaTest\AreaTestBaseCase.java	/^	public boolean control_ds(String machine,String opID, int type)$/;"	m	class:AreaTestBaseCase
csList	test\failover_test\src\test\java\com\taobao\function\areaTest\AreaTestBaseCase.java	/^	final List csList=Arrays.asList(csarr);$/;"	f	class:AreaTestBaseCase
csarr	test\failover_test\src\test\java\com\taobao\function\areaTest\AreaTestBaseCase.java	/^	final String csarr[]=new String[]{"10.232.4.26","10.232.4.27"};$/;"	f	class:AreaTestBaseCase
down_time	test\failover_test\src\test\java\com\taobao\function\areaTest\AreaTestBaseCase.java	/^	final static int down_time=4;$/;"	f	class:AreaTestBaseCase
dsList	test\failover_test\src\test\java\com\taobao\function\areaTest\AreaTestBaseCase.java	/^	final List dsList=Arrays.asList(dsarr);$/;"	f	class:AreaTestBaseCase
dsarr	test\failover_test\src\test\java\com\taobao\function\areaTest\AreaTestBaseCase.java	/^	final String dsarr[]=new String[]{"10.232.4.26"};$/;"	f	class:AreaTestBaseCase
execute_data_verify_tool	test\failover_test\src\test\java\com\taobao\function\areaTest\AreaTestBaseCase.java	/^	public boolean execute_data_verify_tool()$/;"	m	class:AreaTestBaseCase
get	test\failover_test\src\test\java\com\taobao\function\areaTest\AreaTestBaseCase.java	/^	final static String get="get";$/;"	f	class:AreaTestBaseCase
getDate	test\failover_test\src\test\java\com\taobao\function\areaTest\AreaTestBaseCase.java	/^	public boolean getDate(int area,int startIndex,int endIndex)$/;"	m	class:AreaTestBaseCase
killall_tool_proc	test\failover_test\src\test\java\com\taobao\function\areaTest\AreaTestBaseCase.java	/^	public boolean killall_tool_proc()$/;"	m	class:AreaTestBaseCase
modify_config_file	test\failover_test\src\test\java\com\taobao\function\areaTest\AreaTestBaseCase.java	/^	public boolean modify_config_file(String machine,String confname,String key,String value)$/;"	m	class:AreaTestBaseCase
put	test\failover_test\src\test\java\com\taobao\function\areaTest\AreaTestBaseCase.java	/^	final static String put="put";$/;"	f	class:AreaTestBaseCase
putDate	test\failover_test\src\test\java\com\taobao\function\areaTest\AreaTestBaseCase.java	/^	public boolean putDate(int area,int startIndex,int endIndex,int datasize,int expire)$/;"	m	class:AreaTestBaseCase
rem	test\failover_test\src\test\java\com\taobao\function\areaTest\AreaTestBaseCase.java	/^	final static String rem="rem";$/;"	f	class:AreaTestBaseCase
remDate	test\failover_test\src\test\java\com\taobao\function\areaTest\AreaTestBaseCase.java	/^	public boolean remDate(int area,int startIndex,int endIndex)$/;"	m	class:AreaTestBaseCase
reset_cluster	test\failover_test\src\test\java\com\taobao\function\areaTest\AreaTestBaseCase.java	/^	public boolean reset_cluster(List csList,List dsList)$/;"	m	class:AreaTestBaseCase
start	test\failover_test\src\test\java\com\taobao\function\areaTest\AreaTestBaseCase.java	/^	final static String start="start";$/;"	f	class:AreaTestBaseCase
stop	test\failover_test\src\test\java\com\taobao\function\areaTest\AreaTestBaseCase.java	/^	final static String stop="stop";$/;"	f	class:AreaTestBaseCase
tair_bin	test\failover_test\src\test\java\com\taobao\function\areaTest\AreaTestBaseCase.java	/^	final static String tair_bin="\/home\/admin\/tair_bin\/";$/;"	f	class:AreaTestBaseCase
test_bin	test\failover_test\src\test\java\com\taobao\function\areaTest\AreaTestBaseCase.java	/^	final static String test_bin="\/home\/admin\/baoni\/function\/";$/;"	f	class:AreaTestBaseCase
touch_file	test\failover_test\src\test\java\com\taobao\function\areaTest\AreaTestBaseCase.java	/^	public int touch_file(String machine, String file) {$/;"	m	class:AreaTestBaseCase
verifySuccess	test\failover_test\src\test\java\com\taobao\function\areaTest\AreaTestBaseCase.java	/^	public boolean verifySuccess(int successNum,String PutOrGetOrRem){$/;"	m	class:AreaTestBaseCase
Area_00_x_size_Test	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_00_x_size_Test.java	/^public class Area_00_x_size_Test extends AreaTestBaseCase {$/;"	c
D1024KB	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_00_x_size_Test.java	/^	final static int D1024KB=960;$/;"	f	class:Area_00_x_size_Test
D1MB	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_00_x_size_Test.java	/^	final static int D1MB=1000000;$/;"	f	class:Area_00_x_size_Test
D512KB	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_00_x_size_Test.java	/^	final static int D512KB=448;$/;"	f	class:Area_00_x_size_Test
com.taobao.function.areaTest	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_00_x_size_Test.java	/^package com.taobao.function.areaTest;$/;"	p
setUp	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_00_x_size_Test.java	/^	public void setUp()$/;"	m	class:Area_00_x_size_Test
tearDown	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_00_x_size_Test.java	/^	public void tearDown()$/;"	m	class:Area_00_x_size_Test
test_01_quota_512KB_data_512B	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_00_x_size_Test.java	/^	public void test_01_quota_512KB_data_512B()$/;"	m	class:Area_00_x_size_Test
test_02_quota_512KB_data_1024B	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_00_x_size_Test.java	/^	public void test_02_quota_512KB_data_1024B()$/;"	m	class:Area_00_x_size_Test
test_03_quota_512KB_data_512B_and_data_1024	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_00_x_size_Test.java	/^	public void test_03_quota_512KB_data_512B_and_data_1024()$/;"	m	class:Area_00_x_size_Test
test_04_quota_256MB_data_1025B_full	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_00_x_size_Test.java	/^	public void test_04_quota_256MB_data_1025B_full()$/;"	m	class:Area_00_x_size_Test
test_05_quota_1MB_data_512B	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_00_x_size_Test.java	/^	public void test_05_quota_1MB_data_512B()$/;"	m	class:Area_00_x_size_Test
Area_01_x_areaEliminate_Test	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_01_x_areaEliminate_Test.java	/^public class Area_01_x_areaEliminate_Test extends AreaTestBaseCase {$/;"	c
D1024B	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_01_x_areaEliminate_Test.java	/^	final static int D1024B = 960;$/;"	f	class:Area_01_x_areaEliminate_Test
D1MB	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_01_x_areaEliminate_Test.java	/^	final static int D1MB = 1000000;$/;"	f	class:Area_01_x_areaEliminate_Test
D512B	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_01_x_areaEliminate_Test.java	/^	final static int D512B = 448;$/;"	f	class:Area_01_x_areaEliminate_Test
SIZE1024	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_01_x_areaEliminate_Test.java	/^	final static int SIZE1024 = 545;$/;"	f	class:Area_01_x_areaEliminate_Test
SIZE1M512	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_01_x_areaEliminate_Test.java	/^	final static int SIZE1M512=2331;$/;"	f	class:Area_01_x_areaEliminate_Test
SIZE512	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_01_x_areaEliminate_Test.java	/^	final static int SIZE512 = 1166;$/;"	f	class:Area_01_x_areaEliminate_Test
SIZECOMBINE	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_01_x_areaEliminate_Test.java	/^	final static int SIZECOMBINE = SIZECOMBINE1024 + SIZECOMBINE512;$/;"	f	class:Area_01_x_areaEliminate_Test
SIZECOMBINE1024	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_01_x_areaEliminate_Test.java	/^	final static int SIZECOMBINE1024 = 510;$/;"	f	class:Area_01_x_areaEliminate_Test
SIZECOMBINE512	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_01_x_areaEliminate_Test.java	/^	final static int SIZECOMBINE512 = 75;$/;"	f	class:Area_01_x_areaEliminate_Test
SIZEFULL	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_01_x_areaEliminate_Test.java	/^	final static int SIZEFULL = 262144;$/;"	f	class:Area_01_x_areaEliminate_Test
com.taobao.function.areaTest	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_01_x_areaEliminate_Test.java	/^package com.taobao.function.areaTest;$/;"	p
setUp	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_01_x_areaEliminate_Test.java	/^	public void setUp()$/;"	m	class:Area_01_x_areaEliminate_Test
tearDown	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_01_x_areaEliminate_Test.java	/^	public void tearDown()$/;"	m	class:Area_01_x_areaEliminate_Test
testAreaEliminate_01_area_full_expireDate_eliminated	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_01_x_areaEliminate_Test.java	/^	public void testAreaEliminate_01_area_full_expireDate_eliminated()$/;"	m	class:Area_01_x_areaEliminate_Test
testAreaEliminate_02_area_full_no_slab_system_isnotfull	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_01_x_areaEliminate_Test.java	/^	public void testAreaEliminate_02_area_full_no_slab_system_isnotfull()$/;"	m	class:Area_01_x_areaEliminate_Test
testAreaEliminate_03_area_full_no_slab_system_full	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_01_x_areaEliminate_Test.java	/^	public void testAreaEliminate_03_area_full_no_slab_system_full()$/;"	m	class:Area_01_x_areaEliminate_Test
testAreaEliminate_04_area_isnotfull_system_isnotfull	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_01_x_areaEliminate_Test.java	/^	public void testAreaEliminate_04_area_isnotfull_system_isnotfull()$/;"	m	class:Area_01_x_areaEliminate_Test
testAreaEliminate_05_area_isnotfull_has_slabdata_system_isfull	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_01_x_areaEliminate_Test.java	/^	public void testAreaEliminate_05_area_isnotfull_has_slabdata_system_isfull()$/;"	m	class:Area_01_x_areaEliminate_Test
testAreaEliminate_06_area_isnotfull_hasno_slabdata_system_isfull	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_01_x_areaEliminate_Test.java	/^	public void testAreaEliminate_06_area_isnotfull_hasno_slabdata_system_isfull()$/;"	m	class:Area_01_x_areaEliminate_Test
testAreaEliminate_07_area_bigger_than_quota_area_isfull_has_slabdate	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_01_x_areaEliminate_Test.java	/^	public void testAreaEliminate_07_area_bigger_than_quota_area_isfull_has_slabdate()$/;"	m	class:Area_01_x_areaEliminate_Test
testAreaEliminate_08_area_bigger_than_quota_area_isfull_has_no_slabdate	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_01_x_areaEliminate_Test.java	/^	public void testAreaEliminate_08_area_bigger_than_quota_area_isfull_has_no_slabdate()$/;"	m	class:Area_01_x_areaEliminate_Test
testAreaEliminate_09_area_bigger_than_quota_area_isnotfull_has_no_slabdate_system_nofull	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_01_x_areaEliminate_Test.java	/^	public void testAreaEliminate_09_area_bigger_than_quota_area_isnotfull_has_no_slabdate_system_nofull()$/;"	m	class:Area_01_x_areaEliminate_Test
testAreaEliminate_10_area_bigger_than_quota_area_isnotfull_has_no_slabdate_system_full	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_01_x_areaEliminate_Test.java	/^	public void testAreaEliminate_10_area_bigger_than_quota_area_isnotfull_has_no_slabdate_system_full()$/;"	m	class:Area_01_x_areaEliminate_Test
Area_02_x_slabBalance_Test	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_02_x_slabBalance_Test.java	/^public class Area_02_x_slabBalance_Test extends AreaTestBaseCase {$/;"	c
D1024B	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_02_x_slabBalance_Test.java	/^	final static int D1024B = 960;$/;"	f	class:Area_02_x_slabBalance_Test
D1MB	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_02_x_slabBalance_Test.java	/^	final static int D1MB = 1000000;$/;"	f	class:Area_02_x_slabBalance_Test
D512B	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_02_x_slabBalance_Test.java	/^	final static int D512B = 448;$/;"	f	class:Area_02_x_slabBalance_Test
SIZE1M512	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_02_x_slabBalance_Test.java	/^	final static int SIZE1M512 = 2331;$/;"	f	class:Area_02_x_slabBalance_Test
SLAB_1024_INDEX	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_02_x_slabBalance_Test.java	/^	final static int SLAB_1024_INDEX = 26;$/;"	f	class:Area_02_x_slabBalance_Test
SLAB_512_INDEX	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_02_x_slabBalance_Test.java	/^	final static int SLAB_512_INDEX = 19;$/;"	f	class:Area_02_x_slabBalance_Test
com.taobao.function.areaTest	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_02_x_slabBalance_Test.java	/^package com.taobao.function.areaTest;$/;"	p
setUp	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_02_x_slabBalance_Test.java	/^	public void setUp() {$/;"	m	class:Area_02_x_slabBalance_Test
tearDown	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_02_x_slabBalance_Test.java	/^	public void tearDown() {$/;"	m	class:Area_02_x_slabBalance_Test
testSlabBalance_01_slab_balance	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_02_x_slabBalance_Test.java	/^	public void testSlabBalance_01_slab_balance() {$/;"	m	class:Area_02_x_slabBalance_Test
Area_03_x_expireEliminate_Test	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_03_x_expireEliminate_Test.java	/^public class Area_03_x_expireEliminate_Test extends AreaTestBaseCase {$/;"	c
D1024B	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_03_x_expireEliminate_Test.java	/^	final static int D1024B = 960;$/;"	f	class:Area_03_x_expireEliminate_Test
D512B	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_03_x_expireEliminate_Test.java	/^	final static int D512B = 448;$/;"	f	class:Area_03_x_expireEliminate_Test
com.taobao.function.areaTest	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_03_x_expireEliminate_Test.java	/^package com.taobao.function.areaTest;$/;"	p
num	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_03_x_expireEliminate_Test.java	/^	final static int num = 40000;$/;"	f	class:Area_03_x_expireEliminate_Test
setUp	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_03_x_expireEliminate_Test.java	/^	public void setUp() {$/;"	m	class:Area_03_x_expireEliminate_Test
tearDown	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_03_x_expireEliminate_Test.java	/^	public void tearDown() {$/;"	m	class:Area_03_x_expireEliminate_Test
testExpireEliminate_01_expireDate_eliminated_ontime	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_03_x_expireEliminate_Test.java	/^	public void testExpireEliminate_01_expireDate_eliminated_ontime() {$/;"	m	class:Area_03_x_expireEliminate_Test
Area_04_x_areaQuotaChange_Test	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_04_x_areaQuotaChange_Test.java	/^public class Area_04_x_areaQuotaChange_Test extends AreaTestBaseCase {$/;"	c
D1024B	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_04_x_areaQuotaChange_Test.java	/^	final static int D1024B = 960;$/;"	f	class:Area_04_x_areaQuotaChange_Test
D1MB	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_04_x_areaQuotaChange_Test.java	/^	final static int D1MB = 1000000;$/;"	f	class:Area_04_x_areaQuotaChange_Test
D512B	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_04_x_areaQuotaChange_Test.java	/^	final static int D512B = 448;$/;"	f	class:Area_04_x_areaQuotaChange_Test
SIZE1M512	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_04_x_areaQuotaChange_Test.java	/^	final static int SIZE1M512 = 2331;$/;"	f	class:Area_04_x_areaQuotaChange_Test
com.taobao.function.areaTest	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_04_x_areaQuotaChange_Test.java	/^package com.taobao.function.areaTest;$/;"	p
setUp	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_04_x_areaQuotaChange_Test.java	/^	public void setUp() {$/;"	m	class:Area_04_x_areaQuotaChange_Test
tearDown	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_04_x_areaQuotaChange_Test.java	/^	public void tearDown() {$/;"	m	class:Area_04_x_areaQuotaChange_Test
testQuotaChanged_01_enlarge_quota	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_04_x_areaQuotaChange_Test.java	/^	public void testQuotaChanged_01_enlarge_quota() {$/;"	m	class:Area_04_x_areaQuotaChange_Test
testQuotaChanged_02_reduce_quota_less_then_datasize	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_04_x_areaQuotaChange_Test.java	/^	public void testQuotaChanged_02_reduce_quota_less_then_datasize() {$/;"	m	class:Area_04_x_areaQuotaChange_Test
testQuotaChanged_03_reduce_quota_equals_datasize	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_04_x_areaQuotaChange_Test.java	/^	public void testQuotaChanged_03_reduce_quota_equals_datasize() {$/;"	m	class:Area_04_x_areaQuotaChange_Test
testQuotaChanged_04_reduce_quota_bigger_than_onedatasize_less_than_twodatasize	test\failover_test\src\test\java\com\taobao\function\areaTest\Area_04_x_areaQuotaChange_Test.java	/^	public void testQuotaChanged_04_reduce_quota_bigger_than_onedatasize_less_than_twodatasize() {$/;"	m	class:Area_04_x_areaQuotaChange_Test
TestAll	test\failover_test\src\test\java\com\taobao\function\areaTest\TestAll.java	/^public class TestAll extends TestSuite {$/;"	c
com.taobao.function.areaTest	test\failover_test\src\test\java\com\taobao\function\areaTest\TestAll.java	/^package com.taobao.function.areaTest;$/;"	p
main	test\failover_test\src\test\java\com\taobao\function\areaTest\TestAll.java	/^	public static void main(String[] args) {$/;"	m	class:TestAll
suit	test\failover_test\src\test\java\com\taobao\function\areaTest\TestAll.java	/^	public static Test suit()$/;"	m	class:TestAll
DumpDataTestBaseCase	test\failover_test\src\test\java\com\taobao\function\dumpTest\DumpDataTestBaseCase.java	/^public class DumpDataTestBaseCase extends BaseTestCase {$/;"	c
Get	test\failover_test\src\test\java\com\taobao\function\dumpTest\DumpDataTestBaseCase.java	/^	final static String Get="Get";$/;"	f	class:DumpDataTestBaseCase
Put	test\failover_test\src\test\java\com\taobao\function\dumpTest\DumpDataTestBaseCase.java	/^	final static String Put="Put";$/;"	f	class:DumpDataTestBaseCase
Rem	test\failover_test\src\test\java\com\taobao\function\dumpTest\DumpDataTestBaseCase.java	/^	final static String Rem="Rem";$/;"	f	class:DumpDataTestBaseCase
areaDump	test\failover_test\src\test\java\com\taobao\function\dumpTest\DumpDataTestBaseCase.java	/^	public boolean areaDump()$/;"	m	class:DumpDataTestBaseCase
batch_clean_data	test\failover_test\src\test\java\com\taobao\function\dumpTest\DumpDataTestBaseCase.java	/^	public boolean batch_clean_data(List machines)$/;"	m	class:DumpDataTestBaseCase
batch_control_cs	test\failover_test\src\test\java\com\taobao\function\dumpTest\DumpDataTestBaseCase.java	/^	public boolean batch_control_cs(List cs_group,String opID, int type)$/;"	m	class:DumpDataTestBaseCase
batch_control_ds	test\failover_test\src\test\java\com\taobao\function\dumpTest\DumpDataTestBaseCase.java	/^	public boolean batch_control_ds(List ds_group,String opID, int type)$/;"	m	class:DumpDataTestBaseCase
clean_data	test\failover_test\src\test\java\com\taobao\function\dumpTest\DumpDataTestBaseCase.java	/^	public boolean clean_data(String machine)$/;"	m	class:DumpDataTestBaseCase
clean_tool	test\failover_test\src\test\java\com\taobao\function\dumpTest\DumpDataTestBaseCase.java	/^	public boolean clean_tool(String machine)$/;"	m	class:DumpDataTestBaseCase
com.taobao.function.dumpTest	test\failover_test\src\test\java\com\taobao\function\dumpTest\DumpDataTestBaseCase.java	/^package com.taobao.function.dumpTest;$/;"	p
control_cluster	test\failover_test\src\test\java\com\taobao\function\dumpTest\DumpDataTestBaseCase.java	/^	public boolean control_cluster(List cs_group,List ds_group,String opID, int type)$/;"	m	class:DumpDataTestBaseCase
control_cs	test\failover_test\src\test\java\com\taobao\function\dumpTest\DumpDataTestBaseCase.java	/^	public boolean control_cs(String machine,String opID, int type)$/;"	m	class:DumpDataTestBaseCase
control_ds	test\failover_test\src\test\java\com\taobao\function\dumpTest\DumpDataTestBaseCase.java	/^	public boolean control_ds(String machine,String opID, int type)$/;"	m	class:DumpDataTestBaseCase
csList	test\failover_test\src\test\java\com\taobao\function\dumpTest\DumpDataTestBaseCase.java	/^	final List csList=Arrays.asList(csarr);$/;"	f	class:DumpDataTestBaseCase
csarr	test\failover_test\src\test\java\com\taobao\function\dumpTest\DumpDataTestBaseCase.java	/^	final String csarr[]=new String[]{"10.232.4.26","10.232.4.27"};$/;"	f	class:DumpDataTestBaseCase
down_time	test\failover_test\src\test\java\com\taobao\function\dumpTest\DumpDataTestBaseCase.java	/^	final static int down_time=4;$/;"	f	class:DumpDataTestBaseCase
dsList	test\failover_test\src\test\java\com\taobao\function\dumpTest\DumpDataTestBaseCase.java	/^	final List dsList=Arrays.asList(dsarr);$/;"	f	class:DumpDataTestBaseCase
dsarr	test\failover_test\src\test\java\com\taobao\function\dumpTest\DumpDataTestBaseCase.java	/^	final String dsarr[]=new String[]{"10.232.4.26"};$/;"	f	class:DumpDataTestBaseCase
get	test\failover_test\src\test\java\com\taobao\function\dumpTest\DumpDataTestBaseCase.java	/^	final static String get="get";$/;"	f	class:DumpDataTestBaseCase
killall_tool_proc	test\failover_test\src\test\java\com\taobao\function\dumpTest\DumpDataTestBaseCase.java	/^	public boolean killall_tool_proc()$/;"	m	class:DumpDataTestBaseCase
put	test\failover_test\src\test\java\com\taobao\function\dumpTest\DumpDataTestBaseCase.java	/^	final static String put="put";$/;"	f	class:DumpDataTestBaseCase
putDate	test\failover_test\src\test\java\com\taobao\function\dumpTest\DumpDataTestBaseCase.java	/^	public boolean putDate(int area,int startIndex,int endIndex,int expire,int operation)$/;"	m	class:DumpDataTestBaseCase
rem	test\failover_test\src\test\java\com\taobao\function\dumpTest\DumpDataTestBaseCase.java	/^	final static String rem="rem";$/;"	f	class:DumpDataTestBaseCase
reset_cluster	test\failover_test\src\test\java\com\taobao\function\dumpTest\DumpDataTestBaseCase.java	/^	public boolean reset_cluster(List csList,List dsList)$/;"	m	class:DumpDataTestBaseCase
setDumpInfo	test\failover_test\src\test\java\com\taobao\function\dumpTest\DumpDataTestBaseCase.java	/^	public boolean setDumpInfo(int area,String startDate,String EndDate)$/;"	m	class:DumpDataTestBaseCase
start	test\failover_test\src\test\java\com\taobao\function\dumpTest\DumpDataTestBaseCase.java	/^	final static String start="start";$/;"	f	class:DumpDataTestBaseCase
stop	test\failover_test\src\test\java\com\taobao\function\dumpTest\DumpDataTestBaseCase.java	/^	final static String stop="stop";$/;"	f	class:DumpDataTestBaseCase
tair_bin	test\failover_test\src\test\java\com\taobao\function\dumpTest\DumpDataTestBaseCase.java	/^	final static String tair_bin="\/home\/admin\/tair_bin\/";$/;"	f	class:DumpDataTestBaseCase
test_bin	test\failover_test\src\test\java\com\taobao\function\dumpTest\DumpDataTestBaseCase.java	/^	final static String test_bin="\/home\/admin\/baoni\/function\/";$/;"	f	class:DumpDataTestBaseCase
verifyDate	test\failover_test\src\test\java\com\taobao\function\dumpTest\DumpDataTestBaseCase.java	/^	public boolean verifyDate(int area,int startIndex,int endIndex,String operation)$/;"	m	class:DumpDataTestBaseCase
verifySuccess	test\failover_test\src\test\java\com\taobao\function\dumpTest\DumpDataTestBaseCase.java	/^	public boolean verifySuccess(int successNum){$/;"	m	class:DumpDataTestBaseCase
verifySuccessNum	test\failover_test\src\test\java\com\taobao\function\dumpTest\DumpDataTestBaseCase.java	/^	public boolean verifySuccessNum(int area,int num)$/;"	m	class:DumpDataTestBaseCase
BaseTestCase	test\failover_test\src\test\java\com\taobao\tairtest\BaseTestCase.java	/^	public BaseTestCase()$/;"	m	class:BaseTestCase
BaseTestCase	test\failover_test\src\test\java\com\taobao\tairtest\BaseTestCase.java	/^	public BaseTestCase(String arg0)$/;"	m	class:BaseTestCase
BaseTestCase	test\failover_test\src\test\java\com\taobao\tairtest\BaseTestCase.java	/^public class BaseTestCase extends TestCase {$/;"	c
com.taobao.tairtest	test\failover_test\src\test\java\com\taobao\tairtest\BaseTestCase.java	/^package com.taobao.tairtest;$/;"	p
executeShell	test\failover_test\src\test\java\com\taobao\tairtest\BaseTestCase.java	/^	public STAFResult executeShell(STAFHandle stafHandle,String machine ,String cmd )$/;"	m	class:BaseTestCase
getShellOutput	test\failover_test\src\test\java\com\taobao\tairtest\BaseTestCase.java	/^	public String getShellOutput(STAFResult result)$/;"	m	class:BaseTestCase
gethandle	test\failover_test\src\test\java\com\taobao\tairtest\BaseTestCase.java	/^	private void gethandle()$/;"	m	class:BaseTestCase	file:
log	test\failover_test\src\test\java\com\taobao\tairtest\BaseTestCase.java	/^	protected static Logger log=Logger.getLogger("Test");$/;"	f	class:BaseTestCase
stafhandle	test\failover_test\src\test\java\com\taobao\tairtest\BaseTestCase.java	/^	protected STAFHandle stafhandle=null;$/;"	f	class:BaseTestCase
waitto	test\failover_test\src\test\java\com\taobao\tairtest\BaseTestCase.java	/^	public void waitto(int sec)$/;"	m	class:BaseTestCase
FailOverBaseCase	test\failover_test\src\test\java\com\taobao\tairtest\FailOverBaseCase.java	/^public class FailOverBaseCase extends BaseTestCase {$/;"	c
batch_clean_data	test\failover_test\src\test\java\com\taobao\tairtest\FailOverBaseCase.java	/^	public boolean batch_clean_data(List machines) {$/;"	m	class:FailOverBaseCase
batch_control_cs	test\failover_test\src\test\java\com\taobao\tairtest\FailOverBaseCase.java	/^	public boolean batch_control_cs(List cs_group, String opID, int type) {$/;"	m	class:FailOverBaseCase
batch_control_ds	test\failover_test\src\test\java\com\taobao\tairtest\FailOverBaseCase.java	/^	public boolean batch_control_ds(List ds_group, String opID, int type) {$/;"	m	class:FailOverBaseCase
batch_uncomment	test\failover_test\src\test\java\com\taobao\tairtest\FailOverBaseCase.java	/^	public boolean batch_uncomment(List machines, String confname, List keywords, String comment) {$/;"	m	class:FailOverBaseCase
check_keyword	test\failover_test\src\test\java\com\taobao\tairtest\FailOverBaseCase.java	/^	public int check_keyword(String machine, String keyword, String logfile) {$/;"	m	class:FailOverBaseCase
check_process	test\failover_test\src\test\java\com\taobao\tairtest\FailOverBaseCase.java	/^	public int check_process(String machine, String prname) {$/;"	m	class:FailOverBaseCase
clean_data	test\failover_test\src\test\java\com\taobao\tairtest\FailOverBaseCase.java	/^	public boolean clean_data(String machine) {$/;"	m	class:FailOverBaseCase
clean_tool	test\failover_test\src\test\java\com\taobao\tairtest\FailOverBaseCase.java	/^	public boolean clean_tool(String machine) {$/;"	m	class:FailOverBaseCase
com.taobao.tairtest	test\failover_test\src\test\java\com\taobao\tairtest\FailOverBaseCase.java	/^package com.taobao.tairtest;$/;"	p
comment_line	test\failover_test\src\test\java\com\taobao\tairtest\FailOverBaseCase.java	/^	public boolean comment_line(String machine, String file, String keyword, String comment) {$/;"	m	class:FailOverBaseCase
control_cluster	test\failover_test\src\test\java\com\taobao\tairtest\FailOverBaseCase.java	/^	public boolean control_cluster(List cs_group, List ds_group, String opID, int type) {$/;"	m	class:FailOverBaseCase
control_cs	test\failover_test\src\test\java\com\taobao\tairtest\FailOverBaseCase.java	/^	public boolean control_cs(String machine, String opID, int type) {$/;"	m	class:FailOverBaseCase
control_ds	test\failover_test\src\test\java\com\taobao\tairtest\FailOverBaseCase.java	/^	public boolean control_ds(String machine, String opID, int type) {$/;"	m	class:FailOverBaseCase
csList	test\failover_test\src\test\java\com\taobao\tairtest\FailOverBaseCase.java	/^	final List csList = Arrays.asList(csarr);$/;"	f	class:FailOverBaseCase
csarr	test\failover_test\src\test\java\com\taobao\tairtest\FailOverBaseCase.java	/^	final String csarr[] = new String[] { "10.232.4.20", "10.232.4.21" };$/;"	f	class:FailOverBaseCase
down_time	test\failover_test\src\test\java\com\taobao\tairtest\FailOverBaseCase.java	/^	final static int down_time = 120;$/;"	f	class:FailOverBaseCase
dsList	test\failover_test\src\test\java\com\taobao\tairtest\FailOverBaseCase.java	/^	final List dsList = Arrays.asList(dsarr);$/;"	f	class:FailOverBaseCase
dsarr	test\failover_test\src\test\java\com\taobao\tairtest\FailOverBaseCase.java	/^	final String dsarr[] = new String[] { "10.232.4.20", "10.232.4.21", "10.232.4.22", "10.232.4.23", "10.232.4.24" };$/;"	f	class:FailOverBaseCase
execute_data_verify_tool	test\failover_test\src\test\java\com\taobao\tairtest\FailOverBaseCase.java	/^	public boolean execute_data_verify_tool() {$/;"	m	class:FailOverBaseCase
execute_stress_tool	test\failover_test\src\test\java\com\taobao\tairtest\FailOverBaseCase.java	/^	public boolean execute_stress_tool(int cnt) {$/;"	m	class:FailOverBaseCase
finish_migrate	test\failover_test\src\test\java\com\taobao\tairtest\FailOverBaseCase.java	/^	final static String finish_migrate = "migrate all done";$/;"	f	class:FailOverBaseCase
finish_rebuild	test\failover_test\src\test\java\com\taobao\tairtest\FailOverBaseCase.java	/^	final static String finish_rebuild = "version changed";$/;"	f	class:FailOverBaseCase
get	test\failover_test\src\test\java\com\taobao\tairtest\FailOverBaseCase.java	/^	final static String get = "get";$/;"	f	class:FailOverBaseCase
getDSFailNum	test\failover_test\src\test\java\com\taobao\tairtest\FailOverBaseCase.java	/^	protected int getDSFailNum(String dsName) {$/;"	m	class:FailOverBaseCase
getVerifySuccessful	test\failover_test\src\test\java\com\taobao\tairtest\FailOverBaseCase.java	/^	protected int getVerifySuccessful() {$/;"	m	class:FailOverBaseCase
killall_tool_proc	test\failover_test\src\test\java\com\taobao\tairtest\FailOverBaseCase.java	/^	public boolean killall_tool_proc() {$/;"	m	class:FailOverBaseCase
modify_config_file	test\failover_test\src\test\java\com\taobao\tairtest\FailOverBaseCase.java	/^	public boolean modify_config_file(String machine, String confname, String key, String value) {$/;"	m	class:FailOverBaseCase
put	test\failover_test\src\test\java\com\taobao\tairtest\FailOverBaseCase.java	/^	final static String put = "put";$/;"	f	class:FailOverBaseCase
rem	test\failover_test\src\test\java\com\taobao\tairtest\FailOverBaseCase.java	/^	final static String rem = "rem";$/;"	f	class:FailOverBaseCase
reset_cluster	test\failover_test\src\test\java\com\taobao\tairtest\FailOverBaseCase.java	/^	public boolean reset_cluster(List csList, List dsList) {$/;"	m	class:FailOverBaseCase
start	test\failover_test\src\test\java\com\taobao\tairtest\FailOverBaseCase.java	/^	final static String start = "start";$/;"	f	class:FailOverBaseCase
start_migrate	test\failover_test\src\test\java\com\taobao\tairtest\FailOverBaseCase.java	/^	final static String start_migrate = "need migrate,";$/;"	f	class:FailOverBaseCase
stop	test\failover_test\src\test\java\com\taobao\tairtest\FailOverBaseCase.java	/^	final static String stop = "stop";$/;"	f	class:FailOverBaseCase
tair_bin	test\failover_test\src\test\java\com\taobao\tairtest\FailOverBaseCase.java	/^	final static String tair_bin = "\/home\/admin\/tair_bin\/";$/;"	f	class:FailOverBaseCase
test_bin	test\failover_test\src\test\java\com\taobao\tairtest\FailOverBaseCase.java	/^	final static String test_bin = "\/home\/admin\/baoni\/recovery\/";$/;"	f	class:FailOverBaseCase
touch_file	test\failover_test\src\test\java\com\taobao\tairtest\FailOverBaseCase.java	/^	public int touch_file(String machine, String file) {$/;"	m	class:FailOverBaseCase
uncomment_line	test\failover_test\src\test\java\com\taobao\tairtest\FailOverBaseCase.java	/^	public boolean uncomment_line(String machine, String file, String keyword, String comment) {$/;"	m	class:FailOverBaseCase
FailOverConfigServerTest	test\failover_test\src\test\java\com\taobao\tairtest\FailOverConfigServerTest.java	/^public class FailOverConfigServerTest extends FailOverBaseCase {$/;"	c
com.taobao.tairtest	test\failover_test\src\test\java\com\taobao\tairtest\FailOverConfigServerTest.java	/^package com.taobao.tairtest;$/;"	p
setUp	test\failover_test\src\test\java\com\taobao\tairtest\FailOverConfigServerTest.java	/^	public void setUp()$/;"	m	class:FailOverConfigServerTest
tearDown	test\failover_test\src\test\java\com\taobao\tairtest\FailOverConfigServerTest.java	/^	public void tearDown()$/;"	m	class:FailOverConfigServerTest
testFailover_01_restart_master_cs	test\failover_test\src\test\java\com\taobao\tairtest\FailOverConfigServerTest.java	/^	public void testFailover_01_restart_master_cs()$/;"	m	class:FailOverConfigServerTest
testFailover_02_restart_slave_cs	test\failover_test\src\test\java\com\taobao\tairtest\FailOverConfigServerTest.java	/^	public void testFailover_02_restart_slave_cs()$/;"	m	class:FailOverConfigServerTest
testFailover_03_restart_all_cs	test\failover_test\src\test\java\com\taobao\tairtest\FailOverConfigServerTest.java	/^	public void testFailover_03_restart_all_cs()$/;"	m	class:FailOverConfigServerTest
testFailover_04_recover_master_cs_and_ds_before_rebuild	test\failover_test\src\test\java\com\taobao\tairtest\FailOverConfigServerTest.java	/^	public void testFailover_04_recover_master_cs_and_ds_before_rebuild()$/;"	m	class:FailOverConfigServerTest
testFailover_05_recover_master_cs_when_ds_down_and_rebuild	test\failover_test\src\test\java\com\taobao\tairtest\FailOverConfigServerTest.java	/^	public void testFailover_05_recover_master_cs_when_ds_down_and_rebuild()$/;"	m	class:FailOverConfigServerTest
testFailover_06_recover_master_cs_after_ds_down_and_rebuild	test\failover_test\src\test\java\com\taobao\tairtest\FailOverConfigServerTest.java	/^	public void testFailover_06_recover_master_cs_after_ds_down_and_rebuild()$/;"	m	class:FailOverConfigServerTest
testFailover_07_recover_master_cs_when_ds_down_and_rebuild_then_ds_join_again_generate_second_rebuild	test\failover_test\src\test\java\com\taobao\tairtest\FailOverConfigServerTest.java	/^	public void testFailover_07_recover_master_cs_when_ds_down_and_rebuild_then_ds_join_again_generate_second_rebuild()$/;"	m	class:FailOverConfigServerTest
testFailover_08_recover_master_cs_after_ds_down_and_rebuild_then_ds_join_again_generate_second_rebuild	test\failover_test\src\test\java\com\taobao\tairtest\FailOverConfigServerTest.java	/^	public void testFailover_08_recover_master_cs_after_ds_down_and_rebuild_then_ds_join_again_generate_second_rebuild()$/;"	m	class:FailOverConfigServerTest
testFailover_09_shutdown_master_cs_and_slave_cs_one_by_one_then_recover_one_by_one	test\failover_test\src\test\java\com\taobao\tairtest\FailOverConfigServerTest.java	/^	public void testFailover_09_shutdown_master_cs_and_slave_cs_one_by_one_then_recover_one_by_one()$/;"	m	class:FailOverConfigServerTest
testFailover_10_recover_slave_cs_and_ds_before_rebuild	test\failover_test\src\test\java\com\taobao\tairtest\FailOverConfigServerTest.java	/^	public void testFailover_10_recover_slave_cs_and_ds_before_rebuild()$/;"	m	class:FailOverConfigServerTest
testFailover_11_recover_slave_cs_when_ds_down_and_rebuild	test\failover_test\src\test\java\com\taobao\tairtest\FailOverConfigServerTest.java	/^	public void testFailover_11_recover_slave_cs_when_ds_down_and_rebuild()$/;"	m	class:FailOverConfigServerTest
testFailover_12_recover_slave_cs_after_ds_down_and_rebuild	test\failover_test\src\test\java\com\taobao\tairtest\FailOverConfigServerTest.java	/^	public void testFailover_12_recover_slave_cs_after_ds_down_and_rebuild()$/;"	m	class:FailOverConfigServerTest
testFailover_13_recover_slave_cs_when_ds_down_and_rebuild_then_ds_join_again_generate_second_rebuild	test\failover_test\src\test\java\com\taobao\tairtest\FailOverConfigServerTest.java	/^	public void testFailover_13_recover_slave_cs_when_ds_down_and_rebuild_then_ds_join_again_generate_second_rebuild()$/;"	m	class:FailOverConfigServerTest
testFailover_14_recover_slave_cs_after_ds_down_and_rebuild_then_ds_join_again_generate_second_rebuild	test\failover_test\src\test\java\com\taobao\tairtest\FailOverConfigServerTest.java	/^	public void testFailover_14_recover_slave_cs_after_ds_down_and_rebuild_then_ds_join_again_generate_second_rebuild()$/;"	m	class:FailOverConfigServerTest
testFailover_15_shutdown_master_cs_ds_and_slave_cs_one_by_one_then_recover_one_by_one	test\failover_test\src\test\java\com\taobao\tairtest\FailOverConfigServerTest.java	/^	public void testFailover_15_shutdown_master_cs_ds_and_slave_cs_one_by_one_then_recover_one_by_one()$/;"	m	class:FailOverConfigServerTest
testFailover_16_close_master_cs_restart_it_when_add_a_ds_and_begin_migration	test\failover_test\src\test\java\com\taobao\tairtest\FailOverConfigServerTest.java	/^	public void testFailover_16_close_master_cs_restart_it_when_add_a_ds_and_begin_migration()$/;"	m	class:FailOverConfigServerTest
testFailover_17_close_master_cs_restart_it_after_add_a_ds_and_migration	test\failover_test\src\test\java\com\taobao\tairtest\FailOverConfigServerTest.java	/^	public void testFailover_17_close_master_cs_restart_it_after_add_a_ds_and_migration()$/;"	m	class:FailOverConfigServerTest
testFailover_18_close_slave_cs_restart_it_when_add_a_ds_and_begin_migration	test\failover_test\src\test\java\com\taobao\tairtest\FailOverConfigServerTest.java	/^	public void testFailover_18_close_slave_cs_restart_it_when_add_a_ds_and_begin_migration()$/;"	m	class:FailOverConfigServerTest
testFailover_19_close_slave_cs_restart_it_after_add_a_ds_and_migration	test\failover_test\src\test\java\com\taobao\tairtest\FailOverConfigServerTest.java	/^	public void testFailover_19_close_slave_cs_restart_it_after_add_a_ds_and_migration()$/;"	m	class:FailOverConfigServerTest
testFailover_20_migrate_before_add_new_ds	test\failover_test\src\test\java\com\taobao\tairtest\FailOverConfigServerTest.java	/^	public void testFailover_20_migrate_before_add_new_ds()$/;"	m	class:FailOverConfigServerTest
FailOverConfigServerTest1	test\failover_test\src\test\java\com\taobao\tairtest\FailOverConfigServerTest1.java	/^public class FailOverConfigServerTest1 extends FailOverBaseCase {$/;"	c
com.taobao.tairtest	test\failover_test\src\test\java\com\taobao\tairtest\FailOverConfigServerTest1.java	/^package com.taobao.tairtest;$/;"	p
setUp	test\failover_test\src\test\java\com\taobao\tairtest\FailOverConfigServerTest1.java	/^	public void setUp()$/;"	m	class:FailOverConfigServerTest1
tearDown	test\failover_test\src\test\java\com\taobao\tairtest\FailOverConfigServerTest1.java	/^	public void tearDown()$/;"	m	class:FailOverConfigServerTest1
testFailover_01_restart_master_cs	test\failover_test\src\test\java\com\taobao\tairtest\FailOverConfigServerTest1.java	/^	public void testFailover_01_restart_master_cs()$/;"	m	class:FailOverConfigServerTest1
testFailover_02_restart_slave_cs	test\failover_test\src\test\java\com\taobao\tairtest\FailOverConfigServerTest1.java	/^	public void testFailover_02_restart_slave_cs()$/;"	m	class:FailOverConfigServerTest1
testFailover_03_restart_all_cs	test\failover_test\src\test\java\com\taobao\tairtest\FailOverConfigServerTest1.java	/^	public void testFailover_03_restart_all_cs()$/;"	m	class:FailOverConfigServerTest1
testFailover_04_add_ds_and_recover_master_cs_before_rebuild	test\failover_test\src\test\java\com\taobao\tairtest\FailOverConfigServerTest1.java	/^	public void testFailover_04_add_ds_and_recover_master_cs_before_rebuild()$/;"	m	class:FailOverConfigServerTest1
testFailover_05_add_ds_and_recover_master_cs_when_rebuild	test\failover_test\src\test\java\com\taobao\tairtest\FailOverConfigServerTest1.java	/^	public void testFailover_05_add_ds_and_recover_master_cs_when_rebuild()$/;"	m	class:FailOverConfigServerTest1
testFailover_06_add_ds_and_recover_master_cs_afterrebuild	test\failover_test\src\test\java\com\taobao\tairtest\FailOverConfigServerTest1.java	/^	public void testFailover_06_add_ds_and_recover_master_cs_afterrebuild()$/;"	m	class:FailOverConfigServerTest1
testFailover_07_recover_master_cs_when_ds_down_and_rebuild_then_ds_join_again_generate_second_rebuild	test\failover_test\src\test\java\com\taobao\tairtest\FailOverConfigServerTest1.java	/^	public void testFailover_07_recover_master_cs_when_ds_down_and_rebuild_then_ds_join_again_generate_second_rebuild()$/;"	m	class:FailOverConfigServerTest1
testFailover_08_recover_master_cs_after_ds_down_and_rebuild_then_ds_join_again_generate_second_rebuild	test\failover_test\src\test\java\com\taobao\tairtest\FailOverConfigServerTest1.java	/^	public void testFailover_08_recover_master_cs_after_ds_down_and_rebuild_then_ds_join_again_generate_second_rebuild()$/;"	m	class:FailOverConfigServerTest1
testFailover_09_recover_master_cs_after_add_ds_and_rebuild_then_ds_close_again_generate_second_rebuild_rebuid	test\failover_test\src\test\java\com\taobao\tairtest\FailOverConfigServerTest1.java	/^	public void testFailover_09_recover_master_cs_after_add_ds_and_rebuild_then_ds_close_again_generate_second_rebuild_rebuid()$/;"	m	class:FailOverConfigServerTest1
testFailover_10_recover_master_cs_after_add_ds_and_rebuild_then_ds_close_again_generate_second_rebuild_after_rebuild	test\failover_test\src\test\java\com\taobao\tairtest\FailOverConfigServerTest1.java	/^	public void testFailover_10_recover_master_cs_after_add_ds_and_rebuild_then_ds_close_again_generate_second_rebuild_after_rebuild()$/;"	m	class:FailOverConfigServerTest1
testFailover_11_recover_slave_cs_and_add_ds_before_rebuild	test\failover_test\src\test\java\com\taobao\tairtest\FailOverConfigServerTest1.java	/^	public void testFailover_11_recover_slave_cs_and_add_ds_before_rebuild()$/;"	m	class:FailOverConfigServerTest1
testFailover_12_recover_slave_cs_when_add_ds_and_rebuild	test\failover_test\src\test\java\com\taobao\tairtest\FailOverConfigServerTest1.java	/^	public void testFailover_12_recover_slave_cs_when_add_ds_and_rebuild()$/;"	m	class:FailOverConfigServerTest1
testFailover_13_recover_slave_cs_after_add_ds_and_rebuild	test\failover_test\src\test\java\com\taobao\tairtest\FailOverConfigServerTest1.java	/^	public void testFailover_13_recover_slave_cs_after_add_ds_and_rebuild()$/;"	m	class:FailOverConfigServerTest1
testFailover_14_recover_slave_cs_when_ds_down_and_rebuild_then_ds_join_again_generate_second_rebuild	test\failover_test\src\test\java\com\taobao\tairtest\FailOverConfigServerTest1.java	/^	public void testFailover_14_recover_slave_cs_when_ds_down_and_rebuild_then_ds_join_again_generate_second_rebuild()$/;"	m	class:FailOverConfigServerTest1
testFailover_15_recover_slave_cs_after_ds_down_and_rebuild_then_ds_join_again_generate_second_rebuild	test\failover_test\src\test\java\com\taobao\tairtest\FailOverConfigServerTest1.java	/^	public void testFailover_15_recover_slave_cs_after_ds_down_and_rebuild_then_ds_join_again_generate_second_rebuild()$/;"	m	class:FailOverConfigServerTest1
testFailover_16_recover_slave_cs_after_add_ds_and_rebuild_then_ds_close_again_generate_second_rebuild_after_rebuild	test\failover_test\src\test\java\com\taobao\tairtest\FailOverConfigServerTest1.java	/^	public void testFailover_16_recover_slave_cs_after_add_ds_and_rebuild_then_ds_close_again_generate_second_rebuild_after_rebuild()$/;"	m	class:FailOverConfigServerTest1
testFailover_17_add_ds_shutdown_master_cs_ds_and_slave_cs_one_by_one_then_recover_one_by_one	test\failover_test\src\test\java\com\taobao\tairtest\FailOverConfigServerTest1.java	/^	public void testFailover_17_add_ds_shutdown_master_cs_ds_and_slave_cs_one_by_one_then_recover_one_by_one()$/;"	m	class:FailOverConfigServerTest1
testFailover_18_close_ds_close_master_cs_restart_it_after_add_a_ds_and_migration	test\failover_test\src\test\java\com\taobao\tairtest\FailOverConfigServerTest1.java	/^	public void testFailover_18_close_ds_close_master_cs_restart_it_after_add_a_ds_and_migration()$/;"	m	class:FailOverConfigServerTest1
testFailover_19_close_master_cs_restart_it_when_close_ds_and_begin_migration	test\failover_test\src\test\java\com\taobao\tairtest\FailOverConfigServerTest1.java	/^	public void testFailover_19_close_master_cs_restart_it_when_close_ds_and_begin_migration()$/;"	m	class:FailOverConfigServerTest1
testFailover_20_close_slave_cs_restart_it_after_close_ds_and_migration	test\failover_test\src\test\java\com\taobao\tairtest\FailOverConfigServerTest1.java	/^	public void testFailover_20_close_slave_cs_restart_it_after_close_ds_and_migration()$/;"	m	class:FailOverConfigServerTest1
testFailover_21_shutdown_master_cs_and_slave_cs_one_by_one_then_recover_one_by_one	test\failover_test\src\test\java\com\taobao\tairtest\FailOverConfigServerTest1.java	/^	public void testFailover_21_shutdown_master_cs_and_slave_cs_one_by_one_then_recover_one_by_one()$/;"	m	class:FailOverConfigServerTest1
FailOverDataServerTest	test\failover_test\src\test\java\com\taobao\tairtest\FailOverDataServerTest.java	/^public class FailOverDataServerTest extends FailOverBaseCase{$/;"	c
com.taobao.tairtest	test\failover_test\src\test\java\com\taobao\tairtest\FailOverDataServerTest.java	/^package com.taobao.tairtest;$/;"	p
setUp	test\failover_test\src\test\java\com\taobao\tairtest\FailOverDataServerTest.java	/^    public void setUp()$/;"	m	class:FailOverDataServerTest
tearDown	test\failover_test\src\test\java\com\taobao\tairtest\FailOverDataServerTest.java	/^	public void tearDown()$/;"	m	class:FailOverDataServerTest
testFailover_02_kill_out_time	test\failover_test\src\test\java\com\taobao\tairtest\FailOverDataServerTest.java	/^    public void testFailover_02_kill_out_time()$/;"	m	class:FailOverDataServerTest
testFailover_03_restart_in_migrate	test\failover_test\src\test\java\com\taobao\tairtest\FailOverDataServerTest.java	/^    public void testFailover_03_restart_in_migrate()$/;"	m	class:FailOverDataServerTest
testFailover_04_restart_after_migrate	test\failover_test\src\test\java\com\taobao\tairtest\FailOverDataServerTest.java	/^    public void testFailover_04_restart_after_migrate()$/;"	m	class:FailOverDataServerTest
testFailover_05_kill_more_servers	test\failover_test\src\test\java\com\taobao\tairtest\FailOverDataServerTest.java	/^    public void testFailover_05_kill_more_servers()$/;"	m	class:FailOverDataServerTest
testFailover_06_kill_one_inMigrate_outtime	test\failover_test\src\test\java\com\taobao\tairtest\FailOverDataServerTest.java	/^    public void testFailover_06_kill_one_inMigrate_outtime()$/;"	m	class:FailOverDataServerTest
testFailover_07_kill_one_inMigrate_inTime	test\failover_test\src\test\java\com\taobao\tairtest\FailOverDataServerTest.java	/^    public void testFailover_07_kill_one_inMigrate_inTime()$/;"	m	class:FailOverDataServerTest
testFailover_08_kill_one_inMigrate_restartFirst	test\failover_test\src\test\java\com\taobao\tairtest\FailOverDataServerTest.java	/^    public void testFailover_08_kill_one_inMigrate_restartFirst()$/;"	m	class:FailOverDataServerTest
testFailover_09_kill_one_inMigrate_restartBoth	test\failover_test\src\test\java\com\taobao\tairtest\FailOverDataServerTest.java	/^    public void testFailover_09_kill_one_inMigrate_restartBoth()$/;"	m	class:FailOverDataServerTest
testFailover_10_kill_one_afterMigrate_restartFirst	test\failover_test\src\test\java\com\taobao\tairtest\FailOverDataServerTest.java	/^    public void testFailover_10_kill_one_afterMigrate_restartFirst()$/;"	m	class:FailOverDataServerTest
testFailover_11_kill_one_afterMigrate_restartSecond	test\failover_test\src\test\java\com\taobao\tairtest\FailOverDataServerTest.java	/^    public void testFailover_11_kill_one_afterMigrate_restartSecond()$/;"	m	class:FailOverDataServerTest
testFailover_12_kill_one_afterMigrate_restartBoth	test\failover_test\src\test\java\com\taobao\tairtest\FailOverDataServerTest.java	/^    public void testFailover_12_kill_one_afterMigrate_restartBoth()$/;"	m	class:FailOverDataServerTest
testFailover_13_kill_one_finishMigrate_restartSecond	test\failover_test\src\test\java\com\taobao\tairtest\FailOverDataServerTest.java	/^    public void testFailover_13_kill_one_finishMigrate_restartSecond()$/;"	m	class:FailOverDataServerTest
testFailover_14_kill_one_finishMigrate_restartBoth	test\failover_test\src\test\java\com\taobao\tairtest\FailOverDataServerTest.java	/^    public void testFailover_14_kill_one_finishMigrate_restartBoth()$/;"	m	class:FailOverDataServerTest
testFailover_15_kill_twoDataServers_afterMigrate_restart	test\failover_test\src\test\java\com\taobao\tairtest\FailOverDataServerTest.java	/^    public void testFailover_15_kill_twoDataServers_afterMigrate_restart()$/;"	m	class:FailOverDataServerTest
testFailover_16_kill_twoDataServers_finishMigrate_restart	test\failover_test\src\test\java\com\taobao\tairtest\FailOverDataServerTest.java	/^    public void testFailover_16_kill_twoDataServers_finishMigrate_restart()$/;"	m	class:FailOverDataServerTest
testFailover_18_kill_allDataServrs_restart_outTime	test\failover_test\src\test\java\com\taobao\tairtest\FailOverDataServerTest.java	/^    public void testFailover_18_kill_allDataServrs_restart_outTime()$/;"	m	class:FailOverDataServerTest
testFailover_21_kill_one_afterMigate	test\failover_test\src\test\java\com\taobao\tairtest\FailOverDataServerTest.java	/^    public void testFailover_21_kill_one_afterMigate()$/;"	m	class:FailOverDataServerTest
testFailover_23_kill_one_finishMigrate_restartFirst	test\failover_test\src\test\java\com\taobao\tairtest\FailOverDataServerTest.java	/^    public void testFailover_23_kill_one_finishMigrate_restartFirst()$/;"	m	class:FailOverDataServerTest
testFailover_24_add_ds_finishMigrate_add_ds_finishMigrate_and_kill_one_finishMigrate_kill_one_finishMigration	test\failover_test\src\test\java\com\taobao\tairtest\FailOverDataServerTest.java	/^    public void testFailover_24_add_ds_finishMigrate_add_ds_finishMigrate_and_kill_one_finishMigrate_kill_one_finishMigration()$/;"	m	class:FailOverDataServerTest
FailOverDataServerTest1	test\failover_test\src\test\java\com\taobao\tairtest\FailOverDataServerTest1.java	/^public class FailOverDataServerTest1 extends FailOverBaseCase{$/;"	c
com.taobao.tairtest	test\failover_test\src\test\java\com\taobao\tairtest\FailOverDataServerTest1.java	/^package com.taobao.tairtest;$/;"	p
setUp	test\failover_test\src\test\java\com\taobao\tairtest\FailOverDataServerTest1.java	/^	public void setUp()$/;"	m	class:FailOverDataServerTest1
tearDown	test\failover_test\src\test\java\com\taobao\tairtest\FailOverDataServerTest1.java	/^	public void tearDown()$/;"	m	class:FailOverDataServerTest1
testFailover_01_add_ds_stop_in_time	test\failover_test\src\test\java\com\taobao\tairtest\FailOverDataServerTest1.java	/^	public void testFailover_01_add_ds_stop_in_time()$/;"	m	class:FailOverDataServerTest1
testFailover_02_add_one_ds	test\failover_test\src\test\java\com\taobao\tairtest\FailOverDataServerTest1.java	/^    public void testFailover_02_add_one_ds()$/;"	m	class:FailOverDataServerTest1
testFailover_03_add_ds_close_in_migrate	test\failover_test\src\test\java\com\taobao\tairtest\FailOverDataServerTest1.java	/^    public void testFailover_03_add_ds_close_in_migrate()$/;"	m	class:FailOverDataServerTest1
testFailover_04_add_ds_reclose_after_migrate	test\failover_test\src\test\java\com\taobao\tairtest\FailOverDataServerTest1.java	/^    public void testFailover_04_add_ds_reclose_after_migrate()$/;"	m	class:FailOverDataServerTest1
testFailover_05_add_two_ds	test\failover_test\src\test\java\com\taobao\tairtest\FailOverDataServerTest1.java	/^    public void testFailover_05_add_two_ds()$/;"	m	class:FailOverDataServerTest1
testFailover_06_add_one_inMigrate_add_another_ds	test\failover_test\src\test\java\com\taobao\tairtest\FailOverDataServerTest1.java	/^    public void testFailover_06_add_one_inMigrate_add_another_ds()$/;"	m	class:FailOverDataServerTest1
testFailover_07_add_one_inMigrate_inTime	test\failover_test\src\test\java\com\taobao\tairtest\FailOverDataServerTest1.java	/^    public void testFailover_07_add_one_inMigrate_inTime()$/;"	m	class:FailOverDataServerTest1
testFailover_08_add_one_inMigrate_reCloseFirst	test\failover_test\src\test\java\com\taobao\tairtest\FailOverDataServerTest1.java	/^    public void testFailover_08_add_one_inMigrate_reCloseFirst()$/;"	m	class:FailOverDataServerTest1
testFailover_09_add_one_inMigrate_reCloseBoth	test\failover_test\src\test\java\com\taobao\tairtest\FailOverDataServerTest1.java	/^    public void testFailover_09_add_one_inMigrate_reCloseBoth()$/;"	m	class:FailOverDataServerTest1
testFailover_10_add_one_afterMigrate_recloseFirst	test\failover_test\src\test\java\com\taobao\tairtest\FailOverDataServerTest1.java	/^    public void testFailover_10_add_one_afterMigrate_recloseFirst()$/;"	m	class:FailOverDataServerTest1
testFailover_11_add_one_afterMigrate_restartSecond	test\failover_test\src\test\java\com\taobao\tairtest\FailOverDataServerTest1.java	/^    public void testFailover_11_add_one_afterMigrate_restartSecond()$/;"	m	class:FailOverDataServerTest1
testFailover_12_add_one_afterMigrate_reStopBoth	test\failover_test\src\test\java\com\taobao\tairtest\FailOverDataServerTest1.java	/^    public void testFailover_12_add_one_afterMigrate_reStopBoth()$/;"	m	class:FailOverDataServerTest1
testFailover_13_add_one_finishMigrate_reStopSecond	test\failover_test\src\test\java\com\taobao\tairtest\FailOverDataServerTest1.java	/^    public void testFailover_13_add_one_finishMigrate_reStopSecond()$/;"	m	class:FailOverDataServerTest1
testFailover_14_add_one_finishMigrate_restartBoth	test\failover_test\src\test\java\com\taobao\tairtest\FailOverDataServerTest1.java	/^    public void testFailover_14_add_one_finishMigrate_restartBoth()$/;"	m	class:FailOverDataServerTest1
testFailover_15_add_ds_close_another_in_migrate	test\failover_test\src\test\java\com\taobao\tairtest\FailOverDataServerTest1.java	/^    public void testFailover_15_add_ds_close_another_in_migrate()$/;"	m	class:FailOverDataServerTest1
testFailover_16_add_ds_close_another_in_migrate_restart_ontime	test\failover_test\src\test\java\com\taobao\tairtest\FailOverDataServerTest1.java	/^    public void testFailover_16_add_ds_close_another_in_migrate_restart_ontime()$/;"	m	class:FailOverDataServerTest1
testFailover_17_kill_one_restart_inTime	test\failover_test\src\test\java\com\taobao\tairtest\FailOverDataServerTest1.java	/^    public void testFailover_17_kill_one_restart_inTime()$/;"	m	class:FailOverDataServerTest1
testFailover_18_kill_one_ds	test\failover_test\src\test\java\com\taobao\tairtest\FailOverDataServerTest1.java	/^    public void testFailover_18_kill_one_ds()$/;"	m	class:FailOverDataServerTest1
testFailover_19_kill_one_add_ds_before_rebuild	test\failover_test\src\test\java\com\taobao\tairtest\FailOverDataServerTest1.java	/^    public void testFailover_19_kill_one_add_ds_before_rebuild()$/;"	m	class:FailOverDataServerTest1
testFailover_20_kill_one_add_ds_after_rebuild	test\failover_test\src\test\java\com\taobao\tairtest\FailOverDataServerTest1.java	/^    public void testFailover_20_kill_one_add_ds_after_rebuild()$/;"	m	class:FailOverDataServerTest1
testFailover_23_kill_one_finishMigrate_restartFirst	test\failover_test\src\test\java\com\taobao\tairtest\FailOverDataServerTest1.java	/^    public void testFailover_23_kill_one_finishMigrate_restartFirst()$/;"	m	class:FailOverDataServerTest1
testFailover_24_add_ds_finishMigrate_add_ds_finishMigrate_and_kill_one_finishMigrate_kill_one_finishMigration	test\failover_test\src\test\java\com\taobao\tairtest\FailOverDataServerTest1.java	/^    public void testFailover_24_add_ds_finishMigrate_add_ds_finishMigrate_and_kill_one_finishMigrate_kill_one_finishMigration()$/;"	m	class:FailOverDataServerTest1
testFailover_25_kill_one_close_ds_after_rebuild	test\failover_test\src\test\java\com\taobao\tairtest\FailOverDataServerTest1.java	/^    public void testFailover_25_kill_one_close_ds_after_rebuild()$/;"	m	class:FailOverDataServerTest1
testFailover_26_kill_twoDataServers_finishMigrate_restart	test\failover_test\src\test\java\com\taobao\tairtest\FailOverDataServerTest1.java	/^    public void testFailover_26_kill_twoDataServers_finishMigrate_restart()$/;"	m	class:FailOverDataServerTest1
testFailover_27_kill_more_servers	test\failover_test\src\test\java\com\taobao\tairtest\FailOverDataServerTest1.java	/^    public void testFailover_27_kill_more_servers()$/;"	m	class:FailOverDataServerTest1
FailoverClusterTest	test\failover_test\src\test\java\com\taobao\tairtest\FailoverClusterTest.java	/^public class FailoverClusterTest extends FailOverBaseCase {$/;"	c
com.taobao.tairtest	test\failover_test\src\test\java\com\taobao\tairtest\FailoverClusterTest.java	/^package com.taobao.tairtest;$/;"	p
setUp	test\failover_test\src\test\java\com\taobao\tairtest\FailoverClusterTest.java	/^	public void setUp()$/;"	m	class:FailoverClusterTest
tearDown	test\failover_test\src\test\java\com\taobao\tairtest\FailoverClusterTest.java	/^	public void tearDown()$/;"	m	class:FailoverClusterTest
testFailover_01_restart_all_server	test\failover_test\src\test\java\com\taobao\tairtest\FailoverClusterTest.java	/^	public void testFailover_01_restart_all_server()$/;"	m	class:FailoverClusterTest
testFailover_02_restart_all_server_after_join_ds_and_migration	test\failover_test\src\test\java\com\taobao\tairtest\FailoverClusterTest.java	/^	public void testFailover_02_restart_all_server_after_join_ds_and_migration()$/;"	m	class:FailoverClusterTest
FailoverClusterTest1	test\failover_test\src\test\java\com\taobao\tairtest\FailoverClusterTest1.java	/^public class FailoverClusterTest1 extends FailOverBaseCase {$/;"	c
com.taobao.tairtest	test\failover_test\src\test\java\com\taobao\tairtest\FailoverClusterTest1.java	/^package com.taobao.tairtest;$/;"	p
setUp	test\failover_test\src\test\java\com\taobao\tairtest\FailoverClusterTest1.java	/^	public void setUp()$/;"	m	class:FailoverClusterTest1
tearDown	test\failover_test\src\test\java\com\taobao\tairtest\FailoverClusterTest1.java	/^	public void tearDown()$/;"	m	class:FailoverClusterTest1
testFailover_01_restart_all_server	test\failover_test\src\test\java\com\taobao\tairtest\FailoverClusterTest1.java	/^	public void testFailover_01_restart_all_server()$/;"	m	class:FailoverClusterTest1
testFailover_02_restart_all_server_after_join_ds_and_migration	test\failover_test\src\test\java\com\taobao\tairtest\FailoverClusterTest1.java	/^	public void testFailover_02_restart_all_server_after_join_ds_and_migration()$/;"	m	class:FailoverClusterTest1
FunctionDataServerTest	test\failover_test\src\test\java\com\taobao\tairtest\FunctionDataServerTest.java	/^public class FunctionDataServerTest extends FailOverBaseCase {$/;"	c
com.taobao.tairtest	test\failover_test\src\test\java\com\taobao\tairtest\FunctionDataServerTest.java	/^package com.taobao.tairtest;$/;"	p
setUp	test\failover_test\src\test\java\com\taobao\tairtest\FunctionDataServerTest.java	/^	public void setUp()$/;"	m	class:FunctionDataServerTest
tearDown	test\failover_test\src\test\java\com\taobao\tairtest\FunctionDataServerTest.java	/^	public void tearDown()$/;"	m	class:FunctionDataServerTest
testFunction_01_add_ds_and_migration	test\failover_test\src\test\java\com\taobao\tairtest\FunctionDataServerTest.java	/^	public void testFunction_01_add_ds_and_migration()$/;"	m	class:FunctionDataServerTest
testFunction_02_add_ds_and_migration_then_write_20w_data	test\failover_test\src\test\java\com\taobao\tairtest\FunctionDataServerTest.java	/^	public void testFunction_02_add_ds_and_migration_then_write_20w_data()$/;"	m	class:FunctionDataServerTest
testFunction_03_add_ds_and_migration_then_get_data	test\failover_test\src\test\java\com\taobao\tairtest\FunctionDataServerTest.java	/^	public void testFunction_03_add_ds_and_migration_then_get_data()$/;"	m	class:FunctionDataServerTest
testFunction_04_add_ds_and_migration_then_remove_data	test\failover_test\src\test\java\com\taobao\tairtest\FunctionDataServerTest.java	/^	public void testFunction_04_add_ds_and_migration_then_remove_data()$/;"	m	class:FunctionDataServerTest
testFunction_06_recover__ds_before_rebuild_120s_noRebuild	test\failover_test\src\test\java\com\taobao\tairtest\FunctionDataServerTest.java	/^	public void testFunction_06_recover__ds_before_rebuild_120s_noRebuild()$/;"	m	class:FunctionDataServerTest
FunctionDataServerTest1	test\failover_test\src\test\java\com\taobao\tairtest\FunctionDataServerTest1.java	/^public class FunctionDataServerTest1 extends FailOverBaseCase {$/;"	c
com.taobao.tairtest	test\failover_test\src\test\java\com\taobao\tairtest\FunctionDataServerTest1.java	/^package com.taobao.tairtest;$/;"	p
setUp	test\failover_test\src\test\java\com\taobao\tairtest\FunctionDataServerTest1.java	/^	public void setUp()$/;"	m	class:FunctionDataServerTest1
tearDown	test\failover_test\src\test\java\com\taobao\tairtest\FunctionDataServerTest1.java	/^	public void tearDown()$/;"	m	class:FunctionDataServerTest1
testFunction_01_add_ds_and_migration	test\failover_test\src\test\java\com\taobao\tairtest\FunctionDataServerTest1.java	/^	public void testFunction_01_add_ds_and_migration()$/;"	m	class:FunctionDataServerTest1
testFunction_02_add_ds_and_migration_then_write_20w_data	test\failover_test\src\test\java\com\taobao\tairtest\FunctionDataServerTest1.java	/^	public void testFunction_02_add_ds_and_migration_then_write_20w_data()$/;"	m	class:FunctionDataServerTest1
testFunction_03_add_ds_and_migration_then_get_data	test\failover_test\src\test\java\com\taobao\tairtest\FunctionDataServerTest1.java	/^	public void testFunction_03_add_ds_and_migration_then_get_data()$/;"	m	class:FunctionDataServerTest1
testFunction_04_add_ds_and_migration_then_remove_data	test\failover_test\src\test\java\com\taobao\tairtest\FunctionDataServerTest1.java	/^	public void testFunction_04_add_ds_and_migration_then_remove_data()$/;"	m	class:FunctionDataServerTest1
testFunction_06_recover__ds_before_rebuild_120s_noRebuild	test\failover_test\src\test\java\com\taobao\tairtest\FunctionDataServerTest1.java	/^	public void testFunction_06_recover__ds_before_rebuild_120s_noRebuild()$/;"	m	class:FunctionDataServerTest1
TestAll	test\failover_test\src\test\java\com\taobao\tairtest\TestAll.java	/^public class TestAll extends TestSuite {$/;"	c
com.taobao.tairtest	test\failover_test\src\test\java\com\taobao\tairtest\TestAll.java	/^package com.taobao.tairtest;$/;"	p
main	test\failover_test\src\test\java\com\taobao\tairtest\TestAll.java	/^	public static void main(String[] args) {$/;"	m	class:TestAll
suit	test\failover_test\src\test\java\com\taobao\tairtest\TestAll.java	/^	public static Test suit()$/;"	m	class:TestAll
TEST_F	test\interface_test\CTAIRCLIENTAPI_03_x_put_Test.cpp	/^	   TEST_F(CTestInterfaceBase, PutTestCase_08_versionEquals) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_03_x_put_Test.cpp	/^	  TEST_F(CTestInterfaceBase, PutTestCase_07_emptyData) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_03_x_put_Test.cpp	/^	 TEST_F(CTestInterfaceBase, PutTestCase_01_dateNotExist) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_03_x_put_Test.cpp	/^	 TEST_F(CTestInterfaceBase, PutTestCase_02_areaNegative){$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_03_x_put_Test.cpp	/^	 TEST_F(CTestInterfaceBase, PutTestCase_06_emptyKey) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_03_x_put_Test.cpp	/^	 TEST_F(CTestInterfaceBase, PutTestCase_10_versionLess) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_03_x_put_Test.cpp	/^	 TEST_F(CTestInterfaceBase, PutTestCase_11_dataExpire) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_03_x_put_Test.cpp	/^	 TEST_F(CTestInterfaceBase, PutTestCase_20_expiredless0) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_03_x_put_Test.cpp	/^	TEST_F(CTestInterfaceBase, PutTestCase_16_equal1Mdata) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_03_x_put_Test.cpp	/^	TEST_F(CTestInterfaceBase, PutTestCase_21_versionLimited) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_03_x_put_Test.cpp	/^    TEST_F(CTestInterfaceBase, PutTestCase_05_02_areaEquals65536) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_03_x_put_Test.cpp	/^    TEST_F(CTestInterfaceBase, PutTestCase_09_versionBigger) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_03_x_put_Test.cpp	/^    TEST_F(CTestInterfaceBase, PutTestCase_12_less1kKey) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_03_x_put_Test.cpp	/^    TEST_F(CTestInterfaceBase, PutTestCase_13_equal1kKey) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_03_x_put_Test.cpp	/^    TEST_F(CTestInterfaceBase, PutTestCase_14_greater1kKey) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_03_x_put_Test.cpp	/^    TEST_F(CTestInterfaceBase, PutTestCase_15_less1Mdata) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_03_x_put_Test.cpp	/^    TEST_F(CTestInterfaceBase, PutTestCase_17_greater1Mdata) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_03_x_put_Test.cpp	/^    TEST_F(CTestInterfaceBase, PutTestCase_18_greater1MdataUpdate) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_03_x_put_Test.cpp	/^    TEST_F(CTestInterfaceBase, PutTestCase_19_expiredless0) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_03_x_put_Test.cpp	/^   TEST_F(CTestInterfaceBase, PutTestCase_03_areaEquals0){$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_03_x_put_Test.cpp	/^   TEST_F(CTestInterfaceBase, PutTestCase_04_areaEquals1023Max){$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_03_x_put_Test.cpp	/^   TEST_F(CTestInterfaceBase, PutTestCase_05_areaEquals1024Max){$/;"	f	namespace:tair
tair	test\interface_test\CTAIRCLIENTAPI_03_x_put_Test.cpp	/^namespace tair{$/;"	n	file:
TEST_F	test\interface_test\CTAIRCLIENTAPI_03_x_put_oterfunction_Test.cpp	/^	 TEST_F(CTestInterfaceBase, PutTestCase_01) {$/;"	f	namespace:tair
tair	test\interface_test\CTAIRCLIENTAPI_03_x_put_oterfunction_Test.cpp	/^namespace tair{$/;"	n	file:
TEST_F	test\interface_test\CTAIRCLIENTAPI_04_x_get_Test.cpp	/^	 TEST_F(CTestInterfaceBase, GetTestCase_01_dateNotExist) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_04_x_get_Test.cpp	/^	 TEST_F(CTestInterfaceBase, GetTestCase_02_areaNegative) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_04_x_get_Test.cpp	/^	 TEST_F(CTestInterfaceBase, GetTestCase_03_areaEquals0) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_04_x_get_Test.cpp	/^	 TEST_F(CTestInterfaceBase, GetTestCase_04_areaEquals1023) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_04_x_get_Test.cpp	/^	 TEST_F(CTestInterfaceBase, GetTestCase_05_01_areaEquals65536) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_04_x_get_Test.cpp	/^	 TEST_F(CTestInterfaceBase, GetTestCase_05_areaEquals1024) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_04_x_get_Test.cpp	/^	 TEST_F(CTestInterfaceBase, GetTestCase_06_emptyKey) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_04_x_get_Test.cpp	/^	 TEST_F(CTestInterfaceBase, GetTestCase_07_dateNotExpire) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_04_x_get_Test.cpp	/^	 TEST_F(CTestInterfaceBase, GetTestCase_08_dateExpired) {$/;"	f	namespace:tair
tair	test\interface_test\CTAIRCLIENTAPI_04_x_get_Test.cpp	/^namespace tair{$/;"	n	file:
TEST_F	test\interface_test\CTAIRCLIENTAPI_05_x_remove_Test.cpp	/^	 TEST_F(CTestInterfaceBase, RemoveTestCase_01_dateNotExist) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_05_x_remove_Test.cpp	/^	 TEST_F(CTestInterfaceBase, RemoveTestCase_02_areaNegative) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_05_x_remove_Test.cpp	/^	 TEST_F(CTestInterfaceBase, RemoveTestCase_03_areaEquals0) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_05_x_remove_Test.cpp	/^	 TEST_F(CTestInterfaceBase, RemoveTestCase_04_areaEquals1023) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_05_x_remove_Test.cpp	/^	 TEST_F(CTestInterfaceBase, RemoveTestCase_05_02_areaEquals65536) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_05_x_remove_Test.cpp	/^	 TEST_F(CTestInterfaceBase, RemoveTestCase_05_areaEquals1024) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_05_x_remove_Test.cpp	/^	 TEST_F(CTestInterfaceBase, RemoveTestCase_06_emptyKey) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_05_x_remove_Test.cpp	/^	 TEST_F(CTestInterfaceBase, RemoveTestCase_07_dateNotExpire) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_05_x_remove_Test.cpp	/^	 TEST_F(CTestInterfaceBase, RemoveTestCase_08_dateExpired) {$/;"	f	namespace:tair
tair	test\interface_test\CTAIRCLIENTAPI_05_x_remove_Test.cpp	/^namespace tair{$/;"	n	file:
ItemTypes	test\interface_test\CTAIRCLIENTAPI_07_x_addItems_Test.cpp	/^typedef ::testing::Types<int32_t,int64_t,double,std::string> ItemTypes;$/;"	t	namespace:tair	file:
TEST_F	test\interface_test\CTAIRCLIENTAPI_07_x_addItems_Test.cpp	/^TEST_F(CTestInterfaceBase,addItemsTestCase_14_DataTest)$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_07_x_addItems_Test.cpp	/^TEST_F(CTestInterfaceBase,addItemsTestCase_15_DataTest)$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_07_x_addItems_Test.cpp	/^TEST_F(CTestInterfaceBase,addItemsTestCase_16_DataTest)$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_07_x_addItems_Test.cpp	/^TEST_F(CTestInterfaceBase,addItemsTestCase_22_DataTypeTest)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_07_x_addItems_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,addItemsTestCase_01_1_dataNotExist)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_07_x_addItems_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,addItemsTestCase_01_2_dataNotExist)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_07_x_addItems_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,addItemsTestCase_01_3_dataNotExist)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_07_x_addItems_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,addItemsTestCase_01_4_0area)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_07_x_addItems_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,addItemsTestCase_01_5_1023area)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_07_x_addItems_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,addItemsTestCase_01_6_1024area)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_07_x_addItems_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,addItemsTestCase_01_7_65536area)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_07_x_addItems_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,addItemsTestCase_01_dataNotExist)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_07_x_addItems_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,addItemsTestCase_02_dataNotExist)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_07_x_addItems_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,addItemsTestCase_03_versionEquals)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_07_x_addItems_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,addItemsTestCase_04_versionBig)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_07_x_addItems_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,addItemsTestCase_05_versionLess)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_07_x_addItems_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,addItemsTestCase_06_maxCountBig)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_07_x_addItems_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,addItemsTestCase_07_maxcountless)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_07_x_addItems_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,addItemsTestCase_08_maxcountEqual)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_07_x_addItems_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,addItemsTestCase_09_maxcount0)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_07_x_addItems_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,addItemsTestCase_10_KeyTest)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_07_x_addItems_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,addItemsTestCase_11_KeyTest)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_07_x_addItems_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,addItemsTestCase_12_KeyTest)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_07_x_addItems_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,addItemsTestCase_13_DataTest)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_07_x_addItems_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,addItemsTestCase_17_itemCountTest)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_07_x_addItems_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,addItemsTestCase_18_dataExpired)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_07_x_addItems_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,addItemsTestCase_19_maxCountTest)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_07_x_addItems_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,addItemsTestCase_20_expiretimeTest)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_07_x_addItems_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,addItemsTestCase_21_expiretimeTest)$/;"	f	namespace:tair
tair	test\interface_test\CTAIRCLIENTAPI_07_x_addItems_Test.cpp	/^namespace tair {$/;"	n	file:
TEST_F	test\interface_test\CTAIRCLIENTAPI_07_x_addItems_otherfunction_Test.cpp	/^TEST_F(CTestInterfaceBase, addItemsTestCase_other_01) $/;"	f	namespace:tair
tair	test\interface_test\CTAIRCLIENTAPI_07_x_addItems_otherfunction_Test.cpp	/^namespace tair {$/;"	n	file:
ItemTypes	test\interface_test\CTAIRCLIENTAPI_08_x_getItems_Test.cpp	/^typedef ::testing::Types<int32_t,int64_t,double,std::string> ItemTypes;$/;"	t	namespace:tair	file:
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_08_x_getItems_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,Item08_x_getItems_01_1dataNotExist)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_08_x_getItems_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,Item08_x_getItems_01_2dataNotExist_0area)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_08_x_getItems_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,Item08_x_getItems_01_3dataNotExist_1023area)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_08_x_getItems_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,Item08_x_getItems_01_4dataNotExist_1024area)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_08_x_getItems_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,Item08_x_getItems_01_5dataNotExist_65536area)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_08_x_getItems_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,Item08_x_getItems_01_dataNotExist)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_08_x_getItems_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,Item08_x_getItems_02)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_08_x_getItems_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,Item08_x_getItems_03)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_08_x_getItems_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,Item08_x_getItems_04)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_08_x_getItems_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,Item08_x_getItems_05)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_08_x_getItems_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,Item08_x_getItems_06)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_08_x_getItems_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,Item08_x_getItems_07)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_08_x_getItems_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,Item08_x_getItems_08) {$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_08_x_getItems_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,Item08_x_getItems_09) {$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_08_x_getItems_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,Item08_x_getItems_10)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_08_x_getItems_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,Item08_x_getItems_11)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_08_x_getItems_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,Item08_x_getItems_12)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_08_x_getItems_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,Item08_x_getItems_13)$/;"	f	namespace:tair
tair	test\interface_test\CTAIRCLIENTAPI_08_x_getItems_Test.cpp	/^namespace tair {$/;"	n	file:
ItemTypes	test\interface_test\CTAIRCLIENTAPI_09_x_getAndRemove_Test.cpp	/^typedef ::testing::Types<int32_t,int64_t,double,std::string> ItemTypes;$/;"	t	namespace:tair	file:
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_09_x_getAndRemove_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,Item09_x_getAndRemove_01_1_dataExist_areaEquals0)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_09_x_getAndRemove_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,Item09_x_getAndRemove_01_2_dataNotExist_keyIsNull)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_09_x_getAndRemove_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,Item09_x_getAndRemove_01_3_dataExist_areaEquals1023)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_09_x_getAndRemove_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,Item09_x_getAndRemove_01_4_dataNotExist_areaEquals1024)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_09_x_getAndRemove_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,Item09_x_getAndRemove_01_4_dataNotExist_areaNegative)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_09_x_getAndRemove_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,Item09_x_getAndRemove_01_5_dataNotExist_areaEquals65536)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_09_x_getAndRemove_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,Item09_x_getAndRemove_01_dataNotExist)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_09_x_getAndRemove_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,Item09_x_getAndRemove_02_dataExist)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_09_x_getAndRemove_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,Item09_x_getAndRemove_03_dataExist)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_09_x_getAndRemove_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,Item09_x_getAndRemove_04_dataExist)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_09_x_getAndRemove_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,Item09_x_getAndRemove_05_dataExist)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_09_x_getAndRemove_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,Item09_x_getAndRemove_06_dataExist)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_09_x_getAndRemove_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,Item09_x_getAndRemove_09_dataExist)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_09_x_getAndRemove_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,Item09_x_getAndRemove_10_dataExist)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_09_x_getAndRemove_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,Item09_x_getAndRemove_11_dataExist)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_09_x_getAndRemove_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,Item09_x_getAndRemove_12_dataExist)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_09_x_getAndRemove_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,Item09_x_getAndRemove_13_dataExist)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_09_x_getAndRemove_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,Item09_x_getAndRemove_14_dataExist)$/;"	f	namespace:tair
tair	test\interface_test\CTAIRCLIENTAPI_09_x_getAndRemove_Test.cpp	/^namespace tair {$/;"	n	file:
ItemTypes	test\interface_test\CTAIRCLIENTAPI_10_x_removeItems_Test.cpp	/^typedef ::testing::Types<int32_t,int64_t,double,std::string> ItemTypes;$/;"	t	namespace:tair	file:
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_10_x_removeItems_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,Item10_x_removeItems_01_1_dataNotExist)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_10_x_removeItems_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,Item10_x_removeItems_01_2_dataNotExist)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_10_x_removeItems_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,Item10_x_removeItems_01_dataNotExist)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_10_x_removeItems_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,Item10_x_removeItems_02_dataExist)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_10_x_removeItems_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,Item10_x_removeItems_03_dataExist)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_10_x_removeItems_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,Item10_x_removeItems_04_dataExist)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_10_x_removeItems_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,Item10_x_removeItems_05_dataExist)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_10_x_removeItems_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,Item10_x_removeItems_06_dataExist)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_10_x_removeItems_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,Item10_x_removeItems_09_dataExist)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_10_x_removeItems_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,Item10_x_removeItems_10_dataExist)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_10_x_removeItems_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,Item10_x_removeItems_11_dataExist)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_10_x_removeItems_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,Item10_x_removeItems_12_dataExist)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_10_x_removeItems_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,Item10_x_removeItems_13_dataExist)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_10_x_removeItems_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,Item10_x_removeItems_14_dataExist)$/;"	f	namespace:tair
tair	test\interface_test\CTAIRCLIENTAPI_10_x_removeItems_Test.cpp	/^namespace tair {$/;"	n	file:
ItemTypes	test\interface_test\CTAIRCLIENTAPI_11_x_getItemsCount_Test.cpp	/^typedef ::testing::Types<int32_t,int64_t,double,std::string> ItemTypes;$/;"	t	namespace:tair	file:
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_11_x_getItemsCount_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,Item11_x_getItemsCount_01_dataNotExist)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_11_x_getItemsCount_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,Item11_x_getItemsCount_02_dataNotExist_areaNegative)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_11_x_getItemsCount_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,Item11_x_getItemsCount_03_dataNotExist_areaEquals0)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_11_x_getItemsCount_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,Item11_x_getItemsCount_04_dataNotExist_areaEuals1024Max)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_11_x_getItemsCount_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,Item11_x_getItemsCount_04_dataNotExist_areaEuals1025)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_11_x_getItemsCount_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,Item11_x_getItemsCount_05_dataNotExist_keyNull)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_11_x_getItemsCount_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,Item11_x_getItemsCount_06_dataExist)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_11_x_getItemsCount_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,Item11_x_getItemsCount_07_dataExpired)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_11_x_getItemsCount_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,Item11_x_getItemsCount_08_itemsNum65535)$/;"	f	namespace:tair
TYPED_TEST	test\interface_test\CTAIRCLIENTAPI_11_x_getItemsCount_Test.cpp	/^TYPED_TEST(CTestInterfaceItemBase,Item11_x_getItemsCount_09_itemsNum65536)$/;"	f	namespace:tair
tair	test\interface_test\CTAIRCLIENTAPI_11_x_getItemsCount_Test.cpp	/^namespace tair {$/;"	n	file:
TEST_F	test\interface_test\CTAIRCLIENTAPI_13_x_incr_Test.cpp	/^	TEST_F(CTestInterfaceBase, incr_TestCase_01_areaNegative) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_13_x_incr_Test.cpp	/^	TEST_F(CTestInterfaceBase, incr_TestCase_02_areaEquals0) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_13_x_incr_Test.cpp	/^	TEST_F(CTestInterfaceBase, incr_TestCase_03_areaEquals1023) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_13_x_incr_Test.cpp	/^	TEST_F(CTestInterfaceBase, incr_TestCase_04_02_areaEquals65536) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_13_x_incr_Test.cpp	/^	TEST_F(CTestInterfaceBase, incr_TestCase_04_areaEquals1024Max) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_13_x_incr_Test.cpp	/^	TEST_F(CTestInterfaceBase, incr_TestCase_05_emptyKey) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_13_x_incr_Test.cpp	/^	TEST_F(CTestInterfaceBase, incr_TestCase_06_countAndInitValuePositive) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_13_x_incr_Test.cpp	/^	TEST_F(CTestInterfaceBase, incr_TestCase_07_countPositiveInitValueNagative) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_13_x_incr_Test.cpp	/^	TEST_F(CTestInterfaceBase, incr_TestCase_08_count0WithInitValue) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_13_x_incr_Test.cpp	/^	TEST_F(CTestInterfaceBase, incr_TestCase_09_countNagativeWithInitValue) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_13_x_incr_Test.cpp	/^	TEST_F(CTestInterfaceBase, incr_TestCase_10_count0WithoutInitValue) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_13_x_incr_Test.cpp	/^	TEST_F(CTestInterfaceBase, incr_TestCase_11_updateWithInitValue) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_13_x_incr_Test.cpp	/^	TEST_F(CTestInterfaceBase, incr_TestCase_12_updateWithoutInitValue) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_13_x_incr_Test.cpp	/^	TEST_F(CTestInterfaceBase, incr_TestCase_13_updateCount0WithInitValue) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_13_x_incr_Test.cpp	/^	TEST_F(CTestInterfaceBase, incr_TestCase_14_updateCountNagativeWithInitValue) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_13_x_incr_Test.cpp	/^	TEST_F(CTestInterfaceBase, incr_TestCase_15_overflow) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_13_x_incr_Test.cpp	/^	TEST_F(CTestInterfaceBase, incr_TestCase_16_expire) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_13_x_incr_Test.cpp	/^	TEST_F(CTestInterfaceBase, incr_TestCase_17_expireless0) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_13_x_incr_Test.cpp	/^	TEST_F(CTestInterfaceBase, incr_TestCase_18_expireless0) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_13_x_incr_Test.cpp	/^	TEST_F(CTestInterfaceBase, incr_TestCase_19_versionLimited) {$/;"	f	namespace:tair
tair	test\interface_test\CTAIRCLIENTAPI_13_x_incr_Test.cpp	/^namespace tair {$/;"	n	file:
TEST_F	test\interface_test\CTAIRCLIENTAPI_13_x_incr_otherfunction_Test.cpp	/^	TEST_F(CTestInterfaceBase, incr_other_TestCase_01_mixed) {$/;"	f	namespace:tair
tair	test\interface_test\CTAIRCLIENTAPI_13_x_incr_otherfunction_Test.cpp	/^namespace tair {$/;"	n	file:
TEST_F	test\interface_test\CTAIRCLIENTAPI_14_x_decr_Test.cpp	/^	TEST_F(CTestInterfaceBase, decr_TestCase_01_areaNegative) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_14_x_decr_Test.cpp	/^	TEST_F(CTestInterfaceBase, decr_TestCase_02_areaEquals0) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_14_x_decr_Test.cpp	/^	TEST_F(CTestInterfaceBase, decr_TestCase_03_areaEquals1023) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_14_x_decr_Test.cpp	/^	TEST_F(CTestInterfaceBase, decr_TestCase_04_01_areaEauals65536) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_14_x_decr_Test.cpp	/^	TEST_F(CTestInterfaceBase, decr_TestCase_04_areaEquals1024Max) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_14_x_decr_Test.cpp	/^	TEST_F(CTestInterfaceBase, decr_TestCase_05_emptyKey) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_14_x_decr_Test.cpp	/^	TEST_F(CTestInterfaceBase, decr_TestCase_06_countAndInitValuePositive) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_14_x_decr_Test.cpp	/^	TEST_F(CTestInterfaceBase, decr_TestCase_07_countPositiveInitValueNagative) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_14_x_decr_Test.cpp	/^	TEST_F(CTestInterfaceBase, decr_TestCase_08_count0WithInitValue) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_14_x_decr_Test.cpp	/^	TEST_F(CTestInterfaceBase, decr_TestCase_09_countNagativeWithInitValue) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_14_x_decr_Test.cpp	/^	TEST_F(CTestInterfaceBase, decr_TestCase_10_count0WithoutInitValue) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_14_x_decr_Test.cpp	/^	TEST_F(CTestInterfaceBase, decr_TestCase_11_updateWithInitValue) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_14_x_decr_Test.cpp	/^	TEST_F(CTestInterfaceBase, decr_TestCase_12_updateWithoutInitValue) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_14_x_decr_Test.cpp	/^	TEST_F(CTestInterfaceBase, decr_TestCase_13_updateCount0WithInitValue) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_14_x_decr_Test.cpp	/^	TEST_F(CTestInterfaceBase, decr_TestCase_14_updateCountNagativeWithInitValue) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_14_x_decr_Test.cpp	/^	TEST_F(CTestInterfaceBase, decr_TestCase_15_overflow) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_14_x_decr_Test.cpp	/^	TEST_F(CTestInterfaceBase, decr_TestCase_16_expire) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_14_x_decr_Test.cpp	/^	TEST_F(CTestInterfaceBase, decr_TestCase_17_expireless0) {$/;"	f	namespace:tair
TEST_F	test\interface_test\CTAIRCLIENTAPI_14_x_decr_Test.cpp	/^	TEST_F(CTestInterfaceBase, decr_TestCase_18_expireless0) {$/;"	f	namespace:tair
tair	test\interface_test\CTAIRCLIENTAPI_14_x_decr_Test.cpp	/^namespace tair {$/;"	n	file:
TEST_F	test\interface_test\CTAIRCLIENTAPI_14_x_decr_otherfunction_Test.cpp	/^	TEST_F(CTestInterfaceBase, decr_other_TestCase_01_mixed) {$/;"	f	namespace:tair
tair	test\interface_test\CTAIRCLIENTAPI_14_x_decr_otherfunction_Test.cpp	/^namespace tair {$/;"	n	file:
SetUpTestCase	test\interface_test\interface_test_base.cpp	/^    void CTestInterfaceBase::SetUpTestCase() {$/;"	f	class:tair::CTestInterfaceBase
TearDownTestCase	test\interface_test\interface_test_base.cpp	/^    void CTestInterfaceBase::TearDownTestCase() {$/;"	f	class:tair::CTestInterfaceBase
client_handle	test\interface_test\interface_test_base.cpp	/^    tair_client_api CTestInterfaceBase::client_handle;$/;"	m	class:tair::CTestInterfaceBase	file:
compareDataValue	test\interface_test\interface_test_base.cpp	/^    bool CTestInterfaceBase::compareDataValue(const data_entry& v1, const data_entry& v2) {$/;"	f	class:tair::CTestInterfaceBase
compareDataValueWithMeta	test\interface_test\interface_test_base.cpp	/^    bool CTestInterfaceBase::compareDataValueWithMeta(const data_entry& v1, const data_entry& v2) {$/;"	f	class:tair::CTestInterfaceBase
tair	test\interface_test\interface_test_base.cpp	/^namespace tair {$/;"	n	file:
CTestInterfaceBase	test\interface_test\interface_test_base.h	/^    class CTestInterfaceBase: public testing::Test {$/;"	c	namespace:tair
CTestInterfaceItemBase	test\interface_test\interface_test_base.h	/^	    CTestInterfaceItemBase(){ \/\/prepare data$/;"	f	class:tair::CTestInterfaceItemBase
CTestInterfaceItemBase	test\interface_test\interface_test_base.h	/^    class CTestInterfaceItemBase : public CTestInterfaceBase {$/;"	c	namespace:tair
DO_UNITLL	test\interface_test\interface_test_base.h	14;"	d
DO_WITH_RETRY	test\interface_test\interface_test_base.h	9;"	d
List	test\interface_test\interface_test_base.h	/^	    typedef std::vector<T> List;$/;"	t	class:tair::CTestInterfaceItemBase
RETRY_TIMES	test\interface_test\interface_test_base.h	8;"	d
SetUp	test\interface_test\interface_test_base.h	/^            void SetUp() {$/;"	f	class:tair::CTestInterfaceBase
TearDown	test\interface_test\interface_test_base.h	/^            void TearDown() {$/;"	f	class:tair::CTestInterfaceBase
_data	test\interface_test\interface_test_base.h	/^	    std::vector<boost::any> _data;$/;"	m	class:tair::CTestInterfaceItemBase
_data2	test\interface_test\interface_test_base.h	/^	    std::vector<boost::any> _data2;$/;"	m	class:tair::CTestInterfaceItemBase
_data3	test\interface_test\interface_test_base.h	/^	    std::vector<boost::any> _data3;$/;"	m	class:tair::CTestInterfaceItemBase
client_handle	test\interface_test\interface_test_base.h	/^            static tair_client_api client_handle;$/;"	m	class:tair::CTestInterfaceBase
config_server1	test\interface_test\interface_test_base.h	/^            static uint64_t  config_server1;$/;"	m	class:tair::CTestInterfaceBase
config_server2	test\interface_test\interface_test_base.h	/^            static uint64_t  config_server2;$/;"	m	class:tair::CTestInterfaceBase
data_server	test\interface_test\interface_test_base.h	/^            static vector<uint64_t> data_server;$/;"	m	class:tair::CTestInterfaceBase
tair	test\interface_test\interface_test_base.h	/^namespace tair{$/;"	n
main	test\interface_test\interface_test_main.cpp	/^int main(int argc, char **argv) {$/;"	f
TEST_F	test\interface_test\put_test.cpp	/^	TEST_F(CTestInterfaceBase, put_test_case_06)$/;"	f	namespace:tair
TEST_F	test\interface_test\put_test.cpp	/^    TEST_F(CTestInterfaceBase, put_test_case_01)$/;"	f	namespace:tair
TEST_F	test\interface_test\put_test.cpp	/^    TEST_F(CTestInterfaceBase, put_test_case_02){$/;"	f	namespace:tair
TEST_F	test\interface_test\put_test.cpp	/^    TEST_F(CTestInterfaceBase, put_test_case_03)$/;"	f	namespace:tair
TEST_F	test\interface_test\put_test.cpp	/^    TEST_F(CTestInterfaceBase, put_test_case_04)$/;"	f	namespace:tair
TEST_F	test\interface_test\put_test.cpp	/^    TEST_F(CTestInterfaceBase, put_test_case_05)$/;"	f	namespace:tair
TEST_F	test\interface_test\put_test.cpp	/^    TEST_F(CTestInterfaceBase, put_test_case_07)$/;"	f	namespace:tair
TEST_F	test\interface_test\put_test.cpp	/^    TEST_F(CTestInterfaceBase, put_test_case_08)$/;"	f	namespace:tair
TEST_F	test\interface_test\put_test.cpp	/^    TEST_F(CTestInterfaceBase, put_test_case_09)$/;"	f	namespace:tair
TEST_F	test\interface_test\put_test.cpp	/^    TEST_F(CTestInterfaceBase, put_test_case_10)$/;"	f	namespace:tair
tair	test\interface_test\put_test.cpp	/^namespace tair{$/;"	n	file:
SetUp	test\interface_test\test_kdb_base.h	/^    virtual void SetUp()$/;"	f	class:TestKdbBase
TEST_DATA_COUNT	test\interface_test\test_kdb_base.h	6;"	d
TearDown	test\interface_test\test_kdb_base.h	/^    virtual void TearDown()$/;"	f	class:TestKdbBase
TestKdbBase	test\interface_test\test_kdb_base.h	/^    TestKdbBase()$/;"	f	class:TestKdbBase
TestKdbBase	test\interface_test\test_kdb_base.h	/^class TestKdbBase: public ::testing::Test$/;"	c
TestKdbData	test\interface_test\test_kdb_base.h	/^    TestKdbData()$/;"	f	class:TestKdbData
TestKdbData	test\interface_test\test_kdb_base.h	/^class TestKdbData$/;"	c
buckets	test\interface_test\test_kdb_base.h	/^    std::vector<int> buckets;$/;"	m	class:TestKdbData
compareDataValue	test\interface_test\test_kdb_base.h	/^    static bool compareDataValue(const data_entry& v1, const data_entry& v2)$/;"	f	class:TestKdbBase
compareDataValueWithMeta	test\interface_test\test_kdb_base.h	/^    static bool compareDataValueWithMeta(const data_entry& v1, const data_entry& v2)$/;"	f	class:TestKdbBase
get_buckets	test\interface_test\test_kdb_base.h	/^    std::vector<int> get_buckets()$/;"	f	class:TestKdbData
get_test_key	test\interface_test\test_kdb_base.h	/^    data_entry * get_test_key(int index)$/;"	f	class:TestKdbData
get_test_value	test\interface_test\test_kdb_base.h	/^    data_entry * get_test_value(int index)$/;"	f	class:TestKdbData
keys	test\interface_test\test_kdb_base.h	/^    data_entry keys[TEST_DATA_COUNT];$/;"	m	class:TestKdbData
print	test\interface_test\test_kdb_base.h	/^    static void print(data_entry &data) $/;"	f	class:TestKdbBase
print	test\interface_test\test_kdb_base.h	/^    static void print(tair::item_data_info &item)$/;"	f	class:TestKdbBase
set_test_data	test\interface_test\test_kdb_base.h	/^    void set_test_data()$/;"	f	class:TestKdbData
values	test\interface_test\test_kdb_base.h	/^    data_entry values[TEST_DATA_COUNT];$/;"	m	class:TestKdbData
~TestKdbBase	test\interface_test\test_kdb_base.h	/^    ~TestKdbBase()$/;"	f	class:TestKdbBase
TEST_F	test\interface_test\test_kdb_bucket.cpp	/^TEST_F(TestKdbBase, TestBucketStat)$/;"	f
TEST_F	test\interface_test\test_kdb_bucket.cpp	/^TEST_F(TestKdbBase, TestKdbBucket1)$/;"	f
TEST_F	test\interface_test\test_kdb_bucket.cpp	/^TEST_F(TestKdbBase, TestKdbBucketScan)$/;"	f
TEST_F	test\interface_test\test_kdb_bucket.cpp	/^TEST_F(TestKdbBase,TestKdbBucketStartandStop1) \/\/happy path$/;"	f
TEST_F	test\interface_test\test_kdb_bucket.cpp	/^TEST_F(TestKdbBase,TestKdbBucketStartandStop2)  \/\/start twice times$/;"	f
TEST_F	test\interface_test\test_kdb_bucket.cpp	/^TEST_F(TestKdbBase,TestKdbBucketStartandStop3)  \/\/get value after stop the bucket$/;"	f
TEST_F	test\interface_test\test_kdb_bucket.cpp	/^TEST_F(TestKdbBase,TestKdbBucket_put4)  \/\/put interface happy path$/;"	f
TEST_F	test\interface_test\test_kdb_bucket.cpp	/^TEST_F(TestKdbBase,TestKdbBucket_put5)  \/\/test  put interface expire_time param$/;"	f
TEST_F	test\interface_test\test_kdb_bucket.cpp	/^TEST_F(TestKdbBase,TestKdbBucket_put6)  \/\/test  put interface version_care param$/;"	f
TEST_F	test\interface_test\test_kdb_bucket.cpp	/^TEST_F(TestKdbBase,TestKdbBucket_remove7)  \/\/test  remove happy path$/;"	f
main	test\interface_test\test_kdb_bucket.cpp	/^int main(int argc, char** argv)$/;"	f
TEST_F	test\interface_test\test_kdb_kyotocabinet.cpp	/^TEST_F(TestKdbBase, TestKdbStart)$/;"	f
main	test\interface_test\test_kdb_kyotocabinet.cpp	/^int main(int argc, char** argv)$/;"	f
TEST_F	test\interface_test\test_kdb_manager.cpp	/^TEST_F(TestKdbBase, TestKdbBucketScan)$/;"	f
TEST_F	test\interface_test\test_kdb_manager.cpp	/^TEST_F(TestKdbBase, TestKdbManagerGet1)$/;"	f
TEST_F	test\interface_test\test_kdb_manager.cpp	/^TEST_F(TestKdbBase, TestKdbManagerPut1)$/;"	f
TEST_F	test\interface_test\test_kdb_manager.cpp	/^TEST_F(TestKdbBase, TestKdbManagerPut2)$/;"	f
TEST_F	test\interface_test\test_kdb_manager.cpp	/^TEST_F(TestKdbBase, TestKdbManagerRemove)$/;"	f
TEST_F	test\interface_test\test_kdb_manager.cpp	/^TEST_F(TestKdbBase, TestKdbStart)$/;"	f
main	test\interface_test\test_kdb_manager.cpp	/^int main(int argc, char** argv)$/;"	f
TEST_F	test\interface_test\test_stat_manager.cpp	/^TEST_F(TestKdbBase, TestStatManagerAll)$/;"	f
main	test\interface_test\test_stat_manager.cpp	/^int main(int argc, char** argv)$/;"	f
ReadInfo	test\localqueue_test\disk_queue_unittest.cpp	/^typedef struct ReadInfo {$/;"	s	file:
ReadInfo	test\localqueue_test\disk_queue_unittest.cpp	/^} ReadInfo;$/;"	t	typeref:struct:ReadInfo	file:
TEST	test\localqueue_test\disk_queue_unittest.cpp	/^TEST(test_1_n_threads_1, DISKQUEUE_ONE_READ_MULTI_WRITE) {$/;"	f
TEST	test\localqueue_test\disk_queue_unittest.cpp	/^TEST(test_2_threads_1, DISKQUEUE_ONE_READ_ONE_WRITE) {$/;"	f
TEST	test\localqueue_test\disk_queue_unittest.cpp	/^TEST(test_large_unvisibe_char_1, DISKQUEUE_MULTI_READ_MULTI_WRITE) {$/;"	f
TEST	test\localqueue_test\disk_queue_unittest.cpp	/^TEST(test_large_unvisibe_char_2_test_file_refresh, DISKQUEUE_MULTI_READ_MULTI_WRITE) {$/;"	f
TEST	test\localqueue_test\disk_queue_unittest.cpp	/^TEST(test_large_visibe_char_1, DISKQUEUE_MULTI_READ_ONE_WRITE) {$/;"	f
TEST	test\localqueue_test\disk_queue_unittest.cpp	/^TEST(test_n_1_threads_1, DISKQUEUE_MULTI_READ_ONE_WRITE) {$/;"	f
TEST	test\localqueue_test\disk_queue_unittest.cpp	/^TEST(test_n_n_threads_1, DISKQUEUE_MULTI_READ_MULTI_WRITE) {$/;"	f
TEST	test\localqueue_test\disk_queue_unittest.cpp	/^TEST(test_simple_1, DISKQUEUE_ONE_READ_ONE_WRITE) {$/;"	f
TestObject	test\localqueue_test\disk_queue_unittest.cpp	/^        TestObject(char* data, int data_len) {$/;"	f	class:TestObject
TestObject	test\localqueue_test\disk_queue_unittest.cpp	/^class TestObject {$/;"	c	file:
WriteInfo	test\localqueue_test\disk_queue_unittest.cpp	/^typedef struct WriteInfo {$/;"	s	file:
WriteInfo	test\localqueue_test\disk_queue_unittest.cpp	/^} WriteInfo;$/;"	t	typeref:struct:WriteInfo	file:
_data	test\localqueue_test\disk_queue_unittest.cpp	/^        char* _data;$/;"	m	class:TestObject	file:
_data_len	test\localqueue_test\disk_queue_unittest.cpp	/^        int _data_len;$/;"	m	class:TestObject	file:
copy	test\localqueue_test\disk_queue_unittest.cpp	/^TestObject* TestObject::copy() {$/;"	f	class:TestObject
createOne	test\localqueue_test\disk_queue_unittest.cpp	/^        static TestObject* createOne(char* data, int data_len) {$/;"	f	class:TestObject
createRandomOne	test\localqueue_test\disk_queue_unittest.cpp	/^TestObject* TestObject::createRandomOne(int data_len, int isallrandom) {$/;"	f	class:TestObject
deserializer	test\localqueue_test\disk_queue_unittest.cpp	/^bool deserializer(TestObject** data, tbnet::DataBuffer* dataBuffer) {$/;"	f
diskQueue	test\localqueue_test\disk_queue_unittest.cpp	/^    DiskQueue<TestObject>* diskQueue;$/;"	m	struct:ReadInfo	file:
diskQueue	test\localqueue_test\disk_queue_unittest.cpp	/^    DiskQueue<TestObject>* diskQueue;$/;"	m	struct:WriteInfo	file:
getData	test\localqueue_test\disk_queue_unittest.cpp	/^        char* getData() {return _data;}$/;"	f	class:TestObject
getDataLen	test\localqueue_test\disk_queue_unittest.cpp	/^        int getDataLen() {return _data_len;}$/;"	f	class:TestObject
getRandomString	test\localqueue_test\disk_queue_unittest.cpp	/^char* getRandomString(int len, int isallrandom) {$/;"	f
lock	test\localqueue_test\disk_queue_unittest.cpp	/^    pthread_mutex_t lock;$/;"	m	struct:ReadInfo	file:
lock	test\localqueue_test\disk_queue_unittest.cpp	/^    pthread_mutex_t lock;$/;"	m	struct:WriteInfo	file:
main	test\localqueue_test\disk_queue_unittest.cpp	/^int main(int argc, char** argv) {$/;"	f
max_read	test\localqueue_test\disk_queue_unittest.cpp	/^    int max_read;$/;"	m	struct:ReadInfo	file:
max_write	test\localqueue_test\disk_queue_unittest.cpp	/^    int max_write;$/;"	m	struct:WriteInfo	file:
mode	test\localqueue_test\disk_queue_unittest.cpp	/^    int mode;$/;"	m	struct:ReadInfo	file:
mode	test\localqueue_test\disk_queue_unittest.cpp	/^    int mode;$/;"	m	struct:WriteInfo	file:
now_read	test\localqueue_test\disk_queue_unittest.cpp	/^    int now_read;$/;"	m	struct:ReadInfo	file:
now_write	test\localqueue_test\disk_queue_unittest.cpp	/^    int now_write;$/;"	m	struct:WriteInfo	file:
read_thread_func	test\localqueue_test\disk_queue_unittest.cpp	/^void* read_thread_func(void* argv) {$/;"	f
serializer	test\localqueue_test\disk_queue_unittest.cpp	/^bool serializer(TestObject* data, tbnet::DataBuffer** dataBuffer) {$/;"	f
write_thread_func	test\localqueue_test\disk_queue_unittest.cpp	/^void* write_thread_func(void* argv) {$/;"	f
~TestObject	test\localqueue_test\disk_queue_unittest.cpp	/^        ~TestObject(){if (_data) free(_data);}$/;"	f	class:TestObject
ReadInfo	test\localqueue_test\local_queue_unittest.cpp	/^typedef struct ReadInfo {$/;"	s	file:
ReadInfo	test\localqueue_test\local_queue_unittest.cpp	/^} ReadInfo;$/;"	t	typeref:struct:ReadInfo	file:
TEST	test\localqueue_test\local_queue_unittest.cpp	/^TEST(test_2_threads_1, DISKQUEUE_ONE_READ_ONE_WRITE) {$/;"	f
TEST	test\localqueue_test\local_queue_unittest.cpp	/^TEST(test_2_threads_1i_large, DISKQUEUE_ONE_READ_ONE_WRITE) {$/;"	f
TEST	test\localqueue_test\local_queue_unittest.cpp	/^TEST(test_large_unvisibe_char_1, DISKQUEUE_ONE_READ_ONE_WRITE) {$/;"	f
TEST	test\localqueue_test\local_queue_unittest.cpp	/^TEST(test_simple_1, DISKQUEUE_ONE_READ_ONE_WRITE) {$/;"	f
WriteInfo	test\localqueue_test\local_queue_unittest.cpp	/^typedef struct WriteInfo {$/;"	s	file:
WriteInfo	test\localqueue_test\local_queue_unittest.cpp	/^} WriteInfo;$/;"	t	typeref:struct:WriteInfo	file:
localQueue	test\localqueue_test\local_queue_unittest.cpp	/^    LocalQueue* localQueue;$/;"	m	struct:ReadInfo	file:
localQueue	test\localqueue_test\local_queue_unittest.cpp	/^    LocalQueue* localQueue;$/;"	m	struct:WriteInfo	file:
lock	test\localqueue_test\local_queue_unittest.cpp	/^    pthread_mutex_t lock;$/;"	m	struct:ReadInfo	file:
lock	test\localqueue_test\local_queue_unittest.cpp	/^    pthread_mutex_t lock;$/;"	m	struct:WriteInfo	file:
main	test\localqueue_test\local_queue_unittest.cpp	/^int main(int argc, char** argv) {$/;"	f
max_read	test\localqueue_test\local_queue_unittest.cpp	/^    int max_read;$/;"	m	struct:ReadInfo	file:
max_write	test\localqueue_test\local_queue_unittest.cpp	/^    int max_write;$/;"	m	struct:WriteInfo	file:
now_read	test\localqueue_test\local_queue_unittest.cpp	/^    int now_read;$/;"	m	struct:ReadInfo	file:
now_write	test\localqueue_test\local_queue_unittest.cpp	/^    int now_write;$/;"	m	struct:WriteInfo	file:
read_thread_func	test\localqueue_test\local_queue_unittest.cpp	/^void* read_thread_func(void* argv) {$/;"	f
write_thread_func	test\localqueue_test\local_queue_unittest.cpp	/^void* write_thread_func(void* argv) {$/;"	f
main	test\localqueue_test\mem_queue_unittest.cpp	/^int main(int argc, char** argv) {$/;"	f
max_num	test\localqueue_test\mem_queue_unittest.cpp	/^static int max_num = 10000000;$/;"	v	file:
pop_thread_func	test\localqueue_test\mem_queue_unittest.cpp	/^void* pop_thread_func(void* argv) {$/;"	f
push_thread_func	test\localqueue_test\mem_queue_unittest.cpp	/^void* push_thread_func(void* argv) {$/;"	f
TestQueueNode	test\localqueue_test\test_queue_node.hpp	/^    TestQueueNode(int nodeId, char* data, int data_len)$/;"	f	class:TestQueueNode
TestQueueNode	test\localqueue_test\test_queue_node.hpp	/^class TestQueueNode : public BaseQueueNode {$/;"	c
__TEST_QUEUE_NODE__	test\localqueue_test\test_queue_node.hpp	2;"	d
_data	test\localqueue_test\test_queue_node.hpp	/^    char* _data;$/;"	m	class:TestQueueNode
_data_len	test\localqueue_test\test_queue_node.hpp	/^    int _data_len;$/;"	m	class:TestQueueNode
copy	test\localqueue_test\test_queue_node.hpp	/^TestQueueNode* TestQueueNode::copy() {$/;"	f	class:TestQueueNode
createRandomOne	test\localqueue_test\test_queue_node.hpp	/^TestQueueNode* TestQueueNode::createRandomOne(int data_len,$/;"	f	class:TestQueueNode
getData	test\localqueue_test\test_queue_node.hpp	/^    char* getData() {return _data;}$/;"	f	class:TestQueueNode
getDataLen	test\localqueue_test\test_queue_node.hpp	/^    int getDataLen() {return _data_len;}$/;"	f	class:TestQueueNode
getRandomString	test\localqueue_test\test_queue_node.hpp	/^char* TestQueueNode::getRandomString(int len, int isallrandom) {$/;"	f	class:TestQueueNode
test_deserialize_func_	test\localqueue_test\test_queue_node.hpp	/^bool TestQueueNode::test_deserialize_func_(BaseQueueNode** data, tbnet::DataBuffer* dataBuffer) {$/;"	f	class:TestQueueNode
test_serialize_func_	test\localqueue_test\test_queue_node.hpp	/^bool TestQueueNode::test_serialize_func_(BaseQueueNode* data, tbnet::DataBuffer** dataBuffer) {$/;"	f	class:TestQueueNode
~TestQueueNode	test\localqueue_test\test_queue_node.hpp	/^    ~TestQueueNode() {};$/;"	f	class:TestQueueNode
SetUp	test\rdb_interface_test\base_test.hpp	/^    virtual void SetUp() {$/;"	f	class:TairClientRDBTest
TairClientRDBTest	test\rdb_interface_test\base_test.hpp	/^class TairClientRDBTest:public testing::Test {$/;"	c
TearDown	test\rdb_interface_test\base_test.hpp	/^    virtual void TearDown() {$/;"	f	class:TairClientRDBTest
__BASE_TEST__	test\rdb_interface_test\base_test.hpp	2;"	d
default_namespace	test\rdb_interface_test\base_test.hpp	/^    const static int default_namespace;$/;"	m	class:TairClientRDBTest
default_namespace	test\rdb_interface_test\base_test.hpp	/^const int TairClientRDBTest::default_namespace = 0;$/;"	m	class:TairClientRDBTest
group_name	test\rdb_interface_test\base_test.hpp	/^    const static char* group_name;$/;"	m	class:TairClientRDBTest
group_name	test\rdb_interface_test\base_test.hpp	/^const char* TairClientRDBTest::group_name = "group_1";$/;"	m	class:TairClientRDBTest
max_namespace	test\rdb_interface_test\base_test.hpp	/^    const static int max_namespace;$/;"	m	class:TairClientRDBTest
max_namespace	test\rdb_interface_test\base_test.hpp	/^const int TairClientRDBTest::max_namespace = 16;$/;"	m	class:TairClientRDBTest
server_addr	test\rdb_interface_test\base_test.hpp	/^    const static char* server_addr;$/;"	m	class:TairClientRDBTest
server_addr	test\rdb_interface_test\base_test.hpp	/^const char* TairClientRDBTest::server_addr = "10.232.4.19:5198";$/;"	m	class:TairClientRDBTest
slave_server_addr	test\rdb_interface_test\base_test.hpp	/^    const static char* slave_server_addr;$/;"	m	class:TairClientRDBTest
slave_server_addr	test\rdb_interface_test\base_test.hpp	/^const char* TairClientRDBTest::slave_server_addr = NULL;$/;"	m	class:TairClientRDBTest
tairClient	test\rdb_interface_test\base_test.hpp	/^    tair_client_impl tairClient;$/;"	m	class:TairClientRDBTest
TEST_F	test\rdb_interface_test\hash_normal_test.cpp	/^TEST_F(TairClientRDBTest, test_hash_field_1024x1024) {$/;"	f
TEST_F	test\rdb_interface_test\hash_normal_test.cpp	/^TEST_F(TairClientRDBTest, test_hash_field_null) {$/;"	f
TEST_F	test\rdb_interface_test\hash_normal_test.cpp	/^TEST_F(TairClientRDBTest, test_hash_key_1024) {$/;"	f
TEST_F	test\rdb_interface_test\hash_normal_test.cpp	/^TEST_F(TairClientRDBTest, test_hash_key_null) {$/;"	f
TEST_F	test\rdb_interface_test\hash_normal_test.cpp	/^TEST_F(TairClientRDBTest, test_hash_normal) {$/;"	f
TEST_F	test\rdb_interface_test\hash_normal_test.cpp	/^TEST_F(TairClientRDBTest, test_hash_value_1024x1024) {$/;"	f
TEST_F	test\rdb_interface_test\hash_normal_test.cpp	/^TEST_F(TairClientRDBTest, test_hash_value_null) {$/;"	f
main	test\rdb_interface_test\hash_normal_test.cpp	/^int main(int argc, char** argv) {$/;"	f
TEST_F	test\rdb_interface_test\hdel_general_test.cpp	/^TEST_F(TairClientRDBTest, test_hdel_expire_cancel) {$/;"	f
TEST_F	test\rdb_interface_test\hdel_general_test.cpp	/^TEST_F(TairClientRDBTest, test_hdel_expire_interval) {$/;"	f
TEST_F	test\rdb_interface_test\hdel_general_test.cpp	/^TEST_F(TairClientRDBTest, test_hdel_expire_timestamp) {$/;"	f
TEST_F	test\rdb_interface_test\hdel_general_test.cpp	/^TEST_F(TairClientRDBTest, test_hdel_version) {$/;"	f
main	test\rdb_interface_test\hdel_general_test.cpp	/^int main(int argc, char** argv) {$/;"	f
main	test\rdb_interface_test\hget_general_test.cpp	/^int main(int argc, char** argv) {$/;"	f
main	test\rdb_interface_test\hgetall_general_test.cpp	/^int main(int argc, char** argv) {$/;"	f
main	test\rdb_interface_test\hmget_general_test.cpp	/^int main(int argc, char** argv) {$/;"	f
TEST_F	test\rdb_interface_test\hmset_general_test.cpp	/^TEST_F(TairClientRDBTest, test_hmset_expire_cancel) {$/;"	f
TEST_F	test\rdb_interface_test\hmset_general_test.cpp	/^TEST_F(TairClientRDBTest, test_hmset_expire_timeintval) {$/;"	f
TEST_F	test\rdb_interface_test\hmset_general_test.cpp	/^TEST_F(TairClientRDBTest, test_hmset_expire_timestamp) {$/;"	f
TEST_F	test\rdb_interface_test\hmset_general_test.cpp	/^TEST_F(TairClientRDBTest, test_hmset_version) {$/;"	f
main	test\rdb_interface_test\hmset_general_test.cpp	/^int main(int argc, char** argv) {$/;"	f
TEST_F	test\rdb_interface_test\hset_general_test.cpp	/^TEST_F(TairClientRDBTest, test_hset_expire_cancel) {$/;"	f
TEST_F	test\rdb_interface_test\hset_general_test.cpp	/^TEST_F(TairClientRDBTest, test_hset_expire_timeinterval) {$/;"	f
TEST_F	test\rdb_interface_test\hset_general_test.cpp	/^TEST_F(TairClientRDBTest, test_hset_expire_timestamp) {$/;"	f
TEST_F	test\rdb_interface_test\hset_general_test.cpp	/^TEST_F(TairClientRDBTest, test_hset_version_care) {$/;"	f
main	test\rdb_interface_test\hset_general_test.cpp	/^int main(int argc, char** argv) {$/;"	f
TEST_F	test\rdb_interface_test\sadd_general_test.cpp	/^TEST_F(TairClientRDBTest, test_sadd_expire_cancel) {$/;"	f
TEST_F	test\rdb_interface_test\sadd_general_test.cpp	/^TEST_F(TairClientRDBTest, test_sadd_expire_timeinterval) {$/;"	f
TEST_F	test\rdb_interface_test\sadd_general_test.cpp	/^TEST_F(TairClientRDBTest, test_sadd_expire_timestamp) {$/;"	f
TEST_F	test\rdb_interface_test\sadd_general_test.cpp	/^TEST_F(TairClientRDBTest, test_sadd_version_care) {$/;"	f
main	test\rdb_interface_test\sadd_general_test.cpp	/^int main(int argc, char** argv) {$/;"	f
TEST_F	test\rdb_interface_test\set_normal_test.cpp	/^TEST_F(TairClientRDBTest, test_set_key_1024) {$/;"	f
TEST_F	test\rdb_interface_test\set_normal_test.cpp	/^TEST_F(TairClientRDBTest, test_set_key_null) {$/;"	f
TEST_F	test\rdb_interface_test\set_normal_test.cpp	/^TEST_F(TairClientRDBTest, test_set_normal) {$/;"	f
TEST_F	test\rdb_interface_test\set_normal_test.cpp	/^TEST_F(TairClientRDBTest, test_set_value_1024x1024) {$/;"	f
TEST_F	test\rdb_interface_test\set_normal_test.cpp	/^TEST_F(TairClientRDBTest, test_set_value_null) {$/;"	f
main	test\rdb_interface_test\set_normal_test.cpp	/^int main(int argc, char** argv) {$/;"	f
main	test\rdb_interface_test\smembers_general_test.cpp	/^int main(int argc, char** argv) {$/;"	f
TEST_F	test\rdb_interface_test\srem_general_test.cpp	/^TEST_F(TairClientRDBTest, test_srem_expire_cancel) {$/;"	f
TEST_F	test\rdb_interface_test\srem_general_test.cpp	/^TEST_F(TairClientRDBTest, test_srem_expire_timeintverval) {$/;"	f
TEST_F	test\rdb_interface_test\srem_general_test.cpp	/^TEST_F(TairClientRDBTest, test_srem_expire_timestamp) {$/;"	f
TEST_F	test\rdb_interface_test\srem_general_test.cpp	/^TEST_F(TairClientRDBTest, test_srem_version_care) {$/;"	f
main	test\rdb_interface_test\srem_general_test.cpp	/^int main(int argc, char** argv) {$/;"	f
data_entry_cmp	test\rdb_interface_test\test_helper.cpp	/^int data_entry_cmp(data_entry* de1, data_entry* de2) {$/;"	f
data_entry_free	test\rdb_interface_test\test_helper.cpp	/^void data_entry_free(data_entry* de, int isfree) {$/;"	f
data_entry_rand	test\rdb_interface_test\test_helper.cpp	/^data_entry* data_entry_rand(int size, int isrand) {$/;"	f
map_data_entry_cmp	test\rdb_interface_test\test_helper.cpp	/^int map_data_entry_cmp(MDE* vde1, MDE* vde2) {$/;"	f
map_data_entry_free	test\rdb_interface_test\test_helper.cpp	/^void map_data_entry_free(MDE* mde, int isfree) {$/;"	f
map_data_entry_rand	test\rdb_interface_test\test_helper.cpp	/^MDE* map_data_entry_rand(int k_len, int v_len, int size, int isrand) {$/;"	f
map_get_n_data_entry	test\rdb_interface_test\test_helper.cpp	/^MDE* map_get_n_data_entry(MDE* mde, int n) {$/;"	f
mapv_data_entry_cmp	test\rdb_interface_test\test_helper.cpp	/^int mapv_data_entry_cmp(MVDE* mvde1, MVDE* mvde2) {$/;"	f
mapv_data_entry_free	test\rdb_interface_test\test_helper.cpp	/^void mapv_data_entry_free(MVDE* mvde, int isfree) {$/;"	f
mapv_data_entry_rand	test\rdb_interface_test\test_helper.cpp	/^MVDE* mapv_data_entry_rand(int k_len, int f_len, int size, int ssize, int isrand) {$/;"	f
mmap_data_entry_cmp	test\rdb_interface_test\test_helper.cpp	/^int mmap_data_entry_cmp(MMDE* mmde1, MMDE* mmde2) {$/;"	f
mmap_data_entry_free	test\rdb_interface_test\test_helper.cpp	/^void mmap_data_entry_free(MMDE* mmde, int isfree) {$/;"	f
mmap_data_entry_rand	test\rdb_interface_test\test_helper.cpp	/^MMDE* mmap_data_entry_rand(int k_len, int f_len,$/;"	f
print_hex_string	test\rdb_interface_test\test_helper.cpp	/^void print_hex_string(char* buffer, int size) {$/;"	f
randData	test\rdb_interface_test\test_helper.cpp	/^int randData(char** buffer, int size) {$/;"	f
range	test\rdb_interface_test\test_helper.cpp	3;"	d	file:
set_data_entry_cmp	test\rdb_interface_test\test_helper.cpp	/^int set_data_entry_cmp(VDE* vde1, VDE* vde2) {$/;"	f
staticData	test\rdb_interface_test\test_helper.cpp	/^int staticData(char** buffer, int size) {$/;"	f
vector_data_entry_cmp	test\rdb_interface_test\test_helper.cpp	/^int vector_data_entry_cmp(VDE* vde1, VDE* vde2) {$/;"	f
vector_data_entry_free	test\rdb_interface_test\test_helper.cpp	/^void vector_data_entry_free(VDE* vde, int isfree) {$/;"	f
vector_data_entry_rand	test\rdb_interface_test\test_helper.cpp	/^VDE* vector_data_entry_rand(int len, int size, int isrand) {$/;"	f
vector_get_n_data_entry	test\rdb_interface_test\test_helper.cpp	/^VDE* vector_get_n_data_entry(VDE* vde, int n) {$/;"	f
vector_key_from_map	test\rdb_interface_test\test_helper.cpp	/^VDE* vector_key_from_map(MDE* mde) {$/;"	f
vector_value_from_map	test\rdb_interface_test\test_helper.cpp	/^VDE* vector_value_from_map(MDE* mde) {$/;"	f
G	test\rdb_interface_test\test_helper.hpp	12;"	d
MDE	test\rdb_interface_test\test_helper.hpp	/^typedef map<data_entry*, data_entry*> MDE;$/;"	t
MMDE	test\rdb_interface_test\test_helper.hpp	/^typedef map<data_entry*, map<data_entry*, data_entry*>* > MMDE;$/;"	t
MVDE	test\rdb_interface_test\test_helper.hpp	/^typedef map<data_entry*, vector<data_entry *>* > MVDE;$/;"	t
VDE	test\rdb_interface_test\test_helper.hpp	/^typedef vector<data_entry *> VDE;$/;"	t
__TEST_HELPER__	test\rdb_interface_test\test_helper.hpp	2;"	d
g	test\rdb_interface_test\test_helper.hpp	13;"	d
main	test\rdb_interface_test\test_test_helper.cpp	/^int main(int argc, int argv) {$/;"	f
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_PROGRAM_VERSION	5.8	//
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
